<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeDao的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-23T18:12:39.762Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LeDao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>idea创建Spring项目</title>
    <link href="http://example.com/313.html"/>
    <id>http://example.com/313.html</id>
    <published>2021-08-23T18:04:17.000Z</published>
    <updated>2021-08-23T18:12:39.762Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><p>查看博客：<a href="/253.html">idea创建Maven项目</a></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>命名为：applicationContext.xml，完整代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="学生实体类"><a href="#学生实体类" class="headerlink" title="学生实体类"></a>学生实体类</h4><p>命名为：Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-24 1:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><p>命名为：Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-24 1:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;student1&quot;</span>);</span><br><span class="line">        System.out.println(student.getId()+<span class="string">&quot;,&quot;</span>+student.getName()+<span class="string">&quot;,&quot;</span>+ student.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>运行测试类的main方法，结果如下：</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20021110.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/31.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="idea使用" scheme="http://example.com/categories/idea%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="idea使用" scheme="http://example.com/tags/idea%E4%BD%BF%E7%94%A8/"/>
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker私有仓库删除镜像</title>
    <link href="http://example.com/312.html"/>
    <id>http://example.com/312.html</id>
    <published>2021-08-22T20:04:05.000Z</published>
    <updated>2021-08-22T20:20:00.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>对于私有仓库的镜像，Docker是没有命令对其进行删除的</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>进入私有仓库的容器内，找到镜像文件，然后手动删除即可</p><h3 id="删除过程"><a href="#删除过程" class="headerlink" title="删除过程"></a>删除过程</h3><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>先运行对应私有仓库的容器，然后进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 私有仓库容器id sh</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>该配置文件在 /etc/docker/registry 目录下，名称为：config.yml ，在storage节点添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>完整config.yml代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">:5000</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> [<span class="string">nosniff</span>]</span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="找到镜像文件"><a href="#找到镜像文件" class="headerlink" title="找到镜像文件"></a>找到镜像文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;*要删除镜像名称*&quot;</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>进入上一步找到的镜像文件的路径，然后开始删除，该镜像文件是文件夹所以删除时追加参数-r</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r 镜像名称</span><br></pre></td></tr></table></figure><h4 id="同步配置文件"><a href="#同步配置文件" class="headerlink" title="同步配置文件"></a>同步配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure><h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><p>浏览器地址栏输入：<font color="#dd0000">http://虚拟机id:5000/v2/_catalog</font>，可以看到对应的镜像已经没了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/26.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建私有仓库</title>
    <link href="http://example.com/311.html"/>
    <id>http://example.com/311.html</id>
    <published>2021-08-22T18:33:53.000Z</published>
    <updated>2021-08-22T20:03:55.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Docker私有仓库程序本身就是一个镜像，主要是企业内部用来存放镜像的仓库，相对官方仓库以及阿里云仓库，具有更高的保密安全级别</p><h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="拉取私有仓库镜像"><a href="#拉取私有仓库镜像" class="headerlink" title="拉取私有仓库镜像"></a>拉取私有仓库镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><h4 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=myRegistry -p 5000:5000 registry</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>浏览器地址栏输入：<font color="#dd0000">http://虚拟机id:5000/v2/_catalog</font>，看到下图说明搭建成功</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20024525.jpg"></p><h4 id="修改daemon-json"><a href="#修改daemon-json" class="headerlink" title="修改daemon.json"></a>修改daemon.json</h4><p>该文件在 <font color="#dd0000">/etc/docker</font> 目录下，添加以下代码让Docker信任私有仓库</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;虚拟机id:5000&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><h4 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h4><p>标记要上传到私有仓库的镜像为私有仓库的镜像（标记只是引用，镜像id还是被标记的镜像的id）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 镜像id 虚拟机id:5000/自定义名称</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20033246.png"></p><p>推送镜像到私有仓库，推送前先启动私有仓库的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 上图划红线的镜像名称</span><br></pre></td></tr></table></figure><p>查看结果</p><p>浏览器地址栏输入：<font color="#dd0000">http://虚拟机id:5000/v2/_catalog</font>，从下图可以看到镜像上传成功</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20033447.jpg"></p><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p>先删除刚刚上传的本地镜像，然后再从私有仓库拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 虚拟机id:5000/上图的镜像名称</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/19.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>DockerFile的ONBUILD指令</title>
    <link href="http://example.com/310.html"/>
    <id>http://example.com/310.html</id>
    <published>2021-08-22T17:05:56.000Z</published>
    <updated>2021-08-22T17:44:38.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>父镜像在被子镜像继承后父镜像的ONBUILD被触发，可以把ONBUID理解为一个触发器。编写Dockerfile的时候，其他命令都是为了自身镜像服务的，只有ONBUILD是为了子镜像服务</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="构建父镜像"><a href="#构建父镜像" class="headerlink" title="构建父镜像"></a>构建父镜像</h4><p>编写父镜像DockerFile，命名为：parent_df，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">ONBUILD RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p>构建父镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f parent_df -t parent .</span><br></pre></td></tr></table></figure><h4 id="构建子镜像"><a href="#构建子镜像" class="headerlink" title="构建子镜像"></a>构建子镜像</h4><p>编写子镜像DockerFile，命名为：son_df，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM parent</span><br></pre></td></tr></table></figure><p>构建子镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> docker build -f son_df -t son .</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>当构建子镜像的时候，父镜像的ONBUILD会触发，子镜像直接安装vim，父镜像是没有安装vim的。所以使用父镜像创建的容器使用vim命令会报错，而用子镜像创建的容器可以使用vim命令</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/4.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="DockerFile" scheme="http://example.com/tags/DockerFile/"/>
    
  </entry>
  
  <entry>
    <title>DockerFile的CMD, ENTRYPOINT指令</title>
    <link href="http://example.com/309.html"/>
    <id>http://example.com/309.html</id>
    <published>2021-08-22T15:33:20.000Z</published>
    <updated>2021-08-22T17:01:35.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>CMD，ENTRYPOINT都是容器启动的时候，执行执行命令，都支持exec和shell方式</p><p>一般用法有两种：①单独一个CMD②先使用ENTRYPOINT（用于执行命令），然后结合CMD使用（用于追加参数）</p><p>有多个CMD时，只有最后一个CMD生效</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>一般开发和Docker官方都建议用 exec格式</p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>第一种用法：运行一个可执行的文件并提供参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br></pre></td></tr></table></figure><p>第二种用法：为ENTRYPOINT指定参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] </span><br></pre></td></tr></table></figure><p>第三种用法(shell格式)：是以”/bin/sh -c”的方法执行的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD <span class="built_in">command</span> param1 param2</span><br></pre></td></tr></table></figure><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p> exec 格式, 推荐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [“executable”, “param1”, “param2”]</span><br></pre></td></tr></table></figure><p> shell 格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT <span class="built_in">command</span> param1 param2</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="单个CMD"><a href="#单个CMD" class="headerlink" title="单个CMD"></a>单个CMD</h4><p>编写DockerFile，命名为df1，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;第一个CMD&quot;</span></span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f df1 -t a6678696/df:1.1 .</span><br></pre></td></tr></table></figure><p>创建和运行该镜像的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像id</span><br></pre></td></tr></table></figure><p>结果如下图</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20000826.jpg"></p><h4 id="多个CMD"><a href="#多个CMD" class="headerlink" title="多个CMD"></a>多个CMD</h4><p>编写DockerFile，命名为df2，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;第一个CMD&quot;</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;第二个CMD&quot;</span></span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> build -f df<span class="number">2</span> -t a<span class="number">6678696</span>/df:<span class="number">1</span>.<span class="number">2</span> .</span><br></pre></td></tr></table></figure><p>创建和运行该镜像的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像id</span><br></pre></td></tr></table></figure><p>结果如下图，第一个CMD命令没有生效，生效的是最后一个CMD</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20000929.jpg"></p><h4 id="先ENTRYPOINT后CMD"><a href="#先ENTRYPOINT后CMD" class="headerlink" title="先ENTRYPOINT后CMD"></a>先ENTRYPOINT后CMD</h4><p>编写DockerFile，命名为df3，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;ls&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;-l&quot;</span>]</span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f df3 -t a6678696/df:1.3 .</span><br></pre></td></tr></table></figure><p>创建和运行该镜像的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像id</span><br></pre></td></tr></table></figure><p>结果如下图，以ls -l格式查看文件</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20001442.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/106.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="DockerFile" scheme="http://example.com/tags/DockerFile/"/>
    
  </entry>
  
  <entry>
    <title>DockerFile通过VOLUME指令创建容器卷来实现容器的目录挂载</title>
    <link href="http://example.com/308.html"/>
    <id>http://example.com/308.html</id>
    <published>2021-08-21T19:46:11.000Z</published>
    <updated>2021-08-21T20:13:31.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>DockerFile创建镜像时通过VOLUME指令创建几个容器卷，然后创建这个镜像的容器时，这个容器就有了这几个容器卷目录，并与宿主机自动创建的对应目录实现了挂载</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME[<span class="string">&#x27;目录1&#x27;</span>,<span class="string">&#x27;目录2&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="编写DockerFile"><a href="#编写DockerFile" class="headerlink" title="编写DockerFile"></a>编写DockerFile</h4><p>新建一个文件，命名为：myVolumeDockerFile，没有后缀名，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;/home/v1&quot;</span>,<span class="string">&quot;/home/v2&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f myVolumeDockerFile -t a6678696/mycentos:1.2 .</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20040035.jpg"></p><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it 9123279cfb4f</span><br></pre></td></tr></table></figure><h4 id="找到挂载的目录"><a href="#找到挂载的目录" class="headerlink" title="找到挂载的目录"></a>找到挂载的目录</h4><p>①找到容器挂载的容器卷v1，v2</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20040322.jpg"></p><p>②找到宿主机挂载的容器卷</p><p>通过inspect命令获取容器的元数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p>找到Mounts节点，Source为宿主机的目录，Destination为容器的目录，两个目录是挂载的</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20040846.jpg"></p><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>docker run -v 命令创建挂载目录更好，可以自定义宿主机目录</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/90.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="DockerFile" scheme="http://example.com/tags/DockerFile/"/>
    
  </entry>
  
  <entry>
    <title>DockerFile创建镜像时报错：file not found in build context or excluded by</title>
    <link href="http://example.com/307.html"/>
    <id>http://example.com/307.html</id>
    <published>2021-08-21T17:25:02.000Z</published>
    <updated>2021-08-21T17:40:19.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>DockerFile创建镜像时使用COPY和ADD指令时，检测到源文件不存在就会报错</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>DockerFile文件和源文件放在同一目录下，并且先进入这个目录再执行创建镜像命令</p><p>例如我的DockerFile文件和源文件都在/home/dockerfile目录中（如下图所示），那么我就要进入/home/dockerfile目录，然后执行DockerFile创建镜像的命令</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20013057.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/82.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="DockerFile" scheme="http://example.com/tags/DockerFile/"/>
    
  </entry>
  
  <entry>
    <title>DockerFile构建自定义Tomcat</title>
    <link href="http://example.com/306.html"/>
    <id>http://example.com/306.html</id>
    <published>2021-08-21T16:45:16.000Z</published>
    <updated>2021-08-22T16:33:55.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编写DockerFile"><a href="#编写DockerFile" class="headerlink" title="编写DockerFile"></a>编写DockerFile</h3><p>新建一个文件，命名为：mytomcatdockerfile，没有后缀名，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER LeDao&lt;f1203007469@gmail.com&gt;</span><br><span class="line"> </span><br><span class="line">LABEL name=<span class="string">&quot;LeDao Tomcat Image&quot;</span> \</span><br><span class="line">    build-date=<span class="string">&quot;2021-08-22 00:16:53&quot;</span></span><br><span class="line">    </span><br><span class="line">COPY  copyright.txt /home/copyright.txt</span><br><span class="line">ADD server-jre-8u151-linux-x64.tar.gz /home/</span><br><span class="line">ADD apache-tomcat-8.5.37.tar.gz /home/</span><br><span class="line"> </span><br><span class="line">ENV WORKPATH /home/apache-tomcat-8.5.37/</span><br><span class="line">WORKDIR <span class="variable">$WORKPATH</span></span><br><span class="line"> </span><br><span class="line">ENV JAVA_HOME /home/jdk1.8.0_151</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /home/apache-tomcat-8.5.37/</span><br><span class="line">ENV CATALINA_BASE /home/apache-tomcat-8.5.37/</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD [<span class="string">&quot;/home/apache-tomcat-8.5.37/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>创建/home/dockerfile目录，把mytomcatdockerfile、copyright.txt、server-jre-8u151-linux-x64.tar.gz、apache-tomcat-8.5.37.tar.gz复制到该目录下，并进入该目录</p><p>四个文件的百度网盘链接：</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1ldCQGNay95IvVlOzeMQdXg">https://pan.baidu.com/s/1ldCQGNay95IvVlOzeMQdXg</a> </p><p>提取码：62h2</p></blockquote><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>命令的最后面有个英文句号.（少了句号不行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f mytomcatdockerfile -t a6678696/mytomcat:1.2 .</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20010340.jpg"></p><h3 id="查看镜像构造历史"><a href="#查看镜像构造历史" class="headerlink" title="查看镜像构造历史"></a>查看镜像构造历史</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20010515.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/74.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="DockerFile" scheme="http://example.com/tags/DockerFile/"/>
    
  </entry>
  
  <entry>
    <title>DockerFile构建自定义CentOS</title>
    <link href="http://example.com/305.html"/>
    <id>http://example.com/305.html</id>
    <published>2021-08-21T15:06:20.000Z</published>
    <updated>2021-08-21T16:48:58.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编写DockerFile"><a href="#编写DockerFile" class="headerlink" title="编写DockerFile"></a>编写DockerFile</h3><p>新建一个文件，命名为：mycentosDockerFile，没有后缀名，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER ledao&lt;f1203007469@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">LABEL name=<span class="string">&quot;LeDao CentOS Image&quot;</span> \</span><br><span class="line">build-date=<span class="string">&quot;2021-08-21&quot;</span></span><br><span class="line"></span><br><span class="line">ENV WORKPATH /home/</span><br><span class="line">WORKDIR <span class="variable">$WORKPATH</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>命令的最后面有个英文句号.（少了句号不行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /home/dockerfile/mycentosDockerFile -t a6678696/mycentos:1.1 .</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20232745.png"></p><h3 id="查看镜像构建历史"><a href="#查看镜像构建历史" class="headerlink" title="查看镜像构建历史"></a>查看镜像构建历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> 镜像id</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20233507.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/69.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="DockerFile" scheme="http://example.com/tags/DockerFile/"/>
    
  </entry>
  
  <entry>
    <title>DockerFile常用指令</title>
    <link href="http://example.com/304.html"/>
    <id>http://example.com/304.html</id>
    <published>2021-08-21T13:38:01.000Z</published>
    <updated>2021-08-21T15:01:25.071Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DockerFile简介"><a href="#DockerFile简介" class="headerlink" title="DockerFile简介"></a>DockerFile简介</h3><p>dockerfile用于快速有序且直观地完成对镜像的定制</p><p>Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>FROM指令是整个Dockerfile的入口，必须是第一条指令。其代表新制作镜像的基础镜像。基础镜像可以自己制作，也可以从开源的仓库pull，例如dockerhub或是国内阿里云的免费仓库。</p><p>Docker中存在一种特殊的情况，就是不以任何基础镜像为基准，此时可以第一句话使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br></pre></td></tr></table></figure><p>来表示以空白镜像为基础，也就是直接将可执行文件复制进镜像。例如swarm、coreos/etcd等。</p><h4 id="RUN指令"><a href="#RUN指令" class="headerlink" title="RUN指令"></a>RUN指令</h4><p>是dockerfile中最常用的指令之一。用来执行命令行上的命令。RUN的格式分为两种：</p><p>第一种：<br>shell格式：<code>RUN&lt;命令&gt;</code>，类似于直接在终端输入命令。例如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN echo <span class="string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; <span class="regexp">/usr/share</span><span class="regexp">/tomcat/welcome</span>.html</span><br></pre></td></tr></table></figure><p>第二种：<br>exec格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>。<br>RUN既然可以像在命令行那样工作，那么就也可以实现传参来运行指令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:<span class="number">14.04</span></span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y gcc libc6-dev <span class="built_in">make</span></span><br><span class="line">RUN wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</span></span><br><span class="line">RUN mkdir -p /usr/src/redis</span><br><span class="line">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=<span class="number">1</span></span><br><span class="line">RUN <span class="built_in">make</span> -C /usr/src/redis</span><br><span class="line">RUN <span class="built_in">make</span> -C /usr/src/redis install</span><br></pre></td></tr></table></figure><p>RUN一次就代表Dockerfile中的一层。而docker镜像的构建就是不断去完善每一层需要做的事情。而dockerfi对一个file中层数是有限制的，最大不超过127层。因此，RUN提供命令的串联功能，也就是允许每一层可包含多种操作，他们会按照书写顺序来依次执行。那么上面的例子可以变为：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:<span class="number">14.04</span></span><br><span class="line">RUN buildDeps=<span class="string">&#x27;gcc libc6-dev make&#x27;</span> \</span><br><span class="line">    &amp;&amp; apt-<span class="keyword">get</span> update \</span><br><span class="line">    &amp;&amp; apt-<span class="keyword">get</span> install -y $buildDeps \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</span> \</span><br><span class="line">    &amp;&amp; mkdir -p /usr/src/redis \</span><br><span class="line">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=<span class="number">1</span> \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis install \</span><br><span class="line">    &amp;&amp; rm -rf /<span class="keyword">var</span>/lib/apt/lists<span class="comment">/* \</span></span><br><span class="line"><span class="comment">    &amp;&amp; rm redis.tar.gz \</span></span><br><span class="line"><span class="comment">    &amp;&amp; rm -r /usr/src/redis \</span></span><br><span class="line"><span class="comment">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span></span><br></pre></td></tr></table></figure><p>换行用 \ ，注释用 # ，平时书写注意缩进来保证文件的可读性。上述例子中的最后一句还进行了无关文件的清理，进一步保证每一层的最优和最小</p><p>注意事项：<br>镜像的初衷是进行功能的模块化，也是尽可能让每个容器干最少的事情，那么我们在书写dockerfile的时候要注意这个问题，每一层的东西确保是必须的，否则就不要进行安装或是拷贝。</p><h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><p>指定作者<br>句法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER <span class="tag">&lt;<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>该指令是为镜像添加标签<br>句法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> ...</span><br></pre></td></tr></table></figure><p>一个Dockerfile种可以有多个LABEL，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LABEL multi.label1=<span class="string">&quot;value1&quot;</span> \</span><br><span class="line">multi.label2=<span class="string">&quot;value2&quot;</span> \</span><br><span class="line">other=<span class="string">&quot;value3&quot;</span></span><br></pre></td></tr></table></figure><p>说明：LABEL会继承基础镜像种的LABEL，如遇到key相同，则值覆盖</p><h4 id="COPY指令"><a href="#COPY指令" class="headerlink" title="COPY指令"></a>COPY指令</h4><p>该指令用于将宿主机文件拷贝至镜像内的指定路径<br>格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;源路径&gt;... &lt;目标路径&gt;</span><br><span class="line">或</span><br><span class="line">COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</span><br></pre></td></tr></table></figure><p>也就是说，原路径可以有多个，而目标路径唯一<br>注意事项：</p><p>1、可以使用符合GO规范的通配符，例如：<code>COPY hom* /mydir/</code><br>2、目的路径可以是镜像内的绝对路径，也可以是相对于当前工作目录的相对路径<br>3、COPY过来的文件权限与原始权限相同。如需更改，请用传统Liunx的chmod命令进行修改即可</p><h4 id="ADD高级复制"><a href="#ADD高级复制" class="headerlink" title="ADD高级复制"></a>ADD高级复制</h4><p>ADD的本质作用类似于COPY，但是其更复杂：</p><p>1、ADD过来的压缩包可以自动在目标路径下进行解压<br>2、原始路径可以是一个连接，ADD过程会尝试从该链接下载所需的文件到目的路径<br>3、一般情况下，建议使用COPY而不是ADD，因为COPY过来的文件可以配合使用RUN来进行解压或是其他操作，搭配使用更灵活，且单条语句所负担的功能唯一</p><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>该指令用于指定Dockerfile中该指令下面的操作所在的工作目录<br>类似于 cd 命令</p><h4 id="CMD-服务启动指令"><a href="#CMD-服务启动指令" class="headerlink" title="CMD 服务启动指令"></a>CMD 服务启动指令</h4><p>Docker不是虚拟机而是一个进程，作为进程，当然可以制定启动镜像时的具体参数。说白了就是制定一些你想自动启动的服务<br>格式：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell 格式：<span class="built_in">CMD</span> &lt;命令&gt;</span><br><span class="line">exec 格式：<span class="built_in">CMD</span> [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>...]</span><br><span class="line">参数列表格式：<span class="built_in">CMD</span> [<span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>...]。在指定了 ENTRYPOINT 指令后，用 <span class="built_in">CMD</span> 指定具体的参数。</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>1、CMD中的启动参数可以被更新覆盖。例如：<br>Dockerfile中若是用CMD指定启动镜像时执行/bin/bash，那么在启动镜像时输入<code>docker run -it ubuntu ./test.sh</code> 则会用./test.sh命令来覆盖/bin/bash命令<br>2、推荐使用exec格式的CMD书写。这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 “，而不要使用单引号<br>3、如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：<code>CMD echo /java</code><br>在实际执行中，会将其变更为：<br><code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo /java&quot; ]</code></p><h4 id="ENV设置环境变量"><a href="#ENV设置环境变量" class="headerlink" title="ENV设置环境变量"></a>ENV设置环境变量</h4><p>说是环境变量还不说是一个全局变量。在前面定义，后面可以通过 $ 取值进行使用<br>格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV <span class="tag">&lt;<span class="name">key</span>&gt;</span> <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">ENV <span class="tag">&lt;<span class="name">key1</span>&gt;</span>=<span class="tag">&lt;<span class="name">value1</span>&gt;</span> <span class="tag">&lt;<span class="name">key2</span>&gt;</span>=<span class="tag">&lt;<span class="name">value2</span>&gt;</span>...</span><br></pre></td></tr></table></figure><p>例如可以指定一些包的版本号，这样更新镜像很方便，或是保存一些密码（该功能慎用，自己玩还是可以的）</p><h4 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h4><p>语法形式: <code>ARG &lt;name&gt;[=&lt;default value&gt;]</code><br>ARG和ENV效果类似，都是用来设置观景变量的。唯一 不同的是dockerfile中的ARG编译好后是不会出现在打开的容器内的</p><p>ARG在dockerfile中创建一个全局参数，参数可以给定一个默认值，在编译时可以传参对其进行覆盖。如果ARG指令有默认值并且在构建期间没有接收到参数、则使用默认值。一个dockerfile中可以包含多个ARG参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --build-arg <span class="tag">&lt;<span class="name">varname</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用ARG或ENV指令来指定RUN指令可用的变量，如果ARG和ENV同时指定了一个相同名称的变量、则ENV设置的变量会覆盖ARG设置的变量。如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 FROM ubuntu</span><br><span class="line">2 ARG CONT_IMG_VER</span><br><span class="line">3 ENV CONT_IMG_VER v1.0.0</span><br><span class="line">4 RUN <span class="built_in">echo</span> <span class="variable">$CONT_IMG_VER</span></span><br></pre></td></tr></table></figure><p>使用   <code>docker build --build-arg CONT_IMG_VER=v2.0.1 .</code> 最终输出v1.0.0 </p><p>一个ARG指令的有效范围在其定义的构建阶段内、如果要在多个阶段中都有效、则必须在每个阶段都使用ARG指令；<strong>与ARG不同  ENV设置参数的有效期为整个构建期内</strong></p><h4 id="VOLUME-挂在共享卷"><a href="#VOLUME-挂在共享卷" class="headerlink" title="VOLUME 挂在共享卷"></a>VOLUME 挂在共享卷</h4><p>格式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure><p>Docker的使用原则除了每个容器干尽量少的事情外，还尽可能要求容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，也就是将本地磁盘的某一个目录挂载至容器内。同时这样的共享目录可以被多个不同的容器所使用</p><p>除了可以在dockerfile中指定这一参数外，在运行启动容器时也可以附带这一参数来指定共享卷：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name container-test -h CONTAINER -v /<span class="keyword">data</span> debian /bin/bash</span><br></pre></td></tr></table></figure><p>上述命令也可以覆盖dockerfile中的目录设定。</p><h4 id="USER指定用户"><a href="#USER指定用户" class="headerlink" title="USER指定用户"></a>USER指定用户</h4><p>在书写dockerfile时，某些层的操作若想切换用户名，可以使用该参数指定某些层的用户，并且是存在的用户名。<br> 格式：<code>USER &lt;用户名&gt;</code></p><p>如果以 <code>root</code> 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 <code>su</code> 或者 <code>sudo</code>，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 <code>gosu</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span></span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line"><span class="comment"># 下载 gosu</span></span><br><span class="line">RUN wget -O /usr/<span class="built_in">local</span>/bin/gosu <span class="string">&quot;https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64&quot;</span> \</span><br><span class="line">    &amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/gosu \</span><br><span class="line">    &amp;&amp; gosu nobody <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置 CMD，并以另外的用户执行</span></span><br><span class="line">CMD [ <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;gosu&quot;</span>, <span class="string">&quot;redis&quot;</span>, <span class="string">&quot;redis-server&quot;</span> ]</span><br></pre></td></tr></table></figure><h4 id="EXPOSE暴漏端口"><a href="#EXPOSE暴漏端口" class="headerlink" title="EXPOSE暴漏端口"></a>EXPOSE暴漏端口</h4><p>句法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure><p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口</p><p>要将 EXPOSE 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.jianshu.com/p/2a90fc6ee383">https://www.jianshu.com/p/2a90fc6ee383</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/51.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="DockerFile" scheme="http://example.com/tags/DockerFile/"/>
    
  </entry>
  
  <entry>
    <title>Docker备份和恢复镜像</title>
    <link href="http://example.com/303.html"/>
    <id>http://example.com/303.html</id>
    <published>2021-08-21T13:01:27.000Z</published>
    <updated>2021-08-21T13:16:37.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="备份镜像"><a href="#备份镜像" class="headerlink" title="备份镜像"></a>备份镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o 备份镜像的名称  源镜像名称:tag版本</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20211044.jpg"></p><h3 id="恢复镜像"><a href="#恢复镜像" class="headerlink" title="恢复镜像"></a>恢复镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i 镜像文件</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20211126.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/47.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装和配置MySQL容器</title>
    <link href="http://example.com/302.html"/>
    <id>http://example.com/302.html</id>
    <published>2021-08-21T02:38:08.000Z</published>
    <updated>2021-08-21T04:12:55.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建MySQL容器"><a href="#创建MySQL容器" class="headerlink" title="创建MySQL容器"></a>创建MySQL容器</h3><p>创建的这个容器只是用来获取文件路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 自定义名称 -di -p 3305:3306 -e MYSQL_ROOT_PASSWORD=123456 MySQL镜像id</span><br></pre></td></tr></table></figure><h3 id="获取文件路径"><a href="#获取文件路径" class="headerlink" title="获取文件路径"></a>获取文件路径</h3><p>进入容器的文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器id /bin/bash</span><br></pre></td></tr></table></figure><p>获取conf.d、log、mysql的文件路径，分别如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/mysql/conf.d</span><br><span class="line">/var/<span class="built_in">log</span></span><br><span class="line">/var/lib/mysql</span><br></pre></td></tr></table></figure><h3 id="复制文件到宿主机"><a href="#复制文件到宿主机" class="headerlink" title="复制文件到宿主机"></a>复制文件到宿主机</h3><p>在宿主机的 home 目录下新建 mysql 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/mysql</span><br></pre></td></tr></table></figure><p>复制容器里的 /etc/mysql/conf.d、/var/log、/var/lib/mysql到宿主机/home/mysql</p><p>复制/etc/mysql/conf.d</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:/etc/mysql/conf.d /home/mysql/</span><br></pre></td></tr></table></figure><p>复制/var/log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:/var/<span class="built_in">log</span> /home/mysql/</span><br></pre></td></tr></table></figure><p>复制/var/lib/mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:/var/lib/mysql /home/mysql/</span><br></pre></td></tr></table></figure><h3 id="创建新的MySQL容器"><a href="#创建新的MySQL容器" class="headerlink" title="创建新的MySQL容器"></a>创建新的MySQL容器</h3><p>创建时挂载 /etc/mysql/conf.d、/var/log、/var/lib/mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name 自定义名称 -p 3303:3306 -v /etc/mysql/conf.d:/home/mysql/conf -v /var/<span class="built_in">log</span>:/home/mysql/<span class="built_in">log</span> -v /var/lib/mysql:/home/mysql/mysql -e MYSQL_ROOT_PASSWORD=123456 MySQL镜像id</span><br></pre></td></tr></table></figure><p>重启新的MySQL容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器id</span><br></pre></td></tr></table></figure><h3 id="SQLyog连接数据库"><a href="#SQLyog连接数据库" class="headerlink" title="SQLyog连接数据库"></a>SQLyog连接数据库</h3><p>连接数据库，主机地址填虚拟机IP，端口和密码填创建容器时设置的，用户名是root</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20112355.png"></p><p>执行sql脚本导入数据</p><p>然后就可以操作mysql容器的数据库了，Java项目连接数据库的基本信息也是填上面的</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/35.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装和配置Tomcat容器并部署Java项目</title>
    <link href="http://example.com/301.html"/>
    <id>http://example.com/301.html</id>
    <published>2021-08-21T01:31:21.000Z</published>
    <updated>2021-08-21T03:11:52.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建Tomcat容器"><a href="#创建Tomcat容器" class="headerlink" title="创建Tomcat容器"></a>创建Tomcat容器</h3><p>创建的这个容器只是用来获取文件路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 自定义名称 -di -p 8080:8080 Tomcat镜像id</span><br></pre></td></tr></table></figure><h3 id="获取文件路径"><a href="#获取文件路径" class="headerlink" title="获取文件路径"></a>获取文件路径</h3><p>进入容器的文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it Tomcat容器id /bin/bash</span><br></pre></td></tr></table></figure><p>获取三个文件夹<font color="#dd0000">conf、webapps、logs</font>的文件路径</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20095054.jpg"></p><h3 id="复制文件到宿主机"><a href="#复制文件到宿主机" class="headerlink" title="复制文件到宿主机"></a>复制文件到宿主机</h3><p>在宿主机的 home 目录下新建 tomcat 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/tomcat</span><br></pre></td></tr></table></figure><p>复制容器里的 <font color="#dd0000">/usr/local/tomcat/conf、/usr/local/tomcat/webapps</font> 到宿主机/home/tomcat/</p><p>复制 /usr/local/tomcat/conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 14ae81edec7f:/usr/<span class="built_in">local</span>/tomcat/conf /home/tomcat/</span><br></pre></td></tr></table></figure><p>复制 /home/tomcat/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 14ae81edec7f:/usr/<span class="built_in">local</span>/tomcat/webapps /home/tomcat/</span><br></pre></td></tr></table></figure><h3 id="创建新的Tomcat容器"><a href="#创建新的Tomcat容器" class="headerlink" title="创建新的Tomcat容器"></a>创建新的Tomcat容器</h3><p>这个容器是用来部署Java项目的，创建时挂载 <font color="#dd0000">/home/tomcat/conf、/home/tomcat/webapps、home/tomcat/logs</font></p><p>创建容器并挂载目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 自定义名称 -di -p 80:8080 -v /home/tomcat/conf:/usr/<span class="built_in">local</span>/tomcat/conf -v /home/tomcat/webapps:/usr/<span class="built_in">local</span>/tomcat/webapps -v /home/tomcat/logs:/usr/<span class="built_in">local</span>/tomcat/logs Tomcat镜像id</span><br></pre></td></tr></table></figure><h3 id="上传Java项目"><a href="#上传Java项目" class="headerlink" title="上传Java项目"></a>上传Java项目</h3><p>上传到 <font color="#dd0000">/home/tomcat/webapps</font> 目录下，我上传的文件名为：WebTest.war，Docker 的 Tomcat 是热部署的所以会自动部署Java项目，过了一会儿就可以访问这个项目了，访问路径为：<font color="#dd0000">http://虚拟机的ip/WebTest</font></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改宿主机的 <font color="#dd0000">/home/tomcat/conf</font> 目录下的 <font color="#dd0000">server.xml</font>，添加以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/usr/local/tomcat/webapps/WebTest&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>添加位置如下图：</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20102700.png"></p><p>重启新创建的Tomcat容器，即部署Java项目的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器id</span><br></pre></td></tr></table></figure><p>然后访问项目可以不加项目名了，访问路径为：<font color="#dd0000">http://虚拟机的ip</font></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/26.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker修改已创建容器的挂载目录</title>
    <link href="http://example.com/300.html"/>
    <id>http://example.com/300.html</id>
    <published>2021-08-20T18:31:21.000Z</published>
    <updated>2021-08-20T19:14:48.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一般来说，都是创建容器时进行目录挂载，对于已经创建好的容器如果忘了挂载目录但是又想挂载目录</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>①提交这个容器为新的镜像，然后创建这个新镜像的容器同时进行目录挂载（此方式较简单）②修改这个容器的配置文件</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="提交新镜像再创建容器"><a href="#提交新镜像再创建容器" class="headerlink" title="提交新镜像再创建容器"></a>提交新镜像再创建容器</h4><p>查看下面两篇博客即可实现修改已创建容器的挂载目录</p><p>① <a href="/296.html">Docker提交运行时容器为镜像</a> ，将要挂载目录的已创建容器提交为本地新镜像</p><p>② <a href="/299.html">Docker创建容器时目录挂载 </a>，创建容器时使用新镜像的镜像id顺便挂载目录</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>停止Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>配置文件路径</p><p>/var/lib/docker/containers/[容器id]</p><p>修改配置文件hostconfig.json，在”Binds”节点中增加挂载目录的关系，前面的<font color="#dd0000">/home/hData/</font>是宿主机目录，后面的<font color="#dd0000">/cData</font>是容器目录，如果是多个用英文逗号隔开</p><p>单个目录例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Binds&quot;</span>:[<span class="string">&quot;/home/hData/:/cData&quot;</span>]</span><br></pre></td></tr></table></figure><p>多个目录例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Binds&quot;</span>:[<span class="string">&quot;/home/hData:/cData&quot;</span>,<span class="string">&quot;/home/hData2:/cData2&quot;</span>]</span><br></pre></td></tr></table></figure><p>修改配置文件config.v2.json，在”MountPoints” 节点中增加挂载目录</p><p>单个目录例子：（第一段代码是原始的，第二段代码是格式化过的，格式化后更好修改）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;MountPoints&quot;</span>:&#123;<span class="attr">&quot;/cData&quot;</span>:&#123;<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData&quot;</span>,<span class="attr">&quot;Destination&quot;</span>:<span class="string">&quot;/cData&quot;</span>,<span class="attr">&quot;RW&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;Name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Driver&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Propagation&quot;</span>:<span class="string">&quot;rprivate&quot;</span>,<span class="attr">&quot;Spec&quot;</span>:&#123;<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData/&quot;</span>,<span class="attr">&quot;Target&quot;</span>:<span class="string">&quot;/cData&quot;</span>&#125;,<span class="attr">&quot;SkipMountpointCreation&quot;</span>:<span class="literal">false</span>&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;MountPoints&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;/cData&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/cData&quot;</span>,</span><br><span class="line"><span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Spec&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData/&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Target&quot;</span>: <span class="string">&quot;/cData&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;SkipMountpointCreation&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个目录例子：（第一段代码是原始的，第二段代码是格式化过的，格式化后更好修改）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;MountPoints&quot;</span>:&#123;<span class="attr">&quot;/cData&quot;</span>:&#123;<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData&quot;</span>,<span class="attr">&quot;Destination&quot;</span>:<span class="string">&quot;/cData&quot;</span>,<span class="attr">&quot;RW&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;Name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Driver&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Propagation&quot;</span>:<span class="string">&quot;rprivate&quot;</span>,<span class="attr">&quot;Spec&quot;</span>:&#123;<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData&quot;</span>,<span class="attr">&quot;Target&quot;</span>:<span class="string">&quot;/cData&quot;</span>&#125;,<span class="attr">&quot;SkipMountpointCreation&quot;</span>:<span class="literal">false</span>&#125;,<span class="attr">&quot;/cData2&quot;</span>:&#123;<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData2&quot;</span>,<span class="attr">&quot;Destination&quot;</span>:<span class="string">&quot;/cData2&quot;</span>,<span class="attr">&quot;RW&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;Name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Driver&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Propagation&quot;</span>:<span class="string">&quot;rprivate&quot;</span>,<span class="attr">&quot;Spec&quot;</span>:&#123;<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData2&quot;</span>,<span class="attr">&quot;Target&quot;</span>:<span class="string">&quot;/cData2&quot;</span>&#125;,<span class="attr">&quot;SkipMountpointCreation&quot;</span>:<span class="literal">false</span>&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;MountPoints&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;/cData&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/cData&quot;</span>,</span><br><span class="line"><span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Spec&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Target&quot;</span>: <span class="string">&quot;/cData&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;SkipMountpointCreation&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;/cData2&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData2&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/cData2&quot;</span>,</span><br><span class="line"><span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Spec&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData2&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Target&quot;</span>: <span class="string">&quot;/cData2&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;SkipMountpointCreation&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>启动刚刚修改的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/12.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker创建容器时目录挂载</title>
    <link href="http://example.com/299.html"/>
    <id>http://example.com/299.html</id>
    <published>2021-08-20T17:21:08.000Z</published>
    <updated>2021-08-20T19:18:56.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以实现宿主机和容器目录的双向自动同步</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>Docker可以使用cp命令来实现数据传递，这种方式非常麻烦，通过容器目录挂载，能够轻松实现代码上传，配置修改，日志同步等需求</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="单个目录"><a href="#单个目录" class="headerlink" title="单个目录"></a>单个目录</h4><p>拥有全部权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v  /宿主机目录:/容器目录 镜像名</span><br></pre></td></tr></table></figure><p>挂载目录只读</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v  /宿主机目录:/容器目录:ro 镜像名</span><br></pre></td></tr></table></figure><h4 id="多个目录"><a href="#多个目录" class="headerlink" title="多个目录"></a>多个目录</h4><p>拥有全部权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2  镜像名</span><br></pre></td></tr></table></figure><p>挂载目录只读</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /宿主机目录:/容器目录:ro -v /宿主机目录2:/容器目录2:ro  镜像名</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>同步的是多级目录，可能会出现权限不足的提示，这是因为Centos7中的安全模块selinux把权限禁掉了，我们需要在命令的后面添加<mark class="hl-label red">--privileged=true</mark> 来解决挂载的目录没有权限的问题</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>一般来说，都是创建容器时进行目录挂载，对于已经创建好的容器如果忘了挂载目录但是又想挂载目录，方法有两种：①提交这个容器为新的镜像，然后创建这个新镜像的容器同时进行目录挂载（此方式较简单）②修改这个容器的配置文件</p><p>具体步骤查看博客：<a href="/300.html">Docker修改已创建容器的挂载目录</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/5.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker推送镜像到阿里云</title>
    <link href="http://example.com/298.html"/>
    <id>http://example.com/298.html</id>
    <published>2021-08-20T15:26:34.000Z</published>
    <updated>2021-08-20T16:21:03.270Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进入阿里云镜像控制台"><a href="#进入阿里云镜像控制台" class="headerlink" title="进入阿里云镜像控制台"></a>进入阿里云镜像控制台</h3><p>控制台地址：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a> ，登录</p><h3 id="创建命令空间"><a href="#创建命令空间" class="headerlink" title="创建命令空间"></a>创建命令空间</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232121.jpg"></p><h3 id="创建镜像仓库"><a href="#创建镜像仓库" class="headerlink" title="创建镜像仓库"></a>创建镜像仓库</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232151.jpg"></p><h4 id="填写仓库信息"><a href="#填写仓库信息" class="headerlink" title="填写仓库信息"></a>填写仓库信息</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232215.jpg"></p><h4 id="选择本地仓库"><a href="#选择本地仓库" class="headerlink" title="选择本地仓库"></a>选择本地仓库</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232235.jpg"></p><h4 id="阿里云提供的命令"><a href="#阿里云提供的命令" class="headerlink" title="阿里云提供的命令"></a>阿里云提供的命令</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232417.jpg"></p><h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=用户名 registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure><p>创建一个阿里云专用镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 要推送的镜像id registry.cn-hangzhou.aliyuncs.com/ledao/tomcat:[镜像版本号]</span><br></pre></td></tr></table></figure><p>下图中版本号为1.1的就是刚刚创建的</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20001143.jpg"></p><p>推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/ledao/tomcat:[镜像版本号]</span><br></pre></td></tr></table></figure><p>查看阿里云的镜像仓库中成功推送的镜像</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20001002.jpg"></p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/ledao/tomcat:[阿里云的镜像版本号]</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20001943.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/103.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker推送镜像到hub服务器</title>
    <link href="http://example.com/297.html"/>
    <id>http://example.com/297.html</id>
    <published>2021-08-20T12:56:12.000Z</published>
    <updated>2021-08-20T16:26:29.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="注册Docker账号"><a href="#注册Docker账号" class="headerlink" title="注册Docker账号"></a>注册Docker账号</h3><p>在Docker的hub官网注册，官网地址为：<a href="https://hub.docker.com/">https://hub.docker.com/</a> ，注册后记住用户名和密码</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>输入登录命令，在输入自己的用户名和密码即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>推送命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push Docker用户名/新镜像名称:版本号</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20211111.jpg"></p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>在Docker的hub官网登录后即可看到刚刚推送的镜像</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20212908.jpg"></p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>查看镜像时有个拉取命令,如下图所示</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20002354.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/99.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker提交运行时容器为镜像</title>
    <link href="http://example.com/296.html"/>
    <id>http://example.com/296.html</id>
    <published>2021-08-20T07:06:21.000Z</published>
    <updated>2021-08-20T13:08:36.971Z</updated>
    
    <content type="html"><![CDATA[<p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a=<span class="string">&#x27;作者&#x27;</span> -m=<span class="string">&#x27;备注&#x27;</span> 运行时容器ID Docker用户名/新镜像名称:版本号</span><br></pre></td></tr></table></figure><p>下图中划红线的镜像就是刚刚提交的镜像</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20150855.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/83.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker映射端口6666时无法访问</title>
    <link href="http://example.com/295.html"/>
    <id>http://example.com/295.html</id>
    <published>2021-08-20T04:36:03.000Z</published>
    <updated>2021-08-20T04:57:34.200Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在创建Docker的Tomcat容器时使用了端口映射，我映射的端口号是6666，外部使用谷歌浏览器却无法访问</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>6666端口使用谷歌浏览器、火狐浏览器、新版Edge浏览器是无法访问的，被我们遗忘的IE浏览器却可以访问！！</p><p>上述浏览器我都亲自验证过，其它浏览器不清楚情况</p><p>更多无法访问的端口号如下：</p><table><thead><tr><th align="left">端口</th><th align="left">原因</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">tcpmux</td></tr><tr><td align="left">7</td><td align="left">echo</td></tr><tr><td align="left">9</td><td align="left">discard</td></tr><tr><td align="left">11</td><td align="left">systat</td></tr><tr><td align="left">13</td><td align="left">daytime</td></tr><tr><td align="left">15</td><td align="left">netstat</td></tr><tr><td align="left">17</td><td align="left">qotd</td></tr><tr><td align="left">19</td><td align="left">chargen</td></tr><tr><td align="left">20</td><td align="left">ftp data</td></tr><tr><td align="left">21</td><td align="left">ftp access</td></tr><tr><td align="left">22</td><td align="left">ssh</td></tr><tr><td align="left">23</td><td align="left">telnet</td></tr><tr><td align="left">25</td><td align="left">smtp</td></tr><tr><td align="left">37</td><td align="left">time</td></tr><tr><td align="left">42</td><td align="left">name</td></tr><tr><td align="left">43</td><td align="left">nicname</td></tr><tr><td align="left">53</td><td align="left">domain</td></tr><tr><td align="left">77</td><td align="left">priv-rjs</td></tr><tr><td align="left">79</td><td align="left">finger</td></tr><tr><td align="left">87</td><td align="left">ttylink</td></tr><tr><td align="left">95</td><td align="left">supdup</td></tr><tr><td align="left">101</td><td align="left">hostriame</td></tr><tr><td align="left">102</td><td align="left">iso-tsap</td></tr><tr><td align="left">103</td><td align="left">gppitnp</td></tr><tr><td align="left">104</td><td align="left">acr-nema</td></tr><tr><td align="left">109</td><td align="left">pop2</td></tr><tr><td align="left">110</td><td align="left">pop3</td></tr><tr><td align="left">111</td><td align="left">sunrpc</td></tr><tr><td align="left">113</td><td align="left">auth</td></tr><tr><td align="left">115</td><td align="left">sftp</td></tr><tr><td align="left">117</td><td align="left">uucp-path</td></tr><tr><td align="left">119</td><td align="left">nntp</td></tr><tr><td align="left">123</td><td align="left">NTP</td></tr><tr><td align="left">135</td><td align="left">loc-srv /epmap</td></tr><tr><td align="left">139</td><td align="left">netbios</td></tr><tr><td align="left">143</td><td align="left">imap2</td></tr><tr><td align="left">179</td><td align="left">BGP</td></tr><tr><td align="left">389</td><td align="left">ldap</td></tr><tr><td align="left">465</td><td align="left">smtp+ssl</td></tr><tr><td align="left">512</td><td align="left">print / exec</td></tr><tr><td align="left">513</td><td align="left">login</td></tr><tr><td align="left">514</td><td align="left">shell</td></tr><tr><td align="left">515</td><td align="left">printer</td></tr><tr><td align="left">526</td><td align="left">tempo</td></tr><tr><td align="left">530</td><td align="left">courier</td></tr><tr><td align="left">531</td><td align="left">chat</td></tr><tr><td align="left">532</td><td align="left">netnews</td></tr><tr><td align="left">540</td><td align="left">uucp</td></tr><tr><td align="left">556</td><td align="left">remotefs</td></tr><tr><td align="left">563</td><td align="left">nntp+ssl</td></tr><tr><td align="left">587</td><td align="left">stmp?</td></tr><tr><td align="left">601</td><td align="left">??</td></tr><tr><td align="left">636</td><td align="left">ldap+ssl</td></tr><tr><td align="left">993</td><td align="left">ldap+ssl</td></tr><tr><td align="left">995</td><td align="left">pop3+ssl</td></tr><tr><td align="left">2049</td><td align="left">nfs</td></tr><tr><td align="left">3659</td><td align="left">apple-sasl / PasswordServer</td></tr><tr><td align="left">4045</td><td align="left">lockd</td></tr><tr><td align="left">6000</td><td align="left">X11</td></tr><tr><td align="left">6665</td><td align="left">Alternate IRC [Apple addition]</td></tr><tr><td align="left">6666</td><td align="left">Alternate IRC [Apple addition]</td></tr><tr><td align="left">6667</td><td align="left">Standard IRC [Apple addition]</td></tr><tr><td align="left">6668</td><td align="left">Alternate IRC [Apple addition]</td></tr><tr><td align="left">6669</td><td align="left">Alternate IRC [Apple addition]</td></tr></tbody></table><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改端口号，避免使用上表的端口号</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/77.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker启动Tomcat成功后外部却无法访问</title>
    <link href="http://example.com/294.html"/>
    <id>http://example.com/294.html</id>
    <published>2021-08-19T20:48:29.000Z</published>
    <updated>2021-08-19T21:00:02.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在创建Docker的Tomcat容器时使用了端口映射，外部无法通过 <font color="#dd0000">http://虚拟机IP:映射的端口号</font> 来访问</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Docker某些Tomcat版本的webapps是空的，直接访问是访问不到的</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>可以使用的Tomcat版本有：8.0.52、8.5.28</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/61.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
</feed>
