<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeDao&#39;s Blog</title>
  
  
  <link href="https://blog.zoutl.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.zoutl.cn/"/>
  <updated>2023-01-06T18:15:33.811Z</updated>
  <id>https://blog.zoutl.cn/</id>
  
  <author>
    <name>LeDao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>封装Axios请求</title>
    <link href="https://blog.zoutl.cn/556.html"/>
    <id>https://blog.zoutl.cn/556.html</id>
    <published>2023-01-06T17:07:11.000Z</published>
    <updated>2023-01-06T18:15:33.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>封装了Axios请求，可以添加请求拦截器以便在发送请求之前做些什么（例如统一加JWT请求头给后端验证），还可以添加响应拦截器以便对响应数据做点什么</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="安装Axios"><a href="#安装Axios" class="headerlink" title="安装Axios"></a>安装Axios</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h4 id="封装Axios请求"><a href="#封装Axios请求" class="headerlink" title="封装Axios请求"></a>封装Axios请求</h4><p>封装了三个方法：get请求、post请求、文件上传</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入axios</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求的IP地址和端口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&quot;http://localhost:8080&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建axios实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;AxiosInstance&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> httpService = axios.create(&#123;</span><br><span class="line">    <span class="comment">//url前缀-&#x27;http:xxx.xxx&#x27;</span></span><br><span class="line">    <span class="comment">//baseURL: process.env.BASE_API, // 需自定义</span></span><br><span class="line">    <span class="attr">baseURL</span>: baseUrl,</span><br><span class="line">    <span class="comment">//请求超时时间</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">3000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">httpService.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在发送请求之前做些什么</span></span><br><span class="line">    <span class="comment">//设置请求头token</span></span><br><span class="line">    config.headers.token = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加响应拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">httpService.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*网络请求部分*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>params 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Promise&lt;unknown&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        httpService(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">            <span class="attr">params</span>: params</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>params 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Promise&lt;unknown&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        httpService(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: params</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>params 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Promise&lt;unknown&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fileUpload</span>(<span class="params">url, params = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        httpService(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: params,</span><br><span class="line">            <span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span>&#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> baseUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    get,</span><br><span class="line">    post,</span><br><span class="line">    fileUpload,</span><br><span class="line">    getServerUrl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用时需要使用到<code>async</code>和<code>await</code>关键字，这两个关键字的用法可以参考博客：<a href="https://www.cnblogs.com/gaozejie/p/15303316.html">JavaScript中的async/await详解 - gaozejie - 博客园 (cnblogs.com)</a></p><p>其它方法调用时要在方法前加上<code>await</code>关键字，例如：<code>await handleLogin();</code>，虽然可以不加<code>await</code>关键字，但是会有提示让我们加上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面一行使用到async关键字</span></span><br><span class="line"><span class="keyword">const</span> handleLogin = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (form.value.userName === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    ElMessage.error(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (form.value.password === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    ElMessage.error(<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> params = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">  params.append(<span class="string">&quot;userName&quot;</span>, form.value.userName);</span><br><span class="line">  params.append(<span class="string">&quot;password&quot;</span>, form.value.password);</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;/administrator/login&#x27;</span>;</span><br><span class="line">  <span class="comment">//使用try...catch或.catch对async函数进行异常处理</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//下面一行使用到await关键字</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> axiosUtil.get(url, params);</span><br><span class="line">    <span class="keyword">if</span> (result.data.code === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&quot;userName&quot;</span>, result.data.userName);</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&quot;administratorId&quot;</span>, result.data.id);</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&quot;token&quot;</span>, result.data.token);</span><br><span class="line">      router.replace(<span class="string">&#x27;/main&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.data.code === <span class="number">500</span>) &#123;</span><br><span class="line">      ElMessage.error(result.data.msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error:&quot;</span> + err);</span><br><span class="line">    ElMessage.error(<span class="string">&quot;服务器出错，请联系管理员！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;封装了Axios请求，可以添加请求拦截器以便在发送请求之前做些什么（例如统一加JWT请求头给后端验证），还可以添加响应拦截器以便对响应数据做</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="Axios" scheme="https://blog.zoutl.cn/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>Java生成和验证JWT</title>
    <link href="https://blog.zoutl.cn/555.html"/>
    <id>https://blog.zoutl.cn/555.html</id>
    <published>2023-01-04T13:16:29.000Z</published>
    <updated>2023-01-04T14:32:08.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h3><p>关于JWT的详细介绍可以查看博客：<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><p>或者直接去官网了解（官网可直接解码JWT）：<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>该依赖的接口文档网址为：<a href="https://javadoc.io/doc/com.auth0/java-jwt/latest/index.html">JWT - java-jwt 4.2.1 javadoc</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生成和验证"><a href="#生成和验证" class="headerlink" title="生成和验证"></a>生成和验证</h4><p>我把JWT的生成和验证封装成了一个工具类，以方便调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-01-03 23:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT Token有效时间，1小时 (单位是毫秒,1000毫秒=1秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIME = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密使用到的KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_SECRET = <span class="string">&quot;ledao&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                <span class="comment">//编号</span></span><br><span class="line">                .withJWTId(UUID.randomUUID().toString())</span><br><span class="line">                <span class="comment">//签发人</span></span><br><span class="line">                .withIssuer(<span class="string">&quot;乐道&quot;</span>)</span><br><span class="line">                <span class="comment">//签发时间</span></span><br><span class="line">                .withIssuedAt(<span class="keyword">new</span> Date(System.currentTimeMillis()))</span><br><span class="line">                <span class="comment">//过期时间</span></span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> Date(System.currentTimeMillis() + TIME))</span><br><span class="line">                <span class="comment">//受众</span></span><br><span class="line">                .withAudience(userName)</span><br><span class="line">                <span class="comment">//主题</span></span><br><span class="line">                .withSubject(<span class="string">&quot;mall-admin&quot;</span>)</span><br><span class="line">                <span class="comment">//创建一个新的JWT并使用给定的算法进行签名</span></span><br><span class="line">                .sign(Algorithm.HMAC512(TOKEN_SECRET));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//验证</span></span><br><span class="line">            JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC512(TOKEN_SECRET)).build();</span><br><span class="line">            jwtVerifier.verify(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;token验证失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;token已过期&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//生成token</span></span><br><span class="line">        String token = createToken(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">//打印token</span></span><br><span class="line">        System.out.println(token);</span><br><span class="line">        <span class="comment">//验证token并返回结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;验证结果: &quot;</span> + checkToken(token));</span><br><span class="line">        <span class="comment">//打印编号</span></span><br><span class="line">        System.out.println(<span class="string">&quot;编号: &quot;</span> + JWT.decode(token).getId());</span><br><span class="line">        <span class="comment">//打印签发时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;签发时间: &quot;</span> + JWT.decode(token).getIssuedAt());</span><br><span class="line">        <span class="comment">//打印过期时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;过期时间: &quot;</span> + JWT.decode(token).getExpiresAt());</span><br><span class="line">        <span class="comment">//打印签发人</span></span><br><span class="line">        System.out.println(<span class="string">&quot;签发人: &quot;</span> + JWT.decode(token).getIssuer());</span><br><span class="line">        <span class="comment">//打印所有受众,返回一个List&lt;String&gt;,受众的顺序和创建JWT时的顺序有关</span></span><br><span class="line">        System.out.println(<span class="string">&quot;所有受众: &quot;</span> + JWT.decode(token).getAudience());</span><br><span class="line">        <span class="comment">//打印受众1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;受众1: &quot;</span> + JWT.decode(token).getAudience().get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230104221041869.png" alt="image-20230104221041869"></p><h3 id="关于续约"><a href="#关于续约" class="headerlink" title="关于续约"></a>关于续约</h3><p>可以观看视频：<a href="https://www.bilibili.com/video/BV17D4y1Y76o/?spm_id_from=333.999.0.0&vd_source=93c0a1c8bc2b254e2458dcf78f0d067a">【IT老齐251】无状态的JWT令牌如何实现自动续约_哔哩哔哩_bilibili</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JWT介绍&quot;&gt;&lt;a href=&quot;#JWT介绍&quot; class=&quot;headerlink&quot; title=&quot;JWT介绍&quot;&gt;&lt;/a&gt;JWT介绍&lt;/h3&gt;&lt;p&gt;关于JWT的详细介绍可以查看博客：&lt;a href=&quot;https://www.ruanyifeng.com/blog/</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://blog.zoutl.cn/tags/Java/"/>
    
    <category term="JWT" scheme="https://blog.zoutl.cn/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序结合Java实现登录</title>
    <link href="https://blog.zoutl.cn/554.html"/>
    <id>https://blog.zoutl.cn/554.html</id>
    <published>2023-01-01T13:16:16.000Z</published>
    <updated>2023-01-02T15:10:54.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序通过<code>wx.login</code>函数登录时，会返回一个code，后端拿到这个code向微信接口服务请求可以拿到openid，后端根据openid在数据库中查询这个登录的用户是否存在，不存在则向数据库新增这个用户的信息然后返回给微信小程序，微信小程序使用<code>wx.setStorageSync</code>函数保存用户的信息以保持登录状态</p><h3 id="实现流程图"><a href="#实现流程图" class="headerlink" title="实现流程图"></a>实现流程图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101220640309.png" alt="image-20230101220640309"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="获取code并传给后端"><a href="#获取code并传给后端" class="headerlink" title="获取code并传给后端"></a>获取code并传给后端</h4><p>requestUtil是封装的wx.request方法，详情查看博客：<a href="https://blog.zoutl.cn/551.html">微信小程序封装请求的地址（IP地址以及端口）和方法 | LeDao’s Blog (zoutl.cn)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当顾客未登录时</span></span><br><span class="line"><span class="keyword">if</span> (!wx.getStorageSync(<span class="string">&#x27;currentCustomer&#x27;</span>)) &#123;</span><br><span class="line"><span class="comment">//登录</span></span><br><span class="line">wx.login(&#123;</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="comment">//登录成功</span></span><br><span class="line"><span class="comment">//请求后端,给后端发送code以获取openid</span></span><br><span class="line">requestUtil(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/customer/login&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">loginCode</span>: res.code</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">header</span>: &#123;<span class="comment">//POST请求一定要加上这个content-type,不然无法传递参数</span></span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//后端返回一个customer对象</span></span><br><span class="line">wx.setStorageSync(<span class="string">&#x27;currentCustomer&#x27;</span>, result.data.customer);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求的后端方法"><a href="#请求的后端方法" class="headerlink" title="请求的后端方法"></a>请求的后端方法</h4><p>下面方法主要是请求了微信接口服务返回openid，仅供参考，如要运行和查看完整代码去查看GitHub仓库：<a href="https://github.com/a6678696/mall-admin">a6678696/mall-admin: 微信小程序商城服务端 (github.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顾客登录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginCode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">login</span><span class="params">(String loginCode)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">//根据顾客登录获得的code获得openid</span></span><br><span class="line">    HashMap&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    String settingFileLocation = <span class="string">&quot;E://data/mall/myConfig.setting&quot;</span>;</span><br><span class="line">    Setting setting = <span class="keyword">new</span> Setting(settingFileLocation);</span><br><span class="line">    paramMap.put(<span class="string">&quot;appid&quot;</span>, setting.getStr(<span class="string">&quot;appid&quot;</span>));</span><br><span class="line">    paramMap.put(<span class="string">&quot;secret&quot;</span>, setting.getStr(<span class="string">&quot;secret&quot;</span>));</span><br><span class="line">    paramMap.put(<span class="string">&quot;js_code&quot;</span>, loginCode);</span><br><span class="line">    paramMap.put(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">    String result = HttpUtil.post(<span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>, paramMap);</span><br><span class="line">    <span class="comment">//使用Gson解析并获取openid</span></span><br><span class="line">    String openid = <span class="keyword">new</span> JsonParser().parse(result).getAsJsonObject().get(<span class="string">&quot;openid&quot;</span>).getAsString();</span><br><span class="line">    Customer customer = customerService.findByLoginCode(openid);</span><br><span class="line">    <span class="comment">//顾客第一次使用小程序,把openid保存到数据库</span></span><br><span class="line">    <span class="keyword">if</span> (ObjectUtil.isNull(customer)) &#123;</span><br><span class="line">        Customer customer2 = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer2.setNickName(<span class="string">&quot;默认昵称&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        customer2.setOpenid(openid);</span><br><span class="line">        customer2.setAvatarImageName(<span class="string">&quot;default.jpg&quot;</span>);</span><br><span class="line">        customerService.add(customer2);</span><br><span class="line">        customer2.setOpenid(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;customer&quot;</span>, customer2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        customer.setOpenid(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;customer&quot;</span>, customer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.ok(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>myConfig.setting的内容如下：（appid和secret填自己的，获取流程查看博客：<a href="https://blog.zoutl.cn/471.html">微信开发者工具创建小程序 | LeDao’s Blog (zoutl.cn)</a>）</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br><span class="line">appid = 12131</span><br><span class="line">secret = 2323</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;微信小程序通过&lt;code&gt;wx.login&lt;/code&gt;函数登录时，会返回一个code，后端拿到这个code向微信接口服务请求可以拿到ope</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="Java" scheme="https://blog.zoutl.cn/tags/Java/"/>
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序商城</title>
    <link href="https://blog.zoutl.cn/553.html"/>
    <id>https://blog.zoutl.cn/553.html</id>
    <published>2022-12-31T19:15:55.000Z</published>
    <updated>2023-01-02T14:33:17.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>前台小程序代码：<a href="https://github.com/a6678696/mall-wx">a6678696/mall-wx: 微信小程序商城前台 (github.com)</a></p><p>后台管理系统代码：<a href="https://github.com/a6678696/mall-web">a6678696/mall-web: 微信小程序商城后台 (github.com)</a></p><p>服务端代码：<a href="https://github.com/a6678696/mall-admin">a6678696/mall-admin: 微信小程序商城服务端 (github.com)</a></p><h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><table><thead><tr><th align="center">技术</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Spring Boot</td><td align="center">后端项目框架</td></tr><tr><td align="center">Mybatis-Plus</td><td align="center">持久层框架</td></tr><tr><td align="center">MySQL5.6</td><td align="center">数据库</td></tr><tr><td align="center">Vite</td><td align="center">前端构建工具</td></tr><tr><td align="center">Vue3.js</td><td align="center">前端JavaScript框架</td></tr><tr><td align="center">Element Plus</td><td align="center">基于 Vue 3.0 的桌面端组件库</td></tr><tr><td align="center">VueQuill</td><td align="center">富文本编辑器</td></tr><tr><td align="center">Vant Weapp</td><td align="center">小程序 UI 组件库</td></tr></tbody></table><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="前台小程序"><a href="#前台小程序" class="headerlink" title="前台小程序"></a>前台小程序</h4><ol><li>查看推荐、新品、热卖、降价和分类商品</li><li>查看公告</li><li>查看商品详情、搜索商品</li><li>管理购物车的商品</li><li>提交、模拟支付、取消和查看订单，给订单确认收货</li><li>新增、修改和删除收货地址，设置默认收货地址</li><li>修改个人昵称和头像</li><li>评价已完成的订单商品，查看所有评价</li></ol><h4 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h4><ol><li>公告管理（添加、查看、修改、删除、查询）</li><li>用户管理（查询）</li><li>商品大类管理（添加、查看、修改、删除、查询）</li><li>商品小类管理（添加、查看、修改、删除、查询）</li><li>商品管理（添加、查看、修改、删除、查询、设置商品卡片图片、设置详情页轮播图图片、设置是否热卖、设置是否推荐、设置是否首页轮播）</li><li>订单管理（删除、查询）</li><li>评价管理（删除、查询）</li></ol><h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="前台小程序-1"><a href="#前台小程序-1" class="headerlink" title="前台小程序"></a>前台小程序</h4><h5 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101032747118.png" alt="image-20230101032747118" style="zoom:50%;" /><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101032850317.png" alt="image-20230101032850317" style="zoom: 50%;" /><h5 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101032955540.png" alt="image-20230101032955540" style="zoom:50%;" /><h5 id="我的"><a href="#我的" class="headerlink" title="我的"></a>我的</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033045354.png" alt="image-20230101033045354" style="zoom:50%;" /><h5 id="搜索商品"><a href="#搜索商品" class="headerlink" title="搜索商品"></a>搜索商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033128270.png" alt="image-20230101033128270" style="zoom:50%;" /><h5 id="搜索结果"><a href="#搜索结果" class="headerlink" title="搜索结果"></a>搜索结果</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033226839.png" alt="image-20230101033226839" style="zoom:50%;" /><h5 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033336406.png" alt="image-20230101033336406" style="zoom:50%;" /><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033411202.png" alt="image-20230101033411202" style="zoom:50%;" /><h5 id="公告"><a href="#公告" class="headerlink" title="公告"></a>公告</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033502114.png" alt="image-20230101033502114" style="zoom:50%;" /><h5 id="新品商品"><a href="#新品商品" class="headerlink" title="新品商品"></a>新品商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033640778.png" alt="image-20230101033640778" style="zoom:50%;" /><h5 id="热卖商品"><a href="#热卖商品" class="headerlink" title="热卖商品"></a>热卖商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033619008.png" alt="image-20230101033619008" style="zoom:50%;" /><h5 id="降价商品"><a href="#降价商品" class="headerlink" title="降价商品"></a>降价商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033707668.png" alt="image-20230101033707668" style="zoom:50%;" /><h5 id="分类商品"><a href="#分类商品" class="headerlink" title="分类商品"></a>分类商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033803290.png" alt="image-20230101033803290" style="zoom:50%;" /><h5 id="确认订单"><a href="#确认订单" class="headerlink" title="确认订单"></a>确认订单</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033936306.png" alt="image-20230101033936306" style="zoom:50%;" /><h5 id="全部订单"><a href="#全部订单" class="headerlink" title="全部订单"></a>全部订单</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034021486.png" alt="image-20230101034021486" style="zoom:50%;" /><h5 id="订单详情"><a href="#订单详情" class="headerlink" title="订单详情"></a>订单详情</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034054736.png" alt="image-20230101034054736" style="zoom:50%;" /><h5 id="收货地址管理"><a href="#收货地址管理" class="headerlink" title="收货地址管理"></a>收货地址管理</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034145024.png" alt="image-20230101034145024" style="zoom:50%;" /><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034218456.png" alt="image-20230101034218456" style="zoom:50%;" /><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034249935.png" alt="image-20230101034249935" style="zoom:50%;" /><h5 id="修改昵称和头像"><a href="#修改昵称和头像" class="headerlink" title="修改昵称和头像"></a>修改昵称和头像</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034334329.png" alt="image-20230101034334329" style="zoom:50%;" /><h5 id="查看我的评价"><a href="#查看我的评价" class="headerlink" title="查看我的评价"></a>查看我的评价</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034421714.png" alt="image-20230101034421714" style="zoom:50%;" /><h4 id="后台管理系统-1"><a href="#后台管理系统-1" class="headerlink" title="后台管理系统"></a>后台管理系统</h4><h5 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034545179.png" alt="image-20230101034545179"></p><h5 id="公告管理"><a href="#公告管理" class="headerlink" title="公告管理"></a>公告管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034623993.png" alt="image-20230101034623993"></p><h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034647185.png" alt="image-20230101034647185"></p><h5 id="商品大类管理"><a href="#商品大类管理" class="headerlink" title="商品大类管理"></a>商品大类管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034747100.png" alt="image-20230101034747100"></p><h5 id="商品小类管理"><a href="#商品小类管理" class="headerlink" title="商品小类管理"></a>商品小类管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034838616.png" alt="image-20230101034838616"></p><h5 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034908593.png" alt="image-20230101034908593"></p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101035412594.png" alt="image-20230101035412594"></p><h5 id="订单管理"><a href="#订单管理" class="headerlink" title="订单管理"></a>订单管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101035228530.png" alt="image-20230101035228530"></p><h5 id="评价管理"><a href="#评价管理" class="headerlink" title="评价管理"></a>评价管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101035327193.png" alt="image-20230101035327193"></p><h3 id="部署时要修改的环境"><a href="#部署时要修改的环境" class="headerlink" title="部署时要修改的环境"></a>部署时要修改的环境</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>数据库文件和图片等资源都在服务端代码的<code>myResources</code>文件夹中</p><p>主要是修改服务端的的代码，服务端的端口默认是8080，不要修改，不然要去修改前台小程序端和后台管理系统请求的服务端端口（小程序代码修改名为 <code>requestUtil.js</code> 的文件，后台管理系统则修改<code>url.js</code>这个文件）</p><h4 id="要修改的地方"><a href="#要修改的地方" class="headerlink" title="要修改的地方"></a>要修改的地方</h4><h5 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h5><p>最下面的图片存储地址都改成自己电脑上的，数据库的名称最好和我的命名一样（可以直接导入数据库文件）</p><h5 id="FilePathConfig-java映射配置"><a href="#FilePathConfig-java映射配置" class="headerlink" title="FilePathConfig.java映射配置"></a>FilePathConfig.java映射配置</h5><p>将本地路径的映射改成自己电脑上的</p><h5 id="CustomerController-java"><a href="#CustomerController-java" class="headerlink" title="CustomerController.java"></a>CustomerController.java</h5><p><code>/customer/login</code>方法的settingFileLocation属性改为自己电脑上myConfig.setting这个文件的路径</p><h5 id="myConfig-setting"><a href="#myConfig-setting" class="headerlink" title="myConfig.setting"></a>myConfig.setting</h5><p>在服务端代码的<code>myResources</code>文件夹中，appid和secret需要自己去小程序的开发管理后台中获取</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h3&gt;&lt;p&gt;前台小程序代码：&lt;a href=&quot;https://github.com/a6678696/mall-wx&quot;&gt;a6678696</summary>
      
    
    
    
    <category term="个人项目" scheme="https://blog.zoutl.cn/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="个人项目" scheme="https://blog.zoutl.cn/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>让微信小程序的富文本图片宽度实现自适应</title>
    <link href="https://blog.zoutl.cn/552.html"/>
    <id>https://blog.zoutl.cn/552.html</id>
    <published>2022-12-24T05:53:26.000Z</published>
    <updated>2022-12-24T16:29:06.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序使用富文本时，如果图片宽度超出微信小程序屏幕的默认最大宽度750rpx（rpx是动态像素，一个rpx宽度并不是固定的，可以根据屏幕宽度进行自适应），会导致图片显示不全</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>直接在使用了富文本的页面的样式中加入以下代码即可，值得注意的是图片一定要有<code>alt</code>这个属性，不然没有用，alt改成src也是可以的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[alt]</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;//图片宽度过大,但是我只希望它把屏幕的宽度撑满就行</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">100%</span>;//图片宽度过小,但是我希望它把屏幕的宽度撑满</span><br><span class="line">    <span class="attribute">height</span>: auto;//高度自动,防止图片的长宽比改变</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;微信小程序使用富文本时，如果图片宽度超出微信小程序屏幕的默认最大宽度750rpx（rpx是动态像素，一个rpx宽度并不是固定的，可以根据屏幕</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序封装请求的地址（IP地址以及端口）和方法</title>
    <link href="https://blog.zoutl.cn/551.html"/>
    <id>https://blog.zoutl.cn/551.html</id>
    <published>2022-12-19T13:29:02.000Z</published>
    <updated>2022-12-19T17:24:42.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>项目开发时和上线时请求的IP地址和端口是不一样的，为了避免后期修改请求的IP地址和端口带来的麻烦，非常有必要把请求的IP地址和端口封装起来，另外，还可以使用Promise封装一下请求的方法以避免<a href="https://blog.csdn.net/qq_42698326/article/details/111075519?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-111075519-blog-124483644.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-111075519-blog-124483644.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=3">回调地狱</a></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>在根目录下新建一个名为<code>utils</code>的文件夹（和pages同级），在一个名为<code>requestUtil.js</code>的文件，请求的<code>IP地址和端口</code>和<code>方法</code>都封装在里面</p><h4 id="封装请求的IP地址和端口"><a href="#封装请求的IP地址和端口" class="headerlink" title="封装请求的IP地址和端口"></a>封装请求的IP地址和端口</h4><p>代码如下，在这里可以统一管理项目请求的IP地址和端口，后期要修改的话只需要改这个地方即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义请求的IP地址和端口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回baseUrl</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getBaseUrl = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> baseUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用前，要先在页面的js文件中引入，然后在原始数据中定义（空值），最后在onLoad()函数中设置就可以使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入请求后端工具类</span></span><br><span class="line"><span class="keyword">import</span> &#123;getBaseUrl&#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/requestUtil.js&#x27;</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">baseUrl</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> baseUrl = getBaseUrl();</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            baseUrl</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="封装请求的方法"><a href="#封装请求的方法" class="headerlink" title="封装请求的方法"></a>封装请求的方法</h4><p>代码如下（加上IP地址和端口的封装），params接收传过来的url和method等参数，baseUrl是请求的IP地址和端口（传过来的url就不需要写IP地址和端口了）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义请求的IP地址和端口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回baseUrl</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getBaseUrl = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> baseUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后端请求工具</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>params </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestUtil = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            ...params,</span><br><span class="line">            <span class="attr">url</span>: baseUrl + params.url,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用前先在页面的js文件引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getBaseUrl,requestUtil&#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/requestUtil.js&#x27;</span></span><br></pre></td></tr></table></figure><p>使用的格式如下，和axios有点相似，注释掉的是微信小程序原来的请求方法（没封装前）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getRecommendGoodsList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="comment">// wx.request(&#123;</span></span><br><span class="line"><span class="comment">//     url: &#x27;http://localhost:8080/goods/getRecommendGoodsList&#x27;,</span></span><br><span class="line"><span class="comment">//     method: &#x27;GET&#x27;,</span></span><br><span class="line"><span class="comment">//     success(res) &#123;</span></span><br><span class="line"><span class="comment">//         this.setData(&#123;</span></span><br><span class="line"><span class="comment">//             recommendGoodsList: res.data.goodsList</span></span><br><span class="line"><span class="comment">//         &#125;)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">requestUtil(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/goods/getRecommendGoodsList&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.setData(&#123;</span><br><span class="line"><span class="attr">recommendGoodsList</span>: res.data.goodsList</span><br><span class="line">&#125;)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;项目开发时和上线时请求的IP地址和端口是不一样的，为了避免后期修改请求的IP地址和端口带来的麻烦，非常有必要把请求的IP地址和端口封装起来，</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot实现wangEditor 5富文本编辑器上传图片到服务器</title>
    <link href="https://blog.zoutl.cn/550.html"/>
    <id>https://blog.zoutl.cn/550.html</id>
    <published>2022-12-18T09:24:48.000Z</published>
    <updated>2022-12-18T11:15:52.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>wangEditor 5富文本编辑器只支持添加网络图片，如果要上传本地图片的话，需要自己写后端代码来实现</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="添加上传图片配置"><a href="#添加上传图片配置" class="headerlink" title="添加上传图片配置"></a>添加上传图片配置</h4><p>在编辑器组件代码中找到<code>editorConfig</code>后修改以及添加成下面代码就可以了，编辑器组件的代码查看博客：<a href="https://blog.zoutl.cn/549.html">Vue.js3.2引入wangEditor 5富文本编辑器 | LeDao’s Blog (zoutl.cn)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改过</span></span><br><span class="line"><span class="keyword">const</span> editorConfig = &#123;<span class="attr">placeholder</span>: <span class="string">&#x27;请输入内容...&#x27;</span>, <span class="attr">MENU_CONF</span>: &#123;&#125;&#125;</span><br><span class="line"><span class="comment">//新添加</span></span><br><span class="line">editorConfig.MENU_CONF[<span class="string">&#x27;uploadImage&#x27;</span>] = &#123;</span><br><span class="line">  <span class="attr">fieldName</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">  <span class="attr">server</span>: <span class="string">&#x27;http://localhost:8080/goods/wangEditorUploadImage&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java后端上传图片代码"><a href="#Java后端上传图片代码" class="headerlink" title="Java后端上传图片代码"></a>Java后端上传图片代码</h4><p>代码的一些说明以及前置条件（依赖和图片路径）可以参考博客：<a href="https://blog.zoutl.cn/546.html">Spring Boot 实现 VueQuill 富文本编辑器上传图片到服务器 | LeDao’s Blog (zoutl.cn)</a>，其实后端代码都差不多，只是从前端获取数据的方式各有不同·</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * wangEditor富文本编辑器上传图片</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/wangEditorUploadImage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">wangEditorUploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;image&quot;)</span> MultipartFile multipartFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//给图片定义一个名称</span></span><br><span class="line">    String newFileName = DateUtil.getCurrentDateStr2() + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    <span class="keyword">assert</span> multipartFile != <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//实现将图片保存到指定位置</span></span><br><span class="line">    FileUtils.copyInputStreamToFile(multipartFile.getInputStream(), <span class="keyword">new</span> File(goodsDetailsImageFilePath + <span class="string">&quot;/&quot;</span> + newFileName));</span><br><span class="line">    <span class="comment">//返回指定的格式给前端使用</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;errno&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//返回的数据,wangEditor接收</span></span><br><span class="line">    Map&lt;String, String&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    data.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;http://localhost:8080/image/goods/details/&quot;</span> + newFileName);</span><br><span class="line">    data.put(<span class="string">&quot;alt&quot;</span>, newFileName);</span><br><span class="line">    data.put(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;http://localhost:8080/image/goods/details/&quot;</span> + newFileName);</span><br><span class="line">    map.put(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>更多配置以及可以接收的数据格式查看官网：<a href="https://www.wangeditor.com/v5/menu-config.html#%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87">菜单配置 | wangEditor</a></p><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/wang-editor-demo">a6678696/wang-editor-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;wangEditor 5富文本编辑器只支持添加网络图片，如果要上传本地图片的话，需要自己写后端代码来实现&lt;/p&gt;
&lt;h3 id=&quot;实现过程&quot;</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Spring Boot" scheme="https://blog.zoutl.cn/tags/Spring-Boot/"/>
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="wangEditor" scheme="https://blog.zoutl.cn/tags/wangEditor/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js3.2引入wangEditor 5富文本编辑器</title>
    <link href="https://blog.zoutl.cn/549.html"/>
    <id>https://blog.zoutl.cn/549.html</id>
    <published>2022-12-18T09:03:23.000Z</published>
    <updated>2022-12-18T11:04:13.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>wangEditor 5是一款开源Web富文本编辑器，开箱即用，配置简单</p><p>虽然官方有文档，但是不够简明，所以我写本博客方便以后快速引入wangEditor 5富文本编辑器</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @wangeditor/editor @wangeditor/editor-for-vue@next --save</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221218171607241.png" alt="image-20221218171607241"></p><h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><p>在<code>components</code>文件夹新建一个名为<code>myEditor.vue</code>的文件，内容如下，直接复制下面的代码即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #ccc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;border-bottom: 1px solid #ccc&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:editor</span>=<span class="string">&quot;editorRef&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:defaultConfig</span>=<span class="string">&quot;toolbarConfig&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:mode</span>=<span class="string">&quot;mode&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Editor</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;height: 500px; overflow-y: hidden;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;valueHtml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:defaultConfig</span>=<span class="string">&quot;editorConfig&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:mode</span>=<span class="string">&quot;mode&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">onCreated</span>=<span class="string">&quot;handleCreated&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">&#x27;@wangeditor/editor/dist/css/style.css&#x27;</span> <span class="comment">// 引入 css</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; onBeforeUnmount, ref, shallowRef, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Editor, Toolbar &#125; <span class="keyword">from</span> <span class="string">&#x27;@wangeditor/editor-for-vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123; Editor, Toolbar &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 编辑器实例，必须用 shallowRef</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> editorRef = shallowRef()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 内容 HTML</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> valueHtml = ref(<span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模拟 ajax 异步获取内容</span></span></span><br><span class="line"><span class="javascript">    onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        valueHtml.value = <span class="string">&#x27;&lt;p&gt;模拟 Ajax 异步设置内容&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">1500</span>)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> toolbarConfig = &#123;&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> editorConfig = &#123; <span class="attr">placeholder</span>: <span class="string">&#x27;请输入内容...&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件销毁时，也及时销毁编辑器</span></span></span><br><span class="line"><span class="javascript">    onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> editor = editorRef.value</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (editor == <span class="literal">null</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      editor.destroy()</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> handleCreated = <span class="function">(<span class="params">editor</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      editorRef.value = editor <span class="comment">// 记录 editor 实例，重要！</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      editorRef,</span></span><br><span class="line"><span class="javascript">      valueHtml,</span></span><br><span class="line"><span class="javascript">      <span class="attr">mode</span>: <span class="string">&#x27;default&#x27;</span>, <span class="comment">// 或 &#x27;simple&#x27;</span></span></span><br><span class="line"><span class="javascript">      toolbarConfig,</span></span><br><span class="line"><span class="javascript">      editorConfig,</span></span><br><span class="line"><span class="javascript">      handleCreated</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>首先在使用组件的页面引入上面的组件，然后即可使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">myEditor</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> myEditor <span class="keyword">from</span> <span class="string">&quot;../components/myEditor.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>关于父组件给富文本编辑器设置内容以及获取内容的实现（通过改变编辑器组件的<code>valueHtml</code>属性来实现）可以参考博客：<a href="https://blog.zoutl.cn/548.html">Vue.js3.2实现父组件调用子组件的方法和属性 | LeDao’s Blog (zoutl.cn)</a>，参考博客时不需要暴露属性了，因为在上面的代码中<code>valueHtml</code>已经通过<code>return</code>暴露过了</p><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/wang-editor-demo">a6678696/wang-editor-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;wangEditor 5是一款开源Web富文本编辑器，开箱即用，配置简单&lt;/p&gt;
&lt;p&gt;虽然官方有文档，但是不够简明，所以我写本博客方便以后</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="wangEditor" scheme="https://blog.zoutl.cn/tags/wangEditor/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js3.2实现父组件调用子组件的方法和属性</title>
    <link href="https://blog.zoutl.cn/548.html"/>
    <id>https://blog.zoutl.cn/548.html</id>
    <published>2022-12-18T08:12:58.000Z</published>
    <updated>2022-12-18T08:54:24.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>父组件（使用子组件的页面称为父组件）使用子组件时，如果想使用子组件的属性和方法，可以在父组件使用子组件时加上ref属性来实现，但是子组件需要提前暴露这些属性和方法</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>我把父组件放在<code>views</code>文件夹中，子组件放在<code>components</code>文件夹中</p><h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><p>首先在<code>components</code>文件夹中新建一个名为<code>child.vue</code>的子组件，<code>defineExpose</code>暴露的属性和方法才可以被父组件使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件的内容: <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref, defineExpose&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> content = ref(<span class="string">&#x27;我是子组件原来的内容&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  alert(content.value);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//暴露属性和方法给父组件</span></span></span><br><span class="line"><span class="javascript">defineExpose(&#123;</span></span><br><span class="line"><span class="javascript">  content,</span></span><br><span class="line"><span class="javascript">  getContent</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><p>在<code>views</code>文件夹中新建一个名为<code>father.vue</code>的父组件，使用子组件时加上一个ref属性<code>ref=&quot;myChild&quot;</code>，然后定义一下myChild</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--加上一个ref属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;myChild&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setChildContent&quot;</span>&gt;</span>我是父组件的按钮,设置子组件的content<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getChildContent&quot;</span>&gt;</span>我是父组件的按钮,调用子组件的方法getContent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;../components/child.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//定义一下myChild</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> myChild = ref();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> setChildContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//使用子组件属性的值</span></span></span><br><span class="line"><span class="javascript">  alert(myChild.value.content);</span></span><br><span class="line"><span class="javascript">  <span class="comment">//设置子组件属性的值</span></span></span><br><span class="line"><span class="javascript">  myChild.value.content = <span class="string">&#x27;我是子组件修改后的内容&#x27;</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getChildContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//调用子组件的方法</span></span></span><br><span class="line"><span class="javascript">  myChild.value.getContent();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果GIF图"><a href="#效果GIF图" class="headerlink" title="效果GIF图"></a>效果GIF图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-18%20_164031.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;父组件（使用子组件的页面称为父组件）使用子组件时，如果想使用子组件的属性和方法，可以在父组件使用子组件时加上ref属性来实现，但是子组件需要</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>VueQuill富文本编辑器实现图片的缩放</title>
    <link href="https://blog.zoutl.cn/547.html"/>
    <id>https://blog.zoutl.cn/547.html</id>
    <published>2022-12-17T15:12:21.000Z</published>
    <updated>2022-12-18T11:03:47.221Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>VueQuill富文本编辑器添加的图片默认是不可以缩放的，如果图片尺寸过大的话，会非常影响用户的体验。虽然不支持缩放图片，但是可以通过安装<code>quill-blot-formatter</code>这个插件来实现</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save quill-blot-formatter</span><br></pre></td></tr></table></figure><h4 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BlotFormatter <span class="keyword">from</span> <span class="string">&#x27;quill-blot-formatter&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>下面是配置两个及以上插件的格式，如果只配置一个插件，其格式查看博客：<a href="https://blog.zoutl.cn/546.html">Spring Boot 实现 VueQuill 富文本编辑器上传图片到服务器 | LeDao’s Blog (zoutl.cn)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modules = [&#123;</span><br><span class="line">  <span class="comment">//这里是另一个插件的配置</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;BlotFormatter&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: BlotFormatter,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">overlay</span>: &#123;</span><br><span class="line">      <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">border</span>: <span class="string">&#x27;2px solid red&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>使用编辑器的代码如下，关键代码是<code>:modules=&quot;modules&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:modules</span>=<span class="string">&quot;modules&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/vue-quill-demo">a6678696/vue-quill-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;VueQuill富文本编辑器添加的图片默认是不可以缩放的，如果图片尺寸过大的话，会非常影响用户的体验。虽然不支持缩放图片，但是可以通过安装&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="VueQuill" scheme="https://blog.zoutl.cn/tags/VueQuill/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot实现VueQuill富文本编辑器上传图片到服务器</title>
    <link href="https://blog.zoutl.cn/546.html"/>
    <id>https://blog.zoutl.cn/546.html</id>
    <published>2022-12-17T14:02:25.000Z</published>
    <updated>2023-01-06T17:41:41.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>VueQuill富文本编辑器添加图片时，会将图片转换为base64格式</p><p>如果直接将编辑器的内容传到后端并保存到MySQL数据库时（我习惯使用<code>text</code>类型），很容易就超出<code>text</code>类型的长度，即使还有比text类型长度更长的类型，但是还是不推荐直接将base64格式的图片保存到MySQL中</p><p>所以有必要实现VueQuill富文本编辑器添加图片时，先将图片上传到服务器中，然后后端返回图片的链接给编辑器引用，编辑器要上传到图片到后端需要安装插件<code>quill-image-uploader</code></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install quill-image-uploader --save</span><br></pre></td></tr></table></figure><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ImageUploader <span class="keyword">from</span> <span class="string">&#x27;quill-image-uploader&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="安装插件到编辑器"><a href="#安装插件到编辑器" class="headerlink" title="安装插件到编辑器"></a>安装插件到编辑器</h4><p>首先定义模块，只需要修改请求后端的url，下面代码的url经过getServerUrl的封装最终是<code>localhost:8080/goods/vueQuillUploadImage</code>，getServerUrl的代码查看博客：<a href="https://blog.zoutl.cn/511.html">Vue 项目实现统一管理请求的后端 IP 地址和端口 | LeDao’s Blog (zoutl.cn)</a>，也可以直接写出url不用封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modules = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;imageUploader&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: ImageUploader,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">upload</span>: <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">        formData.append(<span class="string">&quot;image&quot;</span>, file);</span><br><span class="line">        <span class="keyword">let</span> url = getServerUrl(<span class="string">&#x27;/goods/vueQuillUploadImage&#x27;</span>);</span><br><span class="line">        axios.post(url, formData)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(res)</span><br><span class="line">              resolve(res.data.url);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              reject(<span class="string">&quot;Upload failed&quot;</span>);</span><br><span class="line">              <span class="built_in">console</span>.error(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">            &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用编辑器的代码如下，关键代码是<code>:modules=&quot;modules&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:modules</span>=<span class="string">&quot;modules&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Java后端代码"><a href="#Java后端代码" class="headerlink" title="Java后端代码"></a>Java后端代码</h4><p>首先引入依赖，用于文件的操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>业务代码如下，当前Controller的名称上面的注解是<code>@RestController</code>和<code>@RequestMapping(&quot;/goods&quot;)</code>，所以前端请求的路径是<code>/goods/vueQuillUploadImage</code>，和上面的url对应</p><p><code>DateUtil.getCurrentDateStr2()</code>和<code>System.currentTimeMillis()</code>是根据时间生成字符串，生成的图片名称示例为<code>202212172148271671284907136.jpg</code>，只是用来命名而已，代码不贴了，自己去改掉</p><p><code>goodsDetailsImageFilePath</code>是定义在<code>application.yml</code>配置文件的路径，配置为<code>goodsDetailsImageFilePath: E://data/mall/images/goods/details/</code></p><p>关于返回的url，要加上<code>http://</code>，不然VueQuill富文本编辑器会出错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VueQuill富文本编辑器上传图片</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/vueQuillUploadImage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">vueQuillUploadImage</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//获取到文件</span></span><br><span class="line">    MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;</span><br><span class="line">    MultipartFile multipartFile = multipartRequest.getFile(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">    <span class="comment">//给图片定义一个名称</span></span><br><span class="line">    String newFileName = DateUtil.getCurrentDateStr2() + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    <span class="keyword">assert</span> multipartFile != <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//实现将图片保存到指定位置</span></span><br><span class="line">    FileUtils.copyInputStreamToFile(multipartFile.getInputStream(), <span class="keyword">new</span> File(goodsDetailsImageFilePath + <span class="string">&quot;/&quot;</span> + newFileName));</span><br><span class="line">    <span class="comment">//返回指定的格式给前端使用</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;http://localhost:8080/image/goods/details/&quot;</span> + newFileName);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改可上传文件的大小"><a href="#修改可上传文件的大小" class="headerlink" title="修改可上传文件的大小"></a>修改可上传文件的大小</h4><p>Spring Boot默认可上传的最大文件大小是1MB，可以去<code>application.yml</code>配置文件修改，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>官网地址为：<a href="https://vueup.github.io/vue-quill/guide/modules.html#example-using-quill-image-uploader">Modules | VueQuill (vueup.github.io)</a>，只有前端代码，后端代码需要自己实现，前端根据后端返回的数据拿到url就行了，不规定格式</p><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/vue-quill-demo">a6678696/vue-quill-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;VueQuill富文本编辑器添加图片时，会将图片转换为base64格式&lt;/p&gt;
&lt;p&gt;如果直接将编辑器的内容传到后端并保存到MySQL数据库</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Spring Boot" scheme="https://blog.zoutl.cn/tags/Spring-Boot/"/>
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="VueQuill" scheme="https://blog.zoutl.cn/tags/VueQuill/"/>
    
    <category term="Axios" scheme="https://blog.zoutl.cn/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js3.2引入VueQuill富文本编辑器</title>
    <link href="https://blog.zoutl.cn/545.html"/>
    <id>https://blog.zoutl.cn/545.html</id>
    <published>2022-12-16T15:19:32.000Z</published>
    <updated>2022-12-24T15:55:22.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>官方文档：<a href="https://vueup.github.io/vue-quill/guide/">Introduction | VueQuill (vueup.github.io)</a></p><p>中文文档：<a href="https://www.kancloud.cn/liuwave/quill/1434140">vue-quill-editor · Quill官方中文文档 · 看云 (kancloud.cn)</a></p><p>编辑器的插件列举查看官网：<a href="https://vueup.github.io/vue-quill/guide/modules.html#quill-modules">Modules | VueQuill (vueup.github.io)</a>，我实现了图片上传到服务器和图片缩放插件的使用，博客链接为：<a href="https://blog.zoutl.cn/546.html">上传图片到服务器 </a>和<a href="https://blog.zoutl.cn/547.html">实现图片的缩放 </a></p><p>在几款适合Vue3的富文本编辑器中，我发现VueQuill最简单易用，不过也有一个BUG：数据无法双向绑定，页面的数据不会显示到富文本编辑器中，实现数据双向绑定的办法看下面</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vueup/vue-quill@latest --save</span><br></pre></td></tr></table></figure><h4 id="局部引入"><a href="#局部引入" class="headerlink" title="局部引入"></a>局部引入</h4><p>虽然可以全局引入，但是还是建议局部引入，首先引入组件和样式（在<code>&lt;script&gt;</code>标签中加入下面代码）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;QuillEditor&#125; <span class="keyword">from</span> <span class="string">&#x27;@vueup/vue-quill&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@vueup/vue-quill/dist/vue-quill.snow.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用组件的代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>属性说明</p><table><thead><tr><th align="center">属性</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>v-model:content=&quot;content&quot;</code></td><td align="center">绑定的数据是content</td></tr><tr><td align="center"><code>placeholder=&quot;这里输入商品详情...&quot;</code></td><td align="center">内容为空时的提示</td></tr><tr><td align="center"><code>theme=&quot;snow&quot;</code></td><td align="center"><a href="https://vueup.github.io/vue-quill/guide/themes.html">主题</a></td></tr><tr><td align="center"><code>ref=&quot;editor&quot;</code></td><td align="center">这个是重点，定义editor使用<a href="https://vueup.github.io/vue-quill/api/methods.html">官方的方法</a></td></tr><tr><td align="center"><code>toolbar=&quot;full&quot;</code></td><td align="center">工具栏的功能全部可以使用</td></tr><tr><td align="center"><code>contentType=&quot;html&quot;</code></td><td align="center">内容的格式是html</td></tr></tbody></table><p>由于双向绑定没有用，所以需要使用官方的方法<code>setHTML()</code>设置值，首先上面使用编辑器的代码中要有<code>ref=&quot;editor&quot;</code>，然后在<code>&lt;script&gt;</code>标签中定义一个空editor和上面对应，然后就可以使用编辑器的方法了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个空editor</span></span><br><span class="line"><span class="keyword">const</span> editor = ref(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">editor.value.setHTML(<span class="string">&quot;内容&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>只保留了和VueQuill富文本编辑器有关的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref, onMounted&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;QuillEditor&#125; <span class="keyword">from</span> <span class="string">&#x27;@vueup/vue-quill&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">&#x27;@vueup/vue-quill/dist/vue-quill.snow.css&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> content = ref(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> editor = ref(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//根据id获取商品</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getGoodsDetails = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//设置值</span></span></span><br><span class="line"><span class="javascript">    editor.value.setHTML(response.data.goods.details);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/vue-quill-demo">a6678696/vue-quill-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://vueup.github.io/vue-quill/guide/&quot;&gt;Introduction |</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="VueQuill" scheme="https://blog.zoutl.cn/tags/VueQuill/"/>
    
  </entry>
  
  <entry>
    <title>Java实体类中使用布尔类型的注意事项</title>
    <link href="https://blog.zoutl.cn/544.html"/>
    <id>https://blog.zoutl.cn/544.html</id>
    <published>2022-12-16T11:28:26.000Z</published>
    <updated>2022-12-17T12:23:09.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在Java实体类中使用布尔类型的话，有一些细节要特别注意，不然这些布尔类型的字段用起来会很麻烦</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="不要以is开头"><a href="#不要以is开头" class="headerlink" title="不要以is开头"></a>不要以is开头</h4><p>属性名不要以<code>is</code>开头，如果以<code>is</code>开头的话，自动生成的Setter和Getter的方法名会自动省略掉<code>is</code>，例如以下代码中Setter和Getter的方法名原本应该是<code>getIsHotGoods</code>和<code>setIsHotGoods</code>，但是实际上是<code>getHotGoods</code>和<code>setHotGoods</code>，会给我们带来一些困扰</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221216230829121.png" alt="image-20221216230829121"></p><h4 id="使用包装类"><a href="#使用包装类" class="headerlink" title="使用包装类"></a>使用包装类</h4><p>在实体类中，不要使用基本数据类型，而是使用它们的包装类，例如布尔基本类型boolean就要使用Boolean</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221216225306794.png" alt="image-20221216225306794"></p><p>如果使用了布尔基本类型boolean，那么我们自动生成Setter和Getter时不会有Getter方法，<font color="#dd0000">为了开发时减少麻烦，不要使用基本类型，无论如何都只使用包装类</font></p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221216230712892.png" alt="image-20221216230712892"></p><h4 id="MySQL字段类型"><a href="#MySQL字段类型" class="headerlink" title="MySQL字段类型"></a>MySQL字段类型</h4><p>当实体类的属性类型是Boolean时，MySQL表的字段类型可以使用<code>tinyint</code>，长度设为<code>1</code></p><p>实体类的值为<code>true</code>时MySQL的值是<code>1</code>，值为<code>false</code>时MySQL的值是<code>0</code>，从MySQL查到的值会被转换成true或false，而不是1或0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;在Java实体类中使用布尔类型的话，有一些细节要特别注意，不然这些布尔类型的字段用起来会很麻烦&lt;/p&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://blog.zoutl.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>将Element Plus的默认文字设置为中文</title>
    <link href="https://blog.zoutl.cn/543.html"/>
    <id>https://blog.zoutl.cn/543.html</id>
    <published>2022-12-15T08:11:15.000Z</published>
    <updated>2022-12-15T08:29:22.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当前Element Plus组件的默认文字是英文，为了方便，我们直接设置全局的默认文字让每个页面都生效</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221215162838853.png" alt="image-20221215162838853"></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>直接在App.vue中设置，首先引入简体中文的js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&quot;element-plus/lib/locale/lang/zh-cn&quot;</span>;</span><br></pre></td></tr></table></figure><p>​    使用<code>&lt;el-config-provider :locale=&quot;zhCn&quot;&gt;&lt;/el-config-provider&gt;</code>将<code>&lt;router-view/&gt;</code>包住即可生效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整App.vue代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&quot;element-plus/lib/locale/lang/zh-cn&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图所示</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221215162920988.png" alt="image-20221215162920988"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;当前Element Plus组件的默认文字是英文，为了方便，我们直接设置全局的默认文字让每个页面都生效&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="Element Plus" scheme="https://blog.zoutl.cn/tags/Element-Plus/"/>
    
  </entry>
  
  <entry>
    <title>微信开发者工具修改编译后的启动页面</title>
    <link href="https://blog.zoutl.cn/542.html"/>
    <id>https://blog.zoutl.cn/542.html</id>
    <published>2022-12-12T09:47:19.000Z</published>
    <updated>2022-12-12T10:05:50.114Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序开发一个新页面时，我们需要把它设置为编译后的启动页面，设置方法有两个：</p><ol><li>到<code>app.json</code>中设置</li><li>修改微信开发者工具的编译设置，<font color="#dd0000">推荐使用这种方式</font></li></ol><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="到app-json中修改"><a href="#到app-json中修改" class="headerlink" title="到app.json中修改"></a>到app.json中修改</h4><p>添加一个<code>entryPagePath</code>属性（优先级比较高），其值为页面的路径，或者把页面的定义放在<code>pages</code>数组的第一个，下面代码的启动页面是index</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;entryPagePath&quot;</span>: <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/category/category&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/cart/cart&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改编译设置"><a href="#修改编译设置" class="headerlink" title="修改编译设置"></a>修改编译设置</h4><p>首先添加一个编译模式</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221212175835414.png" alt="image-20221212175835414"></p><p>编译模式的设置</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221212180045483.png" alt="image-20221212180045483"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;微信小程序开发一个新页面时，我们需要把它设置为编译后的启动页面，设置方法有两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到&lt;code&gt;app.json&lt;</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>解决Git的代码合并冲突</title>
    <link href="https://blog.zoutl.cn/541.html"/>
    <id>https://blog.zoutl.cn/541.html</id>
    <published>2022-12-11T14:41:28.000Z</published>
    <updated>2022-12-11T15:29:34.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>两个人都修改了同一个文件，第一个人进行push操作后，如果第二个人也进行push操作，那么第二个人就会出现代码合并冲突同时push失败</p><h3 id="情景复现"><a href="#情景复现" class="headerlink" title="情景复现"></a>情景复现</h3><p>本地仓库和远程GitHub仓库都有一个名为<code>bbb.txt</code>的文件，先在GitHub仓库中修改这个文件，然后在本地修改这个文件</p><p>本地的bbb.txt文件内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb本地库修改</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure><p>GitHub仓库的bbb.txt文件内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb</span><br><span class="line">bbb远程库修改</span><br></pre></td></tr></table></figure><p>进行add操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>进行commit操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;修改bbb.txt&quot;</span></span><br></pre></td></tr></table></figure><p>进行push操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>会出现下图的错误，提示我们在再次push前先进行pull操作</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221211230156646.png" alt="image-20221211230156646"></p><h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><p>根据上面的提示进行pull操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>然后查看本地的bbb.txt文件的内容，多了一些东西，<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>和<code>=======</code>之间的内容是本地仓库和远程GitHub仓库冲突的内容（属于本地仓库），<code>=======</code>和<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>之间的内容是远程GitHub仓库和本地仓库冲突的内容（属于远程GitHub仓库）</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bbb</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">bbb本地库修改</span><br><span class="line">bbb</span><br><span class="line">=======</span><br><span class="line">bbb</span><br><span class="line">bbb远程库修改</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4e4fb01336355e4e36f217905c8f2d0a883fcdc6</span><br></pre></td></tr></table></figure><p>解决冲突的方案有三个：（是修改本地仓库的bbb.txt文件）</p><ol><li><p>以本地仓库的代码为准，修改后的bbb.txt内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb本地库修改</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure></li><li><p>以远程GitHub仓库的代码为准，修改后的bbb.txt内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb</span><br><span class="line">bbb远程库修改</span><br></pre></td></tr></table></figure></li><li><p>都保留，修改后的bbb.txt内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb本地库修改</span><br><span class="line">bbb远程库修改</span><br></pre></td></tr></table></figure></li></ol><p>修改了本地仓库的bbb.txt文件后再次进行add操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add bbb.txt</span><br></pre></td></tr></table></figure><p>进行commit操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;以本地仓库的代码为准&quot;</span></span><br></pre></td></tr></table></figure><p>进行push操作，这次可以push成功了，去GitHub查看结果，bbb.txt的内容已经变成本地仓库的了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;两个人都修改了同一个文件，第一个人进行push操作后，如果第二个人也进行push操作，那么第二个人就会出现代码合并冲突同时push失败&lt;/p</summary>
      
    
    
    
    <category term="版本控制" scheme="https://blog.zoutl.cn/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
    <category term="GitHub" scheme="https://blog.zoutl.cn/tags/GitHub/"/>
    
    <category term="Git" scheme="https://blog.zoutl.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git将代码添加到暂存区时忽略一些文件</title>
    <link href="https://blog.zoutl.cn/540.html"/>
    <id>https://blog.zoutl.cn/540.html</id>
    <published>2022-12-10T03:07:11.000Z</published>
    <updated>2022-12-10T07:40:57.087Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对于一些文件，如果我们不希望它们被Git提交的话，可以通过<code>.gitignore</code>文件配置规则，让这些文件不能添加到暂存区进而不能被提交到本地仓库</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-04-20_112748.png"></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h4><p>首先在仓库的根目录新建一个名为<code>.gitignore</code>的文件，我们可以在里面配置一些规则，让某些文件不能被提交</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221210123518045.png" alt="image-20221210123518045"></p><h4 id="规则说明"><a href="#规则说明" class="headerlink" title="规则说明"></a>规则说明</h4><h5 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h5><p>看规则有没有效果，可以通过<code>git status</code>命令来查看</p><h5 id="单个文件"><a href="#单个文件" class="headerlink" title="单个文件"></a>单个文件</h5><p>直接在<code>.gitignore</code>内加上这个文件的名称，例如我们要忽略根目录的<code>test.txt</code>文件，规则如下：（一行写一个规则，注释用<code>#</code>号）</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span> 忽略根目录下的test.txt</span><br><span class="line">test.txt</span><br><span class="line"></span><br><span class="line"><span class="params">#</span> 忽略根目录下的test文件夹内的1.txt</span><br><span class="line">test/1.txt</span><br></pre></td></tr></table></figure><h5 id="整个文件夹"><a href="#整个文件夹" class="headerlink" title="整个文件夹"></a>整个文件夹</h5><p>忽略根目录下的test文件夹</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test/</span><br></pre></td></tr></table></figure><h5 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h5><p>对于一些文件或文件夹，Git默认是不添加的，我们在忽略规则前面加上<code>!</code>即可</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span> 我们假定test文件夹是默认不添加的，但是我们需要添加test文件夹的test.txt</span><br><span class="line">!test/test.txt</span><br></pre></td></tr></table></figure><p>另外，如果规则配置了<code>忽略test文件夹</code>，那么上面的规则是不会生效的，文件夹的优先级比较大</p><h5 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h5><p>过滤某种类型文件，例如过滤掉所有的txt格式的文件</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;对于一些文件，如果我们不希望它们被Git提交的话，可以通过&lt;code&gt;.gitignore&lt;/code&gt;文件配置规则，让这些文件不能添加到暂</summary>
      
    
    
    
    <category term="版本控制" scheme="https://blog.zoutl.cn/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
    <category term="Git" scheme="https://blog.zoutl.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vant Weapp实现Area省市区选择组件的使用</title>
    <link href="https://blog.zoutl.cn/539.html"/>
    <id>https://blog.zoutl.cn/539.html</id>
    <published>2022-12-08T16:28:27.000Z</published>
    <updated>2022-12-10T14:28:51.344Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>官网建议省市区选择组件和弹出层组件配合使用，但是官网没有详细的例子，对于新手不是很友好，网上的博客也没有详细的教程，所以我把实现过程记录下来，方便以后使用</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><p>点击输入框会打开弹出层，在弹出层选择省市区并确认后，会把地址显示到输入框中</p><h4 id="引入省市区数据"><a href="#引入省市区数据" class="headerlink" title="引入省市区数据"></a>引入省市区数据</h4><p>通过npm命令安装官方默认的省市区数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vant/area-data</span><br></pre></td></tr></table></figure><p>在页面js文件中引用，在代码的最上面加入下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;areaList&#125; <span class="keyword">from</span> <span class="string">&#x27;@vant/area-data&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h4><p>需要引入的三个组件分别是：<code>输入框</code>、<code>弹出层</code>、<code>省市区选择</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;van-field&quot;</span>: <span class="string">&quot;@vant/weapp/field/index&quot;</span>,</span><br><span class="line"><span class="string">&quot;van-popup&quot;</span>: <span class="string">&quot;@vant/weapp/popup/index&quot;</span>,</span><br><span class="line"><span class="string">&quot;van-area&quot;</span>: <span class="string">&quot;@vant/weapp/area/index&quot;</span></span><br></pre></td></tr></table></figure><h4 id="页面wxml代码"><a href="#页面wxml代码" class="headerlink" title="页面wxml代码"></a>页面wxml代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">bindtap</span>=<span class="string">&quot;showPopup&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-field</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; area &#125;&#125;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择省市区&quot;</span> <span class="attr">label</span>=<span class="string">&quot;省市区&quot;</span> <span class="attr">title-width</span>=<span class="string">&quot;4em&quot;</span> <span class="attr">is-link</span>=<span class="string">&quot;true&quot;</span> <span class="attr">readonly</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span>江西省景德镇市珠山区新村街道</span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span> <span class="attr">show</span>=<span class="string">&quot;&#123;&#123; show &#125;&#125;&quot;</span> <span class="attr">bind:close</span>=<span class="string">&quot;onClose&quot;</span> <span class="attr">position</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-area</span> <span class="attr">area-list</span>=<span class="string">&quot;&#123;&#123; areaList &#125;&#125;&quot;</span> <span class="attr">columns-num</span>=<span class="string">&quot;&#123;&#123; 3 &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;选择省市区&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;value&#125;&#125;&quot;</span> <span class="attr">bind:cancel</span>=<span class="string">&quot;onCancel&quot;</span> <span class="attr">bind:confirm</span>=<span class="string">&quot;onConfirm&quot;</span> <span class="attr">bind:change</span>=<span class="string">&quot;onChange&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="页面js代码"><a href="#页面js代码" class="headerlink" title="页面js代码"></a>页面js代码</h4><p>页面初始数据如下，value的默认值是为了让省市区选择组件一开始就选择一个地址，<code>110101</code>是官方默认的省市区数据中北京市东城区的代码（省市区选择组件可以通过区地址确定省和市）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">data: &#123;</span><br><span class="line">address: &#x27;&#x27;,</span><br><span class="line">areaList,</span><br><span class="line">value: <span class="number">110101</span>,</span><br><span class="line">show: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面的一些事件如下，每个事件的作用看注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开弹出层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">showPopup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.setData(&#123;</span><br><span class="line"><span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭弹出层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onClose</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.setData(&#123;</span><br><span class="line"><span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确认选择省市区触发的事件: 关闭弹出层后设置value和address的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>e </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onConfirm</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.onClose();</span><br><span class="line"><span class="keyword">let</span> address = e.detail.values[<span class="number">0</span>].name + e.detail.values[<span class="number">1</span>].name + e.detail.values[<span class="number">2</span>].name;</span><br><span class="line"><span class="keyword">let</span> code = e.detail.values[<span class="number">2</span>].code;</span><br><span class="line"><span class="built_in">this</span>.setData(&#123;</span><br><span class="line"><span class="attr">value</span>: code,</span><br><span class="line"><span class="attr">address</span>: address</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击取消后触发的事件: 关闭弹出层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onCancel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.onClose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果动图"><a href="#效果动图" class="headerlink" title="效果动图"></a>效果动图</h4><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-09015808.gif" style="zoom: 50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;官网建议省市区选择组件和弹出层组件配合使用，但是官网没有详细的例子，对于新手不是很友好，网上的博客也没有详细的教程，所以我把实现过程记录下来</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="Vant Weapp" scheme="https://blog.zoutl.cn/tags/Vant-Weapp/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot配置本地文件映射路径</title>
    <link href="https://blog.zoutl.cn/538.html"/>
    <id>https://blog.zoutl.cn/538.html</id>
    <published>2022-12-07T19:03:20.000Z</published>
    <updated>2022-12-08T13:33:07.661Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Spring Boot项目只能访问项目static文件夹内的文件，如果想访问磁盘上的其它文件，就需要配置一下本地文件映射路径了</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>新建一个配置类，实现WebMvcConfigurerAdapter接口，然后在重写的方法中添加映射的路径和真实的文件路径，本地路径的格式有两种：（即下面代码的第二个字符串的内容）</p><ol><li>格式一：<code>file:E:\\data\\mall\\images\\swiper\\</code></li><li>格式二：<code>file:E:/data/mall/images/swiper/</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本地文件映射路径配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-08 3:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilePathConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/swiper/image/**&quot;</span>).addResourceLocations(<span class="string">&quot;file:E:\\data\\mall\\images\\swiper\\&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我的项目端口为<code>8080</code>，在本地路径<code>E:\data\mall\images\swiper</code>中有一张图片<code>1.jpeg</code>，所以我可以通过<code>http://localhost:8080/swiper/image/1.jpeg</code>访问这张图片，如果可以看到图片则说明配置成功了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;Spring Boot项目只能访问项目static文件夹内的文件，如果想访问磁盘上的其它文件，就需要配置一下本地文件映射路径了&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://blog.zoutl.cn/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://blog.zoutl.cn/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>让微信开发者工具支持Less</title>
    <link href="https://blog.zoutl.cn/537.html"/>
    <id>https://blog.zoutl.cn/537.html</id>
    <published>2022-12-07T16:21:39.000Z</published>
    <updated>2022-12-07T17:03:25.889Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Less可以让我们的代码更加简洁，尤其是可以使用嵌套代替层叠或与层叠结合使用</p><p>微信开发者工具要支持Less，需要安装一个名为<code>Easy LESS</code>的扩展</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="VS-Code安装扩展"><a href="#VS-Code安装扩展" class="headerlink" title="VS Code安装扩展"></a>VS Code安装扩展</h4><p>虽然微信开发者工具没有<code>Easy LESS</code>这个扩展，但是它支持我们从VS Code的已安装扩展中导入扩展，所以我们需要先在VS Code中安装这个扩展</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208003553940.png" alt="image-20221208003553940"></p><h4 id="导入扩展"><a href="#导入扩展" class="headerlink" title="导入扩展"></a>导入扩展</h4><p>打开微信开发者工具，去扩展页操作，如下图所示</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208004140355.png" alt="image-20221208004140355"></p><p>选择<code>mrcrowl.easy-less-1.7.4</code>这个文件夹，然后就开始安装了</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208004244518.png" alt="image-20221208004244518"></p><h4 id="修改扩展配置"><a href="#修改扩展配置" class="headerlink" title="修改扩展配置"></a>修改扩展配置</h4><p>首先打开<code>更多编辑器设置</code></p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208004737180.png" alt="image-20221208004737180"></p><p>搜索<code>Easy LESS</code>，打开该扩展的配置文件</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208004923478.png" alt="image-20221208004923478"></p><p>在下图的位置加上代码<code>&quot;outExt&quot;: &quot;.wxss&quot;</code>，然后保存，这段代码是为了告诉微信开发者工具：目标文件的后缀名是wxss，默认是css</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208005053798.png" alt="image-20221208005053798"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我创建了一个名为<code>search-bar.less</code>的文件，那么它的目标文件就是<code>search-bar.wxss</code>，在<code>search-bar.less</code>中输入代码并保存后<code>search-bar.wxss</code>会自动生成代码</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-08%20005823.gif"></p><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>Less的中文文档地址为：<a href="https://less.bootcss.com/">Less 快速入门 | Less.js 中文文档 - Less 中文网 (bootcss.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;Less可以让我们的代码更加简洁，尤其是可以使用嵌套代替层叠或与层叠结合使用&lt;/p&gt;
&lt;p&gt;微信开发者工具要支持Less，需要安装一个名为&lt;</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
