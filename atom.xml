<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeDao&#39;s Blog</title>
  
  
  <link href="https://blog.zoutl.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.zoutl.cn/"/>
  <updated>2023-01-22T08:10:37.654Z</updated>
  <id>https://blog.zoutl.cn/</id>
  
  <author>
    <name>LeDao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>制作Windows 10的U盘启动盘重装系统</title>
    <link href="https://blog.zoutl.cn/563.html"/>
    <id>https://blog.zoutl.cn/563.html</id>
    <published>2023-01-22T05:50:39.000Z</published>
    <updated>2023-01-22T08:10:37.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="制作U盘启动盘"><a href="#制作U盘启动盘" class="headerlink" title="制作U盘启动盘"></a>制作U盘启动盘</h3><h4 id="下载Rufus"><a href="#下载Rufus" class="headerlink" title="下载Rufus"></a>下载Rufus</h4><p>下载地址：<a href="https://rufus.ie/zh/">Rufus - 轻松创建USB启动盘</a></p><p>Rufus用来将下载好的ISO镜像文件制作成U盘启动盘，下载好后直接打开即可运行</p><h4 id="下载ISO镜像文件"><a href="#下载ISO镜像文件" class="headerlink" title="下载ISO镜像文件"></a>下载ISO镜像文件</h4><p>下载地址：<a href="https://msdn.itellyou.cn/">MSDN, 我告诉你 - 做一个安静的工具站 (itellyou.cn)</a></p><p>在这里可以找到各种版本的Windows系统，<code>x64</code>是64位系统，<code>x86</code>是32位，我们个人安装的是<code>消费者版本（consumer editions）</code>的系统，点击右边的详细信息复制ed2k链接后使用迅雷下载ISO镜像文件</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230122151542100.png" alt="image-20230122151542100"></p><h4 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a>开始制作</h4><p>打开Rufus后会自动检测插入的U盘，U盘的容量最好在8G及以上，<font color="#dd0000">开始制作前U盘会被格式化，如果有重要文件请先备份</font></p><p>设备选项的配置说明查看下表，格式化选项不用修改，状态是准备就绪就可以开始制作了</p><table><thead><tr><th align="center">配置</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">设备</td><td align="center">选择要制作成启动盘的U盘，会自动选择</td></tr><tr><td align="center">引导类型选择</td><td align="center">选择<code>镜像文件</code>，然后点击右边的<code>选择</code>按钮后选中下载好的镜像文件</td></tr><tr><td align="center">镜像选择</td><td align="center">默认选择<code>标准Windows安装</code>就行</td></tr><tr><td align="center">分区类型</td><td align="center">磁盘的分区类型，这里默认选<code>GPT</code>就行</td></tr><tr><td align="center">目标系统类型</td><td align="center">只有一个选项<code>UEFI（非CSM）</code></td></tr></tbody></table><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230122150928547.png" alt="image-20230122150928547" style="zoom:50%;" /><h3 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h3><h4 id="进入安装界面"><a href="#进入安装界面" class="headerlink" title="进入安装界面"></a>进入安装界面</h4><p>开机前将U盘插入USB3.0的插口中（安装会比USB2.0快），我安装时会自动进入安装界面，如果不是自动的，那么就需要使用快捷键从U盘启动然后安装系统即可，具体用什么快捷键查看博客：<a href="https://zhuanlan.zhihu.com/p/510003495">各种品牌的电脑从U盘启动的快捷键大全 - 知乎 (zhihu.com)</a>，选择安装<code>专业版</code></p><h4 id="转换磁盘格式为GPT"><a href="#转换磁盘格式为GPT" class="headerlink" title="转换磁盘格式为GPT"></a>转换磁盘格式为GPT</h4><p>在选择系统盘时，如果提示：Windows无法安装到这个磁盘，选中的磁盘具有MBR分区表，那么就需要转换磁盘格式为GPT，但是会清除所有磁盘，</p><p>按下<code>Shift+F10</code>组合键打开cmd命令行窗口，依次输入下图的命令即可将磁盘格式转换为GPT，关闭cmd后刷新一下就可以继续安装系统了</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230122154434656.png" alt="image-20230122154434656"></p><h3 id="激活系统"><a href="#激活系统" class="headerlink" title="激活系统"></a>激活系统</h3><p>右键点击左下角的开始菜单，选择<code>以管理员身份运行的Windows PowerShell</code>，依次输入下面命令（按回车键执行）即可激活系统，可能会过一会儿才会提示激活成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">slmgr /skms kms.03k.org</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;制作U盘启动盘&quot;&gt;&lt;a href=&quot;#制作U盘启动盘&quot; class=&quot;headerlink&quot; title=&quot;制作U盘启动盘&quot;&gt;&lt;/a&gt;制作U盘启动盘&lt;/h3&gt;&lt;h4 id=&quot;下载Rufus&quot;&gt;&lt;a href=&quot;#下载Rufus&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="其它" scheme="https://blog.zoutl.cn/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="Windows系统" scheme="https://blog.zoutl.cn/tags/Windows%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>安装多个版本的JDK并切换</title>
    <link href="https://blog.zoutl.cn/562.html"/>
    <id>https://blog.zoutl.cn/562.html</id>
    <published>2023-01-21T12:03:38.000Z</published>
    <updated>2023-01-21T14:42:14.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>有时候需要学习一下其它版本的JDK，那么就需要安装多个JDK了，然后通过修改环境变量来实现切换JDK的版本，我这里安装的是<code>JDK1.8</code>和<code>JDK11</code>两个版本，继续安装其它的版本也是一样的步骤</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><table><thead><tr><th align="center">版本</th><th align="center">阿里云盘链接</th></tr></thead><tbody><tr><td align="center"><code>JDK1.8.0_202</code></td><td align="center"><a href="https://www.aliyundrive.com/s/Tx9puSr4LJ9">阿里云盘分享 (aliyundrive.com)</a></td></tr><tr><td align="center"><code>JDK11.0.18</code></td><td align="center"><a href="https://www.aliyundrive.com/s/ZoV6gGPeKjZ">阿里云盘分享 (aliyundrive.com)</a></td></tr></tbody></table><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p><code>JAVA_HOME</code>直接引用要切换的JDK的安装路径，<code>JAVA_HOME_8</code>和<code>JAVA_HOME_11</code>是JDK的安装路径</p><p><code>Path</code>变量的设置和博客<a href="https://blog.zoutl.cn/2.html">Java 环境配置 | LeDao’s Blog (zoutl.cn)</a>的一样就行，<code>Path</code>变量的设置要放在第一行</p><table><thead><tr><th align="center">变量名</th><th align="center">变量值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>JAVA_HOME</code></td><td align="center"><code>%JAVA_HOME_8%</code></td><td align="center">用于切换JDK版本</td></tr><tr><td align="center"><code>JAVA_HOME_8</code></td><td align="center"><code>D:\Java\jdk1.8.0_202</code></td><td align="center">jdk1.8.0_202的安装路径</td></tr><tr><td align="center"><code>JAVA_HOME_11</code></td><td align="center"><code>D:\Java\jdk11.0.18</code></td><td align="center">dk11.0.18的安装路径</td></tr></tbody></table><h3 id="切换JDK"><a href="#切换JDK" class="headerlink" title="切换JDK"></a>切换JDK</h3><p>直接修改<code>JAVA_HOME</code>这个变量，修改成<code>%JAVA_HOME_8%</code>或<code>%JAVA_HOME_11%</code>就可以切换了，切换后要重新打开cmd命令窗口，不然用的还是之前的环境变量</p><h3 id="修改IntelliJ-IDEA配置"><a href="#修改IntelliJ-IDEA配置" class="headerlink" title="修改IntelliJ IDEA配置"></a>修改IntelliJ IDEA配置</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>IntelliJ IDEA中使用的Java版本和本地环境变量配置的Java版本没有关系，以IntelliJ IDEA的Java版本为准</p><h4 id="pom-xml配置文件"><a href="#pom-xml配置文件" class="headerlink" title="pom.xml配置文件"></a>pom.xml配置文件</h4><p>首先修改<code>pom.xml</code>文件的Java版本，这里关系到写代码时是否提示出错，例如：在Java1.8中写Java11的var类型会提示有错误</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230121220504410.png" alt="image-20230121220504410"></p><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><p>然后修改运行项目的Java版本（使用<code>CTRL+ALT+SHIFT+S</code>组合快捷键打开项目的配置），版本不同的话运行时会出错，例如：Java11的var类型在Java1.8中运行会报错</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230121220559531.png" alt="image-20230121220559531"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;有时候需要学习一下其它版本的JDK，那么就需要安装多个JDK了，然后通过修改环境变量来实现切换JDK的版本，我这里安装的是&lt;code&gt;JDK</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://blog.zoutl.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript的安装和使用</title>
    <link href="https://blog.zoutl.cn/561.html"/>
    <id>https://blog.zoutl.cn/561.html</id>
    <published>2023-01-15T01:37:52.000Z</published>
    <updated>2023-01-16T11:19:00.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>TypeScript 是JavaScript的一个超集，支持ES6标准，由微软开发的自由和开源的编程语言，TypeScript的设计目标是开发大型应用，它可以编译成纯JavaScript，编译出来的JavaScript可以运行在任何浏览器上</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>我是使用npm命令安装，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>查看是否安装成功，输入下面命令查看版本号，出现版本号说明安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>首先新建一个名为<code>test.ts</code>的文件，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message: string = <span class="string">&quot;Hello World!!&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br></pre></td></tr></table></figure><p>在上面ts文件所在文件夹打开cmd命令窗口，输入下面命令编译这个ts文件，会在该文件所在文件夹生成一个<code>test.js</code>的文件（用来运行，而不是运行ts文件，ts文件只是用来编译生成js文件的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc test.ts</span><br></pre></td></tr></table></figure><p>使用Node.js的命令运行js文件，会输出<code>Hello World!!</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node test.js</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230115112252147.png" alt="image-20230115112252147"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>TypeScript是有一个名为<code>tsconfig.json</code>的配置文件的<font color="#dd0000">（这个配置文件只对自动编译有用）</font>，这个配置文件放在项目根目录下，可以自己手动新建，也可以使用下面命令自动生成，建议使用命令自动生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>自动生成的配置文件内容如下（中文是我使用<code>谷歌翻译</code>翻译的），<code>rootDir</code>（ts文件所在目录的路径）和<code>outDir</code>（编译生成的js文件存放的目录路径）两个配置默认是注释掉的，我们把它们的注释删掉并改成自己的路径，（<code>.</code>表示当前目录，<code>..</code>表示上一级目录）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">/* Visit https://aka.ms/tsconfig to read more about this file */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Projects */</span></span><br><span class="line">    <span class="comment">// &quot;incremental&quot;: true,                              /* 保存 .tsbuildinfo 文件以允许对项目进行增量编译。 */</span></span><br><span class="line">    <span class="comment">// &quot;composite&quot;: true,                                /* 启用允许 TypeScript 项目与项目引用一起使用的约束。 */</span></span><br><span class="line">    <span class="comment">// &quot;tsBuildInfoFile&quot;: &quot;./.tsbuildinfo&quot;,              /* 指定 .tsbuildinfo 增量编译文件的路径。 */</span></span><br><span class="line">    <span class="comment">// &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* 在引用复合项目时禁用首选源文件而不是声明文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;disableSolutionSearching&quot;: true,                 /* 编辑时从多项目参考检查中选择一个项目。 */</span></span><br><span class="line">    <span class="comment">// &quot;disableReferencedProjectLoad&quot;: true,             /* 减少 TypeScript 自动加载的项目数量。 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Language and Environment */</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es2016&quot;</span>,                                  <span class="comment">/* 为发出的 JavaScript 设置 JavaScript 语言版本并包含兼容的库声明。 */</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [],                                        /* 指定一组描述目标运行时环境的捆绑库声明文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;jsx&quot;: &quot;preserve&quot;,                                /* 指定生成的 JSX 代码。 */</span></span><br><span class="line">    <span class="comment">// &quot;experimentalDecorators&quot;: true,                   /* 启用对 TC39 阶段 2 草案装饰器的实验性支持。 */</span></span><br><span class="line">    <span class="comment">// &quot;emitDecoratorMetadata&quot;: true,                    /* 为源文件中的修饰声明发出设计类型元数据。 */</span></span><br><span class="line">    <span class="comment">// &quot;jsxFactory&quot;: &quot;&quot;,                                 /* 指定在以 React JSX emit 为目标时使用的 JSX 工厂函数，例如&#x27;React.createElement&#x27; 或 &#x27;h&#x27;。 */</span></span><br><span class="line">    <span class="comment">// &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* 在定位 React JSX emit 时指定用于片段的 JSX 片段引用，例如&#x27;React.Fragment&#x27; 或 &#x27;Fragment&#x27;。 */</span></span><br><span class="line">    <span class="comment">// &quot;jsxImportSource&quot;: &quot;&quot;,                            /* 指定模块说明符，用于在使用“jsx: react-jsx*”时导入 JSX 工厂函数。 */</span></span><br><span class="line">    <span class="comment">// &quot;reactNamespace&quot;: &quot;&quot;,                             /* 指定为“createElement”调用的对象。这仅适用于针对“反应”JSX 发出的情况。 */</span></span><br><span class="line">    <span class="comment">// &quot;noLib&quot;: true,                                    /* 禁用包括任何库文件，包括默认的 lib.d.ts。 */</span></span><br><span class="line">    <span class="comment">// &quot;useDefineForClassFields&quot;: true,                  /* 发出符合 ECMAScript 标准的类字段。 */</span></span><br><span class="line">    <span class="comment">// &quot;moduleDetection&quot;: &quot;auto&quot;,                        /* 控制使用什么方法来检测模块格式的 JS 文件。 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Modules */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,                                <span class="comment">/* 指定生成的模块代码。 */</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;./ts&quot;</span>,                                   <span class="comment">/* 在源文件中指定根文件夹。 */</span></span><br><span class="line">    <span class="comment">// &quot;moduleResolution&quot;: &quot;node&quot;,                       /* 指定 TypeScript 如何从给定的模块说明符查找文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* 指定基本目录以解析非相对模块名称。 */</span></span><br><span class="line">    <span class="comment">// &quot;paths&quot;: &#123;&#125;,                                      /* 指定一组将导入重新映射到其他查找位置的条目。 */</span></span><br><span class="line">    <span class="comment">// &quot;rootDirs&quot;: [],                                   /* 解析模块时允许将多个文件夹视为一个文件夹。 */</span></span><br><span class="line">    <span class="comment">// &quot;typeRoots&quot;: [],                                  /* 指定多个文件夹，其行为类似于“./node_modules/@types”。 */</span></span><br><span class="line">    <span class="comment">// &quot;types&quot;: [],                                      /* 指定要包含的类型包名称而不在源文件中引用。 */</span></span><br><span class="line">    <span class="comment">// &quot;allowUmdGlobalAccess&quot;: true,                     /* 允许从模块访问 UMD 全局变量。 */</span></span><br><span class="line">    <span class="comment">// &quot;moduleSuffixes&quot;: [],                             /* 解析模块时要搜索的文件名后缀列表。 */</span></span><br><span class="line">    <span class="comment">// &quot;resolveJsonModule&quot;: true,                        /* 启用导入 .json 文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;noResolve&quot;: true,                                /* 禁止“import”、“require”或“&lt;reference&gt;”扩展 TypeScript 应添加到项目中的文件数量。 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JavaScript Support */</span></span><br><span class="line">    <span class="comment">// &quot;allowJs&quot;: true,                                  /* 允许 JavaScript 文件成为您程序的一部分。使用“checkJS”选项从这些文件中获取错误。 */</span></span><br><span class="line">    <span class="comment">// &quot;checkJs&quot;: true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。 */</span></span><br><span class="line">    <span class="comment">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* 指定用于检查“node_modules”中的 JavaScript 文件的最大文件夹深度。仅适用于“allowJs”。 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Emit */</span></span><br><span class="line">    <span class="comment">// &quot;declaration&quot;: true,                              /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;declarationMap&quot;: true,                           /* 为 d.ts 文件创建源映射。 */</span></span><br><span class="line">    <span class="comment">// &quot;emitDeclarationOnly&quot;: true,                      /* 只输出 d.ts 文件，不输出 JavaScript 文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;sourceMap&quot;: true,                                /* 为发出的 JavaScript 文件创建源映射文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;./&quot;,                                  /* 指定一个将所有输出捆绑到一个 JavaScript 文件中的文件。如果 &#x27;declaration&#x27; 为真，则还指定一个捆绑所有 .d.ts 输出的文件。 */</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;./js&quot;</span>,                                    <span class="comment">/* 为所有发出的文件指定一个输出文件夹。 */</span></span><br><span class="line">    <span class="comment">// &quot;removeComments&quot;: true,                           /* 禁止发表评论。 */</span></span><br><span class="line">    <span class="comment">// &quot;noEmit&quot;: true,                                   /* 禁止从编译中发出文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;importHelpers&quot;: true,                            /* 允许每个项目从 tslib 导入一次辅助函数，而不是每个文件都包含它们。 */</span></span><br><span class="line">    <span class="comment">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* 为仅用于类型的导入指定发出/检查行为。 */</span></span><br><span class="line">    <span class="comment">// &quot;downlevelIteration&quot;: true,                       /* 为迭代发出更合规但冗长且性能较低的 JavaScript。 */</span></span><br><span class="line">    <span class="comment">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* 指定调试器查找参考源代码的根路径。 */</span></span><br><span class="line">    <span class="comment">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* 指定调试器应该定位映射文件而不是生成位置的位置。 */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSourceMap&quot;: true,                          /* 在发出的 JavaScript 中包含 sourcemap 文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSources&quot;: true,                            /* 在发出的 JavaScript 中的 sourcemaps 中包含源代码。 */</span></span><br><span class="line">    <span class="comment">// &quot;emitBOM&quot;: true,                                  /* 在输出文件的开头发出 UTF-8 字节顺序标记 (BOM)。 */</span></span><br><span class="line">    <span class="comment">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* 设置发出文件的换行符。 */</span></span><br><span class="line">    <span class="comment">// &quot;stripInternal&quot;: true,                            /* 禁用发出在其 JSDoc 注释中具有“@internal”的声明。 */</span></span><br><span class="line">    <span class="comment">// &quot;noEmitHelpers&quot;: true,                            /* 禁止在编译输出中生成自定义辅助函数，如“__extends”。 */</span></span><br><span class="line">    <span class="comment">// &quot;noEmitOnError&quot;: true,                            /* 如果报告任何类型检查错误，则禁用发出文件。 */</span></span><br><span class="line">    <span class="comment">// &quot;preserveConstEnums&quot;: true,                       /* 禁止擦除生成代码中的“const enum”声明。 */</span></span><br><span class="line">    <span class="comment">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* 指定生成的声明文件的输出目录。 */</span></span><br><span class="line">    <span class="comment">// &quot;preserveValueImports&quot;: true,                     /* 在 JavaScript 输出中保留未使用的导入值，否则这些值将被删除。 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Interop Constraints */</span></span><br><span class="line">    <span class="comment">// &quot;isolatedModules&quot;: true,                          /* 确保每个文件都可以安全地转译而不依赖于其他导入。 */</span></span><br><span class="line">    <span class="comment">// &quot;allowSyntheticDefaultImports&quot;: true,             /* 当模块没有默认导出时，允许“从 y 导入 x”。 */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,                             <span class="comment">/* 发出额外的 JavaScript 以简化对导入 CommonJS 模块的支持。这会启用“allowSyntheticDefaultImports”以实现类型兼容性。 */</span></span><br><span class="line">    <span class="comment">// &quot;preserveSymlinks&quot;: true,                         /* 禁用将符号链接解析为其真实路径。这与节点中的相同标志相关。 */</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,            <span class="comment">/* 确保外壳在进口中是正确的。 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Type Checking */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,                                      <span class="comment">/* 启用所有严格的类型检查选项。 */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitAny&quot;: true,                            /* 为具有隐含“任何”类型的表达式和声明启用错误报告。 */</span></span><br><span class="line">    <span class="comment">// &quot;strictNullChecks&quot;: true,                         /* 进行类型检查时，请考虑“null”和“undefined”。 */</span></span><br><span class="line">    <span class="comment">// &quot;strictFunctionTypes&quot;: true,                      /* 分配函数时，检查以确保参数和返回值是子类型兼容的。 */</span></span><br><span class="line">    <span class="comment">// &quot;strictBindCallApply&quot;: true,                      /* 检查“绑定”、“调用”和“应用”方法的参数是否与原始函数匹配。 */</span></span><br><span class="line">    <span class="comment">// &quot;strictPropertyInitialization&quot;: true,             /* 检查已声明但未在构造函数中设置的类属性。 */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitThis&quot;: true,                           /* 当“this”的类型为“any”时启用错误报告。 */</span></span><br><span class="line">    <span class="comment">// &quot;useUnknownInCatchVariables&quot;: true,               /* 默认 catch 子句变量为“未知”而不是“任何”。 */</span></span><br><span class="line">    <span class="comment">// &quot;alwaysStrict&quot;: true,                             /* 确保始终发出“使用严格”。 */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedLocals&quot;: true,                           /* 未读取局部变量时启用错误报告。 */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedParameters&quot;: true,                       /* 未读取函数参数时引发错误。 */</span></span><br><span class="line">    <span class="comment">// &quot;exactOptionalPropertyTypes&quot;: true,               /* 按照书面解释可选属性类型，而不是添加“未定义”。 */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitReturns&quot;: true,                        /* 为未在函数中显式返回的代码路径启用错误报告。 */</span></span><br><span class="line">    <span class="comment">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* 在 switch 语句中为 fallthrough cases 启用错误报告。 */</span></span><br><span class="line">    <span class="comment">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* 使用索引访问时，将“未定义”添加到类型。 */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitOverride&quot;: true,                       /* 确保派生类中的覆盖成员标有覆盖修饰符。 */</span></span><br><span class="line">    <span class="comment">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* 强制对使用索引类型声明的键使用索引访问器。 */</span></span><br><span class="line">    <span class="comment">// &quot;allowUnusedLabels&quot;: true,                        /* 禁用未使用标签的错误报告。 */</span></span><br><span class="line">    <span class="comment">// &quot;allowUnreachableCode&quot;: true,                     /* 禁用无法访问代码的错误报告。 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Completeness */</span></span><br><span class="line">    <span class="comment">// &quot;skipDefaultLibCheck&quot;: true,                      /* 跳过类型检查 TypeScript 附带的 .d.ts 文件。 */</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>                                 <span class="comment">/* 跳过类型检查所有 .d.ts 文件。 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就可以使用下面命令让ts文件自动编译了，而不是像上面那样手动编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --w</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>如果要使用ts文件中的函数，则引入它编译后生成的js文件，然后就可以使用了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用export关键字"><a href="#使用export关键字" class="headerlink" title="使用export关键字"></a>使用export关键字</h3><p>如果使用了<code>export</code>关键字以供其它ts文件引用，需要在引用js文件的代码上面加上<code>&lt;script&gt;exports = &#123;&#125;&lt;/script&gt;</code>，不然会报错，报错信息为<code>Uncaught ReferenceError: exports is not defined</code>，示例代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加上的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">exports</span> = &#123;&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;TypeScript 是JavaScript的一个超集，支持ES6标准，由微软开发的自由和开源的编程语言，TypeScript的设计目标是开</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://blog.zoutl.cn/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS中margin和padding的区别</title>
    <link href="https://blog.zoutl.cn/560.html"/>
    <id>https://blog.zoutl.cn/560.html</id>
    <published>2023-01-14T17:28:48.000Z</published>
    <updated>2023-01-15T15:43:56.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>margin对<code>整个标签</code>起作用，是外边距；而padding对<code>标签的内容</code>起作用，是内边距</p><p>下图中<code>div2</code>使用了margin和padding，margin是<code>div2</code>和<code>div1</code>的边距，padding是<code>div2</code>和<code>div3</code>的边距</p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230115233758713.png" alt="image-20230115233758713" style="zoom: 50%;" /><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h4><table><thead><tr><th align="center">语法结构</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>margin-left:10px</code></td><td align="center">左外边距</td></tr><tr><td align="center"><code>margin-right:10px</code></td><td align="center">右外边距</td></tr><tr><td align="center"><code>margin-top:10px</code></td><td align="center">上外边距</td></tr><tr><td align="center"><code>margin-bottom:10px</code></td><td align="center">下外边距</td></tr><tr><td align="center"><code>margin:10px</code></td><td align="center">四边统一外边距</td></tr><tr><td align="center"><code>margin:10px 20px</code></td><td align="center">上下、左右外边距</td></tr><tr><td align="center"><code>margin:10px 20px 30px</code></td><td align="center">上、左右、下外边距</td></tr><tr><td align="center"><code>margin:10px 20px 30px 40px</code></td><td align="center">上、右、下、左外边距</td></tr></tbody></table><h4 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h4><table><thead><tr><th align="center">语法结构</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>padding-left:10px</code></td><td align="center">左内边距</td></tr><tr><td align="center"><code>padding-right:10px</code></td><td align="center">右内边距</td></tr><tr><td align="center"><code>padding-top:10px</code></td><td align="center">上内边距</td></tr><tr><td align="center"><code>padding-bottom:10px</code></td><td align="center">下内边距</td></tr><tr><td align="center"><code>padding:10px</code></td><td align="center">四边统一内边距</td></tr><tr><td align="center"><code>padding:10px 20px</code></td><td align="center">上下、左右内边距</td></tr><tr><td align="center"><code>padding:10px 20px 30px</code></td><td align="center">上、左右、下内边距</td></tr><tr><td align="center"><code>padding:10px 20px 30px 40px</code></td><td align="center">上、右、下、左内边距</td></tr></tbody></table><h4 id="属性可能取的值"><a href="#属性可能取的值" class="headerlink" title="属性可能取的值"></a>属性可能取的值</h4><table><thead><tr><th align="center">单位</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>length</code></td><td align="center">规定具体单位记的内边距长度</td></tr><tr><td align="center"><code>%</code></td><td align="center">基于父元素的宽度的内边距的长度</td></tr><tr><td align="center"><code>auto</code></td><td align="center">浏览器计算内边距</td></tr><tr><td align="center"><code>inherit</code></td><td align="center">规定应该从父元素继承内边距</td></tr></tbody></table><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS中margin和padding的区别<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.boderOuter</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.boderInter1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">2px</span> dotted blue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.boderInter2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">2px</span> dotted blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">0px</span> <span class="number">6px</span> <span class="number">6px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boderOuter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boderInter1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boderOuter&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boderInter2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>222<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h4><p>通过两个<code>div</code>区块对比可以看出：margin对整个标签有效，padding则对起内容有效</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230115022424158.png" alt="image-20230115022424158"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h3&gt;&lt;p&gt;margin对&lt;code&gt;整个标签&lt;/code&gt;起作用，是外边距；而padding对&lt;code&gt;标签的内容&lt;/code&gt;起作用，是内边距&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://blog.zoutl.cn/tags/HTML/"/>
    
    <category term="CSS" scheme="https://blog.zoutl.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>使用JSON Server快速搭建服务端接口</title>
    <link href="https://blog.zoutl.cn/559.html"/>
    <id>https://blog.zoutl.cn/559.html</id>
    <published>2023-01-13T04:50:15.000Z</published>
    <updated>2023-01-14T23:02:31.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>JSON Server的作用是用来模拟服务端接口数据，一般用在前后端分离后，前端人员可以不依赖API开发，而在本地搭建一个JSON服务，自己产生测试数据</p><h3 id="安装和启动"><a href="#安装和启动" class="headerlink" title="安装和启动"></a>安装和启动</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用npm安装，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>要在JSON数据文件所在的文件夹打开cmd命令窗口并使用以下命令，启动命令如下所示，默认端口是<code>3000</code>，使用的数据文件是<code>db.json</code>（没有这个文件会自动新建，名称可以自己改掉）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server --watch db.json</span><br></pre></td></tr></table></figure><p>如果要修改端口加上<code>--port</code>参数，后面接端口号，下面命令的端口号是<code>1314</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server --watch --port 1314 db.json</span><br></pre></td></tr></table></figure><p>相关启动参数如下表所示</p><table><thead><tr><th align="center">参数</th><th align="center">简写</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>--config</code></td><td align="center"><code>-c</code></td><td align="center">指定配置文件</td><td align="center">[默认值: “json-server.json”]</td></tr><tr><td align="center"><code>--port</code></td><td align="center"><code>-p</code></td><td align="center">设置端口 [默认值: 3000]</td><td align="center">Number</td></tr><tr><td align="center"><code>--host</code></td><td align="center"><code>-H</code></td><td align="center">设置域 [默认值: “0.0.0.0”]</td><td align="center">String</td></tr><tr><td align="center"><code>--watch</code></td><td align="center"><code>-w</code></td><td align="center">Watch file(s)</td><td align="center">是否监听</td></tr><tr><td align="center"><code>--routes</code></td><td align="center"><code>-r</code></td><td align="center">指定自定义路由</td><td align="center"></td></tr><tr><td align="center"><code>--middlewares</code></td><td align="center"><code>-m</code></td><td align="center">指定中间件 files</td><td align="center">[数组]</td></tr><tr><td align="center"><code>--static</code></td><td align="center"><code>-s</code></td><td align="center">Set static files directory</td><td align="center">静态目录,类比：express的静态目录</td></tr><tr><td align="center"><code>--readonly</code></td><td align="center"><code>--ro</code></td><td align="center">Allow only GET requests [布尔]</td><td align="center"></td></tr><tr><td align="center"><code>--nocors</code></td><td align="center"><code>--nc</code></td><td align="center">Disable Cross-Origin Resource Sharing [布尔]</td><td align="center"></td></tr><tr><td align="center"><code>--no</code></td><td align="center"><code>gzip</code></td><td align="center">--ng Disable GZIP Content-Encoding [布尔]</td><td align="center"></td></tr><tr><td align="center"><code>--snapshots</code></td><td align="center"><code>-S</code></td><td align="center">Set snapshots directory [默认值: “.”]</td><td align="center"></td></tr><tr><td align="center"><code>--delay</code></td><td align="center"><code>-d</code></td><td align="center">Add delay to responses (ms)</td><td align="center"></td></tr><tr><td align="center"><code>--id</code></td><td align="center"><code>-i</code></td><td align="center">Set database id property (e.g. _id) [默认值: “id”]</td><td align="center"></td></tr><tr><td align="center"><code>--foreignKeySuffix</code></td><td align="center"><code>--</code></td><td align="center">fks Set foreign key suffix (e.g. _id as in post_id)</td><td align="center">[默认值: “Id”]</td></tr><tr><td align="center"><code>--help</code></td><td align="center"><code>-h</code></td><td align="center">显示帮助信息</td><td align="center">[布尔]</td></tr><tr><td align="center"><code>--version</code></td><td align="center"><code>-v</code></td><td align="center">显示版本号</td><td align="center">[布尔]</td></tr></tbody></table><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h4><p>要测试的数据文件<code>db.json</code>内容如下，<code>students</code>和<code>classes</code>是复数形式，学生的班级id用<code>classId</code>表示，班级的学生们的id用<code>studentIds</code>表示，不然关联查询可能会有问题</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;students&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小林&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;22&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;21&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;classes&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程1班&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;studentIds&quot;</span>: [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;4&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程2班&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;studentIds&quot;</span>: [<span class="string">&quot;2&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程3班&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;studentIds&quot;</span>: [<span class="string">&quot;3&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查询使用的是<code>GET</code>请求</p><blockquote><p>查询全部学生</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/students</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小林&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;22&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;21&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>根据id查询学生，RestFul风格，默认是根据id查询</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/students/1</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据id查询学生，参数直接拼接在url中</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/students?id=2</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小林&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;22&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>分页查询，<code>_page</code>是当前页，<code>_limit</code>是每页数据的数量（默认是10）</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/students?_page=1&amp;_limit=2</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小林&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;22&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>查询学生（排序），<code>_sort</code>是要排序的字段，<code>_order</code>是排序的方式（默认是升序，也就是ASC）</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/students?_sort=id&amp;_order=desc</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;21&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小林&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;22&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>关联查询（检索上级数据），根据学生数据里的班级id检索班级信息，<code>class</code>是<code>classId</code>去掉<code>Id</code>后的结果</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/students?_expand=class</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;class&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程1班&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;studentIds&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小林&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;22&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;class&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程2班&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;studentIds&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;2&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;21&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;class&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程3班&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;studentIds&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;3&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;class&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程1班&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;studentIds&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>关联查询（检索下级数据），根据班级数据里的学生id检索学生信息</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/classes?_embed=students</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程1班&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;studentIds&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;4&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;students&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程2班&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;studentIds&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;2&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;students&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小林&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;22&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;软件工程3班&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;studentIds&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;3&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;students&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;21&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;classId&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p>添加使用的是<code>POST</code>请求，要使用HTTP请求工具发送请求（我使用的是<code>Apifox</code>）</p><p>参数不能直接拼接在url中要放在body中（全部参数都加上，包括id，id不要和前面重复），我这里JSON的数据类型都是String而不是Number（包括id），主要是为了关联查询不出问题</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/students</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230113164645049.png" alt="image-20230113164645049"></p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>修改使用的是<code>PATCH</code>请求，参数不能直接拼接在url中要放在body中，但是id要放在url中（RestFul风格）</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/students/5</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230113164723366.png" alt="image-20230113164723366"></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>修改使用的是<code>DELETE</code>请求，id直接放在url中（RestFul风格）</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/students/5</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230113164813597.png" alt="image-20230113164813597"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;JSON Server的作用是用来模拟服务端接口数据，一般用在前后端分离后，前端人员可以不依赖API开发，而在本地搭建一个JSON服务，自己</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="json-server" scheme="https://blog.zoutl.cn/tags/json-server/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Office Excel隔行设置背景颜色</title>
    <link href="https://blog.zoutl.cn/558.html"/>
    <id>https://blog.zoutl.cn/558.html</id>
    <published>2023-01-11T20:37:55.000Z</published>
    <updated>2023-01-12T01:57:29.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>隔行设置背景颜色可以让Excel表格更易读，平时数据少的时候可以<code>按住CTRL键同时使用鼠标</code>选中要设置背景颜色的单元格（虽然简单，但是操作起来容易出现漏选或多选），所以最好还是通过设置规则来实现隔行设置背景颜色比较好</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="选中单元格"><a href="#选中单元格" class="headerlink" title="选中单元格"></a>选中单元格</h4><p>首先选中所有要隔行设置背景颜色的单元格，不用选上表头</p><h4 id="新建规则"><a href="#新建规则" class="headerlink" title="新建规则"></a>新建规则</h4><p>根据下图打开<code>新建规则</code>界面</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230112045105584.png" alt="image-20230112045105584"></p><p>根据下图填写规则公式和选择背景颜色及其它样式，最后点击确定即可</p><p>关于公式<code>=MOD(ROW(),2)=0</code>的解释：行数除以2取余，余数为0（这里的行数从表头开始数，也就是说表头是第1行），该公式的取反公式为：<code>=MOD(ROW(),2)=1</code>，用哪个公式根据自己的情况选择</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230112050003101.png" alt="image-20230112050003101"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;隔行设置背景颜色可以让Excel表格更易读，平时数据少的时候可以&lt;code&gt;按住CTRL键同时使用鼠标&lt;/code&gt;选中要设置背景颜色的单元</summary>
      
    
    
    
    <category term="其它" scheme="https://blog.zoutl.cn/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="Microsoft Office" scheme="https://blog.zoutl.cn/tags/Microsoft-Office/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript使用Promise保证程序按顺序执行（上面的代码执行完才会执行下面的）</title>
    <link href="https://blog.zoutl.cn/557.html"/>
    <id>https://blog.zoutl.cn/557.html</id>
    <published>2023-01-10T18:42:59.000Z</published>
    <updated>2023-01-11T14:55:38.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>有时候下面的代码有参数需要从上面执行的异步函数中获取，但是当异步函数没有执行完时，下面的代码就执行完了（此时参数为空），从而出错</p><p>由于JavaScript是单线程的，所以代码的执行是同步的，代码从上至下执行，这里贴一下JavaScript代码的执行顺序：（原因可以查看下面的JavaScript运行机制）</p><ol><li>同步代码，包括promise的构造函数</li><li>promise.then()中的代码</li><li>setTimeout函数，关于该函数的等待时间：最小值不得小于4毫秒，如果低于这个值，则默认是4毫秒</li></ol><h3 id="JavaScript运行机制"><a href="#JavaScript运行机制" class="headerlink" title="JavaScript运行机制"></a>JavaScript运行机制</h3><p>同步代码（包括promise的构造函数）在执行栈中执行，同时异步任务按顺序进入异步任务队列（队列是<code>先进先出</code>的），然后将异步任务分配到微任务队列（nextTick，Promise.then()）和任务队列（DOM，AJAX，setTimeout，setImmediate）</p><p>同步代码执行完毕后，微任务队列中的异步任务依次进入执行栈并执行，每次进入一个，执行完毕后再进入下一个，这就是Event Loop（事件循环），最后执行任务队列的异步任务</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230111224618305.png" alt="image-20230111224618305"></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>我们可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a>保证程序的执行顺序，此时虽然问题解决了，但是Promise使用起来会有点繁琐，我们可以使用<code>async</code>和<code>await</code>关键词简化操作</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h4><p><code>f1</code>和<code>f3</code>都执行完毕后，<code>f2</code>内的代码才会执行，原因查看上面的<code>JavaScript运行机制</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flag = ref();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过设置flag的值影响f3</span></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//3秒后才在控制台输出,并将flag的值设置成true</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;f2&#x27;</span>);</span><br><span class="line">    flag.value = <span class="literal">true</span>;</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会因为flag的值受到f2的影响</span></span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function">(<span class="params">flag</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f3&#x27;</span>);</span><br><span class="line">  <span class="comment">//flag为true代表程序正常</span></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数f2将flag的值设置成了true&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数f2没有及时将flag的值设置成true&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行f1,f2,f3三个函数</span></span><br><span class="line"><span class="keyword">const</span> init = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  f1();</span><br><span class="line">  f2();</span><br><span class="line">  f3(flag.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开页面就执行init函数</span></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><p>控制台输入如下图所示，结果会输出<code>函数f2没有及时将flag的值设置成true</code>，且<code>f2</code>排在最后</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230111032315187.png" alt="image-20230111032315187"></p><p>上面的结果并不符合我们的预期（上面的代码执行完后才执行下面的），我们的预期是输出<code>函数f2将flag的值设置成了true</code>，且<code>f2</code>排在<code>f1</code>和<code>f3</code>之间，如下图所示</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230111040956780.png" alt="image-20230111040956780"></p><h4 id="使用Promise"><a href="#使用Promise" class="headerlink" title="使用Promise"></a>使用Promise</h4><p><code>f2</code>这个函数的结果是返回一个Promise对象，在<code>.then()</code>中执行<code>f3</code>可以保证：<code>f2</code>执行完了之后才开始执行<code>f3</code>，<font color="#dd0000">此时已经把问题解决了</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flag = ref();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//3秒后才在控制台输出,并将flag的值设置成true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//返回f2然后通过.then()在控制台输出</span></span><br><span class="line">      resolve(<span class="string">&#x27;f2&#x27;</span>);</span><br><span class="line">      flag.value = <span class="literal">true</span>;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function">(<span class="params">flag</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f3&#x27;</span>);</span><br><span class="line">  <span class="comment">//flag为true代表程序正常</span></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数f2将flag的值设置成了true&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数f2没有及时将flag的值设置成true&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行f1,f2,f3三个函数</span></span><br><span class="line"><span class="keyword">const</span> init = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  f1();</span><br><span class="line">  <span class="comment">/*const promise = f2();</span></span><br><span class="line"><span class="comment">  promise.then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">    console.log(res);</span></span><br><span class="line"><span class="comment">    f3(flag.value);</span></span><br><span class="line"><span class="comment">  &#125;)*/</span></span><br><span class="line">  <span class="comment">//这里是上面注释代码简写,f2执行完后才会执行.then()中的代码</span></span><br><span class="line">  f2().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    f3(flag.value);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开页面就执行init函数</span></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><h4 id="使用async和await简化"><a href="#使用async和await简化" class="headerlink" title="使用async和await简化"></a>使用async和await简化</h4><p>使用<code>async</code>和<code>await</code>关键词不但可以简化代码以提高代码的可读性，还可以避免回调地狱</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flag = ref();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//3秒后才在控制台输出,并将flag的值设置成true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//返回f2然后通过.then()在控制台输出</span></span><br><span class="line">      resolve(<span class="string">&#x27;f2&#x27;</span>);</span><br><span class="line">      flag.value = <span class="literal">true</span>;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function">(<span class="params">flag</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f3&#x27;</span>);</span><br><span class="line">  <span class="comment">//flag为true代表程序正常</span></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数f2将flag的值设置成了true&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数f2没有及时将flag的值设置成true&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行f1,f2,f3三个函数，使用了async关键词</span></span><br><span class="line"><span class="keyword">const</span> init = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  f1();</span><br><span class="line">  <span class="comment">//使用await关键词，从而阻塞下面代码的执行，保证f2执行完之后才会执行f3</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> f2();</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  f3(flag.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开页面就执行init函数</span></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>Promise中文文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise - JavaScript | MDN (mozilla.org)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;有时候下面的代码有参数需要从上面执行的异步函数中获取，但是当异步函数没有执行完时，下面的代码就执行完了（此时参数为空），从而出错&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://blog.zoutl.cn/tags/JavaScript/"/>
    
    <category term="Promise" scheme="https://blog.zoutl.cn/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>封装Axios请求</title>
    <link href="https://blog.zoutl.cn/556.html"/>
    <id>https://blog.zoutl.cn/556.html</id>
    <published>2023-01-06T17:07:11.000Z</published>
    <updated>2023-01-10T18:54:23.557Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>封装了Axios请求，可以添加请求拦截器以便在发送请求之前做些什么（例如统一加JWT请求头给后端验证），还可以添加响应拦截器以便对响应数据做点什么</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="安装Axios"><a href="#安装Axios" class="headerlink" title="安装Axios"></a>安装Axios</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h4 id="封装Axios请求"><a href="#封装Axios请求" class="headerlink" title="封装Axios请求"></a>封装Axios请求</h4><p>封装了三个方法：get请求、post请求、文件上传</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入axios</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求的IP地址和端口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&quot;http://localhost:8080&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建axios实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;AxiosInstance&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> httpService = axios.create(&#123;</span><br><span class="line">    <span class="comment">//url前缀-&#x27;http:xxx.xxx&#x27;</span></span><br><span class="line">    <span class="comment">//baseURL: process.env.BASE_API, // 需自定义</span></span><br><span class="line">    <span class="attr">baseURL</span>: baseUrl,</span><br><span class="line">    <span class="comment">//请求超时时间</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">3000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">httpService.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在发送请求之前做些什么</span></span><br><span class="line">    <span class="comment">//设置请求头token</span></span><br><span class="line">    config.headers.token = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加响应拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">httpService.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*网络请求部分*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>params 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Promise&lt;unknown&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        httpService(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">            <span class="attr">params</span>: params</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>params 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Promise&lt;unknown&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        httpService(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: params</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>params 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Promise&lt;unknown&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fileUpload</span>(<span class="params">url, params = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        httpService(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: params,</span><br><span class="line">            <span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span>&#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> baseUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    get,</span><br><span class="line">    post,</span><br><span class="line">    fileUpload,</span><br><span class="line">    getServerUrl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用前先在页面引入，关于为什么有个@去参考博客：<a href="https://blog.zoutl.cn/534.html">使用 Vite 创建 Vue3 项目 | LeDao’s Blog (zoutl.cn)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@是/src的路径别名</span></span><br><span class="line"><span class="keyword">import</span> axiosUtil <span class="keyword">from</span> <span class="string">&#x27;@/util/axios&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用时需要使用到<code>async</code>和<code>await</code>关键字，这两个关键字的用法可以参考博客：<a href="https://www.cnblogs.com/gaozejie/p/15303316.html">JavaScript中的async/await详解 - gaozejie - 博客园 (cnblogs.com)</a></p><p>其它使用了<code>async</code>关键字的方法调用时要在方法前加上<code>await</code>关键字，例如：<code>await handleLogin();</code>，虽然可以不加<code>await</code>关键字，但是会有提示让我们加上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面一行使用到async关键字</span></span><br><span class="line"><span class="keyword">const</span> handleLogin = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (form.value.userName === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    ElMessage.error(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (form.value.password === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    ElMessage.error(<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> params = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">  params.append(<span class="string">&quot;userName&quot;</span>, form.value.userName);</span><br><span class="line">  params.append(<span class="string">&quot;password&quot;</span>, form.value.password);</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;/administrator/login&#x27;</span>;</span><br><span class="line">  <span class="comment">//使用try...catch或.catch对async函数进行异常处理，不处理的话可不加</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//下面一行使用到await关键字</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> axiosUtil.get(url, params);</span><br><span class="line">    <span class="keyword">if</span> (result.data.code === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&quot;userName&quot;</span>, result.data.userName);</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&quot;administratorId&quot;</span>, result.data.id);</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&quot;token&quot;</span>, result.data.token);</span><br><span class="line">      router.replace(<span class="string">&#x27;/main&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.data.code === <span class="number">500</span>) &#123;</span><br><span class="line">      ElMessage.error(result.data.msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error:&quot;</span> + err);</span><br><span class="line">    ElMessage.error(<span class="string">&quot;服务器出错，请联系管理员！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;封装了Axios请求，可以添加请求拦截器以便在发送请求之前做些什么（例如统一加JWT请求头给后端验证），还可以添加响应拦截器以便对响应数据做</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="Axios" scheme="https://blog.zoutl.cn/tags/Axios/"/>
    
    <category term="Promise" scheme="https://blog.zoutl.cn/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Java生成和验证JWT</title>
    <link href="https://blog.zoutl.cn/555.html"/>
    <id>https://blog.zoutl.cn/555.html</id>
    <published>2023-01-04T13:16:29.000Z</published>
    <updated>2023-01-06T21:09:00.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h3><p>关于JWT的详细介绍可以查看博客：<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><p>或者直接去官网了解（官网可直接解码JWT）：<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>该依赖的接口文档网址为：<a href="https://javadoc.io/doc/com.auth0/java-jwt/latest/index.html">JWT - java-jwt 4.2.1 javadoc</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生成和验证"><a href="#生成和验证" class="headerlink" title="生成和验证"></a>生成和验证</h4><p>我把JWT的生成和验证封装成了一个工具类，以方便调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-01-03 23:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT Token有效时间，2小时 (单位是毫秒,1000毫秒=1秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIME = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密使用到的KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_SECRET = <span class="string">&quot;ledao&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleName 当前角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                <span class="comment">//编号</span></span><br><span class="line">                .withJWTId(UUID.randomUUID().toString())</span><br><span class="line">                <span class="comment">//签发人</span></span><br><span class="line">                .withIssuer(<span class="string">&quot;乐道&quot;</span>)</span><br><span class="line">                <span class="comment">//签发时间</span></span><br><span class="line">                .withIssuedAt(<span class="keyword">new</span> Date(System.currentTimeMillis()))</span><br><span class="line">                <span class="comment">//过期时间</span></span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> Date(System.currentTimeMillis() + TIME))</span><br><span class="line">                <span class="comment">//受众</span></span><br><span class="line">                .withAudience(roleName)</span><br><span class="line">                <span class="comment">//主题</span></span><br><span class="line">                .withSubject(<span class="string">&quot;mall-admin&quot;</span>)</span><br><span class="line">                <span class="comment">//创建一个新的JWT并使用给定的算法进行签名</span></span><br><span class="line">                .sign(Algorithm.HMAC512(TOKEN_SECRET));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//验证</span></span><br><span class="line">            JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC512(TOKEN_SECRET)).build();</span><br><span class="line">            jwtVerifier.verify(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;<span class="comment">//token验证失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;<span class="comment">//token已过期</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//其它异常</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解码token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title">decodedJWT</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.decode(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//生成token</span></span><br><span class="line">        String token = createToken(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">//打印token</span></span><br><span class="line">        System.out.println(token);</span><br><span class="line">        <span class="comment">//验证token并返回结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;验证结果: &quot;</span> + checkToken(token));</span><br><span class="line">        <span class="comment">//打印编号</span></span><br><span class="line">        System.out.println(<span class="string">&quot;编号: &quot;</span> + decodedJWT(token).getId());</span><br><span class="line">        <span class="comment">//打印签发时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;签发时间: &quot;</span> + decodedJWT(token).getIssuedAt());</span><br><span class="line">        <span class="comment">//打印过期时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;过期时间: &quot;</span> + decodedJWT(token).getExpiresAt());</span><br><span class="line">        <span class="comment">//打印签发人</span></span><br><span class="line">        System.out.println(<span class="string">&quot;签发人: &quot;</span> + decodedJWT(token).getIssuer());</span><br><span class="line">        <span class="comment">//打印所有受众,返回一个List&lt;String&gt;,受众的顺序和创建JWT时的顺序有关</span></span><br><span class="line">        System.out.println(<span class="string">&quot;所有受众: &quot;</span> + decodedJWT(token).getAudience());</span><br><span class="line">        <span class="comment">//打印受众1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;受众1: &quot;</span> + decodedJWT(token).getAudience().get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230104221041869.png" alt="image-20230104221041869"></p><h3 id="关于续约"><a href="#关于续约" class="headerlink" title="关于续约"></a>关于续约</h3><p>可以观看视频：<a href="https://www.bilibili.com/video/BV17D4y1Y76o/?spm_id_from=333.999.0.0&vd_source=93c0a1c8bc2b254e2458dcf78f0d067a">【IT老齐251】无状态的JWT令牌如何实现自动续约_哔哩哔哩_bilibili</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JWT介绍&quot;&gt;&lt;a href=&quot;#JWT介绍&quot; class=&quot;headerlink&quot; title=&quot;JWT介绍&quot;&gt;&lt;/a&gt;JWT介绍&lt;/h3&gt;&lt;p&gt;关于JWT的详细介绍可以查看博客：&lt;a href=&quot;https://www.ruanyifeng.com/blog/</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://blog.zoutl.cn/tags/Java/"/>
    
    <category term="JWT" scheme="https://blog.zoutl.cn/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序结合Java实现登录</title>
    <link href="https://blog.zoutl.cn/554.html"/>
    <id>https://blog.zoutl.cn/554.html</id>
    <published>2023-01-01T13:16:16.000Z</published>
    <updated>2023-01-02T15:10:54.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序通过<code>wx.login</code>函数登录时，会返回一个code，后端拿到这个code向微信接口服务请求可以拿到openid，后端根据openid在数据库中查询这个登录的用户是否存在，不存在则向数据库新增这个用户的信息然后返回给微信小程序，微信小程序使用<code>wx.setStorageSync</code>函数保存用户的信息以保持登录状态</p><h3 id="实现流程图"><a href="#实现流程图" class="headerlink" title="实现流程图"></a>实现流程图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101220640309.png" alt="image-20230101220640309"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="获取code并传给后端"><a href="#获取code并传给后端" class="headerlink" title="获取code并传给后端"></a>获取code并传给后端</h4><p>requestUtil是封装的wx.request方法，详情查看博客：<a href="https://blog.zoutl.cn/551.html">微信小程序封装请求的地址（IP地址以及端口）和方法 | LeDao’s Blog (zoutl.cn)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当顾客未登录时</span></span><br><span class="line"><span class="keyword">if</span> (!wx.getStorageSync(<span class="string">&#x27;currentCustomer&#x27;</span>)) &#123;</span><br><span class="line"><span class="comment">//登录</span></span><br><span class="line">wx.login(&#123;</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="comment">//登录成功</span></span><br><span class="line"><span class="comment">//请求后端,给后端发送code以获取openid</span></span><br><span class="line">requestUtil(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/customer/login&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">loginCode</span>: res.code</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">header</span>: &#123;<span class="comment">//POST请求一定要加上这个content-type,不然无法传递参数</span></span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//后端返回一个customer对象</span></span><br><span class="line">wx.setStorageSync(<span class="string">&#x27;currentCustomer&#x27;</span>, result.data.customer);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求的后端方法"><a href="#请求的后端方法" class="headerlink" title="请求的后端方法"></a>请求的后端方法</h4><p>下面方法主要是请求了微信接口服务返回openid，仅供参考，如要运行和查看完整代码去查看GitHub仓库：<a href="https://github.com/a6678696/mall-admin">a6678696/mall-admin: 微信小程序商城服务端 (github.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顾客登录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginCode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">login</span><span class="params">(String loginCode)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">//根据顾客登录获得的code获得openid</span></span><br><span class="line">    HashMap&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    String settingFileLocation = <span class="string">&quot;E://data/mall/myConfig.setting&quot;</span>;</span><br><span class="line">    Setting setting = <span class="keyword">new</span> Setting(settingFileLocation);</span><br><span class="line">    paramMap.put(<span class="string">&quot;appid&quot;</span>, setting.getStr(<span class="string">&quot;appid&quot;</span>));</span><br><span class="line">    paramMap.put(<span class="string">&quot;secret&quot;</span>, setting.getStr(<span class="string">&quot;secret&quot;</span>));</span><br><span class="line">    paramMap.put(<span class="string">&quot;js_code&quot;</span>, loginCode);</span><br><span class="line">    paramMap.put(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">    String result = HttpUtil.post(<span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>, paramMap);</span><br><span class="line">    <span class="comment">//使用Gson解析并获取openid</span></span><br><span class="line">    String openid = <span class="keyword">new</span> JsonParser().parse(result).getAsJsonObject().get(<span class="string">&quot;openid&quot;</span>).getAsString();</span><br><span class="line">    Customer customer = customerService.findByLoginCode(openid);</span><br><span class="line">    <span class="comment">//顾客第一次使用小程序,把openid保存到数据库</span></span><br><span class="line">    <span class="keyword">if</span> (ObjectUtil.isNull(customer)) &#123;</span><br><span class="line">        Customer customer2 = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer2.setNickName(<span class="string">&quot;默认昵称&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        customer2.setOpenid(openid);</span><br><span class="line">        customer2.setAvatarImageName(<span class="string">&quot;default.jpg&quot;</span>);</span><br><span class="line">        customerService.add(customer2);</span><br><span class="line">        customer2.setOpenid(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;customer&quot;</span>, customer2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        customer.setOpenid(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;customer&quot;</span>, customer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.ok(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>myConfig.setting的内容如下：（appid和secret填自己的，获取流程查看博客：<a href="https://blog.zoutl.cn/471.html">微信开发者工具创建小程序 | LeDao’s Blog (zoutl.cn)</a>）</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br><span class="line">appid = 12131</span><br><span class="line">secret = 2323</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;微信小程序通过&lt;code&gt;wx.login&lt;/code&gt;函数登录时，会返回一个code，后端拿到这个code向微信接口服务请求可以拿到ope</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="Java" scheme="https://blog.zoutl.cn/tags/Java/"/>
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序商城</title>
    <link href="https://blog.zoutl.cn/553.html"/>
    <id>https://blog.zoutl.cn/553.html</id>
    <published>2022-12-31T19:15:55.000Z</published>
    <updated>2023-01-07T00:09:36.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>前台小程序代码：<a href="https://github.com/a6678696/mall-wx">a6678696/mall-wx: 微信小程序商城前台 (github.com)</a></p><p>后台管理系统代码：<a href="https://github.com/a6678696/mall-web">a6678696/mall-web: 微信小程序商城后台 (github.com)</a></p><p>服务端代码：<a href="https://github.com/a6678696/mall-admin">a6678696/mall-admin: 微信小程序商城服务端 (github.com)</a></p><h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><table><thead><tr><th align="center">所属项目</th><th align="center">技术</th><th align="center">版本</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>服务端</code></td><td align="center">MySQL</td><td align="center">5.6</td><td align="center">数据库</td></tr><tr><td align="center"></td><td align="center">Spring Boot</td><td align="center">2.2.6.RELEASE</td><td align="center">后端项目框架</td></tr><tr><td align="center"></td><td align="center">Mybatis-Plus</td><td align="center">3.5.3.1</td><td align="center">持久层框架</td></tr><tr><td align="center"></td><td align="center">Druid</td><td align="center">1.2.15</td><td align="center">数据库连接池</td></tr><tr><td align="center"></td><td align="center">Gson</td><td align="center">2.10</td><td align="center">Java对象序列化/反序列化库</td></tr><tr><td align="center"></td><td align="center">Commons IO</td><td align="center">2.11.0</td><td align="center">用于协助开发IO功能</td></tr><tr><td align="center"></td><td align="center">Hutool</td><td align="center">5.8.11</td><td align="center">Java工具类库</td></tr><tr><td align="center"></td><td align="center">java-jwt</td><td align="center">4.2.1</td><td align="center">Java推荐的JWT依赖</td></tr><tr><td align="center"><code>后台</code></td><td align="center">Vite</td><td align="center">4.0.0</td><td align="center">前端构建工具</td></tr><tr><td align="center"></td><td align="center">Vue.js</td><td align="center">3.2.45</td><td align="center">前端JavaScript框架</td></tr><tr><td align="center"></td><td align="center">Vue Router</td><td align="center">4.1.6</td><td align="center">Vue.js 的官方路由</td></tr><tr><td align="center"></td><td align="center">Axios</td><td align="center">1.2.1</td><td align="center">基于<a href="https://javascript.info/promise-basics">promise</a>的网络请求库</td></tr><tr><td align="center"></td><td align="center">Element Plus</td><td align="center">2.2.26</td><td align="center">基于 Vue 3.0 的桌面端组件库</td></tr><tr><td align="center"></td><td align="center">VueQuill</td><td align="center">1.0.1</td><td align="center">富文本编辑器</td></tr><tr><td align="center"><code>前台</code></td><td align="center">Vant Weapp</td><td align="center">1.10.11</td><td align="center">小程序 UI 组件库</td></tr></tbody></table><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="前台小程序"><a href="#前台小程序" class="headerlink" title="前台小程序"></a>前台小程序</h4><ol><li>查看推荐、新品、热卖、降价和分类商品</li><li>查看公告</li><li>查看商品详情、搜索商品</li><li>管理购物车的商品</li><li>提交、模拟支付、取消和查看订单，给订单确认收货</li><li>新增、修改和删除收货地址，设置默认收货地址</li><li>修改个人昵称和头像</li><li>评价已完成的订单商品，查看所有评价</li></ol><h4 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h4><ol><li>公告管理（添加、查看、修改、删除、查询）</li><li>用户管理（查询）</li><li>商品大类管理（添加、查看、修改、删除、查询）</li><li>商品小类管理（添加、查看、修改、删除、查询）</li><li>商品管理（添加、查看、修改、删除、查询、设置商品卡片图片、设置详情页轮播图图片、设置是否热卖、设置是否推荐、设置是否首页轮播）</li><li>订单管理（删除、查询）</li><li>评价管理（删除、查询）</li></ol><h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="前台小程序-1"><a href="#前台小程序-1" class="headerlink" title="前台小程序"></a>前台小程序</h4><h5 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101032747118.png" alt="image-20230101032747118" style="zoom:50%;" /><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101032850317.png" alt="image-20230101032850317" style="zoom: 50%;" /><h5 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101032955540.png" alt="image-20230101032955540" style="zoom:50%;" /><h5 id="我的"><a href="#我的" class="headerlink" title="我的"></a>我的</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033045354.png" alt="image-20230101033045354" style="zoom:50%;" /><h5 id="搜索商品"><a href="#搜索商品" class="headerlink" title="搜索商品"></a>搜索商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033128270.png" alt="image-20230101033128270" style="zoom:50%;" /><h5 id="搜索结果"><a href="#搜索结果" class="headerlink" title="搜索结果"></a>搜索结果</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033226839.png" alt="image-20230101033226839" style="zoom:50%;" /><h5 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033336406.png" alt="image-20230101033336406" style="zoom:50%;" /><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033411202.png" alt="image-20230101033411202" style="zoom:50%;" /><h5 id="公告"><a href="#公告" class="headerlink" title="公告"></a>公告</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033502114.png" alt="image-20230101033502114" style="zoom:50%;" /><h5 id="新品商品"><a href="#新品商品" class="headerlink" title="新品商品"></a>新品商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033640778.png" alt="image-20230101033640778" style="zoom:50%;" /><h5 id="热卖商品"><a href="#热卖商品" class="headerlink" title="热卖商品"></a>热卖商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033619008.png" alt="image-20230101033619008" style="zoom:50%;" /><h5 id="降价商品"><a href="#降价商品" class="headerlink" title="降价商品"></a>降价商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033707668.png" alt="image-20230101033707668" style="zoom:50%;" /><h5 id="分类商品"><a href="#分类商品" class="headerlink" title="分类商品"></a>分类商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033803290.png" alt="image-20230101033803290" style="zoom:50%;" /><h5 id="确认订单"><a href="#确认订单" class="headerlink" title="确认订单"></a>确认订单</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033936306.png" alt="image-20230101033936306" style="zoom:50%;" /><h5 id="全部订单"><a href="#全部订单" class="headerlink" title="全部订单"></a>全部订单</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034021486.png" alt="image-20230101034021486" style="zoom:50%;" /><h5 id="订单详情"><a href="#订单详情" class="headerlink" title="订单详情"></a>订单详情</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034054736.png" alt="image-20230101034054736" style="zoom:50%;" /><h5 id="收货地址管理"><a href="#收货地址管理" class="headerlink" title="收货地址管理"></a>收货地址管理</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034145024.png" alt="image-20230101034145024" style="zoom:50%;" /><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034218456.png" alt="image-20230101034218456" style="zoom:50%;" /><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034249935.png" alt="image-20230101034249935" style="zoom:50%;" /><h5 id="修改昵称和头像"><a href="#修改昵称和头像" class="headerlink" title="修改昵称和头像"></a>修改昵称和头像</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034334329.png" alt="image-20230101034334329" style="zoom:50%;" /><h5 id="查看我的评价"><a href="#查看我的评价" class="headerlink" title="查看我的评价"></a>查看我的评价</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034421714.png" alt="image-20230101034421714" style="zoom:50%;" /><h4 id="后台管理系统-1"><a href="#后台管理系统-1" class="headerlink" title="后台管理系统"></a>后台管理系统</h4><h5 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034545179.png" alt="image-20230101034545179"></p><h5 id="公告管理"><a href="#公告管理" class="headerlink" title="公告管理"></a>公告管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034623993.png" alt="image-20230101034623993"></p><h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034647185.png" alt="image-20230101034647185"></p><h5 id="商品大类管理"><a href="#商品大类管理" class="headerlink" title="商品大类管理"></a>商品大类管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034747100.png" alt="image-20230101034747100"></p><h5 id="商品小类管理"><a href="#商品小类管理" class="headerlink" title="商品小类管理"></a>商品小类管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034838616.png" alt="image-20230101034838616"></p><h5 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034908593.png" alt="image-20230101034908593"></p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101035412594.png" alt="image-20230101035412594"></p><h5 id="订单管理"><a href="#订单管理" class="headerlink" title="订单管理"></a>订单管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101035228530.png" alt="image-20230101035228530"></p><h5 id="评价管理"><a href="#评价管理" class="headerlink" title="评价管理"></a>评价管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101035327193.png" alt="image-20230101035327193"></p><h3 id="部署时要修改的环境"><a href="#部署时要修改的环境" class="headerlink" title="部署时要修改的环境"></a>部署时要修改的环境</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>数据库文件和图片等资源都在服务端代码的<code>myResources</code>文件夹中</p><p>主要是修改服务端的的代码，服务端的端口默认是8080，不要修改，不然要去修改前台小程序端和后台管理系统请求的服务端端口（小程序代码修改名为 <code>requestUtil.js</code> 的文件，后台管理系统则修改<code>axios.js</code>这个文件）</p><h4 id="要修改的地方"><a href="#要修改的地方" class="headerlink" title="要修改的地方"></a>要修改的地方</h4><h5 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h5><p>最下面的图片存储地址都改成自己电脑上的，数据库的名称最好和我的命名一样（可以直接导入数据库文件）</p><h5 id="FilePathConfig-java映射配置"><a href="#FilePathConfig-java映射配置" class="headerlink" title="FilePathConfig.java映射配置"></a>FilePathConfig.java映射配置</h5><p>将本地路径的映射改成自己电脑上的</p><h5 id="CustomerController-java"><a href="#CustomerController-java" class="headerlink" title="CustomerController.java"></a>CustomerController.java</h5><p><code>/customer/login</code>方法的settingFileLocation属性改为自己电脑上myConfig.setting这个文件的路径</p><h5 id="myConfig-setting"><a href="#myConfig-setting" class="headerlink" title="myConfig.setting"></a>myConfig.setting</h5><p>在服务端代码的<code>myResources</code>文件夹中，appid和secret需要自己去小程序的开发管理后台中获取</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h3&gt;&lt;p&gt;前台小程序代码：&lt;a href=&quot;https://github.com/a6678696/mall-wx&quot;&gt;a6678696</summary>
      
    
    
    
    <category term="个人项目" scheme="https://blog.zoutl.cn/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="个人项目" scheme="https://blog.zoutl.cn/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>让微信小程序的富文本图片宽度实现自适应</title>
    <link href="https://blog.zoutl.cn/552.html"/>
    <id>https://blog.zoutl.cn/552.html</id>
    <published>2022-12-24T05:53:26.000Z</published>
    <updated>2022-12-24T16:29:06.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序使用富文本时，如果图片宽度超出微信小程序屏幕的默认最大宽度750rpx（rpx是动态像素，一个rpx宽度并不是固定的，可以根据屏幕宽度进行自适应），会导致图片显示不全</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>直接在使用了富文本的页面的样式中加入以下代码即可，值得注意的是图片一定要有<code>alt</code>这个属性，不然没有用，alt改成src也是可以的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[alt]</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;//图片宽度过大,但是我只希望它把屏幕的宽度撑满就行</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">100%</span>;//图片宽度过小,但是我希望它把屏幕的宽度撑满</span><br><span class="line">    <span class="attribute">height</span>: auto;//高度自动,防止图片的长宽比改变</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;微信小程序使用富文本时，如果图片宽度超出微信小程序屏幕的默认最大宽度750rpx（rpx是动态像素，一个rpx宽度并不是固定的，可以根据屏幕</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序封装请求的地址（IP地址以及端口）和方法</title>
    <link href="https://blog.zoutl.cn/551.html"/>
    <id>https://blog.zoutl.cn/551.html</id>
    <published>2022-12-19T13:29:02.000Z</published>
    <updated>2023-01-10T18:51:54.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>项目开发时和上线时请求的IP地址和端口是不一样的，为了避免后期修改请求的IP地址和端口带来的麻烦，非常有必要把请求的IP地址和端口封装起来，另外，还可以使用Promise封装一下请求的方法和使用<code>async</code>和<code>await</code>关键字以避免<a href="https://blog.csdn.net/qq_42698326/article/details/111075519?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-111075519-blog-124483644.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-111075519-blog-124483644.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=3">回调地狱</a></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>在根目录下新建一个名为<code>utils</code>的文件夹（和<code>pages</code>同级），在一个名为<code>requestUtil.js</code>的文件，请求的<code>IP地址以及端口</code>和<code>方法</code>都封装在里面</p><h4 id="封装请求的IP地址和端口"><a href="#封装请求的IP地址和端口" class="headerlink" title="封装请求的IP地址和端口"></a>封装请求的IP地址和端口</h4><p>代码如下，在这里可以统一管理项目请求的IP地址和端口，后期要修改的话只需要改这个地方即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义请求的IP地址和端口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回baseUrl</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getBaseUrl = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> baseUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用前，要先在页面的js文件中引入，然后在原始数据中定义（空值），最后在onLoad()函数中设置就可以使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入请求后端工具类</span></span><br><span class="line"><span class="keyword">import</span> &#123;getBaseUrl&#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/requestUtil.js&#x27;</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">baseUrl</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> baseUrl = getBaseUrl();</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            baseUrl</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="封装请求的方法"><a href="#封装请求的方法" class="headerlink" title="封装请求的方法"></a>封装请求的方法</h4><p>代码如下（加上IP地址和端口的封装），<code>params</code>接收传过来的url和method等参数，<code>baseUrl</code>是请求的IP地址和端口（传过来的url就不需要写IP地址和端口了）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义请求的IP地址和端口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回baseUrl</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getBaseUrl = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> baseUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后端请求工具</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>params </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestUtil = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            ...params,</span><br><span class="line">            <span class="attr">url</span>: baseUrl + params.url,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用前先在页面的js文件中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getBaseUrl,requestUtil&#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/requestUtil.js&#x27;</span></span><br></pre></td></tr></table></figure><p>使用的格式如下，使用了<code>async</code>和<code>await</code>关键字以避免回调地狱和保证代码按顺序执行（有<code>await</code>关键字的请求执行完才会执行下面的代码），注释掉的是微信小程序原来的请求方法（没封装前直接使用<code>wx.request</code>方法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getRecommendGoodsList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="comment">// wx.request(&#123;</span></span><br><span class="line"><span class="comment">//     url: &#x27;http://localhost:8080/goods/getRecommendGoodsList&#x27;,</span></span><br><span class="line"><span class="comment">//     method: &#x27;GET&#x27;,</span></span><br><span class="line"><span class="comment">//     success(res) &#123;</span></span><br><span class="line"><span class="comment">//         this.setData(&#123;</span></span><br><span class="line"><span class="comment">//             recommendGoodsList: res.data.goodsList</span></span><br><span class="line"><span class="comment">//         &#125;)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> requestUtil(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/goods/getRecommendGoodsList&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">this</span>.setData(&#123;</span><br><span class="line"><span class="attr">recommendGoodsList</span>: res.data.goodsList</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要让微信小程序支持<code>async</code>和<code>await</code>关键字，还要勾选上<code>将JS编译成ES5</code>，具体步骤查看下图</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230109014527098.png" alt="image-20230109014527098"></p><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>不使用<code>async</code>和<code>await</code>关键字的用法示例如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">requestUtil(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/goods/getRecommendGoodsList&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//请求成功</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//请求失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;项目开发时和上线时请求的IP地址和端口是不一样的，为了避免后期修改请求的IP地址和端口带来的麻烦，非常有必要把请求的IP地址和端口封装起来，</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://blog.zoutl.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="Promise" scheme="https://blog.zoutl.cn/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot实现wangEditor 5富文本编辑器上传图片到服务器</title>
    <link href="https://blog.zoutl.cn/550.html"/>
    <id>https://blog.zoutl.cn/550.html</id>
    <published>2022-12-18T09:24:48.000Z</published>
    <updated>2022-12-18T11:15:52.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>wangEditor 5富文本编辑器只支持添加网络图片，如果要上传本地图片的话，需要自己写后端代码来实现</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="添加上传图片配置"><a href="#添加上传图片配置" class="headerlink" title="添加上传图片配置"></a>添加上传图片配置</h4><p>在编辑器组件代码中找到<code>editorConfig</code>后修改以及添加成下面代码就可以了，编辑器组件的代码查看博客：<a href="https://blog.zoutl.cn/549.html">Vue.js3.2引入wangEditor 5富文本编辑器 | LeDao’s Blog (zoutl.cn)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改过</span></span><br><span class="line"><span class="keyword">const</span> editorConfig = &#123;<span class="attr">placeholder</span>: <span class="string">&#x27;请输入内容...&#x27;</span>, <span class="attr">MENU_CONF</span>: &#123;&#125;&#125;</span><br><span class="line"><span class="comment">//新添加</span></span><br><span class="line">editorConfig.MENU_CONF[<span class="string">&#x27;uploadImage&#x27;</span>] = &#123;</span><br><span class="line">  <span class="attr">fieldName</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">  <span class="attr">server</span>: <span class="string">&#x27;http://localhost:8080/goods/wangEditorUploadImage&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java后端上传图片代码"><a href="#Java后端上传图片代码" class="headerlink" title="Java后端上传图片代码"></a>Java后端上传图片代码</h4><p>代码的一些说明以及前置条件（依赖和图片路径）可以参考博客：<a href="https://blog.zoutl.cn/546.html">Spring Boot 实现 VueQuill 富文本编辑器上传图片到服务器 | LeDao’s Blog (zoutl.cn)</a>，其实后端代码都差不多，只是从前端获取数据的方式各有不同·</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * wangEditor富文本编辑器上传图片</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/wangEditorUploadImage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">wangEditorUploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;image&quot;)</span> MultipartFile multipartFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//给图片定义一个名称</span></span><br><span class="line">    String newFileName = DateUtil.getCurrentDateStr2() + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    <span class="keyword">assert</span> multipartFile != <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//实现将图片保存到指定位置</span></span><br><span class="line">    FileUtils.copyInputStreamToFile(multipartFile.getInputStream(), <span class="keyword">new</span> File(goodsDetailsImageFilePath + <span class="string">&quot;/&quot;</span> + newFileName));</span><br><span class="line">    <span class="comment">//返回指定的格式给前端使用</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;errno&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//返回的数据,wangEditor接收</span></span><br><span class="line">    Map&lt;String, String&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    data.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;http://localhost:8080/image/goods/details/&quot;</span> + newFileName);</span><br><span class="line">    data.put(<span class="string">&quot;alt&quot;</span>, newFileName);</span><br><span class="line">    data.put(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;http://localhost:8080/image/goods/details/&quot;</span> + newFileName);</span><br><span class="line">    map.put(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>更多配置以及可以接收的数据格式查看官网：<a href="https://www.wangeditor.com/v5/menu-config.html#%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87">菜单配置 | wangEditor</a></p><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/wang-editor-demo">a6678696/wang-editor-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;wangEditor 5富文本编辑器只支持添加网络图片，如果要上传本地图片的话，需要自己写后端代码来实现&lt;/p&gt;
&lt;h3 id=&quot;实现过程&quot;</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Spring Boot" scheme="https://blog.zoutl.cn/tags/Spring-Boot/"/>
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="wangEditor" scheme="https://blog.zoutl.cn/tags/wangEditor/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js3.2引入wangEditor 5富文本编辑器</title>
    <link href="https://blog.zoutl.cn/549.html"/>
    <id>https://blog.zoutl.cn/549.html</id>
    <published>2022-12-18T09:03:23.000Z</published>
    <updated>2022-12-18T11:04:13.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>wangEditor 5是一款开源Web富文本编辑器，开箱即用，配置简单</p><p>虽然官方有文档，但是不够简明，所以我写本博客方便以后快速引入wangEditor 5富文本编辑器</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @wangeditor/editor @wangeditor/editor-for-vue@next --save</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221218171607241.png" alt="image-20221218171607241"></p><h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><p>在<code>components</code>文件夹新建一个名为<code>myEditor.vue</code>的文件，内容如下，直接复制下面的代码即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #ccc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;border-bottom: 1px solid #ccc&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:editor</span>=<span class="string">&quot;editorRef&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:defaultConfig</span>=<span class="string">&quot;toolbarConfig&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:mode</span>=<span class="string">&quot;mode&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Editor</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;height: 500px; overflow-y: hidden;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;valueHtml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:defaultConfig</span>=<span class="string">&quot;editorConfig&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:mode</span>=<span class="string">&quot;mode&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">onCreated</span>=<span class="string">&quot;handleCreated&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">&#x27;@wangeditor/editor/dist/css/style.css&#x27;</span> <span class="comment">// 引入 css</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; onBeforeUnmount, ref, shallowRef, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Editor, Toolbar &#125; <span class="keyword">from</span> <span class="string">&#x27;@wangeditor/editor-for-vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123; Editor, Toolbar &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 编辑器实例，必须用 shallowRef</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> editorRef = shallowRef()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 内容 HTML</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> valueHtml = ref(<span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模拟 ajax 异步获取内容</span></span></span><br><span class="line"><span class="javascript">    onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        valueHtml.value = <span class="string">&#x27;&lt;p&gt;模拟 Ajax 异步设置内容&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">1500</span>)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> toolbarConfig = &#123;&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> editorConfig = &#123; <span class="attr">placeholder</span>: <span class="string">&#x27;请输入内容...&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件销毁时，也及时销毁编辑器</span></span></span><br><span class="line"><span class="javascript">    onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> editor = editorRef.value</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (editor == <span class="literal">null</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      editor.destroy()</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> handleCreated = <span class="function">(<span class="params">editor</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      editorRef.value = editor <span class="comment">// 记录 editor 实例，重要！</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      editorRef,</span></span><br><span class="line"><span class="javascript">      valueHtml,</span></span><br><span class="line"><span class="javascript">      <span class="attr">mode</span>: <span class="string">&#x27;default&#x27;</span>, <span class="comment">// 或 &#x27;simple&#x27;</span></span></span><br><span class="line"><span class="javascript">      toolbarConfig,</span></span><br><span class="line"><span class="javascript">      editorConfig,</span></span><br><span class="line"><span class="javascript">      handleCreated</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>首先在使用组件的页面引入上面的组件，然后即可使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">myEditor</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> myEditor <span class="keyword">from</span> <span class="string">&quot;../components/myEditor.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>关于父组件给富文本编辑器设置内容以及获取内容的实现（通过改变编辑器组件的<code>valueHtml</code>属性来实现）可以参考博客：<a href="https://blog.zoutl.cn/548.html">Vue.js3.2实现父组件调用子组件的方法和属性 | LeDao’s Blog (zoutl.cn)</a>，参考博客时不需要暴露属性了，因为在上面的代码中<code>valueHtml</code>已经通过<code>return</code>暴露过了</p><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/wang-editor-demo">a6678696/wang-editor-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;wangEditor 5是一款开源Web富文本编辑器，开箱即用，配置简单&lt;/p&gt;
&lt;p&gt;虽然官方有文档，但是不够简明，所以我写本博客方便以后</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="wangEditor" scheme="https://blog.zoutl.cn/tags/wangEditor/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js3.2实现父组件调用子组件的方法和属性</title>
    <link href="https://blog.zoutl.cn/548.html"/>
    <id>https://blog.zoutl.cn/548.html</id>
    <published>2022-12-18T08:12:58.000Z</published>
    <updated>2022-12-18T08:54:24.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>父组件（使用子组件的页面称为父组件）使用子组件时，如果想使用子组件的属性和方法，可以在父组件使用子组件时加上ref属性来实现，但是子组件需要提前暴露这些属性和方法</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>我把父组件放在<code>views</code>文件夹中，子组件放在<code>components</code>文件夹中</p><h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><p>首先在<code>components</code>文件夹中新建一个名为<code>child.vue</code>的子组件，<code>defineExpose</code>暴露的属性和方法才可以被父组件使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件的内容: <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref, defineExpose&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> content = ref(<span class="string">&#x27;我是子组件原来的内容&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  alert(content.value);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//暴露属性和方法给父组件</span></span></span><br><span class="line"><span class="javascript">defineExpose(&#123;</span></span><br><span class="line"><span class="javascript">  content,</span></span><br><span class="line"><span class="javascript">  getContent</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><p>在<code>views</code>文件夹中新建一个名为<code>father.vue</code>的父组件，使用子组件时加上一个ref属性<code>ref=&quot;myChild&quot;</code>，然后定义一下myChild</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--加上一个ref属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;myChild&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setChildContent&quot;</span>&gt;</span>我是父组件的按钮,设置子组件的content<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getChildContent&quot;</span>&gt;</span>我是父组件的按钮,调用子组件的方法getContent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;../components/child.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//定义一下myChild</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> myChild = ref();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> setChildContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//使用子组件属性的值</span></span></span><br><span class="line"><span class="javascript">  alert(myChild.value.content);</span></span><br><span class="line"><span class="javascript">  <span class="comment">//设置子组件属性的值</span></span></span><br><span class="line"><span class="javascript">  myChild.value.content = <span class="string">&#x27;我是子组件修改后的内容&#x27;</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getChildContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//调用子组件的方法</span></span></span><br><span class="line"><span class="javascript">  myChild.value.getContent();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果GIF图"><a href="#效果GIF图" class="headerlink" title="效果GIF图"></a>效果GIF图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-18%20_164031.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;父组件（使用子组件的页面称为父组件）使用子组件时，如果想使用子组件的属性和方法，可以在父组件使用子组件时加上ref属性来实现，但是子组件需要</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>VueQuill富文本编辑器实现图片的缩放</title>
    <link href="https://blog.zoutl.cn/547.html"/>
    <id>https://blog.zoutl.cn/547.html</id>
    <published>2022-12-17T15:12:21.000Z</published>
    <updated>2022-12-18T11:03:47.221Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>VueQuill富文本编辑器添加的图片默认是不可以缩放的，如果图片尺寸过大的话，会非常影响用户的体验。虽然不支持缩放图片，但是可以通过安装<code>quill-blot-formatter</code>这个插件来实现</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save quill-blot-formatter</span><br></pre></td></tr></table></figure><h4 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BlotFormatter <span class="keyword">from</span> <span class="string">&#x27;quill-blot-formatter&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>下面是配置两个及以上插件的格式，如果只配置一个插件，其格式查看博客：<a href="https://blog.zoutl.cn/546.html">Spring Boot 实现 VueQuill 富文本编辑器上传图片到服务器 | LeDao’s Blog (zoutl.cn)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modules = [&#123;</span><br><span class="line">  <span class="comment">//这里是另一个插件的配置</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;BlotFormatter&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: BlotFormatter,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">overlay</span>: &#123;</span><br><span class="line">      <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">border</span>: <span class="string">&#x27;2px solid red&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>使用编辑器的代码如下，关键代码是<code>:modules=&quot;modules&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:modules</span>=<span class="string">&quot;modules&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/vue-quill-demo">a6678696/vue-quill-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;VueQuill富文本编辑器添加的图片默认是不可以缩放的，如果图片尺寸过大的话，会非常影响用户的体验。虽然不支持缩放图片，但是可以通过安装&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="VueQuill" scheme="https://blog.zoutl.cn/tags/VueQuill/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot实现VueQuill富文本编辑器上传图片到服务器</title>
    <link href="https://blog.zoutl.cn/546.html"/>
    <id>https://blog.zoutl.cn/546.html</id>
    <published>2022-12-17T14:02:25.000Z</published>
    <updated>2023-01-10T18:54:54.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>VueQuill富文本编辑器添加图片时，会将图片转换为base64格式</p><p>如果直接将编辑器的内容传到后端并保存到MySQL数据库时（我习惯使用<code>text</code>类型），很容易就超出<code>text</code>类型的长度，即使还有比text类型长度更长的类型，但是还是不推荐直接将base64格式的图片保存到MySQL中</p><p>所以有必要实现VueQuill富文本编辑器添加图片时，先将图片上传到服务器中，然后后端返回图片的链接给编辑器引用，编辑器要上传到图片到后端需要安装插件<code>quill-image-uploader</code></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install quill-image-uploader --save</span><br></pre></td></tr></table></figure><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ImageUploader <span class="keyword">from</span> <span class="string">&#x27;quill-image-uploader&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="安装插件到编辑器"><a href="#安装插件到编辑器" class="headerlink" title="安装插件到编辑器"></a>安装插件到编辑器</h4><p>首先定义模块，只需要修改请求后端的url，下面代码的url经过getServerUrl的封装最终是<code>localhost:8080/goods/vueQuillUploadImage</code>，getServerUrl的代码查看博客：<a href="https://blog.zoutl.cn/511.html">Vue 项目实现统一管理请求的后端 IP 地址和端口 | LeDao’s Blog (zoutl.cn)</a>，也可以直接写出url不用封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modules = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;imageUploader&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: ImageUploader,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">upload</span>: <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">        formData.append(<span class="string">&quot;image&quot;</span>, file);</span><br><span class="line">        <span class="keyword">let</span> url = getServerUrl(<span class="string">&#x27;/goods/vueQuillUploadImage&#x27;</span>);</span><br><span class="line">        axios.post(url, formData)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(res)</span><br><span class="line">              resolve(res.data.url);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              reject(<span class="string">&quot;Upload failed&quot;</span>);</span><br><span class="line">              <span class="built_in">console</span>.error(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">            &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用编辑器的代码如下，关键代码是<code>:modules=&quot;modules&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:modules</span>=<span class="string">&quot;modules&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Java后端代码"><a href="#Java后端代码" class="headerlink" title="Java后端代码"></a>Java后端代码</h4><p>首先引入依赖，用于文件的操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>业务代码如下，当前Controller的名称上面的注解是<code>@RestController</code>和<code>@RequestMapping(&quot;/goods&quot;)</code>，所以前端请求的路径是<code>/goods/vueQuillUploadImage</code>，和上面的url对应</p><p><code>DateUtil.getCurrentDateStr2()</code>和<code>System.currentTimeMillis()</code>是根据时间生成字符串，生成的图片名称示例为<code>202212172148271671284907136.jpg</code>，只是用来命名而已，代码不贴了，自己去改掉</p><p><code>goodsDetailsImageFilePath</code>是定义在<code>application.yml</code>配置文件的路径，配置为<code>goodsDetailsImageFilePath: E://data/mall/images/goods/details/</code></p><p>关于返回的url，要加上<code>http://</code>，不然VueQuill富文本编辑器会出错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VueQuill富文本编辑器上传图片</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/vueQuillUploadImage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">vueQuillUploadImage</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//获取到文件</span></span><br><span class="line">    MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;</span><br><span class="line">    MultipartFile multipartFile = multipartRequest.getFile(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">    <span class="comment">//给图片定义一个名称</span></span><br><span class="line">    String newFileName = DateUtil.getCurrentDateStr2() + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    <span class="keyword">assert</span> multipartFile != <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//实现将图片保存到指定位置</span></span><br><span class="line">    FileUtils.copyInputStreamToFile(multipartFile.getInputStream(), <span class="keyword">new</span> File(goodsDetailsImageFilePath + <span class="string">&quot;/&quot;</span> + newFileName));</span><br><span class="line">    <span class="comment">//返回指定的格式给前端使用</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;http://localhost:8080/image/goods/details/&quot;</span> + newFileName);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改可上传文件的大小"><a href="#修改可上传文件的大小" class="headerlink" title="修改可上传文件的大小"></a>修改可上传文件的大小</h4><p>Spring Boot默认可上传的最大文件大小是1MB，可以去<code>application.yml</code>配置文件修改，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>官网地址为：<a href="https://vueup.github.io/vue-quill/guide/modules.html#example-using-quill-image-uploader">Modules | VueQuill (vueup.github.io)</a>，只有前端代码，后端代码需要自己实现，前端根据后端返回的数据拿到url就行了，不规定格式</p><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/vue-quill-demo">a6678696/vue-quill-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;VueQuill富文本编辑器添加图片时，会将图片转换为base64格式&lt;/p&gt;
&lt;p&gt;如果直接将编辑器的内容传到后端并保存到MySQL数据库</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Spring Boot" scheme="https://blog.zoutl.cn/tags/Spring-Boot/"/>
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="VueQuill" scheme="https://blog.zoutl.cn/tags/VueQuill/"/>
    
    <category term="Axios" scheme="https://blog.zoutl.cn/tags/Axios/"/>
    
    <category term="Promise" scheme="https://blog.zoutl.cn/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js3.2引入VueQuill富文本编辑器</title>
    <link href="https://blog.zoutl.cn/545.html"/>
    <id>https://blog.zoutl.cn/545.html</id>
    <published>2022-12-16T15:19:32.000Z</published>
    <updated>2022-12-24T15:55:22.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>官方文档：<a href="https://vueup.github.io/vue-quill/guide/">Introduction | VueQuill (vueup.github.io)</a></p><p>中文文档：<a href="https://www.kancloud.cn/liuwave/quill/1434140">vue-quill-editor · Quill官方中文文档 · 看云 (kancloud.cn)</a></p><p>编辑器的插件列举查看官网：<a href="https://vueup.github.io/vue-quill/guide/modules.html#quill-modules">Modules | VueQuill (vueup.github.io)</a>，我实现了图片上传到服务器和图片缩放插件的使用，博客链接为：<a href="https://blog.zoutl.cn/546.html">上传图片到服务器 </a>和<a href="https://blog.zoutl.cn/547.html">实现图片的缩放 </a></p><p>在几款适合Vue3的富文本编辑器中，我发现VueQuill最简单易用，不过也有一个BUG：数据无法双向绑定，页面的数据不会显示到富文本编辑器中，实现数据双向绑定的办法看下面</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vueup/vue-quill@latest --save</span><br></pre></td></tr></table></figure><h4 id="局部引入"><a href="#局部引入" class="headerlink" title="局部引入"></a>局部引入</h4><p>虽然可以全局引入，但是还是建议局部引入，首先引入组件和样式（在<code>&lt;script&gt;</code>标签中加入下面代码）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;QuillEditor&#125; <span class="keyword">from</span> <span class="string">&#x27;@vueup/vue-quill&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@vueup/vue-quill/dist/vue-quill.snow.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用组件的代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>属性说明</p><table><thead><tr><th align="center">属性</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>v-model:content=&quot;content&quot;</code></td><td align="center">绑定的数据是content</td></tr><tr><td align="center"><code>placeholder=&quot;这里输入商品详情...&quot;</code></td><td align="center">内容为空时的提示</td></tr><tr><td align="center"><code>theme=&quot;snow&quot;</code></td><td align="center"><a href="https://vueup.github.io/vue-quill/guide/themes.html">主题</a></td></tr><tr><td align="center"><code>ref=&quot;editor&quot;</code></td><td align="center">这个是重点，定义editor使用<a href="https://vueup.github.io/vue-quill/api/methods.html">官方的方法</a></td></tr><tr><td align="center"><code>toolbar=&quot;full&quot;</code></td><td align="center">工具栏的功能全部可以使用</td></tr><tr><td align="center"><code>contentType=&quot;html&quot;</code></td><td align="center">内容的格式是html</td></tr></tbody></table><p>由于双向绑定没有用，所以需要使用官方的方法<code>setHTML()</code>设置值，首先上面使用编辑器的代码中要有<code>ref=&quot;editor&quot;</code>，然后在<code>&lt;script&gt;</code>标签中定义一个空editor和上面对应，然后就可以使用编辑器的方法了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个空editor</span></span><br><span class="line"><span class="keyword">const</span> editor = ref(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">editor.value.setHTML(<span class="string">&quot;内容&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>只保留了和VueQuill富文本编辑器有关的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref, onMounted&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;QuillEditor&#125; <span class="keyword">from</span> <span class="string">&#x27;@vueup/vue-quill&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">&#x27;@vueup/vue-quill/dist/vue-quill.snow.css&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> content = ref(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> editor = ref(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//根据id获取商品</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getGoodsDetails = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//设置值</span></span></span><br><span class="line"><span class="javascript">    editor.value.setHTML(response.data.goods.details);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/vue-quill-demo">a6678696/vue-quill-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://vueup.github.io/vue-quill/guide/&quot;&gt;Introduction |</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.zoutl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="https://blog.zoutl.cn/tags/Vue-js/"/>
    
    <category term="VueQuill" scheme="https://blog.zoutl.cn/tags/VueQuill/"/>
    
  </entry>
  
  <entry>
    <title>Java实体类中使用布尔类型的注意事项</title>
    <link href="https://blog.zoutl.cn/544.html"/>
    <id>https://blog.zoutl.cn/544.html</id>
    <published>2022-12-16T11:28:26.000Z</published>
    <updated>2022-12-17T12:23:09.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在Java实体类中使用布尔类型的话，有一些细节要特别注意，不然这些布尔类型的字段用起来会很麻烦</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="不要以is开头"><a href="#不要以is开头" class="headerlink" title="不要以is开头"></a>不要以is开头</h4><p>属性名不要以<code>is</code>开头，如果以<code>is</code>开头的话，自动生成的Setter和Getter的方法名会自动省略掉<code>is</code>，例如以下代码中Setter和Getter的方法名原本应该是<code>getIsHotGoods</code>和<code>setIsHotGoods</code>，但是实际上是<code>getHotGoods</code>和<code>setHotGoods</code>，会给我们带来一些困扰</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221216230829121.png" alt="image-20221216230829121"></p><h4 id="使用包装类"><a href="#使用包装类" class="headerlink" title="使用包装类"></a>使用包装类</h4><p>在实体类中，不要使用基本数据类型，而是使用它们的包装类，例如布尔基本类型boolean就要使用Boolean</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221216225306794.png" alt="image-20221216225306794"></p><p>如果使用了布尔基本类型boolean，那么我们自动生成Setter和Getter时不会有Getter方法，<font color="#dd0000">为了开发时减少麻烦，不要使用基本类型，无论如何都只使用包装类</font></p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221216230712892.png" alt="image-20221216230712892"></p><h4 id="MySQL字段类型"><a href="#MySQL字段类型" class="headerlink" title="MySQL字段类型"></a>MySQL字段类型</h4><p>当实体类的属性类型是Boolean时，MySQL表的字段类型可以使用<code>tinyint</code>，长度设为<code>1</code></p><p>实体类的值为<code>true</code>时MySQL的值是<code>1</code>，值为<code>false</code>时MySQL的值是<code>0</code>，从MySQL查到的值会被转换成true或false，而不是1或0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;在Java实体类中使用布尔类型的话，有一些细节要特别注意，不然这些布尔类型的字段用起来会很麻烦&lt;/p&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="后端" scheme="https://blog.zoutl.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://blog.zoutl.cn/tags/Java/"/>
    
  </entry>
  
</feed>
