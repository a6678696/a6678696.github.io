<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeDao的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-02T01:08:42.580Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LeDao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker安装Redis</title>
    <link href="http://example.com/331.html"/>
    <id>http://example.com/331.html</id>
    <published>2021-09-02T00:06:24.000Z</published>
    <updated>2021-09-02T01:08:42.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5</span><br></pre></td></tr></table></figure><h3 id="创建并运行容器"><a href="#创建并运行容器" class="headerlink" title="创建并运行容器"></a>创建并运行容器</h3><p>只运行不进入，要创建并运行就把 -d 改为 -it ，或者使用下面的进入Redis容器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 6379:6379 Redis镜像id</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>进入容器命令行界面后就可以愉快地玩耍了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it Redis容器id redis-cli</span><br></pre></td></tr></table></figure><h3 id="Redis可视化工具"><a href="#Redis可视化工具" class="headerlink" title="Redis可视化工具"></a>Redis可视化工具</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>我使用的是AnotherRedisDesktopManager，下载地址：<a href="https://gitee.com/qishibo/AnotherRedisDesktopManager/releases">AnotherRedisDesktopManager 发行版 - Gitee.com</a>，Windows下载第一个，像一般软件那般安装接口</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20090145.jpg"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>点击新建连接，地址填Linux服务器IP地址，端口一般都是6379，连接名称根据自己的需求填</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20090427.jpg"></p><p>连接成功后，就可以管理Redis了</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20090733.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/58.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Keepalived+Nginx+Tomcat负载均衡</title>
    <link href="http://example.com/330.html"/>
    <id>http://example.com/330.html</id>
    <published>2021-09-01T12:41:02.000Z</published>
    <updated>2021-09-01T17:32:01.868Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><p>主机和备用机分别使用Docker启动一个Tomcat，版本号最好不同，启动成功后有可能通过外部浏览器无法访问，解决方法查看博客：<a href="https://blog.zoutl.cn/294.html">Docker启动Tomcat成功后外部却无法访问</a></p><h3 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h3><p>修改主机和备用机的Nginx配置，修改内容一样</p><p>修改nginx.conf配置文件（在/etc/nginx目录下），在include /etc/nginx/conf.d/*.conf上方加上：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line"> server <span class="number">192.168</span>.<span class="number">0.106</span>:<span class="number">8080</span> weight=<span class="number">5</span>;</span><br><span class="line"> server <span class="number">192.168</span>.<span class="number">0.107</span>:<span class="number">8080</span> weight=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改default.conf配置文件（在/etc/nginx/conf.d目录下），在location /节点加上：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass  http://www.<span class="number">123</span>.com;</span><br></pre></td></tr></table></figure><p>server_name可以修改成 <a href="http://www.123.com/">www.123.com</a> ，也可以不修改</p><h3 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址输入：<a href="http://192.168.0.106/">http://192.168.0.106/</a>或者<a href="http://192.168.0.107/">http://192.168.0.107/</a></p><p>不断刷新页面，访问了主机和备用机的Tomcat，此时Nginx+Tomcat负载均衡完成</p><p>如果出现错误：502 Bad Gateway，这是因为Nginx 主机的 SELinux 服务限制了其（即 Nginx）使用 http 访问权限引起的，输入以下命令即可解决此问题，如果不生效再重启Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect 1    <span class="comment"># “1”为开启，“0”为关闭</span></span><br></pre></td></tr></table></figure><p>打开Keepalived服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure><p>浏览器地址输入Keepalived配置的virtual_ipaddress，该配置文件在/etc/keepalived目录下，此时已经完成了Keepalived+Nginx+Tomcat负载均衡</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/47.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
    <category term="Keepalived" scheme="http://example.com/tags/Keepalived/"/>
    
  </entry>
  
  <entry>
    <title>通过shell脚本优化Keepalived+Nginx高可用集群</title>
    <link href="http://example.com/329.html"/>
    <id>http://example.com/329.html</id>
    <published>2021-09-01T04:46:56.000Z</published>
    <updated>2021-09-01T05:57:46.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Keepalived不容易挂掉，容易挂掉的是Nginx，如果Nginx挂掉了依然可以通过Keepalived访问机器，但是访问不到Nginx服务。所以这里需要借助Keepalived的vrrp_script配置来调用自定义shell脚本，来检测Nginx是否挂掉，如果Nginx挂掉了，就启动它，打开失败就关闭Keepalived启用备用机</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h4><p>在 / 目录下新建shell目录存放shell脚本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /shell</span><br></pre></td></tr></table></figure><p>新建 .sh文件，命名为：nginx_check.sh，内容如下：（该脚本的功能为通过 <font color="#dd0000">ps -ef|grep -w nginx|grep -v grep|wc -l</font>查看当前有多少个Nginx服务在运行，如果返回0说明Nginx服务没有运行，就启动Nginx，过2秒再查看是否启动成功，启动失败就停止Keepalived启用备用机）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &#x27;check Nginx&#x27;</span><br><span class="line"></span><br><span class="line">count_nginx=`ps -ef|grep -w nginx|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">echo $count_nginx</span><br><span class="line"></span><br><span class="line">if [ $count_nginx -eq 0 ];then</span><br><span class="line"></span><br><span class="line">    systemctl start nginx</span><br><span class="line">    echo &#x27;start Nginx&#x27;</span><br><span class="line">    sleep 2</span><br><span class="line"></span><br><span class="line">    if [ `ps -ef|grep -w nginx|grep -v grep|wc -l` -eq 0 ];then</span><br><span class="line">        echo &#x27;stop keepalived&#x27;</span><br><span class="line">        systemctl stop keepalived</span><br><span class="line">    fi  </span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="修改Keepalived配置"><a href="#修改Keepalived配置" class="headerlink" title="修改Keepalived配置"></a>修改Keepalived配置</h4><p>配置文件路径为：/etc/keepalived/keepalived.conf</p><p>添加节点：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">script <span class="string">&quot;/shell/nginx_check.sh&quot;</span></span><br><span class="line">nterval <span class="number">2</span></span><br><span class="line">weight -<span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vrrp_instance VI_1节点添加：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">track_script &#123;</span><br><span class="line">check_nginx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整keepalived.conf如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">! Configuration <span class="keyword">File</span> for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server <span class="number">192.168</span>.<span class="number">200.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id KEEPALIVED_NGINX_MASTER</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   <span class="comment"># vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">script <span class="string">&quot;/shell/nginx_check.sh&quot;</span></span><br><span class="line">nterval <span class="number">2</span></span><br><span class="line">weight -<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">    check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span>.<span class="number">1.99</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启Keepalived服务"><a href="#重启Keepalived服务" class="headerlink" title="重启Keepalived服务"></a>重启Keepalived服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart keepalived</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>关闭Nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop nginx</span><br></pre></td></tr></table></figure><p>等2秒查看Nginx服务状态：Nginx服务正在运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-01%20132949.png"></p><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>我在测试时keepalived vrrp_script始终不起作用，通过网上的解决方案也没有解决，所以我就不使用vrrp_script了，转而使用Linux的Crontab定时任务定时执行检测脚本，如何使用Crontab查看博客：<a href="https://blog.zoutl.cn/328.html">CentOS7使用Crontab定时任务 </a></p><p>如果你解决了keepalived vrrp_script不起作用，请在评论区留言一下，谢谢(～￣▽￣)～</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/38.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
    <category term="Keepalived" scheme="http://example.com/tags/Keepalived/"/>
    
    <category term="shell" scheme="http://example.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7使用Crontab定时任务</title>
    <link href="http://example.com/328.html"/>
    <id>http://example.com/328.html</id>
    <published>2021-09-01T04:01:53.000Z</published>
    <updated>2021-09-01T04:47:07.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start crond</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop crond</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status crond</span><br></pre></td></tr></table></figure><h3 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h3><p>Crontab定时任务是没有权限执行shell脚本的，要先赋予脚本777权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 脚本名称（不在当前目录要加上路径）</span><br></pre></td></tr></table></figure><h3 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h3><h4 id="脚本放在目录"><a href="#脚本放在目录" class="headerlink" title="脚本放在目录"></a>脚本放在目录</h4><p>把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次</p><h4 id="编写crontab命令"><a href="#编写crontab命令" class="headerlink" title="编写crontab命令"></a>编写crontab命令</h4><p>进入当前用户的工作表编辑，是常见的vim界面，每行是一条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>crontab的命令构成为 时间+动作，下面的* * * * *是时间，shell脚本路径为动作</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-01%20123513.png"></p><p>时间有分、时、日、月、周五种，操作符有：</p><p><font color="#dd0000">*****</font> ：取值范围内的所有数字</p><p><font color="#dd0000"><strong>/</strong></font> ：每过多少个数字</p><p><font color="#dd0000"><strong>-</strong></font> ：从X到Z</p><p><font color="#dd0000"><strong>,</strong></font> ：散列数字</p><p>一些实例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">实例<span class="number">1</span>：每<span class="number">1</span>分钟执行一次myCommand</span><br><span class="line">* * * * * myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">2</span>：每小时的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</span><br><span class="line"><span class="number">3</span>,<span class="number">15</span> * * * * myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">3</span>：在上午<span class="number">8</span>点到<span class="number">11</span>点的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</span><br><span class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span>-<span class="number">11</span> * * * myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">4</span>：每隔两天的上午<span class="number">8</span>点到<span class="number">11</span>点的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</span><br><span class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span>-<span class="number">11</span> */<span class="number">2</span>  *  * myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">5</span>：每周一上午<span class="number">8</span>点到<span class="number">11</span>点的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</span><br><span class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span>-<span class="number">11</span> * * <span class="number">1</span> myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">6</span>：每晚的<span class="number">21</span>:<span class="number">30</span>重启smb</span><br><span class="line"><span class="number">30</span> <span class="number">21</span> * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">7</span>：每月<span class="number">1</span>、<span class="number">10</span>、<span class="number">22</span>日的<span class="number">4</span> : <span class="number">45</span>重启smb</span><br><span class="line"><span class="number">45</span> <span class="number">4</span> <span class="number">1</span>,<span class="number">10</span>,<span class="number">22</span> * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">8</span>：每周六、周日的<span class="number">1</span> : <span class="number">10</span>重启smb</span><br><span class="line"><span class="number">10</span> <span class="number">1</span> * * <span class="number">6</span>,<span class="number">0</span> /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">9</span>：每天<span class="number">18</span> : <span class="number">00</span>至<span class="number">23</span> : <span class="number">00</span>之间每隔<span class="number">30</span>分钟重启smb</span><br><span class="line"><span class="number">0</span>,<span class="number">30</span> <span class="number">18</span>-<span class="number">23</span> * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">10</span>：每星期六的晚上<span class="number">11</span> : <span class="number">00</span> pm重启smb</span><br><span class="line"><span class="number">0</span> <span class="number">23</span> * * <span class="number">6</span> /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">11</span>：每一小时重启smb</span><br><span class="line"><span class="number">0</span> */<span class="number">1</span> * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">12</span>：晚上<span class="number">11</span>点到早上<span class="number">7</span>点之间，每隔一小时重启smb</span><br><span class="line"><span class="number">0</span> <span class="number">23</span>-<span class="number">7</span>/<span class="number">1</span> * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/23.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CentOS7" scheme="http://example.com/categories/CentOS7/"/>
    
    
    <category term="CentOS7" scheme="http://example.com/tags/CentOS7/"/>
    
    <category term="Crontab" scheme="http://example.com/tags/Crontab/"/>
    
  </entry>
  
  <entry>
    <title>PotPlayer安装皮肤</title>
    <link href="http://example.com/327.html"/>
    <id>http://example.com/327.html</id>
    <published>2021-08-30T13:06:23.000Z</published>
    <updated>2021-08-31T05:53:05.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载皮肤"><a href="#下载皮肤" class="headerlink" title="下载皮肤"></a>下载皮肤</h3><p>下载地址：<a href="http://www.potplayercn.com/skins/">PotPlayer皮肤 - PotPlayer中文网 (potplayercn.com)</a></p><h3 id="安装皮肤"><a href="#安装皮肤" class="headerlink" title="安装皮肤"></a>安装皮肤</h3><h4 id="下载后解压"><a href="#下载后解压" class="headerlink" title="下载后解压"></a>下载后解压</h4><p>解压时选择提取到xxxxx文件夹，xxxxx就是下载好的压缩包名称</p><h4 id="找到皮肤文件夹"><a href="#找到皮肤文件夹" class="headerlink" title="找到皮肤文件夹"></a>找到皮肤文件夹</h4><p>打开PotPlayer后，在界面上右键点击，选择皮肤–&gt;&gt;皮肤设置</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-31%20132543.png"></p><p>打开皮肤文件夹，找到PotPlayer的皮肤安装目录</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-31%20132618.png"></p><h4 id="使用皮肤"><a href="#使用皮肤" class="headerlink" title="使用皮肤"></a>使用皮肤</h4><p>然后把上面解压后的文件夹复制到皮肤文件夹中，再重启PotPlayer，在界面上右键点击，选择皮肤再选择对应的皮肤即可</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-31%20133438.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/17.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="其它" scheme="http://example.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="其它" scheme="http://example.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>Keepalived+Nginx实现高可用集群配置</title>
    <link href="http://example.com/326.html"/>
    <id>http://example.com/326.html</id>
    <published>2021-08-30T04:54:13.000Z</published>
    <updated>2021-08-30T05:47:54.442Z</updated>
    
    <content type="html"><![CDATA[<h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><p>克隆当前虚拟机，查看克隆步骤：<a href="/325.html">VMware克隆虚拟机</a> ，当前虚拟机为主机，克隆的虚拟机为备用机（主机崩了才会启用备用机）</p><h3 id="配置主机"><a href="#配置主机" class="headerlink" title="配置主机"></a>配置主机</h3><h4 id="配置虚拟机hosts"><a href="#配置虚拟机hosts" class="headerlink" title="配置虚拟机hosts"></a>配置虚拟机hosts</h4><p>文件路径为：/etc/hosts，在底部添加：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span> KEEPALIVED_NGINX_MASTER</span><br></pre></td></tr></table></figure><h4 id="Keepalived配置介绍"><a href="#Keepalived配置介绍" class="headerlink" title="Keepalived配置介绍"></a>Keepalived配置介绍</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123; <span class="comment"># keepalived服务宕机异常出现的时候，发送通知邮件 可以是多个</span></span><br><span class="line">     acassen@firewall.loc  <span class="comment">#  收件人邮箱1</span></span><br><span class="line">     failover@firewall.loc <span class="comment">#  收件人邮箱2</span></span><br><span class="line">     sysadmin@firewall.loc <span class="comment">#  收件人邮箱3</span></span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc  <span class="comment">#邮件发件人</span></span><br><span class="line">   smtp_server <span class="number">192.168</span>.<span class="number">200.1</span>  <span class="comment"># 邮件服务器地址</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span>   <span class="comment"># 超时时间</span></span><br><span class="line">   router_id LVS_DEVEL   <span class="comment"># 路由id 多个keepalived集群的时候 必须一致</span></span><br><span class="line">   vrrp_skip_check_adv_addr <span class="comment"># 默认是不跳过检查。检查收到的VRRP通告中的所有地址可能会比较耗时，设置此命令的意思是，如果通告与接收的上一个通告来自相同的master路由器，则不执行检查(跳过检查)。</span></span><br><span class="line">   vrrp_strict   <span class="comment"># 这个东西要注释掉，否则要出乱子。严格遵守VRRP协议。下列情况将会阻止启动Keepalived：1. 没有VIP地址。2. 单播邻居。3. 在VRRP版本2中有IPv6地址。</span></span><br><span class="line">   vrrp_garp_interval <span class="number">0</span>  <span class="comment"># 小数类型，单位秒，在一个网卡上每组gratuitous arp消息之间的延迟时间，默认为0，一个发送的消息=n组 arp报文</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span> <span class="comment"># 小数类型，单位秒， 在一个网卡上每组na消息之间的延迟时间，默认为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># vrrp实例  我们集群设置 多机配置，除了state和priority不一样，其他都一样</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER  <span class="comment"># 服务器状态 MASTER是主服务器  BACKUP是备份服务器 主服务器的priority要比备份服务器大</span></span><br><span class="line">    interface eth0 <span class="comment"># 通信端口 通过ip addr可以看到 根据自己的机器配置</span></span><br><span class="line">    virtual_router_id <span class="number">51</span>  <span class="comment"># vrrp实例id  keepalived集群，实例id必须一致</span></span><br><span class="line">    priority <span class="number">100</span>  <span class="comment"># 权重比  主服务器的priority要比备份服务器大</span></span><br><span class="line">    advert_int <span class="number">1</span>  <span class="comment"># 心跳间隔  单位秒  keepalived多机器集群 通过心跳检测，如果发送心跳没反应 就立刻接管；</span></span><br><span class="line">    authentication &#123; <span class="comment"># 服务器之间通信密码</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123; <span class="comment"># 自定义虚拟IP </span></span><br><span class="line">        <span class="number">192.168</span>.<span class="number">200.16</span></span><br><span class="line">        <span class="number">192.168</span>.<span class="number">200.17</span></span><br><span class="line">        <span class="number">192.168</span>.<span class="number">200.18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改Keepalived配置文件"><a href="#修改Keepalived配置文件" class="headerlink" title="修改Keepalived配置文件"></a>修改Keepalived配置文件</h4><p>修改 /etc/keepalived 目录下的keepalived.conf配置文件，除了global_defs和vrrp_instance VI_1节点配置外，下面的节点配置都删除</p><p>global_defs.router_id修改为：KEEPALIVED_NGINX_MASTER</p><p>把global_defs.vrrp_strict注释掉</p><p>vrrp_instance VI_1.state修改为：MASTER</p><p>vrrp_instance VI_1.interface修改为：ens33</p><p>vrrp_instance VI_1.priority修改为：100</p><p>vrrp_instance VI_1.virtual_ipaddress修改为：192.168.1.99</p><p>完整keepalived.conf配置如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">! Configuration <span class="keyword">File</span> for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server <span class="number">192.168</span>.<span class="number">200.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id KEEPALIVED_NGINX_MASTER</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   <span class="comment"># vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span>.<span class="number">1.99</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置备用机"><a href="#配置备用机" class="headerlink" title="配置备用机"></a>配置备用机</h3><h4 id="配置虚拟机hosts-1"><a href="#配置虚拟机hosts-1" class="headerlink" title="配置虚拟机hosts"></a>配置虚拟机hosts</h4><p>文件路径为：/etc/hosts，在底部添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 KEEPALIVED_NGINX_BACKUP</span><br></pre></td></tr></table></figure><h4 id="修改Keepalived配置文件-1"><a href="#修改Keepalived配置文件-1" class="headerlink" title="修改Keepalived配置文件"></a>修改Keepalived配置文件</h4><p>修改 /etc/keepalived 目录下的keepalived.conf配置文件，除了global_defs和vrrp_instance VI_1节点配置外，下面的节点配置都删除</p><p>global_defs.router_id修改为：KEEPALIVED_NGINX_BACKUP</p><p>把global_defs.vrrp_strict注释掉</p><p>vrrp_instance VI_1.state修改为：BACKUP</p><p>vrrp_instance VI_1.interface修改为：ens33</p><p>vrrp_instance VI_1.priority修改为：50</p><p>vrrp_instance VI_1.virtual_ipaddress修改为：192.168.1.99</p><p>完整keepalived.conf配置如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">! Configuration <span class="keyword">File</span> for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server <span class="number">192.168</span>.<span class="number">200.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id KEEPALIVED_NGINX_BACKUP</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   <span class="comment"># vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP <span class="comment"># 服务器状态 MASTER是主服务器  BACKUP是备份服务器 主服务器的priority要比备份服务器大</span></span><br><span class="line">    interface ens33 <span class="comment"># 通信端口 通过ip addr可以看到 根据自己的机器配置</span></span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">50</span> <span class="comment"># 权重</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span>.<span class="number">1.99</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="修改Nginx首页"><a href="#修改Nginx首页" class="headerlink" title="修改Nginx首页"></a>修改Nginx首页</h4><p>分别修改主机和备用机的Nginx运行成功的首页，文件路径为：/usr/share/nginx/html/index.html，在首页代码中添加虚拟机IP以方便辨认访问的是哪个虚拟机</p><h4 id="启动Keepalived"><a href="#启动Keepalived" class="headerlink" title="启动Keepalived"></a>启动Keepalived</h4><p>启动主机和备用机的Keepalived</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>浏览器地址栏输入：<a href="http://192.168.1.99/">http://192.168.1.99/</a>，此时访问的是主机的Nginx</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20134623.png"></p><p>然后停掉主机的Keepalived</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop keepalived.service</span><br></pre></td></tr></table></figure><p>刷新一下页面，此时访问的是备用机的Nginx</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20134604.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/17.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
    <category term="Keepalived" scheme="http://example.com/tags/Keepalived/"/>
    
  </entry>
  
  <entry>
    <title>VMware克隆虚拟机</title>
    <link href="http://example.com/325.html"/>
    <id>http://example.com/325.html</id>
    <published>2021-08-30T04:37:03.000Z</published>
    <updated>2021-08-30T05:47:54.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关闭虚拟机"><a href="#关闭虚拟机" class="headerlink" title="关闭虚拟机"></a>关闭虚拟机</h3><p>如果要克隆的虚拟机正在运行，就先把它停掉，正在运行的虚拟机是无法克隆的</p><h3 id="开始克隆"><a href="#开始克隆" class="headerlink" title="开始克隆"></a>开始克隆</h3><blockquote><p>选中要克隆的虚拟机右键点击，选择 <font color="#dd0000">管理–&gt;&gt;克隆</font></p></blockquote><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20124552.png"></p><blockquote><p>克隆类型选择完整克隆</p></blockquote><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20124640.png"></p><blockquote><p>填写虚拟机名称以及存储路径</p></blockquote><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20124658.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/17.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="其它" scheme="http://example.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="其它" scheme="http://example.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装Keepalived</title>
    <link href="http://example.com/324.html"/>
    <id>http://example.com/324.html</id>
    <published>2021-08-30T00:54:42.000Z</published>
    <updated>2021-08-30T01:13:15.853Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install keepalived</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop keepalived.service</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart keepalived.service</span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/messages</span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>配置文件在/etc/keepalived目录下，名称为：keepalived.conf</p><p>日志文件在/var/log目录下，名称为：messages</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/5.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="CentOS7" scheme="http://example.com/tags/CentOS7/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
    <category term="Keepalived" scheme="http://example.com/tags/Keepalived/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装Nginx</title>
    <link href="http://example.com/323.html"/>
    <id>http://example.com/323.html</id>
    <published>2021-08-30T00:15:10.000Z</published>
    <updated>2021-08-30T00:51:31.641Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加Nginx源"><a href="#添加Nginx源" class="headerlink" title="添加Nginx源"></a>添加Nginx源</h3><p>CentOS7默认是没有Nginx源的，Nginx官方提供了添加源的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><h3 id="设置开机自动运行"><a href="#设置开机自动运行" class="headerlink" title="设置开机自动运行"></a>设置开机自动运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status  firewalld</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址栏输入虚拟机IP，看到 <font color="#dd0000">Welcome to nginx! </font>就说明安装成功</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>CentOS7关闭Nginx命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop nginx.service</span><br></pre></td></tr></table></figure><p>CentOS7启动Nginx命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><p>CentOS7重启Nginx命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/5.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="CentOS7" scheme="http://example.com/tags/CentOS7/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx实现虚拟主机</title>
    <link href="http://example.com/322.html"/>
    <id>http://example.com/322.html</id>
    <published>2021-08-29T16:02:51.000Z</published>
    <updated>2021-08-29T17:11:55.558Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>虚拟主机概念比较广，可以是虚拟硬件来实现多网站，多应用运行，也可以是通过一些代理服务器来实现单击多网站运行，例如：我们一个服务器上可以配置三个网站，通过三个域名访问</p><p>Nginx可以通过反向代理来实现虚拟主机</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="创建Tomcat容器"><a href="#创建Tomcat容器" class="headerlink" title="创建Tomcat容器"></a>创建Tomcat容器</h4><p>创建3个Tomcat容器,并修改对应的默认项目的首页文件（主要是方便查看运行的是哪个Tomcat）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name tomcat1 -p 8080:8080 -v /home/data/tomcat/tomcat1/conf/:/usr/<span class="built_in">local</span>/tomcat/conf/  -v /home/data/tomcat/tomcat1/webapps/:/usr/<span class="built_in">local</span>/tomcat/webapps/ 108db0e7c85e</span><br><span class="line"></span><br><span class="line">docker run -d --name tomcat2 -p 9090:9090 -v /home/data/tomcat/tomcat2/conf/:/usr/<span class="built_in">local</span>/tomcat/conf/  -v /home/data/tomcat/tomcat2/webapps/:/usr/<span class="built_in">local</span>/tomcat/webapps/ 108db0e7c85e</span><br><span class="line"></span><br><span class="line">docker run -d --name tomcat3 -p 7070:7070 -v /home/data/tomcat/tomcat3/conf/:/usr/<span class="built_in">local</span>/tomcat/conf/  -v /home/data/tomcat/tomcat3/webapps/:/usr/<span class="built_in">local</span>/tomcat/webapps/ 108db0e7c85e</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20002344.png"></p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20002400.png"></p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20002420.png"></p><h4 id="查看容器的Docker-IP"><a href="#查看容器的Docker-IP" class="headerlink" title="查看容器的Docker IP"></a>查看容器的Docker IP</h4><p>使用命令 <font color="#dd0000">docker inspect 容器id</font> 查看tomcat1、tomcat2、tomcat3的Docker IP</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tomcat1  <span class="number">172.17</span>.<span class="number">0.2</span>  <span class="number">8080</span></span><br><span class="line"></span><br><span class="line">tomcat2  <span class="number">172.17</span>.<span class="number">0.3</span>  <span class="number">9090</span></span><br><span class="line"></span><br><span class="line">tomcat3  <span class="number">172.17</span>.<span class="number">0.4</span>  <span class="number">7070</span></span><br></pre></td></tr></table></figure><h4 id="创建Nginx容器"><a href="#创建Nginx容器" class="headerlink" title="创建Nginx容器"></a>创建Nginx容器</h4><p>创建一个Nginx容器，并且挂载目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=nginx80 -v /home/data/nginx:/etc/nginx -p 80:80 nginx镜像id</span><br></pre></td></tr></table></figure><p>修改 nginx.conf 配置文件，主要添加以下内容：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line"></span><br><span class="line"> server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream blog.<span class="number">123</span>.com&#123;</span><br><span class="line"></span><br><span class="line"> server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream static.<span class="number">123</span>.com&#123;</span><br><span class="line"></span><br><span class="line"> server <span class="number">172.17</span>.<span class="number">0.4</span>:<span class="number">7070</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 default.conf 配置文件，主要是三个server，对应三个域名</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name  www.<span class="number">123</span>.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.<span class="number">123</span>.com;</span><br><span class="line"></span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name  blog.<span class="number">123</span>.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://blog.<span class="number">123</span>.com;</span><br><span class="line"></span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name  static.<span class="number">123</span>.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://static.<span class="number">123</span>.com;</span><br><span class="line"></span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置本地域名"><a href="#配置本地域名" class="headerlink" title="配置本地域名"></a>配置本地域名</h4><p>找到 C:\Windows\System32\drivers\etc 打开hosts，底部加配置：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">0.140</span> www.<span class="number">123</span>.com</span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.140</span> static.<span class="number">123</span>.com</span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.140</span> blog.<span class="number">123</span>.com</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>输入上面三个本地域名可以访问到对应的Tomcat</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/5.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx实现动静分离</title>
    <link href="http://example.com/321.html"/>
    <id>http://example.com/321.html</id>
    <published>2021-08-29T15:15:00.000Z</published>
    <updated>2021-08-29T15:52:48.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>动静分离是指在web服务器架构中，将静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问的架构设计方法，进而提升整个服务访问性能和可维护性</p><p>我们可以把静态html页面，css样式，js文件，以及图片文件这些静态放Nginx服务器中，然后把动态请求显示的文件放类似Tomcat这样的容器服务器</p><p>这样方便维护，也可以提高系统性能</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="新建Nginx静态服务器"><a href="#新建Nginx静态服务器" class="headerlink" title="新建Nginx静态服务器"></a>新建Nginx静态服务器</h4><p>新建Nginx容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=myNginx2 -v /home/data/nginx2:/etc/nginx -v /home/data/nginx2data:/home/nginx -p 1010:1010 nginx镜像id</span><br></pre></td></tr></table></figure><p>在/home/data/nginx2data/目录下放静态资源</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-29%20232321.png"></p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://192.168.0.140:1010/static/css/my.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.0.140:1010/static/js/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Nginx静态资源服务器测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.0.140:1010/static/img/2.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 666px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>my.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>my.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><p>修改Nginx容器 default.conf 的端口以及location /</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-29%20233013.png"></p><p>浏览器地址栏输入：<a href="http://192.168.0.140:1010/">http://192.168.0.140:1010/</a>，结果如下：</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-29%20233353.gif"></p><h4 id="配置主Nginx容器"><a href="#配置主Nginx容器" class="headerlink" title="配置主Nginx容器"></a>配置主Nginx容器</h4><p>修改nginx.conf，只要修改或添加upstream，下图的IP地址为对应容器的DockerIP地址</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line"> server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span> weight=<span class="number">5</span>;</span><br><span class="line"> server <span class="number">172.17</span>.<span class="number">0.4</span>:<span class="number">9090</span> weight=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream static.<span class="number">123</span>.com&#123;</span><br><span class="line"> server <span class="number">172.17</span>.<span class="number">0.5</span>:<span class="number">1010</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log notice;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="keyword">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] <span class="string">&quot;$request&quot;</span> &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent <span class="string">&quot;$http_referer&quot;</span> &#x27;</span><br><span class="line">                      &#x27;<span class="string">&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;</span>&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        <span class="keyword">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">         server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span> weight=<span class="number">5</span>;</span><br><span class="line">         server <span class="number">172.17</span>.<span class="number">0.4</span>:<span class="number">9090</span> weight=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    upstream static.<span class="number">123</span>.com&#123;</span><br><span class="line">         server <span class="number">172.17</span>.<span class="number">0.5</span>:<span class="number">1010</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span> /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改default.conf，添加以下内容：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">proxy_pass http://static.<span class="number">123</span>.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">   proxy_pass http://static.<span class="number">123</span>.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ .*\.(html)?$ &#123;</span><br><span class="line">   proxy_pass http://static.<span class="number">123</span>.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加本地域名"><a href="#添加本地域名" class="headerlink" title="添加本地域名"></a>添加本地域名</h4><p>找到 C:\Windows\System32\drivers\etc 打开hosts，底部加配置：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虚拟机IP static.<span class="number">123</span>.com</span><br></pre></td></tr></table></figure><h4 id="配置Tomcat容器"><a href="#配置Tomcat容器" class="headerlink" title="配置Tomcat容器"></a>配置Tomcat容器</h4><p>修改Tomcat默认项目的主页：在 /webapps/ROOT 目录下，名称为：index.jsp，在这个页面引用上面的静态资源文件</p><p>引用路径为：<a href="https://static.123.com/static/">https://static.123.com/static/</a> ，后面接文件目录及名称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://static.123.com/static/css/my.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://static.123.com/static/js/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://static.123.com/static/img/2.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 666px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>运行这个Tomcat容器，如果可以看到资源生效就说明动静分离已经实现</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/107.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx负载均衡backup和down配置</title>
    <link href="http://example.com/320.html"/>
    <id>http://example.com/320.html</id>
    <published>2021-08-26T19:17:39.000Z</published>
    <updated>2021-08-26T19:31:28.700Z</updated>
    
    <content type="html"><![CDATA[<p>这两个配置很多时候用于运维，维护某个机器的时候用</p><h3 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h3><p>其他非backup机器挂掉后，才会请求backup机器</p><p>实例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span> backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="down"><a href="#down" class="headerlink" title="down"></a>down</h3><p>配置down的服务器不参与负载均衡，</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span> down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/98.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx负载均衡策略</title>
    <link href="http://example.com/319.html"/>
    <id>http://example.com/319.html</id>
    <published>2021-08-26T19:11:58.000Z</published>
    <updated>2021-08-26T19:38:59.283Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx负载均衡策略有：轮询（默认）、weight权重、ip_hash、least_conn最少连接</p><h3 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h3><p>每个请求轮流分配到不同的后端服务器，如果后端服务器挂掉，则自动被剔除</p><p>实例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="weight权重"><a href="#weight权重" class="headerlink" title="weight权重"></a>weight权重</h3><p>根据weight权重，请求会根据权重比例分发给不同后端服务器，weight权重越高，分配的比例越大；实际分配时，根据服务器硬件配置高低，来具体分配weight权重，硬件配置高的，weight就配置高点</p><p>实例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span> weight=<span class="number">5</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span> weight=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><p>ip_hash策略是根据用户客户端的IP的hash值来分配具体服务器，这样每个访问客户端都会固定访问某一个服务器，这样可以解决session丢失问题，很多网站都采用这种策略来搞负载均衡，主要考虑到session问题</p><p>实例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line"> ip_hash;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="least-conn"><a href="#least-conn" class="headerlink" title="least_conn"></a>least_conn</h3><p>web请求会被分发到连接数最少的服务器上</p><p>实例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line"> least_conn;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/85.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx实现负载均衡</title>
    <link href="http://example.com/318.html"/>
    <id>http://example.com/318.html</id>
    <published>2021-08-26T17:59:31.000Z</published>
    <updated>2021-08-26T19:04:28.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Docker中运行多个Tomcat，客户端把请求发送给Nginx后，由Nginx分发给其中一个Tomcat，Tomcat响应后再由Nginx返回结果到客户端</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="复制Tomcat配置"><a href="#复制Tomcat配置" class="headerlink" title="复制Tomcat配置"></a>复制Tomcat配置</h4><p>创建并启动一个Tomcat容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=自定义名称 -p 8080:8080 tomcat镜像id</span><br></pre></td></tr></table></figure><p>在 /home/data/tomcat 目录下新建两个目录：tomcat1、tomcat2，并把该容器的 /usr/local/tomcat/conf 和 /usr/local/tomcat/webapps 目录复制到 /home/tomcat1 和 /home/tomcat2 下，复制命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制到tomcat1</span></span><br><span class="line">docker cp 该容器id:/usr/<span class="built_in">local</span>/tomcat/conf /home/data/tomcat/tomcat1/</span><br><span class="line">docker cp 该容器id:/usr/<span class="built_in">local</span>/tomcat/webapps /home/data/tomcat/tomcat1/</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制到tomcat2</span></span><br><span class="line">docker cp 该容器id:/usr/<span class="built_in">local</span>/tomcat/conf /home/data/tomcat/tomcat2/</span><br><span class="line">docker cp 该容器id:/usr/<span class="built_in">local</span>/tomcat/webapps /home/data/tomcat/tomcat2/</span><br></pre></td></tr></table></figure><h4 id="创建Tomcat容器"><a href="#创建Tomcat容器" class="headerlink" title="创建Tomcat容器"></a>创建Tomcat容器</h4><p>把正在运行的Tomcat容器停掉，创建和启动两个Tomcat容器，并挂载目录到新创建的两个目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name tomcat1 -p 8080:8080 -v /home/data/tomcat/tomcat1/conf/:/usr/<span class="built_in">local</span>/tomcat/conf/ -v /home/data/tomcat/tomcat1/webapps/:/usr/<span class="built_in">local</span>/tomcat/webapps/ tomcat镜像id</span><br><span class="line"></span><br><span class="line">docker run -d --name tomcat2 -p 9090:9090 -v /home/data/tomcat/tomcat2/conf/:/usr/<span class="built_in">local</span>/tomcat/conf/ -v /home/data/tomcat/tomcat2/webapps/:/usr/<span class="built_in">local</span>/tomcat/webapps/ tomcat镜像id</span><br></pre></td></tr></table></figure><p>修改Tomcat2的配置文件中的端口为9090，该文件的宿主机路径为：/home/data/tomcat/tomcat2/conf/server.xml（因为已经挂载了目录所以可以直接在宿主机修改）</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-27%20023013.png"></p><p>修改两个Tomcat容器运行成功后的首页，Tomcat1的首页文件宿主机目录为：/home/data/tomcat/tomcat1/webapps/ROOT/index.jsp，Tomcat2的首页文件宿主机目录为：/home/data/tomcat/tomcat2/webapps/ROOT/index.jsp，修改了可以看出运行成功后是哪个Tomcat运行就行了，我的修改如下：</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-27%20023833.png"></p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-27%20023855.png"></p><p>试一下两个Tomcat容器能否正确运行，可以运行成功即可</p><h4 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改nginx.conf</h4><p>在http{}中添加以下代码：（ <a href="http://www.123.com/">www.123.com</a> 为本地域名，IP和端口号为该Tomcat容器在Docker内的IP以及端口）</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line"> server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">8080</span> weight=<span class="number">5</span>;</span><br><span class="line"> server <span class="number">172.17</span>.<span class="number">0.4</span>:<span class="number">9090</span> weight=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>upstream是配置nginx与后端服务器负载均衡非常重要的一个模块，并且它还能对后端的服务器的健康状态进行检查，若后端服务器中的一台发生故障，则前端的请求不会转发到该故障的机器；weight是权重配置，权重越高，分配到的概率越高</p><h4 id="修改default-conf"><a href="#修改default-conf" class="headerlink" title="修改default.conf"></a>修改default.conf</h4><p>该文件在nginx.conf所在目录的conf.d目录下，修改proxy_pass为本机域名</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-27%20025538.png"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>浏览器地址栏输入：虚拟机IP或者与它绑定的本机域名，不断刷新页面，有时候请求的是tomcat1，有时候是tomcat2，如果停掉tomcat2那么就只请求tomcat1</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/72.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx实现反向代理</title>
    <link href="http://example.com/317.html"/>
    <id>http://example.com/317.html</id>
    <published>2021-08-26T15:00:29.000Z</published>
    <updated>2021-08-26T16:14:57.627Z</updated>
    
    <content type="html"><![CDATA[<p>本博客主要实现访问Nginx时，代理请求Tomcat服务器</p><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><p>创建并启动Nginx容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=自定义名称 -v /home/data/nginx:/etc/nginx -p 80:80 nginx镜像id</span><br></pre></td></tr></table></figure><h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><p>创建并启动Tomcat容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=自定义名称 -p 8080:8080 tomcat镜像id</span><br></pre></td></tr></table></figure><p>查看Docker给Tomcat容器分配的IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect Tomcat容器id</span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-27%20000102.png"></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在宿主机 <font color="#dd0000">/home/data/nginx/conf.d</font> 目录下修改 <mark class="hl-label blue">default.conf</mark>  文件（下面的IP为Docker给Tomcat容器分配的IP）</p><p>location / { }中添加：<mark class="hl-label blue">proxy_pass  http://172.17.0.3:8080;</mark> </p><p>server_name修改为：<mark class="hl-label blue">http://172.17.0.3:8080</mark> （server_name内容随意，主要是用于区分）</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-26%20235921.png"></p><h3 id="添加本地域名"><a href="#添加本地域名" class="headerlink" title="添加本地域名"></a>添加本地域名</h3><p>找到 C:\Windows\System32\drivers\etc 打开hosts，底部加配置：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虚拟机IP www.<span class="number">123</span>.com</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址栏输入：<a href="http://www.123.com/">www.123.com</a> （也可以输入虚拟机IP）访问Nginx时，通过代理请求了Tomcat服务器</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/72.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Nginx</title>
    <link href="http://example.com/316.html"/>
    <id>http://example.com/316.html</id>
    <published>2021-08-26T13:14:31.000Z</published>
    <updated>2021-09-02T00:07:45.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h3 id="创建并运行容器"><a href="#创建并运行容器" class="headerlink" title="创建并运行容器"></a>创建并运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=自定义名称 -v /home/data/nginx:/etc/nginx -p 80:80 nginx镜像id</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx容器id bash</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址栏输入<font color="#dd0000">虚拟机IP</font>，看到<mark class="hl-label blue">Welcome to nginx!</mark> 说明安装成功</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/68.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>form表单无法提交input disabled内容</title>
    <link href="http://example.com/315.html"/>
    <id>http://example.com/315.html</id>
    <published>2021-08-24T01:06:16.000Z</published>
    <updated>2021-08-24T01:13:28.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用了disable属性让文本框无法编辑，但是提交form表单时无法获取该文本框的值，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/student/update&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;margin-top: 10%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;student.id&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;student.name&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;student.age&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>disabled=”disabled”修改为readonly=”readonly”即可</p><h3 id="readonly和disabled的区别"><a href="#readonly和disabled的区别" class="headerlink" title="readonly和disabled的区别"></a>readonly和disabled的区别</h3><p>readonly：针对input(text / password)和textarea有效，在设置为true的情况下，用户可以获得焦点，但是不能编辑，在提交表单时，输入项会作为form的内容提交</p><p>disabled：针对所有表单元素（select，button，input，textarea等），在设置为disabled为true的情况下，表单输入项不能获得焦点，用户的所有操作无意义，在提交表单时，表单输入项不会被提交。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/56.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Windows10释放被占用端口</title>
    <link href="http://example.com/314.html"/>
    <id>http://example.com/314.html</id>
    <published>2021-08-23T20:17:09.000Z</published>
    <updated>2021-08-24T11:58:01.980Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看PID"><a href="#查看PID" class="headerlink" title="查看PID"></a>查看PID</h3><p>打开CMD，输入命令查看端口4000的PID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">&quot;4000&quot;</span></span><br></pre></td></tr></table></figure><p>看下图的0.0.0.0:4000，LISTENING后的数值：16388就是PID</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20044304.png"></p><h3 id="释放端口"><a href="#释放端口" class="headerlink" title="释放端口"></a>释放端口</h3><h4 id="CMD方式释放"><a href="#CMD方式释放" class="headerlink" title="CMD方式释放"></a>CMD方式释放</h4><p>输入以下命令，PID为上图LISTENING后的数值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /T /F /PID 16388</span><br></pre></td></tr></table></figure><h4 id="任务管理器释放"><a href="#任务管理器释放" class="headerlink" title="任务管理器释放"></a>任务管理器释放</h4><p>查看指定 PID 的进程（也可以不看，记住PID即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr <span class="string">&quot;16388&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20044328.png"></p><p>打开任务管理，选择详细信息选项，根据进程名称或者PID找到进程</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20044726.jpg"></p><p>右键点击并选择结束任务</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20044745.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/49.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Windows10" scheme="http://example.com/categories/Windows10/"/>
    
    
    <category term="Windows10" scheme="http://example.com/tags/Windows10/"/>
    
  </entry>
  
  <entry>
    <title>idea创建Spring项目</title>
    <link href="http://example.com/313.html"/>
    <id>http://example.com/313.html</id>
    <published>2021-08-23T18:04:17.000Z</published>
    <updated>2021-08-23T18:12:54.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><p>查看博客：<a href="/253.html">idea创建Maven项目</a></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>命名为：applicationContext.xml，完整代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="学生实体类"><a href="#学生实体类" class="headerlink" title="学生实体类"></a>学生实体类</h4><p>命名为：Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-24 1:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><p>命名为：Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-24 1:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;student1&quot;</span>);</span><br><span class="line">        System.out.println(student.getId()+<span class="string">&quot;,&quot;</span>+student.getName()+<span class="string">&quot;,&quot;</span>+ student.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>运行测试类的main方法，结果如下：</p><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20021110.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/31.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="idea使用" scheme="http://example.com/categories/idea%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="idea使用" scheme="http://example.com/tags/idea%E4%BD%BF%E7%94%A8/"/>
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker私有仓库删除镜像</title>
    <link href="http://example.com/312.html"/>
    <id>http://example.com/312.html</id>
    <published>2021-08-22T20:04:05.000Z</published>
    <updated>2021-08-22T20:20:00.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>对于私有仓库的镜像，Docker是没有命令对其进行删除的</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>进入私有仓库的容器内，找到镜像文件，然后手动删除即可</p><h3 id="删除过程"><a href="#删除过程" class="headerlink" title="删除过程"></a>删除过程</h3><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>先运行对应私有仓库的容器，然后进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 私有仓库容器id sh</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>该配置文件在 /etc/docker/registry 目录下，名称为：config.yml ，在storage节点添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>完整config.yml代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">:5000</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> [<span class="string">nosniff</span>]</span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="找到镜像文件"><a href="#找到镜像文件" class="headerlink" title="找到镜像文件"></a>找到镜像文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;*要删除镜像名称*&quot;</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>进入上一步找到的镜像文件的路径，然后开始删除，该镜像文件是文件夹所以删除时追加参数-r</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r 镜像名称</span><br></pre></td></tr></table></figure><h4 id="同步配置文件"><a href="#同步配置文件" class="headerlink" title="同步配置文件"></a>同步配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure><h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><p>浏览器地址栏输入：<font color="#dd0000">http://虚拟机id:5000/v2/_catalog</font>，可以看到对应的镜像已经没了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.zoutl.cn/hexo-blog/images/homeBlogImage/26.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
</feed>
