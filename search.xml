<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>用Tomcat运行web项目</title>
    <url>/10.html</url>
    <content><![CDATA[<h3 id="复制项目到webapps文件夹"><a href="#复制项目到webapps文件夹" class="headerlink" title="复制项目到webapps文件夹"></a>复制项目到webapps文件夹</h3><p>将项目（war包）复制到Tomcat安装目录的webapps文件夹中</p>
<h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><p>然后去bin文件夹中,点击<code>startup.bat</code>即可启动Tomcat运行项目</p>
<h3 id="关闭Tomcat"><a href="#关闭Tomcat" class="headerlink" title="关闭Tomcat"></a>关闭Tomcat</h3><p>点击bin文件夹中的<code>shutdown.bat</code>关闭Tomcat</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>一个非常好用的Java工具包：HulTool</title>
    <url>/100.html</url>
    <content><![CDATA[<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="https://www.hutool.cn/">https://www.hutool.cn/</a></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Hutool是一个Java工具包类库，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类</p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>日期工具：通过DateUtil类，提供高度便捷的日期访问、处理和转换方式</p>
<p>HTTP客户端：通过HttpUtil对HTTP客户端的封装，实现便捷的HTTP请求，并简化文件上传操作</p>
<p>转换工具：通过Convert类中的相应静态方法，提供一整套的类型转换解决方案，并通过ConverterRegistry工厂类自定义转换</p>
<p>配置文件工具：通过Setting对象，提供兼容Properties文件的更加强大的配置文件工具，用于解决中文、分组等JDK配置文件存在的诸多问题</p>
<p>日志工具：Hutool的日志功能，通过抽象Log接口，提供对Slf4j、LogBack、Log4j、JDK-Logging的全面兼容支持</p>
<p>JDBC工具类：通过db模块，提供对MySQL、Oracle等关系型数据库的JDBC封装，借助ActiveRecord思想，大大简化数据库操作</p>
<p>更多功能：<a href="https://www.hutool.cn/docs/#/">官方参考文档</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>引入依赖后就可以直接使用了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库中text字段长度不够</title>
    <url>/102.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>text类型是可变长度的字符串，最多65535个字符，有时候会超过其长度</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>可以把字段类型改成<code>MEDIUMTEXT</code>（最多存放16777215个字符）或者<code>LONGTEXT</code>（最多存放4294967295个字符）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>解决：关于CKEditor的代码高亮</title>
    <url>/101.html</url>
    <content><![CDATA[<h3 id="获取HTML代码"><a href="#获取HTML代码" class="headerlink" title="获取HTML代码"></a>获取HTML代码</h3><blockquote>
<p>去代码在线高亮网站获得高亮后的HTML代码：（网站如下图所示）</p>
</blockquote>
<p>地址：<a href="https://c.runoob.com/front-end/5536">https://c.runoob.com/front-end/5536</a></p>
<p>①处填入要高亮的原始代码，②处是高亮后的HTML代码（是我们需要的），③处是高亮后的代码的效果预览</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210312194044.jpg" alt="img"></p>
<h3 id="复制到CKEditor"><a href="#复制到CKEditor" class="headerlink" title="复制到CKEditor"></a>复制到CKEditor</h3><blockquote>
<p>点击CKEditor富文本编辑器左上角的源码选项，进入编辑源码状态，在对应的位置将刚刚得到的HTML代码复制进去即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210312194504.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><blockquote>
<p>利用highlight.js实现代码高亮：<a href="/126.html">highlight.js实现代码高亮</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CKEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>制作网站logo</title>
    <url>/103.html</url>
    <content><![CDATA[<h3 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h3><p><a href="http://www.uugai.com/">http://www.uugai.com/</a></p>
<h3 id="输入logo的名称"><a href="#输入logo的名称" class="headerlink" title="输入logo的名称"></a>输入logo的名称</h3><p>进入网站后，输入logo的名称，然后点击开始设计</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210312223126.jpg" alt="img"></p>
<h3 id="设计文案"><a href="#设计文案" class="headerlink" title="设计文案"></a>设计文案</h3><p>下方的拼音（我称之为副标题）不删除的话最近的logo图片会有两行字（副标题可以根据自己的需要输入，如果不需要两行字就把下面的副标题删除即可），然后提交文案</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210312223528.jpg" alt="img"></p>
<h3 id="选择字体"><a href="#选择字体" class="headerlink" title="选择字体"></a>选择字体</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210312223625.jpg" alt="img"></p>
<h3 id="选择logo图案"><a href="#选择logo图案" class="headerlink" title="选择logo图案"></a>选择logo图案</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210312223719.jpg" alt="img"></p>
<h3 id="生成logo下载"><a href="#生成logo下载" class="headerlink" title="生成logo下载"></a>生成logo下载</h3><p>也可在下方选择字体的颜色（小字体即前面说的副标题）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210312223854.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>根据ip地址获取真实地址</title>
    <url>/104.html</url>
    <content><![CDATA[<h3 id="pom-xml引入"><a href="#pom-xml引入" class="headerlink" title="pom.xml引入"></a>pom.xml引入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据IP获取真实地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-03-13 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressUtil</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAddress</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        String result1 = HttpUtil.get(<span class="string">&quot;https://www.ip138.com/iplookup.asp?ip=&quot;</span> + ip + <span class="string">&quot;&amp;action=2&quot;</span>);</span><br><span class="line">        String result = result1.split(<span class="string">&quot;\&quot;ASN归属地\&quot;:\&quot;&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;\&quot;, \&quot;iP段\&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String ip = <span class="string">&quot;180.136.86.160&quot;</span>;</span><br><span class="line">        System.out.println(getAddress(ip));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210313120545.jpg" alt="img"></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>找到一个查ip的网站，随便查一个ip，然后将地址栏中的链接复制下来，链接中的ip之后在Java代码中可以动态拼接</p>
<p>通过<a href="https://www.hutool.cn/">Hutool工具包</a>的HttpUtil.get方法获取查某个ip得到结果后的网站源码</p>
<p>通过Java的String.split方法截取网站源码中的真实地址</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>另一种方法：<a href="https://www.cnblogs.com/GoslingWu/p/13689958.html">java-通过ip获取地址 - 公众号/架构师与哈苏 - 博客园</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决：Tomcat运行项目时Quartz定时任务执行两次</title>
    <url>/106.html</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在Tomcat的配置文件<code>conf/server.xml</code>中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中&lt;Host&gt;告诉Tomcat，在启动的时候加载webapps下的所有项目工程文件，&lt;Context&gt;又让Tomcat再加载了一遍（一般情况下配置&lt;Context&gt;，主要是由于想域名访问时将工程名去掉的原因配置），这种情况下会导致工程中的quartz定时被两次触发，执行两次</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>将Tomcat的配置文件conf/server.xml修改为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;false&quot;</span> <span class="attr">deployOnStartup</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/test&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>autoDeploy：是否允许自动部署，默认值是true，即表示 Tomcat 会自动检测appBase目录下面的文件变化从而自动应用到正在运行的 Web 应用程序<br>deployOnStartup=”false”，表示Tomcat服务器启动时, 不会自动发布appBase目录下所有的Web应用</p>
<h3 id="会出现的问题"><a href="#会出现的问题" class="headerlink" title="会出现的问题"></a>会出现的问题</h3><p>但是这样虽然解决了Quartz的执行两次的问题，但也存在另一个问题——无法解压war包。就是war包放到webapps目录下，不会自动解压生成项目文件夹，你所看到的项目文件夹是历史文件夹。所以，这是一个不断修改conf/server.xml的过程。当需要解压文件夹的时候，修改成true，解压完成后，改成false，记得重启Tomcat</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/qq_38410730/article/details/88370891">【Java Web】Quartz定时任务执行两次的解决方法_Yngz_Miao的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>实现鼠标移入文字向右移动效果</title>
    <url>/105.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div1&#x27;</span>&gt;</span>&gt;&gt;&gt;鼠标移入此行会缓慢向右路移动&lt;&lt;&lt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line">	-webkit-<span class="attribute">transition</span>: margin-left .<span class="number">8s</span>;</span><br><span class="line">	-moz-<span class="attribute">transition</span>: margin-left .<span class="number">8s</span>;</span><br><span class="line">	-o-<span class="attribute">transition</span>: margin-left .<span class="number">8s</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.cnblogs.com/smile1/p/12007164.html">鼠标移入文字上向右移动效果 - Crazy丶迷恋 - 博客园</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>给网页添加背景图片（网页缩小放大都不受影响）</title>
    <url>/107.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bjimg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bjimg</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: fixed;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">min-width</span>: <span class="number">1000px</span>;</span><br><span class="line">	<span class="attribute">z-index</span>: -<span class="number">10</span>;</span><br><span class="line">	zoom: <span class="number">1</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../static/images/background.png</span>);</span><br><span class="line">	<span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">	<span class="attribute">background-size</span>: cover;</span><br><span class="line">	-webkit-<span class="attribute">background-size</span>: cover;</span><br><span class="line">	-o-<span class="attribute">background-size</span>: cover;</span><br><span class="line">	<span class="attribute">background-position</span>: center <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/luo1831251387/article/details/110772006?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">给网页添加背景图片 html+css_北极光之夜。-CSDN博客</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠标移入div显示查看更多</title>
    <url>/108.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;image&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://photo.tuchong.com/316540/f/6406791.jpg&#x27;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&#x27;100%&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;mask&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&#x27;link&#x27;</span> <span class="attr">href</span>=<span class="string">&#x27;https://blog.csdn.net/Hreticent/article/details/85109668&#x27;</span>&gt;</span></span><br><span class="line">	查看更多</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">116</span>);</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">	<span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.image</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.mask</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#FFF</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">80px</span> auto;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#ff00a5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/Hreticent/article/details/85109668">鼠标移入div显示查看更多demo_Hey-CSDN博客</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Github私有仓库改为公开</title>
    <url>/11.html</url>
    <content><![CDATA[<h3 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h3><blockquote>
<p>进入该仓库所在首页，找到Settings并点击（在首页的菜单栏）</p>
</blockquote>
<p><img src="https://i.loli.net/2021/07/29/u3lyp6t9j2k4V1F.png" alt="20210227090442.jpg"></p>
<h3 id="修改仓库visibility属性"><a href="#修改仓库visibility属性" class="headerlink" title="修改仓库visibility属性"></a>修改仓库visibility属性</h3><blockquote>
<p>在出现的页面找到 Danger Zone（在最下面），点击 Change visibility 按钮</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210311165133.jpg"></p>
<blockquote>
<p>然后选择Make public，并根据提示输入指定内容，点击同意按钮，然后输入 GitHub 账号的密码即可修改完成</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210311165306.jpg"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>部落冲突攻略</title>
    <url>/110.html</url>
    <content><![CDATA[<h3 id="指导网站"><a href="#指导网站" class="headerlink" title="指导网站"></a>指导网站</h3><p><a href="https://www.cocservice.top/">https://www.cocservice.top/</a></p>
<h3 id="配兵"><a href="#配兵" class="headerlink" title="配兵"></a>配兵</h3><h4 id="超级女巫"><a href="#超级女巫" class="headerlink" title="超级女巫"></a>超级女巫</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210327011129.jpg" alt="img"></p>
<h4 id="8848流"><a href="#8848流" class="headerlink" title="8848流"></a>8848流</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210327011245.jpg" alt="img"></p>
<p>视频教程链接：<a href="https://www.youtube.com/watch?v=GNKpNH5Img4">https://www.youtube.com/watch?v=GNKpNH5Img4</a></p>
<h4 id="超级女巫-女巫"><a href="#超级女巫-女巫" class="headerlink" title="超级女巫+女巫"></a>超级女巫+女巫</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210327011354.jpg" alt="img"></p>
<p>视频教程链接：<a href="https://www.youtube.com/watch?v=wzVR0pPbbYU">https://www.youtube.com/watch?v=wzVR0pPbbYU</a></p>
<h4 id="冰冻龙流"><a href="#冰冻龙流" class="headerlink" title="冰冻龙流"></a>冰冻龙流</h4><p>攻城机器用滚木车</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210420222435.jpg" alt="img"></p>
<p>视频教程链接：<a href="https://www.youtube.com/watch?v=2_oV7ws49t4">https://www.youtube.com/watch?v=2_oV7ws49t4</a></p>
<h4 id="天女超法皮卡流"><a href="#天女超法皮卡流" class="headerlink" title="天女超法皮卡流"></a>天女超法皮卡流</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210428141543.jpg" alt="img"></p>
<p>视频教程链接：<a href="https://www.bilibili.com/video/BV1My4y1b7kK">https://www.bilibili.com/video/BV1My4y1b7kK</a></p>
<h3 id="常用数据"><a href="#常用数据" class="headerlink" title="常用数据"></a>常用数据</h3><h4 id="城墙等级和炸弹人数量"><a href="#城墙等级和炸弹人数量" class="headerlink" title="城墙等级和炸弹人数量"></a>城墙等级和炸弹人数量</h4><p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210327011522.jpg" alt="img"></strong></p>
<h4 id="传奇联赛胜利奖杯"><a href="#传奇联赛胜利奖杯" class="headerlink" title="传奇联赛胜利奖杯"></a>传奇联赛胜利奖杯</h4><p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210421224722.jpg" alt="img"></strong></p>
<h4 id="部落冲突联赛奖励图"><a href="#部落冲突联赛奖励图" class="headerlink" title="部落冲突联赛奖励图"></a>部落冲突联赛奖励图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210501201333.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210501201443.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>部落冲突</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqldump命令备份数据库</title>
    <url>/112.html</url>
    <content><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 db_myblog&gt; D:/db_backup/db_myblog.sql</span><br></pre></td></tr></table></figure>

<p><code>-u</code>后面接的是数据库用户名，<code>-p</code>后面接的是密码，然后是空格接上数据库名称（db_myblog是我的数据库名称），后面则是存储的位置以及存储后的文件名</p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>在MySQL安装目录下bin文件夹中，打开CMD窗口</p>
</li>
<li><p>输入上述命令，然后查看对应位置是否生成该SQL文件</p>
</li>
</ol>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424000522.jpg" alt="img"></strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLyog备份和导入MySQL数据库</title>
    <url>/111.html</url>
    <content><![CDATA[<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><blockquote>
<p>右键点击要备份的数据库，选中（备份数据库，转储到SQL）</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210423234316.jpg" alt="img"></p>
<blockquote>
<p>第二条红线处选择存储的位置，然后点击导出即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210423234600.jpg" alt="img"></p>
<h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><blockquote>
<p>右键点击要恢复的数据库，选中（执行SQL脚本）</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210423234835.jpg" alt="img"></p>
<blockquote>
<p>选择对应的SQL文件，点击执行即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210423235030.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot引入Quartz定时任务</title>
    <url>/109.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.quartz;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每天23点自动删除已被删除文章中的图片</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-09-23 11:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteInvalidImage</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BlogService blogService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 23 * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里填入定时执行的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>常用cron表达式：<a href="https://blog.zoutl.cn/4.html">常用 cron 表达式 | LeDao’s Blog (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10脚本代码备份MySQL数据库</title>
    <url>/113.html</url>
    <content><![CDATA[<h3 id="创建backdb-bat文件"><a href="#创建backdb-bat文件" class="headerlink" title="创建backdb.bat文件"></a>创建backdb.bat文件</h3><p>打开该文件，输入以下内容并保存</p>
<p>D盘创建名为db_backup文件夹，-u后的root是数据库连接时用户名，-p后的123456是密码，db_myblog是我的数据库名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 取日期、时间变量值<span class="built_in">set</span> yy=%date:~0,4%</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> mm=%date:~5,2%</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> dd=%date:~8,2%</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> /i %time:~0,2% lss 10 <span class="built_in">set</span> hh=0%time:~1,1%</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> /i %time:~0,2% geq 10 <span class="built_in">set</span> hh=%time:~0,2%</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> mn=%time:~3,2%</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> ss=%time:~6,2%</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> date=%yy%%mm%%dd%</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> time=%hh%%mn%%ss%</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> filename=%date%_%time%</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;C:/Program Files/MySQL/MySQL Server 5.6/bin/mysqldump.exe&quot;</span> -uroot -p123456 --opt --default-character-set=utf8 -e --triggers -R --hex-blob --flush-logs -x --databases db_myblog &gt; D:/db_backup/db_myblog%filename%.sql</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> 导出已经完成</span><br><span class="line"> </span><br><span class="line"><span class="comment">#pause</span></span><br></pre></td></tr></table></figure>

<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424001904.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10使用任务计划程序</title>
    <url>/115.html</url>
    <content><![CDATA[<h3 id="打开任务计划程序"><a href="#打开任务计划程序" class="headerlink" title="打开任务计划程序"></a>打开任务计划程序</h3><p>打开控制面板，搜索管理工具–&gt;任务计划程序</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424012241.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424012344.jpg" alt="img"></p>
<h3 id="创建基本任务"><a href="#创建基本任务" class="headerlink" title="创建基本任务"></a>创建基本任务</h3><blockquote>
<p>点击右侧的创建基本任务</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424012529.jpg" alt="img"></p>
<blockquote>
<p>输入名称和描述</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424012918.jpg" alt="img"></p>
<blockquote>
<p>选择触发时间</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424012943.jpg" alt="img"></p>
<blockquote>
<p>选择操作（选择启动程序）</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424013002.jpg" alt="img"></p>
<blockquote>
<p>选择自己的程序或脚本</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424013028.jpg" alt="img"></p>
<blockquote>
<p>查看</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424013256.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Java备份MySQL数据库</title>
    <url>/114.html</url>
    <content><![CDATA[<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-23 21:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Backup</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String user_name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String user_psw;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要备份的数据库名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String db_name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主机IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String host_ip;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String user_charset;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放备份文件的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String backup_path;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String stmt;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Backup</span><span class="params">(String user_name, String user_psw, String db_name,</span></span></span><br><span class="line"><span class="params"><span class="function">                  String host_ip, String user_charset, String backup_path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user_name = user_name;</span><br><span class="line">        <span class="keyword">this</span>.user_psw = user_psw;</span><br><span class="line">        <span class="keyword">this</span>.db_name = db_name;</span><br><span class="line">        <span class="comment">// 主机IP;</span></span><br><span class="line">        <span class="keyword">if</span> (host_ip == <span class="keyword">null</span> || host_ip.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 默认为本机</span></span><br><span class="line">            <span class="keyword">this</span>.host_ip = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.host_ip = host_ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 字符集</span></span><br><span class="line">        <span class="keyword">if</span> (user_charset == <span class="keyword">null</span> || user_charset.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 默认为安装时设置的字符集</span></span><br><span class="line">            <span class="keyword">this</span>.user_charset = <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.user_charset = <span class="string">&quot; --default-character-set=&quot;</span> + user_charset;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.backup_path = backup_path;</span><br><span class="line">        <span class="keyword">this</span>.stmt = <span class="string">&quot;C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqldump &quot;</span></span><br><span class="line">                + <span class="keyword">this</span>.db_name + <span class="string">&quot; -h &quot;</span> + <span class="keyword">this</span>.host_ip + <span class="string">&quot; -u&quot;</span> + <span class="keyword">this</span>.user_name</span><br><span class="line">                + <span class="string">&quot; -p&quot;</span> + <span class="keyword">this</span>.user_psw + <span class="keyword">this</span>.user_charset + <span class="string">&quot; --result-file=&quot;</span></span><br><span class="line">                + <span class="keyword">this</span>.backup_path;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">backup_run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> run_result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="keyword">this</span>.stmt);</span><br><span class="line">            run_result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> run_result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Backup backup = <span class="keyword">new</span> Backup(<span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;db_myblog&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;D:\\db_backup\\db_myblog.sql&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> result = backup.backup_run();</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;备份成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424002930.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210424003003.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>定时自动备份MySQL数据库</title>
    <url>/116.html</url>
    <content><![CDATA[<h3 id="方法一、使用任务计划程序"><a href="#方法一、使用任务计划程序" class="headerlink" title="方法一、使用任务计划程序"></a>方法一、使用任务计划程序</h3><ol>
<li><a href="/113.html">Windows脚本代码备份MySQL数据库</a></li>
<li><a href="/115.html">Windows10使用任务计划程序</a></li>
</ol>
<h3 id="方法二、使用Quartz定时任务"><a href="#方法二、使用Quartz定时任务" class="headerlink" title="方法二、使用Quartz定时任务"></a>方法二、使用Quartz定时任务</h3><ol>
<li><a href="/109.html">Spring Boot引入Quartz定时任务</a></li>
<li><a href="/4.html">常用cron表达式</a></li>
<li><a href="/114.html">Java备份MySQL数据库</a></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>commons-io常用方法</title>
    <url>/117.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="writeStringToFile"><a href="#writeStringToFile" class="headerlink" title="writeStringToFile"></a>writeStringToFile</h4><p>写入字符串到指定文件，直接覆盖掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;E://backup//a.txt&quot;</span>);</span><br><span class="line">        FileUtils.writeStringToFile(file,<span class="string">&quot;222&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="readFileToString"><a href="#readFileToString" class="headerlink" title="readFileToString"></a>readFileToString</h4><p>指定编码表读取内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;E://backup//a.txt&quot;</span>);</span><br><span class="line">        String str=FileUtils.readFileToString(file,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="copyFile"><a href="#copyFile" class="headerlink" title="copyFile"></a>copyFile</h4><p>复制一个文件的内容到另一个文件，如果目标文件不存在那么会新建它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;E://backup//a.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;E://backup//a2.txt&quot;</span>);</span><br><span class="line">        FileUtils.copyFile(file, file2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="copyDirectory"><a href="#copyDirectory" class="headerlink" title="copyDirectory"></a>copyDirectory</h4><p>复制一个文件夹的内容到另一个文件夹，如果目标文件夹不存在那么会新建它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File srcDir=<span class="keyword">new</span> File(<span class="string">&quot;E://backup//1&quot;</span>);</span><br><span class="line">        File destDir=<span class="keyword">new</span> File(<span class="string">&quot;E://backup//2&quot;</span>);</span><br><span class="line">        FileUtils.copyDirectory(srcDir, destDir);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="copyDirectoryToDirectory"><a href="#copyDirectoryToDirectory" class="headerlink" title="copyDirectoryToDirectory"></a>copyDirectoryToDirectory</h4><p>复制一个文件夹及其内容到另一个文件夹，如果目标文件夹不存在那么会新建它<code>（注意：本方法和上一个方法存在差异）</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File srcDir=<span class="keyword">new</span> File(<span class="string">&quot;E://backup//1&quot;</span>);</span><br><span class="line">        File destDir=<span class="keyword">new</span> File(<span class="string">&quot;E://backup//2&quot;</span>);</span><br><span class="line">        FileUtils.copyDirectoryToDirectory(srcDir, destDir);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="forceDelete"><a href="#forceDelete" class="headerlink" title="forceDelete"></a>forceDelete</h4><p>强制删除文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file=<span class="keyword">new</span> File(<span class="string">&quot;E://backup//a.txt&quot;</span>);</span><br><span class="line">        FileUtils.forceDelete(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="deleteQuietly"><a href="#deleteQuietly" class="headerlink" title="deleteQuietly"></a>deleteQuietly</h4><p>删除文件，<code>常用</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-24 23:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;E://data//a.txt&quot;</span>);</span><br><span class="line">        FileUtils.deleteQuietly(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="deleteDirectory"><a href="#deleteDirectory" class="headerlink" title="deleteDirectory"></a>deleteDirectory</h4><p>删除文件夹，文件夹不为空也可以删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file=<span class="keyword">new</span> File(<span class="string">&quot;E://backup//1&quot;</span>);</span><br><span class="line">        FileUtils.deleteDirectory(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyUI自定义图标</title>
    <url>/118.html</url>
    <content><![CDATA[<h3 id="下载图标"><a href="#下载图标" class="headerlink" title="下载图标"></a>下载图标</h3><p>百度网盘链接：<a href="https://pan.baidu.com/s/1Y0678vgcZbkHOTcdRr0hyQ">https://pan.baidu.com/s/1Y0678vgcZbkHOTcdRr0hyQ</a></p>
<p>提取码：<code>cv65</code></p>
<h3 id="复制到项目中"><a href="#复制到项目中" class="headerlink" title="复制到项目中"></a>复制到项目中</h3><p>在EasyUI文件夹的themes文件夹中放入下载好的图片（文件名后缀改为<code>.gif</code>）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210427000607.jpg" alt="img"></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在EasyUI文件夹的themes文件夹的icon.css中添加图标代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.icon-setMenuBlog</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&#x27;usericons/setMenuBlog.gif&#x27;</span>) no-repeat center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>EasyUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java格式化时间</title>
    <url>/119.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java格式化时间使用的类是SimpleDateFormat</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>格式有<code>yyyy-MM-dd HH:mm:ss</code>，<code>yyyy年MM月dd日 HH时mm分ss秒</code>等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">simpleDateFormat.format(要格式化的时间)</span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">&quot;格式化前：&quot;</span>+date);</span><br><span class="line">        System.out.println(<span class="string">&quot;格式化后：&quot;</span>);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(simpleDateFormat.format(date));</span><br><span class="line">        SimpleDateFormat simpleDateFormat2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;</span>);</span><br><span class="line">        System.out.println(simpleDateFormat2.format(date));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210517050045.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客系统</title>
    <url>/12.html</url>
    <content><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>GitHub地址：<a href="https://github.com/a6678696/MyBlog">https://github.com/a6678696/MyBlog</a></p>
<h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><p>本项目核心技术采用Spring Boot+Mybatis；开发工具idea；数据库 MySQL5.6；模版引擎采用的是Thymeleaf；安全框架采用SpringSecurity；在线编辑器CKEditor；Lucene全文检索；Quartz定时任务；<a href="https://blog.zoutl.cn/64.html">基于JavaMail实现用QQ邮箱发送邮件 </a>；highlight.js代码高亮；Highcharts图表；Redis存储经常查看的数据；</p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><p>主页分页展示所有博客、按类别分类博客、按日期分类博客、查看博客内容详情、Lucene全文检索博客标题和摘要、点赞博客、评论博客、网站数据展示</p>
<h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><p>写博客、博客类别管理、博客管理、安全退出、每天23点定时删除无效的博客图片（删除的博客但未删除其引用的图片）、查看访问记录、一键切换前台UI（一共有4套UI，下面展示的是第二套）、评论管理（删除、审核、回复）、查看点赞记录、友情链接管理、一键备份数据以及每天23点定时备份数据（包括数据库、博客正文图片、Lucene索引）、有人留言自动给站长发邮件、一键设置邮件提醒与否、系统自动封禁ip、封禁ip管理、highlight.js代码高亮、后台修改代码风格、每日访问ip个数统计、每日访问数统计</p>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="前台-1"><a href="#前台-1" class="headerlink" title="前台"></a>前台</h4><h5 id="博客首页"><a href="#博客首页" class="headerlink" title="博客首页"></a>博客首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-08%20185508.png"></p>
<h5 id="按博客类别分类"><a href="#按博客类别分类" class="headerlink" title="按博客类别分类"></a>按博客类别分类</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-08%20185641.png"></p>
<h5 id="查看博客详情页面"><a href="#查看博客详情页面" class="headerlink" title="查看博客详情页面"></a>查看博客详情页面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-08%20185717.png"></p>
<h5 id="搜索博客"><a href="#搜索博客" class="headerlink" title="搜索博客"></a>搜索博客</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-08%20185747.png"></p>
<h5 id="发表评论"><a href="#发表评论" class="headerlink" title="发表评论"></a>发表评论</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-08%20190149.png"></p>
<h5 id="被封禁后的访问界面"><a href="#被封禁后的访问界面" class="headerlink" title="被封禁后的访问界面"></a>被封禁后的访问界面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210517043817.jpg"></p>
<h4 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h4><h5 id="管理员登陆"><a href="#管理员登陆" class="headerlink" title="管理员登陆"></a>管理员登陆</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010194641.jpg"></p>
<h5 id="后台首页"><a href="#后台首页" class="headerlink" title="后台首页"></a>后台首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210517052031.jpg"></p>
<h5 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010194739.jpg"></p>
<h5 id="博客类别管理"><a href="#博客类别管理" class="headerlink" title="博客类别管理"></a>博客类别管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210327113716.jpg"></p>
<h5 id="博客管理"><a href="#博客管理" class="headerlink" title="博客管理"></a>博客管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210327113728.jpg"></p>
<h5 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210205223758.jpg"></p>
<h5 id="ip封禁管理"><a href="#ip封禁管理" class="headerlink" title="ip封禁管理"></a>ip封禁管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210517043724.jpg"></p>
<h5 id="查看点赞记录"><a href="#查看点赞记录" class="headerlink" title="查看点赞记录"></a>查看点赞记录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210205223820.jpg"></p>
<h5 id="查看访问记录"><a href="#查看访问记录" class="headerlink" title="查看访问记录"></a>查看访问记录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022013413.jpg"></p>
<h5 id="每日访问ip个数统计"><a href="#每日访问ip个数统计" class="headerlink" title="每日访问ip个数统计"></a>每日访问ip个数统计</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210609231205.jpg"></p>
<h5 id="每日被访问次数统计"><a href="#每日被访问次数统计" class="headerlink" title="每日被访问次数统计"></a>每日被访问次数统计</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-08%20190728.png"></p>
<h5 id="切换前台UI"><a href="#切换前台UI" class="headerlink" title="切换前台UI"></a>切换前台UI</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210203150340.jpg"></p>
<h5 id="一键备份数据"><a href="#一键备份数据" class="headerlink" title="一键备份数据"></a>一键备份数据</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210516231054.jpg"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210516231105.jpg"></p>
<h5 id="设置邮件提醒与否"><a href="#设置邮件提醒与否" class="headerlink" title="设置邮件提醒与否"></a>设置邮件提醒与否</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210516231217.jpg"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210516231228.jpg"></p>
<h5 id="后台修改代码风格"><a href="#后台修改代码风格" class="headerlink" title="后台修改代码风格"></a>后台修改代码风格</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210531042558.jpg"></p>
<h5 id="安全退出后台"><a href="#安全退出后台" class="headerlink" title="安全退出后台"></a>安全退出后台</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010194904.jpg"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot引入MyBatis</title>
    <url>/120.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mybatis的相关配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#mapper配置文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.ledao.entity</span></span><br><span class="line">  <span class="comment">#开启驼峰命名</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="加入-MapperScan注解"><a href="#加入-MapperScan注解" class="headerlink" title="加入@MapperScan注解"></a>加入@MapperScan注解</h3><p>在项目的启动类中加入<code>@MapperScan</code>注解，这样就可以指定要扫描的Mapper类的包的路径了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210526091807.jpg" alt="img"></p>
<h3 id="项目代码示例"><a href="#项目代码示例" class="headerlink" title="项目代码示例"></a>项目代码示例</h3><p>以对一个博客类进行操作为例</p>
<h4 id="Blog类"><a href="#Blog类" class="headerlink" title="Blog类"></a>Blog类</h4><p>已省略setter和getter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客实体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-09-11 00:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 摘要</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date releaseDate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer click;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客类别id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer blogTypeId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BlogType blogType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客里存在的第一张图片，主要用于列表展示的缩略图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imageName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客数量 非博客实际属性 主要是 根据发布日期归档查询数量用到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer blogCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布日期的字符串 只取年和月</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String releaseDateStr;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类型的博客数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer blogNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于判断当前IP是否点赞过这篇博客</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer isLike;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点赞数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer likeNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是导航条文章（0或空代表不是，1代表是）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer isMenuBlog;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置成为导航条文章的时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date setMenuBlogDate;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="BlogMapper接口"><a href="#BlogMapper接口" class="headerlink" title="BlogMapper接口"></a>BlogMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Blog;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客Mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-09-11 00:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页分条件查询博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">list</span><span class="params">(Map map)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getCount</span><span class="params">(Map map)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blog</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">add</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blog</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">update</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Blog <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据日期分月分组查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">countList</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据博客类型查询博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blogTypeId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">findByBlogTypeId</span><span class="params">(Integer blogTypeId)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上一篇博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Blog <span class="title">getPreviousBlog</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一篇博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Blog <span class="title">getNextBlog</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取导航条文章（根据设置时间升序排列）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">getMenuBlogList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BlogMapper的XML文件"><a href="#BlogMapper的XML文件" class="headerlink" title="BlogMapper的XML文件"></a>BlogMapper的XML文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--suppress ALL--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ledao.mapper.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BlogResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;summary&quot;</span> <span class="attr">column</span>=<span class="string">&quot;summary&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;releaseDate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;releaseDate&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;click&quot;</span> <span class="attr">column</span>=<span class="string">&quot;click&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;blogTypeId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;blogTypeId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;isMenuBlog&quot;</span> <span class="attr">column</span>=<span class="string">&quot;isMenuBlog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;setMenuBlogDate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;setMenuBlogDate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BlogResult&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null and title != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and title like #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;blogTypeId != null&quot;</span>&gt;</span></span><br><span class="line">                and blogTypeId = #&#123;blogTypeId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isMenuBlog != null&quot;</span>&gt;</span></span><br><span class="line">                and isMenuBlog = #&#123;isMenuBlog&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isMenuBlogKey != null&quot;</span>&gt;</span></span><br><span class="line">                and isMenuBlog != 1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;releaseDateStr != null and releaseDateStr != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and date_format(releaseDate, &#x27;%Y年%m月&#x27;) = #&#123;releaseDateStr&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sortByReleaseDate == null&quot;</span>&gt;</span></span><br><span class="line">            order by releaseDate desc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;start != null and size != null&quot;</span>&gt;</span></span><br><span class="line">            limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select count(*)</span><br><span class="line">        from t_blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null and title != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and title like #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;blogTypeId != null&quot;</span>&gt;</span></span><br><span class="line">                and blogTypeId = #&#123;blogTypeId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isMenuBlog != null&quot;</span>&gt;</span></span><br><span class="line">                and isMenuBlog = #&#123;isMenuBlog&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isMenuBlogKey != null&quot;</span>&gt;</span></span><br><span class="line">                and isMenuBlog != 1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;releaseDateStr != null and releaseDateStr != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and date_format(releaseDate, &#x27;%Y年%m月&#x27;) = #&#123;releaseDateStr&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">        insert into t_blog (title, summary, content, releaseDate, click, blogTypeId,isMenuBlog)</span><br><span class="line">        values (#&#123;title&#125;, #&#123;summary&#125;, #&#123;content&#125;, now(), 0, #&#123;blogTypeId&#125;,0);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">        update t_blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null and title != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;summary != null and summary != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                summary=#&#123;summary&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;content != null and content != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                content=#&#123;content&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;click != null&quot;</span>&gt;</span></span><br><span class="line">                click=#&#123;click&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;blogTypeId != null&quot;</span>&gt;</span></span><br><span class="line">                blogTypeId=#&#123;blogTypeId&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isMenuBlog != null&quot;</span>&gt;</span></span><br><span class="line">                isMenuBlog = #&#123;isMenuBlog&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;setMenuBlogDate != null&quot;</span>&gt;</span></span><br><span class="line">                setMenuBlogDate=now(),</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from t_blog</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BlogResult&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_blog</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BlogResult&quot;</span>&gt;</span></span><br><span class="line">        select date_format(releaseDate, &#x27;%Y年%m月&#x27;) as releaseDateStr, count(*) as blogCount</span><br><span class="line">        from t_blog where isMenuBlog=0</span><br><span class="line">        group by date_format(releaseDate, &#x27;%Y年%m月&#x27;)</span><br><span class="line">        order by date_format(releaseDate, &#x27;%Y年%m月&#x27;) desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByBlogTypeId&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BlogResult&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_blog</span><br><span class="line">        where blogTypeId = #&#123;blogTypeId&#125;</span><br><span class="line">        order by releaseDate desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPreviousBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ledao.entity.Blog&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM t_blog</span><br><span class="line">        WHERE id <span class="symbol">&amp;lt;</span></span><br><span class="line">              #&#123;id&#125;</span><br><span class="line">        ORDER BY id DESC</span><br><span class="line">        LIMIT 1;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getNextBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ledao.entity.Blog&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM t_blog</span><br><span class="line">        WHERE id <span class="symbol">&amp;gt;</span></span><br><span class="line">              #&#123;id&#125;</span><br><span class="line">        ORDER BY id asc</span><br><span class="line">        LIMIT 1;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMenuBlogList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BlogResult&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_blog</span><br><span class="line">        where isMenuBlog = 1</span><br><span class="line">        order by setMenuBlogDate asc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="BlogService接口"><a href="#BlogService接口" class="headerlink" title="BlogService接口"></a>BlogService接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Blog;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客Service接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-09-11 00:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页分条件查询博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">list</span><span class="params">(Map map)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getCount</span><span class="params">(Map map)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blog</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">add</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blog</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">update</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Blog <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据日期分月分组查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">countList</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据博客类型查询博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blogTypeId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">findByBlogTypeId</span><span class="params">(Integer blogTypeId)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上一篇博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Blog <span class="title">getPreviousBlog</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一篇博客</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Blog <span class="title">getNextBlog</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取导航条文章（根据设置时间升序排列）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">getMenuBlogList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BlogService接口的实现类"><a href="#BlogService接口的实现类" class="headerlink" title="BlogService接口的实现类"></a>BlogService接口的实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Blog;</span><br><span class="line"><span class="keyword">import</span> com.ledao.mapper.BlogMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.BlogService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客Service接口实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-09-11 00:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;blogService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogServiceImpl</span> <span class="keyword">implements</span> <span class="title">BlogService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BlogMapper blogMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Blog&gt; <span class="title">list</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.list(map);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCount</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.getCount(map);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">add</span><span class="params">(Blog blog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.add(blog);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">update</span><span class="params">(Blog blog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.update(blog);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Blog <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Blog&gt; <span class="title">countList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.countList();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Blog&gt; <span class="title">findByBlogTypeId</span><span class="params">(Integer blogTypeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.findByBlogTypeId(blogTypeId);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Blog <span class="title">getPreviousBlog</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.getPreviousBlog(id);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Blog <span class="title">getNextBlog</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.getNextBlog(id);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Blog&gt; <span class="title">getMenuBlogList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogMapper.getMenuBlogList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis的元素属性</title>
    <url>/121.html</url>
    <content><![CDATA[<h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td align="center">parameterType</td>
<td align="center">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td>
</tr>
<tr>
<td align="center">resultType</td>
<td align="center">期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td>
</tr>
<tr>
<td align="center">resultMap</td>
<td align="center">对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td>
</tr>
<tr>
<td align="center">flushCache</td>
<td align="center">这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。</td>
</tr>
<tr>
<td align="center">useCache</td>
<td align="center">将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td>
</tr>
<tr>
<td align="center">timeout</td>
<td align="center">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
</tr>
<tr>
<td align="center">fetchSize</td>
<td align="center">这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。</td>
</tr>
<tr>
<td align="center">statementType</td>
<td align="center">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td align="center">resultSetType</td>
<td align="center">FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。</td>
</tr>
<tr>
<td align="center">databaseId</td>
<td align="center">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td>
</tr>
<tr>
<td align="center">resultOrdered</td>
<td align="center">这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：<code>false</code>。</td>
</tr>
</tbody></table>
<h3 id="Insert-Update-Delete"><a href="#Insert-Update-Delete" class="headerlink" title="Insert, Update, Delete"></a>Insert, Update, Delete</h3><table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td align="center">parameterType</td>
<td align="center">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td>
</tr>
<tr>
<td align="center">flushCache</td>
<td align="center">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td>
</tr>
<tr>
<td align="center">timeout</td>
<td align="center">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
</tr>
<tr>
<td align="center">statementType</td>
<td align="center">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td align="center">useGeneratedKeys</td>
<td align="center">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td>
</tr>
<tr>
<td align="center">keyProperty</td>
<td align="center">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="center">keyColumn</td>
<td align="center">（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="center">databaseId</td>
<td align="center">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td>
</tr>
</tbody></table>
<h3 id="selectKey"><a href="#selectKey" class="headerlink" title="selectKey"></a>selectKey</h3><table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">keyProperty</td>
<td align="center"><code>selectKey</code> 语句结果应该被设置到的目标属性。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="center">keyColumn</td>
<td align="center">返回结果集中生成列属性的列名。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="center">resultType</td>
<td align="center">结果的类型。通常 MyBatis 可以推断出来，但是为了更加准确，写上也不会有什么问题。MyBatis 允许将任何简单类型用作主键的类型，包括字符串。如果生成列不止一个，则可以使用包含期望属性的 Object 或 Map。</td>
</tr>
<tr>
<td align="center">order</td>
<td align="center">可以设置为 <code>BEFORE</code> 或 <code>AFTER</code>。如果设置为 <code>BEFORE</code>，那么它首先会生成主键，设置 <code>keyProperty</code> 再执行插入语句。如果设置为 <code>AFTER</code>，那么先执行插入语句，然后是 <code>selectKey</code> 中的语句 - 这和 Oracle 数据库的行为相似，在插入语句内部可能有嵌入索引调用。</td>
</tr>
<tr>
<td align="center">statementType</td>
<td align="center">和前面一样，MyBatis 支持 <code>STATEMENT</code>，<code>PREPARED</code> 和 <code>CALLABLE</code> 类型的映射语句，分别代表 <code>Statement</code>, <code>PreparedStatement</code> 和 <code>CallableStatement</code> 类型。</td>
</tr>
</tbody></table>
<h3 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h3><table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">当前命名空间中的一个唯一标识，用于标识一个结果映射。</td>
</tr>
<tr>
<td align="center">type</td>
<td align="center">类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。</td>
</tr>
<tr>
<td align="center">autoMapping</td>
<td align="center">如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。</td>
</tr>
</tbody></table>
<h3 id="ResultMap子元素"><a href="#ResultMap子元素" class="headerlink" title="ResultMap子元素"></a>ResultMap子元素</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210526103952.jpg"></p>
<h3 id="ResultMap子元素Id和Result"><a href="#ResultMap子元素Id和Result" class="headerlink" title="ResultMap子元素Id和Result"></a>ResultMap子元素Id和Result</h3><table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">property</td>
<td align="center">映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。 无论是哪一种情形，你都可以使用常见的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">数据库中的列名，或者是列的别名。一般情况下，这和传递给 <code>resultSet.getString(columnName)</code> 方法的参数一样。</td>
</tr>
<tr>
<td align="center">javaType</td>
<td align="center">一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。</td>
</tr>
<tr>
<td align="center">jdbcType</td>
<td align="center">JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可以为空值的列指定这个类型。</td>
</tr>
<tr>
<td align="center">typeHandler</td>
<td align="center">我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的全限定名，或者是类型别名。</td>
</tr>
</tbody></table>
<h3 id="ResultMap子元素constructor"><a href="#ResultMap子元素constructor" class="headerlink" title="ResultMap子元素constructor"></a>ResultMap子元素constructor</h3><table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">column</td>
<td align="center">数据库中的列名，或者是列的别名。一般情况下，这和传递给 <code>resultSet.getString(columnName)</code> 方法的参数一样。</td>
</tr>
<tr>
<td align="center">javaType</td>
<td align="center">一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。</td>
</tr>
<tr>
<td align="center">jdbcType</td>
<td align="center">JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。</td>
</tr>
<tr>
<td align="center">typeHandler</td>
<td align="center">我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。</td>
</tr>
<tr>
<td align="center">select</td>
<td align="center">用于加载复杂类型属性的映射语句的 ID，它会从 column 属性中指定的列检索数据，作为参数传递给此 select 语句。具体请参考关联元素。</td>
</tr>
<tr>
<td align="center">resultMap</td>
<td align="center">结果映射的 ID，可以将嵌套的结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 <code>ResultSet</code>。这样的 <code>ResultSet</code> 将会将包含重复或部分数据重复的结果集。为了将结果集正确地映射到嵌套的对象树中，MyBatis 允许你 “串联”结果映射，以便解决嵌套结果集的问题。想了解更多内容，请参考下面的关联元素。</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">构造方法形参的名字。从 3.4.3 版本开始，通过指定具体的参数名，你可以以任意顺序写入 arg 元素。</td>
</tr>
</tbody></table>
<h3 id="ResultMap子元素association"><a href="#ResultMap子元素association" class="headerlink" title="ResultMap子元素association"></a>ResultMap子元素association</h3><table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">property</td>
<td align="center">映射到列结果的字段或属性。如果用来匹配的 JavaBean 存在给定名字的属性，那么它将会被使用。否则 MyBatis 将会寻找给定名称的字段。 无论是哪一种情形，你都可以使用通常的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。</td>
</tr>
<tr>
<td align="center">javaType</td>
<td align="center">一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。</td>
</tr>
<tr>
<td align="center">jdbcType</td>
<td align="center">JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。</td>
</tr>
<tr>
<td align="center">typeHandler</td>
<td align="center">我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。</td>
</tr>
<tr>
<td align="center"><strong>关联的嵌套Select 查询</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">数据库中的列名，或者是列的别名。一般情况下，这和传递给 <code>resultSet.getString(columnName)</code> 方法的参数一样。 注意：在使用复合主键的时候，你可以使用 <code>column=&quot;&#123;prop1=col1,prop2=col2&#125;&quot;</code> 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 <code>prop1</code> 和 <code>prop2</code> 作为参数对象，被设置为对应嵌套 Select 语句的参数。</td>
</tr>
<tr>
<td align="center">select</td>
<td align="center">用于加载复杂类型属性的映射语句的 ID，它会从 column 属性指定的列中检索数据，作为参数传递给目标 select 语句。 具体请参考下面的例子。注意：在使用复合主键的时候，你可以使用 <code>column=&quot;&#123;prop1=col1,prop2=col2&#125;&quot;</code> 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 <code>prop1</code> 和 <code>prop2</code> 作为参数对象，被设置为对应嵌套 Select 语句的参数。</td>
</tr>
<tr>
<td align="center">fetchType</td>
<td align="center">可选的。有效值为 <code>lazy</code> 和 <code>eager</code>。 指定属性后，将在映射中忽略全局配置参数 <code>lazyLoadingEnabled</code>，使用属性的值。</td>
</tr>
<tr>
<td align="center"><strong>关联的嵌套结果映射</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">resultMap</td>
<td align="center">结果映射的 ID，可以将此关联的嵌套结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 <code>ResultSet</code>。这样的 <code>ResultSet</code> 有部分数据是重复的。 为了将结果集正确地映射到嵌套的对象树中, MyBatis 允许你“串联”结果映射，以便解决嵌套结果集的问题。使用嵌套结果映射的一个例子在表格以后。</td>
</tr>
<tr>
<td align="center">columnPrefix</td>
<td align="center">当连接多个表时，你可能会不得不使用列别名来避免在 <code>ResultSet</code> 中产生重复的列名。指定 columnPrefix 列名前缀允许你将带有这些前缀的列映射到一个外部的结果映射中。 详细说明请参考后面的例子。</td>
</tr>
<tr>
<td align="center">notNullColumn</td>
<td align="center">默认情况下，在至少一个被映射到属性的列不为空时，子对象才会被创建。 你可以在这个属性上指定非空的列来改变默认行为，指定后，Mybatis 将只在这些列非空时才创建一个子对象。可以使用逗号分隔来指定多个列。默认值：未设置（unset）。</td>
</tr>
<tr>
<td align="center">autoMapping</td>
<td align="center">如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。注意，本属性对外部的结果映射无效，所以不能搭配 <code>select</code> 或 <code>resultMap</code> 元素使用。默认值：未设置（unset）。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis的结果映射</title>
    <url>/122.html</url>
    <content><![CDATA[<h3 id="结果映射的作用"><a href="#结果映射的作用" class="headerlink" title="结果映射的作用"></a>结果映射的作用</h3><p>resultMap 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC ResultSets 数据提取代码中解放出来，并在一些情形下允许你进行一些 JDBC 不支持的操作。实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 resultMap 能够代替实现同等功能的数千行代码。ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>实体类（已经省略getter和setter方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客实体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-09-11 00:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 摘要</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date releaseDate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer click;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客类别id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer blogTypeId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BlogType blogType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客里存在的第一张图片，主要用于列表展示的缩略图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imageName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客数量 非博客实际属性 主要是 根据发布日期归档查询数量用到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer blogCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布日期的字符串 只取年和月</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String releaseDateStr;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类型的博客数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer blogNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于判断当前IP是否点赞过这篇博客</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer isLike;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点赞数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer likeNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是导航条文章（0或空代表不是，1代表是）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer isMenuBlog;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置成为导航条文章的时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date setMenuBlogDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XML文件中的结果映射代码（相关属性查看博客：<a href="https://blog.zoutl.cn/121.html">mybatis的元素属性</a>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BlogResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;summary&quot;</span> <span class="attr">column</span>=<span class="string">&quot;summary&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;releaseDate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;releaseDate&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;click&quot;</span> <span class="attr">column</span>=<span class="string">&quot;click&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;blogTypeId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;blogTypeId&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;isMenuBlog&quot;</span> <span class="attr">column</span>=<span class="string">&quot;isMenuBlog&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;setMenuBlogDate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;setMenuBlogDate&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis的增删改查示例（XML映射器）</title>
    <url>/123.html</url>
    <content><![CDATA[<h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;BlogType&quot;</span>&gt;</span></span><br><span class="line">	insert into t_blogtype (name, sortNum) values (#&#123;name&#125;,#&#123;sortNum&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">	delete from t_blogtype where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;BlogType&quot;</span>&gt;</span></span><br><span class="line">	update t_blogtype</span><br><span class="line">	<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			name=#&#123;name&#125;,</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sortNum != null&quot;</span>&gt;</span></span><br><span class="line">			sortNum=#&#123;sortNum&#125;,</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BlogTypeResult&quot;</span>&gt;</span></span><br><span class="line">	select * from t_blogtype where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>相关元素查看博客：<a href="https://blog.zoutl.cn/121.html">mybatis的元素属性</a></p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis动态SQL示例</title>
    <url>/124.html</url>
    <content><![CDATA[<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BlogResult&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from t_blog</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null and title != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and title like #&#123;title&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;blogTypeId != null&quot;</span>&gt;</span></span><br><span class="line">			and blogTypeId = #&#123;blogTypeId&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isMenuBlog != null&quot;</span>&gt;</span></span><br><span class="line">			and isMenuBlog = #&#123;isMenuBlog&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isMenuBlogKey != null&quot;</span>&gt;</span></span><br><span class="line">			and isMenuBlog != 1</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;releaseDateStr != null and releaseDateStr != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and date_format(releaseDate, &#x27;%Y年%m月&#x27;) = #&#123;releaseDateStr&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sortByReleaseDate == null&quot;</span>&gt;</span></span><br><span class="line">		order by releaseDate desc</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;start != null and size != null&quot;</span>&gt;</span></span><br><span class="line">		limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Update(&#123;&quot;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;update Author&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;  <span class="tag">&lt;<span class="name">set</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;username != null&#x27;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;password != null&#x27;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;email != null&#x27;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;bio != null&#x27;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;  <span class="tag">&lt;/<span class="name">set</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;where id=#&#123;id&#125;&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&#125;)</span><br><span class="line">void updateAuthorValues(Author author);</span><br></pre></td></tr></table></figure>

<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlogsLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + _parameter.getTitle() + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>highlight.js实现代码高亮</title>
    <url>/126.html</url>
    <content><![CDATA[<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>更换代码样式直接修改link标签的css文件名，例如：将androidstudio改为github就行了，更多样式名称查看：<a href="https://blog.zoutl.cn/130.html">highlight.js代码样式名称</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/styles/androidstudio.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/highlight.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>hljs.initHighlightingOnLoad();<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码块外围代码"><a href="#代码块外围代码" class="headerlink" title="代码块外围代码"></a>代码块外围代码</h3><p>code标签的class内填代码类型，不填也可以，会自动检测</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;HTML&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特别地，上面的格式会让代码块和上面的元素空出一行，如果不想空出一行，让&lt;code&gt;头标签顶格就行，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;HTML&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="转义HTML代码"><a href="#转义HTML代码" class="headerlink" title="转义HTML代码"></a>转义HTML代码</h3><p>HTML代码转义网站：<a href="https://www.html.cn/tool/html-escape/">HTML转义工具-前端开发转换工具 | WEB前端开发</a></p>
<h3 id="填写代码"><a href="#填写代码" class="headerlink" title="填写代码"></a>填写代码</h3><p>在code标签内填入要展示的代码</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>highlight.js官网：<a href="https://highlightjs.org/">highlight.js</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>highlight.js</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis的关联（association）元素</title>
    <url>/125.html</url>
    <content><![CDATA[<p>关联（association）元素处理“有一个”类型的关系。 比如，在示例中，每个博客有一个作者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;blogResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">column</span>=<span class="string">&quot;author_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectAuthor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAuthor&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Author&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM AUTHOR WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>一套绝佳的图标字体库和CSS框架：Font Awesome图标</title>
    <url>/127.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Font Awesome是一套绝佳的图标字体库和CSS框架。</p>
<p>Font Awesome字体为您提供可缩放矢量图标,它可以被定制大小、颜色、阴影以及任何可以用CSS的样式。</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size:48px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size:60px;color:red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>查看更多图标以及来源：<a href="https://www.runoob.com/font-awesome/fontawesome-tutorial.html">Font Awesome 图标 | 菜鸟教程</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML+JavaScript动态获取当前时间</title>
    <url>/128.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;tipForTime&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #00B0E8;text-align: center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>当前时间:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: grey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前时间</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">window</span>.requestAnimationFrame(getDate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">window</span>.requestAnimationFrame(getDate)</span><br><span class="line">	&#125;, <span class="number">1000</span> / <span class="number">2</span>)</span><br><span class="line">	<span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">	<span class="keyword">var</span> year = d.getFullYear()  <span class="comment">//获取年</span></span><br><span class="line">	<span class="keyword">var</span> month = d.getMonth() + <span class="number">1</span>;  <span class="comment">//获取月，从 Date 对象返回月份 (0 ~ 11)，故在此处+1</span></span><br><span class="line">	<span class="keyword">var</span> day = d.getDay()    <span class="comment">//获取日</span></span><br><span class="line">	<span class="keyword">var</span> days = d.getDate() <span class="comment">//获取日期</span></span><br><span class="line">	<span class="keyword">var</span> hour = d.getHours()   <span class="comment">//获取小时</span></span><br><span class="line">	<span class="keyword">var</span> minute = d.getMinutes()  <span class="comment">//获取分钟</span></span><br><span class="line">	<span class="keyword">var</span> second = d.getSeconds()   <span class="comment">//获取秒</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (month &lt; <span class="number">10</span>) month = <span class="string">&quot;0&quot;</span> + month</span><br><span class="line">	<span class="keyword">if</span> (days &lt; <span class="number">10</span>) days = <span class="string">&quot;0&quot;</span> + days</span><br><span class="line">	<span class="keyword">if</span> (hour &lt; <span class="number">10</span>) hour = <span class="string">&quot;0&quot;</span> + hour</span><br><span class="line">	<span class="keyword">if</span> (minute &lt; <span class="number">10</span>) minute = <span class="string">&quot;0&quot;</span> + minute</span><br><span class="line">	<span class="keyword">if</span> (second &lt; <span class="number">10</span>) second = <span class="string">&quot;0&quot;</span> + second</span><br><span class="line">	<span class="keyword">if</span> (hour &gt;= <span class="number">6</span> &amp;&amp; hour &lt; <span class="number">12</span>) &#123;</span><br><span class="line">		$(<span class="string">&quot;#tipForTime&quot;</span>).html(<span class="string">&quot;早上好!&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hour &gt;= <span class="number">12</span> &amp;&amp; hour &lt; <span class="number">19</span>) &#123;</span><br><span class="line">		$(<span class="string">&quot;#tipForTime&quot;</span>).html(<span class="string">&quot;下午好!&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hour &gt;= <span class="number">19</span> &amp;&amp; hour &lt; <span class="number">23</span>) &#123;</span><br><span class="line">		$(<span class="string">&quot;#tipForTime&quot;</span>).html(<span class="string">&quot;晚上好!&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		$(<span class="string">&quot;#tipForTime&quot;</span>).html(<span class="string">&quot;夜深了!请注意休息!!!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> week = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;星期日&quot;</span>, <span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> Tools = <span class="built_in">document</span>.getElementById(<span class="string">&quot;time&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> time = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + days + <span class="string">&quot; &quot;</span> + hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second+<span class="string">&quot;  &quot;</span>+week[day]</span><br><span class="line">	$(<span class="string">&quot;#time&quot;</span>).html(time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果如下图"><a href="#结果如下图" class="headerlink" title="结果如下图"></a>结果如下图</h3><p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601074858.jpg" alt="img"></strong></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/qq_40625778/article/details/88880786">HTML+JS动态获取当前时间_公众号：【C you again】-CSDN博客_js显示当前时间</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL获取时间差</title>
    <url>/129.html</url>
    <content><![CDATA[<h3 id="DATEDIFF函数"><a href="#DATEDIFF函数" class="headerlink" title="DATEDIFF函数"></a>DATEDIFF函数</h3><p>只可以计算天数</p>
<p>SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATEDIFF (&quot;2021-04-25 23:23:12&quot;,&quot;2021-04-21 23:23:12&quot;) <span class="keyword">AS</span> days;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601080348.jpg" alt="img"></p>
<h3 id="TIMESTAMPDIFF函数"><a href="#TIMESTAMPDIFF函数" class="headerlink" title="TIMESTAMPDIFF函数"></a><strong>TIMESTAMPDIFF函数</strong></h3><p>可以根据自己的需求计算天数、小时、分钟、秒钟</p>
<p>SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF (<span class="keyword">DAY</span>,&quot;2021-04-21 23:23:12&quot;,&quot;2021-04-25 23:23:12&quot;) <span class="keyword">AS</span> &quot;天&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF (<span class="keyword">HOUR</span>,&quot;2021-04-21 23:23:12&quot;,&quot;2021-04-25 23:23:12&quot;) <span class="keyword">AS</span> &quot;时&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF (<span class="keyword">MINUTE</span>,&quot;2021-04-21 23:23:12&quot;,&quot;2021-04-25 23:23:12&quot;) <span class="keyword">AS</span> &quot;分&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF (<span class="keyword">SECOND</span>,&quot;2021-04-21 23:23:12&quot;,&quot;2021-04-25 23:23:12&quot;) <span class="keyword">AS</span> &quot;秒&quot;;</span><br></pre></td></tr></table></figure>

<p>结果：（图片从上到下与上面的SQL语句从上到下一一对应）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601080435.jpg" alt="img"><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601080446.jpg" alt="img"><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601080458.jpg" alt="img"><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601080507.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.cnblogs.com/zq1003/p/14705233.html">mysql 比较两个日期的时间差 - 未确定 - 博客园</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>进销存系统</title>
    <url>/13.html</url>
    <content><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>GitHub地址：<a href="https://github.com/a6678696/JXC">https://github.com/a6678696/JXC</a></p>
<h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><p>本系统使用Spring Boot架构，数据访问层采用Spring Data Jpa，安全框架采用Shiro，实现了完整权限系统，Controller方法采用Shiro注解，来实现有效的权限控制；界面采用了EasyUI技术；</p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>进货管理（进货入库、退货出库、进货单据查询、退货单据查询、当前库存查询）、销售管理（销售出库、客户退货、销售单据查询、客户退货查询）、库存管理（商品报损、商品报溢、库存报警、报损报溢查询）、统计报表（供应商进退货单统计、客户进退货单统计、按日统计销售利润、按月统计销售利润）、供应商管理、客户管理、商品管理、期初库存管理、权限管理模块（角色管理、用户管理）、查看系统日志、修改密码、安全退出</p>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011113454.jpg"></p>
<h4 id="公司进货入库"><a href="#公司进货入库" class="headerlink" title="公司进货入库"></a>公司进货入库</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011113340.jpg"></p>
<h4 id="公司退货出库"><a href="#公司退货出库" class="headerlink" title="公司退货出库"></a>公司退货出库</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011113526.jpg"></p>
<h4 id="公司进货单据查询"><a href="#公司进货单据查询" class="headerlink" title="公司进货单据查询"></a>公司进货单据查询</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011113610.jpg"></p>
<h4 id="公司退货单据查询"><a href="#公司退货单据查询" class="headerlink" title="公司退货单据查询"></a>公司退货单据查询</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015031019.jpg"></p>
<h4 id="商品销售出库"><a href="#商品销售出库" class="headerlink" title="商品销售出库"></a>商品销售出库</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011113829.jpg"></p>
<h4 id="客户退货"><a href="#客户退货" class="headerlink" title="客户退货"></a>客户退货</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011113901.jpg"></p>
<h4 id="销售单据查询"><a href="#销售单据查询" class="headerlink" title="销售单据查询"></a>销售单据查询</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011113932.jpg"></p>
<h4 id="客户退货单据查询"><a href="#客户退货单据查询" class="headerlink" title="客户退货单据查询"></a>客户退货单据查询</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011114014.jpg"></p>
<h4 id="商品报损"><a href="#商品报损" class="headerlink" title="商品报损"></a>商品报损</h4><p>商品过期、受潮等</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011114108.jpg"></p>
<h4 id="商品报溢"><a href="#商品报溢" class="headerlink" title="商品报溢"></a>商品报溢</h4><p>商品实际数量比记录的数量少，可能是初期记录失误，实际与记录相差的数量</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011114146.jpg"></p>
<h4 id="库存报警"><a href="#库存报警" class="headerlink" title="库存报警"></a>库存报警</h4><p>当商品的当前库存&lt;库存下限</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011114235.jpg"></p>
<h4 id="报损报溢记录查询"><a href="#报损报溢记录查询" class="headerlink" title="报损报溢记录查询"></a>报损报溢记录查询</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011114320.jpg"></p>
<h4 id="公司进货退货记录查询"><a href="#公司进货退货记录查询" class="headerlink" title="公司进货退货记录查询"></a>公司进货退货记录查询</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011114402.jpg"></p>
<h4 id="销售和客户退货记录查询"><a href="#销售和客户退货记录查询" class="headerlink" title="销售和客户退货记录查询"></a>销售和客户退货记录查询</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011114442.jpg"></p>
<h4 id="公司进货和退货的商品明细"><a href="#公司进货和退货的商品明细" class="headerlink" title="公司进货和退货的商品明细"></a>公司进货和退货的商品明细</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015024805.jpg"></p>
<h4 id="商品销售和客户退货明细"><a href="#商品销售和客户退货明细" class="headerlink" title="商品销售和客户退货明细"></a>商品销售和客户退货明细</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015024834.jpg"></p>
<h4 id="按日统计利润"><a href="#按日统计利润" class="headerlink" title="按日统计利润"></a>按日统计利润</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015024918.jpg"></p>
<h4 id="按月统计利润"><a href="#按月统计利润" class="headerlink" title="按月统计利润"></a>按月统计利润</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025019.jpg"></p>
<h4 id="供应商管理"><a href="#供应商管理" class="headerlink" title="供应商管理"></a>供应商管理</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025056.jpg"></p>
<h4 id="客户管理"><a href="#客户管理" class="headerlink" title="客户管理"></a>客户管理</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025127.jpg"></p>
<h4 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025210.jpg"></p>
<h4 id="设置商品的库存"><a href="#设置商品的库存" class="headerlink" title="设置商品的库存"></a>设置商品的库存</h4><p>新添加的商品的数量为0</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025246.jpg"></p>
<h4 id="给角色赋予权限"><a href="#给角色赋予权限" class="headerlink" title="给角色赋予权限"></a>给角色赋予权限</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025323.jpg"></p>
<h4 id="给用户赋予角色"><a href="#给用户赋予角色" class="headerlink" title="给用户赋予角色"></a>给用户赋予角色</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025402.jpg"></p>
<h4 id="查看系统日志"><a href="#查看系统日志" class="headerlink" title="查看系统日志"></a>查看系统日志</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025434.jpg"></p>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025516.jpg"></p>
<h4 id="安全退出系统"><a href="#安全退出系统" class="headerlink" title="安全退出系统"></a>安全退出系统</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015025550.jpg"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
      </tags>
  </entry>
  <entry>
    <title>highlight.js代码样式名称</title>
    <url>/130.html</url>
    <content><![CDATA[<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>本博客系统专用或者和本站引用同一个网站的cdn加速</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/styles/androidstudio.min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用语言类型"><a href="#常用语言类型" class="headerlink" title="常用语言类型"></a><strong>常用语言类型</strong></h3><p>HTML, XML，Bash，CSS，Java，JavaScript，JSON，SQL</p>
<h3 id="代码样式名称"><a href="#代码样式名称" class="headerlink" title="代码样式名称"></a><strong>代码样式名称</strong></h3><p>更换代码样式直接修改link标签的css文件名，例如：将<code>androidstudio</code>改为<code>github</code>就行了</p>
<h4 id="androidstudio"><a href="#androidstudio" class="headerlink" title="androidstudio"></a>androidstudio</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601093713.jpg" alt="img"></p>
<h4 id="agate"><a href="#agate" class="headerlink" title="agate"></a>agate</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601093747.jpg" alt="img"></p>
<h4 id="github"><a href="#github" class="headerlink" title="github"></a>github</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601093819.jpg" alt="img"></p>
<h4 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601093905.jpg" alt="img"></p>
<h4 id="ascetic"><a href="#ascetic" class="headerlink" title="ascetic"></a>ascetic</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601093933.jpg" alt="img"></p>
<h4 id="brown-paper"><a href="#brown-paper" class="headerlink" title="brown-paper"></a>brown-paper</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094002.jpg" alt="img"></p>
<h4 id="codepen-embed"><a href="#codepen-embed" class="headerlink" title="codepen-embed"></a>codepen-embed</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094032.jpg" alt="img"></p>
<h4 id="color-brewer"><a href="#color-brewer" class="headerlink" title="color-brewer"></a>color-brewer</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094106.jpg" alt="img"></p>
<h4 id="dark"><a href="#dark" class="headerlink" title="dark"></a>dark</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094135.jpg" alt="img"></p>
<h4 id="docco"><a href="#docco" class="headerlink" title="docco"></a>docco</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094230.jpg" alt="img"></p>
<h4 id="far"><a href="#far" class="headerlink" title="far"></a>far</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094257.jpg" alt="img"></p>
<h4 id="foundation"><a href="#foundation" class="headerlink" title="foundation"></a>foundation</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094326.jpg" alt="img"></p>
<h4 id="gml"><a href="#gml" class="headerlink" title="gml"></a>gml</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094401.jpg" alt="img"></p>
<h4 id="googlecode"><a href="#googlecode" class="headerlink" title="googlecode"></a>googlecode</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094445.jpg" alt="img"></p>
<h4 id="gradient-dark"><a href="#gradient-dark" class="headerlink" title="gradient-dark"></a>gradient-dark</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094521.jpg" alt="img"></p>
<h4 id="gradient-light"><a href="#gradient-light" class="headerlink" title="gradient-light"></a>gradient-light</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094558.jpg" alt="img"></p>
<h4 id="grayscale"><a href="#grayscale" class="headerlink" title="grayscale"></a>grayscale</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094639.jpg" alt="img"></p>
<h4 id="hybrid"><a href="#hybrid" class="headerlink" title="hybrid"></a>hybrid</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094714.jpg" alt="img"></p>
<h4 id="ir-black"><a href="#ir-black" class="headerlink" title="ir-black"></a>ir-black</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094751.jpg" alt="img"></p>
<h4 id="isbl-editor-dark"><a href="#isbl-editor-dark" class="headerlink" title="isbl-editor-dark"></a>isbl-editor-dark</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094841.jpg" alt="img"></p>
<h4 id="isbl-editor-light"><a href="#isbl-editor-light" class="headerlink" title="isbl-editor-light"></a>isbl-editor-light</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094910.jpg" alt="img"></p>
<h4 id="lioshi"><a href="#lioshi" class="headerlink" title="lioshi"></a>lioshi</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601094945.jpg" alt="img"></p>
<h4 id="magula"><a href="#magula" class="headerlink" title="magula"></a>magula</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095024.jpg" alt="img"></p>
<h4 id="mono-blue"><a href="#mono-blue" class="headerlink" title="mono-blue"></a>mono-blue</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095100.jpg" alt="img"></p>
<h4 id="monokai"><a href="#monokai" class="headerlink" title="monokai"></a>monokai</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095127.jpg" alt="img"></p>
<h4 id="monokai-sublime"><a href="#monokai-sublime" class="headerlink" title="monokai-sublime"></a>monokai-sublime</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095220.jpg" alt="img"></p>
<h4 id="night-owl"><a href="#night-owl" class="headerlink" title="night-owl"></a>night-owl</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095253.jpg" alt="img"></p>
<h4 id="nnfx-dark"><a href="#nnfx-dark" class="headerlink" title="nnfx-dark"></a>nnfx-dark</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095340.jpg" alt="img"></p>
<h4 id="nnfx-light"><a href="#nnfx-light" class="headerlink" title="nnfx-light"></a>nnfx-light</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095409.jpg" alt="img"></p>
<h4 id="pojoaque"><a href="#pojoaque" class="headerlink" title="pojoaque"></a>pojoaque</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095443.jpg" alt="img"></p>
<h4 id="purebasic"><a href="#purebasic" class="headerlink" title="purebasic"></a>purebasic</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095507.jpg" alt="img"></p>
<h4 id="rainbow"><a href="#rainbow" class="headerlink" title="rainbow"></a>rainbow</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095538.jpg" alt="img"></p>
<h4 id="routeros"><a href="#routeros" class="headerlink" title="routeros"></a>routeros</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095627.jpg" alt="img"></p>
<h4 id="school-book"><a href="#school-book" class="headerlink" title="school-book"></a>school-book</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095702.jpg" alt="img"></p>
<h4 id="shades-of-purple"><a href="#shades-of-purple" class="headerlink" title="shades-of-purple"></a>shades-of-purple</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095750.jpg" alt="img"></p>
<h4 id="srcery"><a href="#srcery" class="headerlink" title="srcery"></a>srcery</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095817.jpg" alt="img"></p>
<h4 id="stackoverflow-dark"><a href="#stackoverflow-dark" class="headerlink" title="stackoverflow-dark"></a>stackoverflow-dark</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095843.jpg" alt="img"></p>
<h4 id="stackoverflow-light"><a href="#stackoverflow-light" class="headerlink" title="stackoverflow-light"></a>stackoverflow-light</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095914.jpg" alt="img"></p>
<h4 id="sunburst"><a href="#sunburst" class="headerlink" title="sunburst"></a>sunburst</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601095946.jpg" alt="img"></p>
<h4 id="tomorrow-night-blue"><a href="#tomorrow-night-blue" class="headerlink" title="tomorrow-night-blue"></a>tomorrow-night-blue</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601100017.jpg" alt="img"></p>
<h4 id="tomorrow-night-bright"><a href="#tomorrow-night-bright" class="headerlink" title="tomorrow-night-bright"></a>tomorrow-night-bright</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601100043.jpg" alt="img"></p>
<h4 id="vs"><a href="#vs" class="headerlink" title="vs"></a>vs</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601100117.jpg" alt="img"></p>
<h4 id="xcode"><a href="#xcode" class="headerlink" title="xcode"></a>xcode</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210601100144.jpg" alt="img"></p>
<h4 id="an-old-hope"><a href="#an-old-hope" class="headerlink" title="an-old-hope"></a>an-old-hope</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210719231000.jpg" alt="img"></p>
<h4 id="atelier-forest-light"><a href="#atelier-forest-light" class="headerlink" title="atelier-forest-light"></a>atelier-forest-light</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210719231819.jpg" alt="img"></p>
<h4 id="atom-one-dark-reasonable"><a href="#atom-one-dark-reasonable" class="headerlink" title="atom-one-dark-reasonable"></a>atom-one-dark-reasonable</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210719232807.jpg" alt="img"></p>
<h4 id="atom-one-dark"><a href="#atom-one-dark" class="headerlink" title="atom-one-dark"></a>atom-one-dark</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210719233111.jpg" alt="img"></p>
<h4 id="atom-one-light"><a href="#atom-one-light" class="headerlink" title="atom-one-light"></a>atom-one-light</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210719233343.jpg" alt="img"></p>
<h4 id="color-brewer-1"><a href="#color-brewer-1" class="headerlink" title="color-brewer"></a>color-brewer</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210719233701.jpg" alt="img"></p>
<h4 id="darcula"><a href="#darcula" class="headerlink" title="darcula"></a>darcula</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210719234112.jpg" alt="img"></p>
<h4 id="docco-1"><a href="#docco-1" class="headerlink" title="docco"></a>docco</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210720011049.jpg" alt="img"></p>
<h4 id="dracula"><a href="#dracula" class="headerlink" title="dracula"></a>dracula</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210720011101.jpg" alt="img"></p>
<h4 id="github-gist"><a href="#github-gist" class="headerlink" title="github-gist"></a>github-gist</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210720012201.jpg" alt="img"></p>
<h4 id="gml-1"><a href="#gml-1" class="headerlink" title="gml"></a>gml</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210720012210.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a><strong>PS.</strong></h3><p>更多样式去官网查看：<a href="https://highlightjs.org/static/demo/">highlight.js demo</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>highlight.js</tag>
      </tags>
  </entry>
  <entry>
    <title>给highlight.js代码高亮加行号</title>
    <url>/131.html</url>
    <content><![CDATA[<h3 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hljsln</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljsln</span> <span class="selector-class">.ln-bg</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2.2em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.18</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljsln</span> <span class="selector-class">.ln-num</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">    -webkit-touch-callout: none;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -khtml-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljsln</span> <span class="selector-class">.ln-num</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><p>将JavaScript代码保存为文件 highlight.line-numbers.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">w, d</span>) </span>&#123;</span><br><span class="line">    w.hljsln = &#123;</span><br><span class="line">        <span class="attr">initLineNumbersOnLoad</span>: initLineNumbersOnLoad,</span><br><span class="line">        <span class="attr">addLineNumbersForCode</span>: addLineNumbersForCode</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">initLineNumbersOnLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (d.readyState === <span class="string">&#x27;interactive&#x27;</span> || d.readyState === <span class="string">&#x27;complete&#x27;</span>) &#123;</span><br><span class="line">            documentReady();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            w.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                documentReady();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addLineNumbersForCode</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">        html = <span class="string">&#x27;&lt;span class=&quot;ln-num&quot; data-num=&quot;&#x27;</span> + num + <span class="string">&#x27;&quot;&gt;&lt;/span&gt;&#x27;</span> + html;</span><br><span class="line">        html = html.replace(<span class="regexp">/\r\n|\r|\n/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">return</span> a + <span class="string">&#x27;&lt;span class=&quot;ln-num&quot; data-num=&quot;&#x27;</span> + num + <span class="string">&#x27;&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        html = <span class="string">&#x27;&lt;span class=&quot;ln-bg&quot;&gt;&lt;/span&gt;&#x27;</span> + html;</span><br><span class="line">        <span class="keyword">return</span> html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">documentReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> elements = d.querySelectorAll(<span class="string">&#x27;pre code&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elements[i].className.indexOf(<span class="string">&#x27;hljsln&#x27;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> html = elements[i].innerHTML;</span><br><span class="line">                html = addLineNumbersForCode(html);</span><br><span class="line">                elements[i].innerHTML = html;</span><br><span class="line">                elements[i].className += <span class="string">&#x27; hljsln&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>));</span><br></pre></td></tr></table></figure>

<h3 id="加载并执行初始化如下"><a href="#加载并执行初始化如下" class="headerlink" title="加载并执行初始化如下"></a>加载并执行初始化如下</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/styles/androidstudio.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/highlight.line-numbers.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/highlight.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>hljs.initHighlightingOnLoad();hljsln.initLineNumbersOnLoad();<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果如下图"><a href="#结果如下图" class="headerlink" title="结果如下图"></a>结果如下图</h3><p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210603041214.jpg" alt="img"></strong></p>
<p>可以看到第1和8行是空行，但是也显示了行号，为了让它不显示，将上面JavaScript代码中的addLineNumbersForCode方法修改成下面的代码即可：（修改后结果如下图所示）</p>
<p>JavaScript代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLineNumbersForCode</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line">	html = html.replace(<span class="regexp">/\r\n|\r|\n/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">		max++;</span><br><span class="line">		<span class="keyword">if</span> (max != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> b;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	html = html.replace(<span class="regexp">/\r\n|\r|\n/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">		num++;</span><br><span class="line">		<span class="keyword">if</span> (num != <span class="number">0</span> &amp;&amp; num != max) &#123;</span><br><span class="line">			<span class="keyword">return</span> a + <span class="string">&#x27;&lt;span class=&quot;ln-num&quot; data-num=&quot;&#x27;</span> + num + <span class="string">&#x27;&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (num != <span class="number">0</span> &amp;&amp; num == max) &#123;</span><br><span class="line">			<span class="keyword">return</span> a + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	html = <span class="string">&#x27;&lt;span class=&quot;ln-bg&quot; style=&quot;margin-left: 1px&quot;&gt;&lt;/span&gt;&#x27;</span> + html;</span><br><span class="line">	<span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210603041531.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.yangdx.com/2020/04/144.html">自己写 highlight.js 行号插件 | 天角星</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>highlight.js</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery让鼠标定位到指定输入框</title>
    <url>/132.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;codeStyle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;easyui-validatebox&quot;</span> <span class="attr">required</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#codeStyle&quot;</span>).get(<span class="number">0</span>).focus();</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/yyj108317/article/details/109045695">用jquery让鼠标定位输入框_白不懂黑的静的专栏-CSDN博客</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>title标签加图标</title>
    <url>/133.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;short icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/images/favicon.ico&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210603224943.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果是Vue项目，要将图片放在<code>static</code>文件夹下面，上面的代码放在<code>index.html</code>里面</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220330011609865.png" alt="image-20220330011609865"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CKEditor富文本编辑器</title>
    <url>/135.html</url>
    <content><![CDATA[<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/static/ckeditor/ckeditor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><p>使用textarea标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;30&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    CKEDITOR.replace(<span class="string">&quot;content&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CKEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyUI格式化网格数据</title>
    <url>/134.html</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Blog实体类（博客实体）和BlogType实体类（博客类别实体），每个blog都有对应的blogType，博客类别实体有名称等属性，而我们只需要显示博客类别的名称，则格式化过程如下所示：</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><p>Blog实体类：（博客实体，已省略setter和getter方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客实体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-09-11 00:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 摘要</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date releaseDate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer click;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客类别id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer blogTypeId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BlogType blogType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客里存在的第一张图片，主要用于列表展示的缩略图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imageName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客数量 非博客实际属性 主要是 根据发布日期归档查询数量用到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer blogCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布日期的字符串 只取年和月</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String releaseDateStr;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类型的博客数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer blogNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于判断当前IP是否点赞过这篇博客</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer isLike;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点赞数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer likeNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是导航条文章（0或空代表不是，1代表是）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer isMenuBlog;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置成为导航条文章的时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date setMenuBlogDate;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>BlogType实体类：（博客类别实体，已省略setter和getter方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客类别实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-09-10 21:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客类别名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排列数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sortNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类别的博客数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long blogNum;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;dg&quot;</span> <span class="attr">title</span>=<span class="string">&quot;博客管理&quot;</span> <span class="attr">class</span>=<span class="string">&quot;easyui-datagrid&quot;</span> <span class="attr">striped</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">fitColumns</span>=<span class="string">&quot;true&quot;</span> <span class="attr">pagination</span>=<span class="string">&quot;true&quot;</span> <span class="attr">rownumbers</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">url</span>=<span class="string">&quot;/admin/blog/list&quot;</span> <span class="attr">fit</span>=<span class="string">&quot;true&quot;</span> <span class="attr">toolbar</span>=<span class="string">&quot;#tb&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">field</span>=<span class="string">&quot;cb&quot;</span> <span class="attr">checkbox</span>=<span class="string">&quot;true&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">field</span>=<span class="string">&quot;id&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">field</span>=<span class="string">&quot;title&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">formatter</span>=<span class="string">&quot;formatTitle&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">field</span>=<span class="string">&quot;releaseDate&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>发布日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">field</span>=<span class="string">&quot;blogType&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">formatter</span>=<span class="string">&quot;formatType&quot;</span>&gt;</span>博客类型<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatType</span>(<span class="params">val, row</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> val.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>EasyUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现HTTP请求</title>
    <url>/136.html</url>
    <content><![CDATA[<h3 id="commons-httpclient"><a href="#commons-httpclient" class="headerlink" title="commons-httpclient"></a>commons-httpclient</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.GetMethod;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.params.HttpMethodParams;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Http请求工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-07 7:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendGet</span><span class="params">(String urlParam)</span> <span class="keyword">throws</span> HttpException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建httpClient实例对象</span></span><br><span class="line">        HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        <span class="comment">// 设置httpClient连接主机服务器超时时间：15000毫秒</span></span><br><span class="line">        httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(<span class="number">15000</span>);</span><br><span class="line">        <span class="comment">// 创建GET请求方法实例对象</span></span><br><span class="line">        GetMethod getMethod = <span class="keyword">new</span> GetMethod(urlParam);</span><br><span class="line">        <span class="comment">// 设置post请求超时时间</span></span><br><span class="line">        getMethod.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, <span class="number">60000</span>);</span><br><span class="line">        getMethod.addRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        httpClient.executeMethod(getMethod);</span><br><span class="line"></span><br><span class="line">        String result = getMethod.getResponseBodyAsString();</span><br><span class="line">        getMethod.releaseConnection();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String ip = <span class="string">&quot;116.179.32.87&quot;</span>;</span><br><span class="line">        String url = <span class="string">&quot;http://ip.ws.126.net/ipquery?ip=&quot;</span> + ip;</span><br><span class="line">        String result = sendGet(url);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="使用Hutool"><a href="#使用Hutool" class="headerlink" title="使用Hutool"></a>使用Hutool</h3><h4 id="CKEDITOR-replace-content-html"><a href="#CKEDITOR-replace-content-html" class="headerlink" title="    CKEDITOR.replace("content");html"></a><script type="text/javascript">    CKEDITOR.replace("content");</script>html</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java代码-1"><a href="#Java代码-1" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	String ip = <span class="string">&quot;116.179.32.87&quot;</span>;</span><br><span class="line">	String url = <span class="string">&quot;http://ip.ws.126.net/ipquery?ip=&quot;</span> + ip;</span><br><span class="line">	String str = HttpUtil.get(url);</span><br><span class="line">	System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java截取两个字符串之间的字符串</title>
    <url>/137.html</url>
    <content><![CDATA[<h3 id="使用的方法"><a href="#使用的方法" class="headerlink" title="使用的方法"></a>使用的方法</h3><h4 id="String-indexOf"><a href="#String-indexOf" class="headerlink" title="String.indexOf"></a>String.indexOf</h4><p>传入的数据类型为String，返回传入字符串第一次出现的位置（索引从0开始，返回字符串第一个字符的位置）</p>
<h4 id="String-substring"><a href="#String-substring" class="headerlink" title="String.substring"></a>String.substring</h4><p>传入数据类型为两个int，用于截取字符串（包括头，不包括尾）</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-07 7:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;12345678923&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> begin = str.indexOf(<span class="string">&quot;23&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> last = str.indexOf(<span class="string">&quot;89&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\&quot;23\&quot;第一次出现的位置为:&quot;</span> + begin);</span><br><span class="line">        System.out.println(<span class="string">&quot;\&quot;89\&quot;第一次出现的位置为:&quot;</span> + last);</span><br><span class="line">        String substring = str.substring(begin + <span class="number">2</span>, last);</span><br><span class="line">        System.out.println(<span class="string">&quot;截取的结果为:&quot;</span> + substring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210607092942.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a><strong>PS.</strong></h3><p>要截取什么样的字符串可根据String.substring包括头不包括尾的特性来灵活截取</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java解析JSON的四种方式</title>
    <url>/138.html</url>
    <content><![CDATA[<h3 id="Link实体类"><a href="#Link实体类" class="headerlink" title="Link实体类"></a>Link实体类</h3><p>已省略setter和getter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 友情链接实体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-02-03 17:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排列序号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sortNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Link&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, url=&#x27;&quot;</span> + url + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sortNum=&quot;</span> + sortNum +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用传统方式"><a href="#利用传统方式" class="headerlink" title="利用传统方式"></a>利用传统方式</h3><p>pom.xml代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>20160810<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Link;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-07 7:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Link link = <span class="keyword">new</span> Link();</span><br><span class="line">        link.setId(<span class="number">1</span>);</span><br><span class="line">        link.setName(<span class="string">&quot;LeDao的博客&quot;</span>);</span><br><span class="line">        link.setUrl(<span class="string">&quot;http://www.zoutl.cn&quot;</span>);</span><br><span class="line">        link.setSortNum(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//实体类转Json</span></span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;id&quot;</span>, link.getId());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;name&quot;</span>, link.getName());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;url&quot;</span>, link.getUrl());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;sortNum&quot;</span>, link.getSortNum());</span><br><span class="line">        System.out.println(jsonObject.toString());</span><br><span class="line">        <span class="comment">//Json转实体类</span></span><br><span class="line">        Link link2 = <span class="keyword">new</span> Link();</span><br><span class="line">        link2.setId((Integer) jsonObject.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        link2.setName((String) jsonObject.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        link2.setUrl((String) jsonObject.get(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">        link2.setSortNum((Integer) jsonObject.get(<span class="string">&quot;sortNum&quot;</span>));</span><br><span class="line">        System.out.println(link2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用Jackson方式"><a href="#利用Jackson方式" class="headerlink" title="利用Jackson方式"></a>利用Jackson方式</h3><p>pom.xml代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Link;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-07 7:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        Link link = <span class="keyword">new</span> Link();</span><br><span class="line">        link.setId(<span class="number">1</span>);</span><br><span class="line">        link.setName(<span class="string">&quot;LeDao的博客&quot;</span>);</span><br><span class="line">        link.setUrl(<span class="string">&quot;http://www.zoutl.cn&quot;</span>);</span><br><span class="line">        link.setSortNum(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//实体类转Json</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String jsonString = objectMapper.writeValueAsString(link);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        <span class="comment">//Json转实体类</span></span><br><span class="line">        Link link2 = objectMapper.readValue(jsonString,Link.class);</span><br><span class="line">        System.out.println(link2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用GSON方式"><a href="#利用GSON方式" class="headerlink" title="利用GSON方式"></a>利用GSON方式</h3><p>pom.xml代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Link;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-07 7:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        Link link = <span class="keyword">new</span> Link();</span><br><span class="line">        link.setId(<span class="number">1</span>);</span><br><span class="line">        link.setName(<span class="string">&quot;LeDao的博客&quot;</span>);</span><br><span class="line">        link.setUrl(<span class="string">&quot;http://www.zoutl.cn&quot;</span>);</span><br><span class="line">        link.setSortNum(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//实体类转Json</span></span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        String jsonString = gson.toJson(link);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        <span class="comment">//Json转实体类</span></span><br><span class="line">        Link link2 = gson.fromJson(jsonString, Link.class);</span><br><span class="line">        System.out.println(link2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="利用FastJSON方式"><a href="#利用FastJSON方式" class="headerlink" title="利用FastJSON方式"></a>利用FastJSON方式</h3><p>pom.xml代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Link;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-07 7:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        Link link = <span class="keyword">new</span> Link();</span><br><span class="line">        link.setId(<span class="number">1</span>);</span><br><span class="line">        link.setName(<span class="string">&quot;LeDao的博客&quot;</span>);</span><br><span class="line">        link.setUrl(<span class="string">&quot;http://www.zoutl.cn&quot;</span>);</span><br><span class="line">        link.setSortNum(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//实体类转Json</span></span><br><span class="line">        Object jsonString = JSON.toJSON(link);</span><br><span class="line">        System.out.println(jsonString.toString());</span><br><span class="line">        <span class="comment">//Json转实体类</span></span><br><span class="line">        Link link2 = JSON.parseObject(jsonString.toString(), Link.class);</span><br><span class="line">        System.out.println(link2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210607102408.jpg" alt="img"></p>
<h3 id="几种方式的比较"><a href="#几种方式的比较" class="headerlink" title="几种方式的比较"></a>几种方式的比较</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">简介</th>
</tr>
</thead>
<tbody><tr>
<td align="center">传统Json方式</td>
<td align="center">复杂的Json数据转换成实体类存在缺陷，性能和功能不够完善</td>
</tr>
<tr>
<td align="center">Jackson方式</td>
<td align="center">复杂的Json数据转换成实体类存在缺陷，性能和功能优于传统方式</td>
</tr>
<tr>
<td align="center">Gson方式</td>
<td align="center">功能方面在几种方式中最优，性能方面不如Jackson方式</td>
</tr>
<tr>
<td align="center">FastJson方式</td>
<td align="center">复杂的实体类转换成Json数据存在缺陷，解析json的速度优于其他方式</td>
</tr>
</tbody></table>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/leosblog/article/details/80842640">Java解析JSON的四种方式_云恒子-CSDN博客_java解析json</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven找依赖包或下载jar包</title>
    <url>/139.html</url>
    <content><![CDATA[<h3 id="进入网站"><a href="#进入网站" class="headerlink" title="进入网站"></a>进入网站</h3><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>搜索要使用的依赖包（搜索gson）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210607104110.jpg" alt="img"></p>
<h3 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h3><p>选择要使用的版本，点击Version列的版本号</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210607104226.jpg" alt="img"></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>点击第一条红线处的jar链接即可下载jar包，第二条红线处选择maven就是pom.xml的引入代码</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210607104520.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery发送Ajax请求</title>
    <url>/140.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;url2&quot;</span>&gt;</span>看我看我<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">url:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> <span class="attr">id</span>=<span class="string">&quot;url1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:click()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">click</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> urlStr = $(<span class="string">&quot;#url1&quot;</span>).val();</span><br><span class="line">	<span class="keyword">if</span> (urlStr == <span class="keyword">null</span> || urlStr == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">		alert(<span class="string">&quot;请输入链接!!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	$.ajax(&#123;</span><br><span class="line">		url: <span class="string">&quot;/blog/getJson&quot;</span>,</span><br><span class="line">		type: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">		data: &#123;urlStr: urlStr&#125;,</span><br><span class="line">		success: function (result) &#123;</span><br><span class="line">			<span class="keyword">var</span> obj = JSON.parse(result);</span><br><span class="line">			$(<span class="string">&quot;#url2&quot;</span>).html(obj.name + <span class="string">&quot; : &quot;</span> + obj.url);</span><br><span class="line">			$(<span class="string">&quot;#url2&quot;</span>).attr(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;color:red&quot;</span>);</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><p>Link实体类：（已省略setter和getter方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 友情链接实体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-02-03 17:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排列序号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sortNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Link&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, url=&#x27;&quot;</span> + url + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sortNum=&quot;</span> + sortNum +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请求的方法getJson：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getJson&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJson</span><span class="params">(String urlStr)</span> </span>&#123;</span><br><span class="line">	Link link = <span class="keyword">new</span> Link();</span><br><span class="line">	link.setId(<span class="number">1</span>);</span><br><span class="line">	link.setName(<span class="string">&quot;LeDao的博客&quot;</span>);</span><br><span class="line">	link.setUrl(urlStr);</span><br><span class="line">	link.setSortNum(<span class="number">1</span>);</span><br><span class="line">	Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">	String jsonString = gson.toJson(link);</span><br><span class="line">	<span class="keyword">return</span> jsonString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table>
<thead>
<tr>
<th align="center">序 号</th>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">url</td>
<td align="center">String 类型参数，发送请求的地址</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">type</td>
<td align="center">String 类型参数，设置请求方式（ GET、POST、PUT、DELETE ）</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">timeout</td>
<td align="center">Number类型参数，设置请求超时时间（毫秒）</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">async</td>
<td align="center">Boolean 类型参数，默认设置为 true，当为 true 表示发送异步请求，当为 false 表示发送同步请求</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">cache</td>
<td align="center">Boolean 类型参数，默认设置为 true 默认为 true（当 dataType 为 script 时，默认为 false ），设置为false将不会从浏览器缓存中加载请求信息</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">data</td>
<td align="center">Object 或 String 类型的参数，发送请求的参数，如果是 GET 方式则以 ? &amp; 形式拼接到 url 中，如果是 POST 方式则将数据放在 FormData 中</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">dataType</td>
<td align="center">String类型的参数，指定服务器返回的数据类型 xml：返回XML文档 html：返回纯文本HTML信息 script：返回纯文本JavaScript代码 json：返回JSON数据 jsonp：JSONP格式 text：返回纯文本字符串</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">beforeSend</td>
<td align="center">Function 类型参数，发送请求前可以修改 XMLHttpRequest 对象的函数，例如添加自定义 HTTP 头</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">complete</td>
<td align="center">Function 类型参数，请求完成后调用的回调函数（请求成功或失败时均调用）</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">success</td>
<td align="center">Function 类型参数，请求成功的回调函数</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">error</td>
<td align="center">Function 类型参数，请求失败的回调函数</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">contentType</td>
<td align="center">String 类型参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">dataFilter</td>
<td align="center">Function类型参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理function(data, type){   //返回处理后的数据   return data; }</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">global</td>
<td align="center">Boolean 类型参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">ifModified</td>
<td align="center">Boolean 类型参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">jsonp</td>
<td align="center">String 类型参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在”callback=?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">username</td>
<td align="center">String 类型参数，用于响应HTTP访问认证请求的用户名</td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">password</td>
<td align="center">String 类型参数，用于响应HTTP访问认证请求的密码</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">processData</td>
<td align="center">Boolean 类型参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false</td>
</tr>
<tr>
<td align="center">20</td>
<td align="center">scriptCharset</td>
<td align="center">String 类型参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用</td>
</tr>
</tbody></table>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/assiduous_me/article/details/90108590?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">JQuery 中使用 Ajax 发送 GET、POST 请求_assiduous_me的博客-CSDN博客_ajax发送get请求</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot2.0实现自定义404页面渲染</title>
    <url>/14.html</url>
    <content><![CDATA[<h3 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h3><p>实现ErrorPageRegistrar，404.html放在项目的webapp文件夹中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorPageConfig</span> <span class="keyword">implements</span> <span class="title">ErrorPageRegistrar</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerErrorPages</span><span class="params">(ErrorPageRegistry registry)</span> </span>&#123;</span><br><span class="line">        ErrorPage[] errorPages = <span class="keyword">new</span> ErrorPage[<span class="number">2</span>];</span><br><span class="line">        errorPages[<span class="number">0</span>] = <span class="keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="string">&quot;/404.html&quot;</span>);</span><br><span class="line">        errorPages[<span class="number">1</span>] = <span class="keyword">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class="string">&quot;/500.html&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        registry.addErrorPages(errorPages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h3><p>Spring Boot2.0 之后的写法，404.html文件放在resources的static文件夹中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorPageConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer <span class="title">webServerFactoryCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第二种写法：java8 lambda写法</span></span><br><span class="line">        <span class="keyword">return</span> (factory -&gt; &#123;</span><br><span class="line">            ErrorPage errorPage404 = <span class="keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="string">&quot;/404.html&quot;</span>);</span><br><span class="line">            factory.addErrorPages(errorPage404);</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Highcharts的使用</title>
    <url>/141.html</url>
    <content><![CDATA[<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://code.highcharts.com/highcharts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> chart = <span class="keyword">new</span> Highcharts.Chart(&#123;</span><br><span class="line">		<span class="attr">chart</span>: &#123;</span><br><span class="line">			<span class="attr">renderTo</span>: <span class="string">&quot;container&quot;</span>,</span><br><span class="line">			<span class="attr">type</span>: <span class="string">&#x27;column&#x27;</span>,</span><br><span class="line">			<span class="attr">events</span>: &#123;</span><br><span class="line">				<span class="attr">load</span>: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">					$.post(<span class="string">&quot;/blog/highlight&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">						<span class="keyword">var</span> rows = result.rows;</span><br><span class="line">						<span class="keyword">var</span> xArr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">						<span class="keyword">var</span> yArr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows.length; i++) &#123;</span><br><span class="line">							xArr.push(rows[i].name);</span><br><span class="line">							yArr.push(rows[i].num);</span><br><span class="line">						&#125;</span><br><span class="line">						chart.xAxis[<span class="number">0</span>].categories = xArr;</span><br><span class="line">						chart.series[<span class="number">0</span>].setData(yArr);</span><br><span class="line"></span><br><span class="line">					&#125;, <span class="string">&quot;json&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//标题</span></span><br><span class="line">		<span class="attr">title</span>: &#123;</span><br><span class="line">			<span class="attr">text</span>: <span class="string">&#x27;剩余水果数量&#x27;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//X轴的意义</span></span><br><span class="line">		<span class="attr">xAxis</span>: &#123;</span><br><span class="line">			<span class="attr">title</span>: <span class="string">&#x27;水果类型&#x27;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//Y轴的意义</span></span><br><span class="line">		<span class="attr">yAxis</span>: &#123;</span><br><span class="line">			<span class="attr">title</span>: &#123;</span><br><span class="line">				<span class="attr">text</span>: <span class="string">&#x27;数量&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//数据列的意义</span></span><br><span class="line">		<span class="attr">series</span>: [&#123;</span><br><span class="line">			<span class="attr">name</span>: <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><h4 id="Fruit实体类"><a href="#Fruit实体类" class="headerlink" title="Fruit实体类"></a>Fruit实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-08 21:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从后台获取数据"><a href="#从后台获取数据" class="headerlink" title="从后台获取数据"></a>从后台获取数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/highlight&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">highlight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Map resultMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">	List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	fruitList.add(<span class="keyword">new</span> Fruit(<span class="string">&quot;苹果&quot;</span>,<span class="number">8</span>));</span><br><span class="line">	fruitList.add(<span class="keyword">new</span> Fruit(<span class="string">&quot;香蕉&quot;</span>,<span class="number">2</span>));</span><br><span class="line">	fruitList.add(<span class="keyword">new</span> Fruit(<span class="string">&quot;梨&quot;</span>,<span class="number">16</span>));</span><br><span class="line">	fruitList.add(<span class="keyword">new</span> Fruit(<span class="string">&quot;油桃&quot;</span>,<span class="number">7</span>));</span><br><span class="line">	fruitList.add(<span class="keyword">new</span> Fruit(<span class="string">&quot;西瓜&quot;</span>,<span class="number">13</span>));</span><br><span class="line">	fruitList.add(<span class="keyword">new</span> Fruit(<span class="string">&quot;橘子&quot;</span>,<span class="number">5</span>));</span><br><span class="line">	resultMap.put(<span class="string">&quot;rows&quot;</span>, fruitList);</span><br><span class="line">	<span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210608225716.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果将上面的柱状图换成折线图，将JavaScript代码中的 <strong>type: ‘column’</strong> 改为 <strong>type: ‘line’</strong> 即可</p>
<p>使用了jQuery，请先引入jQuery</p>
<p>Highcharts中文官网：<a href="https://www.highcharts.com.cn/">兼容 IE6+、完美支持移动端、图表类型丰富的 HTML5 交互图表 | Highcharts</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Highcharts</tag>
      </tags>
  </entry>
  <entry>
    <title>switch语句</title>
    <url>/142.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>switch语句将从与选项值相匹配的case标签处开始执行直到遇到break语句，或者执行到switch语句的结束处为止。如果没有相匹配的case标签，而有default子句，就执行这个子句。（必须严格执行每个case必须以break语句结束，不然程序会继续执行下去，直到遇到break语句或者执行到default语句）</p>
<h3 id="正确的例子"><a href="#正确的例子" class="headerlink" title="正确的例子"></a>正确的例子</h3><p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">switch</span> (i) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			System.out.println(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			System.out.println(<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			System.out.println(<span class="number">3</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210613163509.jpg" alt="img"></p>
<h3 id="错误的例子"><a href="#错误的例子" class="headerlink" title="错误的例子"></a><strong>错误的例子</strong></h3><p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">switch</span> (i) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			System.out.println(<span class="number">1</span>);</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			System.out.println(<span class="number">2</span>);</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			System.out.println(<span class="number">3</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210613163627.jpg" alt="img"></p>
<h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>在错误的例子中，即使只有条件1符合条件，但是由于没有break语句终止程序，程序会继续执行下去，直到遇到break语句或执行完程序。（如果条件2有break语句，那么控制台只输出1和2）</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Maven</title>
    <url>/143.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>网站链接：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p>
<p>点击下图中的划红线的链接即可开始下载</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615013830.jpg" alt="img"></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>在指定的位置解压刚刚下载的压缩包（不需要安装）</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><blockquote>
<p>配置MAVEN_HOME（bin文件夹所在路径）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\Java\apache-maven-3.8.1-bin\apache-maven-3.8.1</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615015207.jpg" alt="img"></p>
<blockquote>
<p>配置Path</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%MAVEN_HOME%\bin</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615015301.jpg" alt="img"></p>
<blockquote>
<p>查看是否配置成功，运行CMD，输入mvn -version</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615015050.jpg" alt="img"></p>
<h3 id="修改settings文件"><a href="#修改settings文件" class="headerlink" title="修改settings文件"></a>修改settings文件</h3><blockquote>
<p>修改本地仓库路径（根据自己需要设置，在第53行）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/Java/apache-maven-3.8.1-bin/apache-maven-3.8.1/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改jar包下载地址（放在mirrors节点内）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看是否配置成功，运行CMD，输入mvn help:system</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615020715.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA配置Maven</title>
    <url>/144.html</url>
    <content><![CDATA[<p>1处选择maven安装路径（即bin文件夹所在路径）</p>
<p>2处选择settings文件的路径（打勾Override）</p>
<p>3处选择本地仓库路径（打勾Override）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615021527.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL5.6的安装与配置（解压版）</title>
    <url>/145.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>百度网盘链接：<a href="https://pan.baidu.com/s/1Cqx8KPLHYgnKPSL21jBZZA">https://pan.baidu.com/s/1Cqx8KPLHYgnKPSL21jBZZA</a></p>
<p>提取码：<code>g37r</code></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>根据自己的需求解压到对应文件夹</p>
<h3 id="修改-my-default-文件"><a href="#修改-my-default-文件" class="headerlink" title="修改 my-default 文件"></a>修改 my-default 文件</h3><p>根据刚刚解压的路径修改，默认将它注释，可以不修改</p>
<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615022815.jpg" alt="img"></strong></p>
<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615022826.jpg" alt="img"></strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>用管理员权限运行CMD，进入bin文件夹</p>
</li>
<li><p>安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure></li>
<li><p>启动服务命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615024450.jpg" alt="img"></p>
<h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>安装成功以后，关闭当前命令行，重启CMD</p>
<p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p password</span><br></pre></td></tr></table></figure>

<p>回车，</p>
<p>出现<code>Enter password: </code>，直接回车，未设置密码时默认没有密码，</p>
<p>出现<code>New password: </code>，输入新的密码，回车即可，</p>
<p>出现<code>Confirm new password: </code>，输入确认密码，回车即可。</p>
<p>修改完密码以后，下次重新登录时，输入命令<code>mysql -u root -p</code>，接着输入设置后的密码即可登录。</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615025037.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA从GitHub克隆项目</title>
    <url>/146.html</url>
    <content><![CDATA[<h3 id="获取Git链接"><a href="#获取Git链接" class="headerlink" title="获取Git链接"></a>获取Git链接</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615035554.jpg" alt="img"></p>
<h3 id="开始克隆"><a href="#开始克隆" class="headerlink" title="开始克隆"></a>开始克隆</h3><blockquote>
<p>分两种类型：①克隆别人或自己的项目②克隆自己的项目</p>
</blockquote>
<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615035907.jpg" alt="img"></strong></p>
<ol>
<li><p>克隆别人或自己的项目</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615040001.jpg" alt="img"></p>
</li>
<li><p>克隆自己的项目</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615040107.jpg" alt="img"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Tomcat</title>
    <url>/147.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>网站地址：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p>
<p>下载第三（32位）或者第四个（64位），根据自己的电脑选择（解压版，无需安装）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615051649.jpg" alt="img"></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>然后解压到指定文件夹即可</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA配置Tomcat</title>
    <url>/148.html</url>
    <content><![CDATA[<h3 id="打开配置界面"><a href="#打开配置界面" class="headerlink" title="打开配置界面"></a>打开配置界面</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615051928.jpg" alt="img"></p>
<h3 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615054009.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615053318.jpg" alt="img"></p>
<h3 id="配置Tomcat安装路径"><a href="#配置Tomcat安装路径" class="headerlink" title="配置Tomcat安装路径"></a>配置Tomcat安装路径</h3><p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615054345.jpg" alt="img"></strong></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615053434.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615053520.jpg" alt="img"></p>
<h3 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h3><p>我的8080被占用了，我设置成80端口，项目配置文件的端口也要一致</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615053700.jpg" alt="img"></p>
<h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615053811.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615053841.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>查看CentOS7的IP</title>
    <url>/149.html</url>
    <content><![CDATA[<h3 id="查看IP命令"><a href="#查看IP命令" class="headerlink" title="查看IP命令"></a>查看IP命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616050531.jpg" alt="img"></p>
<h3 id="修改ens33网卡的配置"><a href="#修改ens33网卡的配置" class="headerlink" title="修改ens33网卡的配置"></a>修改ens33网卡的配置</h3><p>如果直接使用上面的命令无法查看，就要去修改ens33网卡的配置</p>
<p>查看网卡配置命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<p>下图中划红线处需要修改为<code>ONBOOT=yes</code>，按下<code>i</code>键进入编辑模式，修改后按<code>ESC</code>键退出编辑模式，输入 <code>:wq</code>保存并退出，最后按下回车键即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616050844.jpg" alt="img"></p>
<p>最后输入命令<code>ip addr</code>查看IP地址</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10系统定时关机cmd命令</title>
    <url>/15.html</url>
    <content><![CDATA[<h3 id="定时关机"><a href="#定时关机" class="headerlink" title="定时关机"></a><strong>定时关机</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown -s -t 7200</span><br></pre></td></tr></table></figure>

<p>最后面的数字为秒,一小时等于 3600 秒</p>
<h3 id="取消定时关机"><a href="#取消定时关机" class="headerlink" title="取消定时关机"></a><strong>取消定时关机</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown /a</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Xshell连接CentOS7</title>
    <url>/150.html</url>
    <content><![CDATA[<h3 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616102910.jpg" alt="img"></p>
<h3 id="填写会话属性"><a href="#填写会话属性" class="headerlink" title="填写会话属性"></a>填写会话属性</h3><p>如果不知道CentOS7的ip，查看博客：<a href="https://blog.zoutl.cn/149.html">查看虚拟机里的CentOS7的IP | LeDao的博客 (zoutl.cn)</a></p>
<p>为了方便辨认，名称和主机填CentOS7的ip，端口号填22</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616103147.jpg" alt="img"></p>
<h3 id="用户身份验证"><a href="#用户身份验证" class="headerlink" title="用户身份验证"></a>用户身份验证</h3><p>点击左侧菜单的用户身份验证，用户名和密码输入CentOS7的登陆用户名和密码，然后点击连接即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616103530.jpg" alt="img"></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616103916.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7常用命令总结</title>
    <url>/151.html</url>
    <content><![CDATA[<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616122714.jpg" alt="img"></p>
<p>root代表当前登录用户，localhost代表主机名， ~代表当前主机目录，#代表用户权限（#表示超级用户，$表示普通用户）</p>
<h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a><strong>ls命令</strong></h3><p>均可表示当前目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./和.</span><br></pre></td></tr></table></figure>

<p>列出当前工作目录的内容（不包括隐藏文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>列出root/ledao目录的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls root/ledao/</span><br></pre></td></tr></table></figure>

<p>列出当前工作目录的内容（包括隐藏文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure>

<p>列出当前工作目录的内容（查看详细信息）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l（或者ll）</span><br></pre></td></tr></table></figure>

<p>列出当前工作目录的内容（按日期排序，降序）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -lt</span><br></pre></td></tr></table></figure>

<p>列出当前工作目录的内容（按日期排序，升序）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -ltr</span><br></pre></td></tr></table></figure>

<p>获取当前文件夹的文件个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l | grep <span class="string">&quot;^-&quot;</span> | wc -l</span><br></pre></td></tr></table></figure>

<h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a><strong>cd命令</strong></h3><p>回到根目录（根目录：[root@localhost /]）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br></pre></td></tr></table></figure>

<p>回到家目录（家目录：[root@localhost ~]）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 或者 <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<p>回到上一级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>

<p>回到上两级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure>

<p>进入ledao目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ledao</span><br></pre></td></tr></table></figure>

<p>进入ledao目录的11目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ledao/11</span><br></pre></td></tr></table></figure>

<h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p>打印当前所在目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<h3 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h3><p>创建一个叫dir1的目录（文件夹）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir dir1</span><br></pre></td></tr></table></figure>

<h3 id="rmdir命令"><a href="#rmdir命令" class="headerlink" title="rmdir命令"></a>rmdir命令</h3><p>删除名为dir1的空目录（目录非空时则会提示删除失败）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmdir dir1</span><br></pre></td></tr></table></figure>

<h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><p>删除文件可以直接使用rm命令，若删除目录则必须配合选项”-r”，文件一旦通过rm命令删除，则无法恢复，所以必须格外小心地使用该命令。</p>
<p>删除文件1.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm 1.txt</span><br></pre></td></tr></table></figure>

<p>删除目录dir1，如果是空目录则询问是否删除（输入y删除输入n不删除），是非空目录则先删除目录里的目录及文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -r dir1</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616124133.jpg" alt="img"></p>
<p>强制删除dir1，即使不是空目录也可以直接删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf dir1或者rm -r -f dir1</span><br></pre></td></tr></table></figure>

<p>删除当前目录的所有目录及文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -r *</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616124223.jpg" alt="img"></p>
<h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h3><p>1.txt不存在则创建文件1.txt，存在则更改1.txt的时间属性为当前时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch 1.txt</span><br></pre></td></tr></table></figure>

<p>创建文件2.txt，3.txt（用于创建多个文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch 2.txt 3.txt</span><br></pre></td></tr></table></figure>

<h3 id="gt-命令"><a href="#gt-命令" class="headerlink" title="&gt;命令"></a>&gt;命令</h3><p>1.txt不存在则创建文件1.txt，存在则直接覆盖原文件，不会有任何提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;1.txt</span><br></pre></td></tr></table></figure>

<h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><p>复制aa目录的所有目录及文件到bb目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp aa/* bb</span><br></pre></td></tr></table></figure>

<p>复制当前所在目录的3.txt文件到bb目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp 3.txt bb</span><br></pre></td></tr></table></figure>

<h3 id="vi命令"><a href="#vi命令" class="headerlink" title="vi命令"></a>vi命令</h3><p>打开1.txt进入命令模式，没有就新建文件（按下i键进入输入模式，按ESC退出输入模式进入命令模式，在命令模式下按下:（英文冒号）就进入了底线命令模式，按w保存，按q退出，按wq则保存后退出）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi 1.txt</span><br></pre></td></tr></table></figure>

<p>详细介绍：<a href="https://www.runoob.com/linux/linux-vim.html">Linux vi/vim | 菜鸟教程</a></p>
<h3 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<h3 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service network restart</span><br></pre></td></tr></table></figure>

<h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><p>例如：mv aaa bbb（将文件 aaa 改名为 bbb）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv source_file(文件) dest_file(文件)</span><br></pre></td></tr></table></figure>

<p>例如：mv 1.txt dir1（将 1.txt 放入 dir1 目录中。注意，如果 dir1目录不存在，则该命令将 1.txt 改名为 dir1）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv source_file(文件) dest_directory(目录)</span><br></pre></td></tr></table></figure>

<p>例如：mv /usr/runoob/*  .（将 /usr/runoob 下的所有文件和目录移到当前目录下）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv source_directory(目录) dest_directory(目录)</span><br></pre></td></tr></table></figure>

<h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><p>查找所有目录中名称为mysql的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure>

<p>查找/etc目录中名称为mysql的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /etc -name mysql</span><br></pre></td></tr></table></figure>

<p>查找当前目录中名称为mysql的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find -name mysql</span><br></pre></td></tr></table></figure>

<h3 id="firewall-cmd"><a href="#firewall-cmd" class="headerlink" title="firewall-cmd"></a>firewall-cmd</h3><p>开放端口：8889，开放后要更新防火墙配置才能生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8889/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>删除端口：6666，删除后要更新防火墙配置才能生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=6666/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>更新防火墙配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>查看端口：8889是否可用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-port=8889/tcp</span><br></pre></td></tr></table></figure>

<p>列出所有开放的端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h3><p>查看1.txt的内容（不进入文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 1.txt</span><br></pre></td></tr></table></figure>

<h3 id="清空文件内容"><a href="#清空文件内容" class="headerlink" title="清空文件内容"></a>清空文件内容</h3><p>清空1.txt的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> &gt; 1.txt</span><br></pre></td></tr></table></figure>

<h3 id="查看运行日志"><a href="#查看运行日志" class="headerlink" title="查看运行日志"></a>查看运行日志</h3><p>比如Tomcat刚刚启动时，可以动态查看日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f 日志文件</span><br></pre></td></tr></table></figure>

<h3 id="sh命令"><a href="#sh命令" class="headerlink" title="sh命令"></a>sh命令</h3><p>执行一个<code>.sh</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh mkdir.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装vsftp服务</title>
    <url>/152.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>我们需要向CentOS7操作系统的服务器上上传文件或者下载文件，这时候，有必要安装下ftp，我们选择主流的vsftp；</p>
<h3 id="安装vsftp"><a href="#安装vsftp" class="headerlink" title="安装vsftp"></a>安装vsftp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure>

<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> vsftpd</span><br></pre></td></tr></table></figure>

<h3 id="启动ftp服务"><a href="#启动ftp服务" class="headerlink" title="启动ftp服务"></a>启动ftp服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd.service</span><br></pre></td></tr></table></figure>

<h3 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h3><p>永久添加tcp 21端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=21/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>添加ftp服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=ftp</span><br></pre></td></tr></table></figure>

<p>重启防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>新建java1234用户 添加到root组，但是不允许用户登录，仅仅可以ftp登录，ftp登录后的默认目录是/home/data</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -g root -d /home/data -s /sbin/nologin java1234</span><br></pre></td></tr></table></figure>

<h3 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd java1234</span><br></pre></td></tr></table></figure>

<h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R java1234:root /home/data</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setsebool -P ftpd_full_access on</span><br></pre></td></tr></table></figure>

<h3 id="修改vsftp配置文件，禁止匿名登录"><a href="#修改vsftp配置文件，禁止匿名登录" class="headerlink" title="修改vsftp配置文件，禁止匿名登录"></a>修改vsftp配置文件，禁止匿名登录</h3><p>把：anonymous_enable=YES 改为： anonymous_enable=NO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a><strong>PS.</strong></h3><p>来源：<a href="http://blog.java1234.com/blog/articles/306.html">Centos7.3安装vsftp服务_Java开源博客系统-Powered by java1234</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>FTPRush向CentOS7上传文件和从CentOS7下载文件</title>
    <url>/153.html</url>
    <content><![CDATA[<h3 id="下载和安装FTPRush"><a href="#下载和安装FTPRush" class="headerlink" title="下载和安装FTPRush"></a>下载和安装FTPRush</h3><p>百度网盘链接：<a href="https://pan.baidu.com/s/1TLBzFAs94nHdDHunPfSF3g">https://pan.baidu.com/s/1TLBzFAs94nHdDHunPfSF3g</a></p>
<p>提取码：<code>s3wr</code></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>输入密码按下回车键即可开始连接</p>
<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616162414.jpg" alt="img"></strong></p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>在本地窗口中右键点击要上传的文件，选择传输</p>
<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616162615.jpg" alt="img"></strong></p>
<p>然后在远程窗口即可看到刚刚上传的文件（上传的文件在/home/data/）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210616162824.jpg" alt="img"></p>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>在本地窗口选择下载保存的路径，在远程窗口右键点击要下载的文件，选择传输即可</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装和配置jre1.8</title>
    <url>/154.html</url>
    <content><![CDATA[<h3 id="下载jre"><a href="#下载jre" class="headerlink" title="下载jre"></a>下载jre</h3><p>百度网盘链接</p>
<p>链接：<a href="https://pan.baidu.com/s/1aRzE9hdak3N_KtkYMYyRKQ">https://pan.baidu.com/s/1aRzE9hdak3N_KtkYMYyRKQ</a></p>
<p>提取码：<code>mbv3</code></p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>上传jre到/home/data目录</p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><ol>
<li><p>创建/home/java目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line">mkdir java</span><br></pre></td></tr></table></figure></li>
<li><p>解压tar.gz压缩包 </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf server-jre-<span class="number">8</span>u<span class="number">131</span>-linux-x<span class="number">64</span>.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>把/home/data/下的jre剪切到/home/java/下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /home/data/jdk1.8.0_131 /home/java</span><br></pre></td></tr></table></figure></li>
<li><p>给jre目录以及子目录授予root权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown root:root -R /home/java/jdk1.8.0_131/</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a><strong>配置环境变量</strong></h3><ol>
<li><p>编辑环境变量配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>在文件末尾加入下面代码（jdk名称根据实际情况填写），强制保存（wq!）退出</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">JAVA_HOME=/home/java</span></span><br><span class="line"><span class="attr">export</span> <span class="string">JRE_HOME=/home/java/jdk1.8.0_131</span></span><br><span class="line"><span class="attr">export</span> <span class="string">CLASSPATH=$JRE_HOME/lib/rt.jar:$JRE_HOME/lib/ext</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:$JRE_HOME/bin</span></span><br></pre></td></tr></table></figure></li>
<li><p>使环境变量即时生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>验证是否配置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220203155404274.png" alt="image-20220203155404274"></p>
<p>java或者javac命令也可以验证</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220203155450563.png" alt="image-20220203155450563"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220203155516717.png" alt="image-20220203155516717"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装和配置MySQL5.7</title>
    <url>/155.html</url>
    <content><![CDATA[<h3 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>

<h3 id="下载和安装MySQL源包"><a href="#下载和安装MySQL源包" class="headerlink" title="下载和安装MySQL源包"></a>下载和安装MySQL源包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载命令</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装命令</span></span><br><span class="line">yum -y localinstall mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="在线安装MySQL"><a href="#在线安装MySQL" class="headerlink" title="在线安装MySQL"></a>在线安装MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>

<p>可能会报错：<font color="#dd0000">Public key for mysql-community-libs-compat-5.7.37-1.el7.x86_64.rpm is not installed</font>，报错原因为：原因是Mysql的GPG升级了，需要重新获取</p>
<p>输入下面命令解决上面的报错，然后再次执行<code>yum -y install mysql-community-server</code>命令在线安装MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure>

<h3 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置mysql开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#使设置生效</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h3 id="修改root本地登录密码"><a href="#修改root本地登录密码" class="headerlink" title="修改root本地登录密码"></a>修改root本地登录密码</h3><p>MySQL 安装完成之后，在 /var/log/mysqld.log 文件中给 root 生成了一个临时的默认密码（下图中划红线的就是临时密码），复制它</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617022055.jpg" alt="img"></p>
<p>进入 MySQL 命令行，输入上面获取的临时密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>然后输入下面命令修改密码，<code>LeDao@2021</code>是修改后的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;LeDao@2021&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>修改密码为 LeDao@2021   (备注 MySQL5.7 默认密码策略要求密码必须是大小写字母数字特殊字母的组合，至少8位) </p>
<h3 id="设置允许远程登录"><a href="#设置允许远程登录" class="headerlink" title="设置允许远程登录"></a>设置允许远程登录</h3><p>MySQL 默认不允许远程登录的，我们需要设置一下，不然会报1045的错误，然后防火墙开放 3306 端口，在 MySQL 命令行输入下面命令，<code>LeDao@2021</code>是数据库密码，输入 <code>quit</code> 退出 MySQL 命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;LeDao@2021&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<p>然后设置防火墙，连续输入下面两条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开放3306端口</span></span><br><span class="line">firewall-cmd \--zone=public \--add-port=3306/tcp \--permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">firewall-cmd \--reload</span><br></pre></td></tr></table></figure>

<h3 id="配置默认编码为utf8"><a href="#配置默认编码为utf8" class="headerlink" title="配置默认编码为utf8"></a>配置默认编码为utf8</h3><p>修改 /etc/my.cnf 配置文件，在 [mysqld] 下添加编码配置，如下所示：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">character_set_server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br></pre></td></tr></table></figure>

<p>打开 my.cnf 文件命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617022657.jpg" alt="img"></p>
<h3 id="重启mysql服务"><a href="#重启mysql服务" class="headerlink" title="重启mysql服务"></a>重启mysql服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<h3 id="查看编码"><a href="#查看编码" class="headerlink" title="查看编码"></a>查看编码</h3><p>进入 MySQL 命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>在 MySQL 命令行查看编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%character%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617022911.jpg" alt="img"></p>
<h3 id="SQLyog测试远程连接"><a href="#SQLyog测试远程连接" class="headerlink" title="SQLyog测试远程连接"></a>SQLyog测试远程连接</h3><p>输入 CentOS7 的IP，MySQL 的用户名和密码</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617023118.jpg" alt="img"></p>
<p>结果如下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617023212.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装和配置Tomcat9</title>
    <url>/156.html</url>
    <content><![CDATA[<h3 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h3><p>下载地址：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p>
<p>下载 tar.gz 压缩包</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617023834.jpg" alt="img"></p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>使用 FTPRush 上传 Tomcat 压缩包到 /home/data 目录</p>
<p>详细步骤查看博客：<a href="https://blog.zoutl.cn/153.html">FTPRush向CentOS7上传文件和从CentOS7下载文件)</a></p>
<h3 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h3><p>新建 /home/tomcat9 目录存放 tomcat9</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir tomcat9</span><br></pre></td></tr></table></figure>

<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-9.0.46.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="移动文件夹"><a href="#移动文件夹" class="headerlink" title="移动文件夹"></a>移动文件夹</h3><p>将解压后的文件夹剪切到 /home/tomcat9 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv apache-tomcat-9.0.46 /home/tomcat9/</span><br></pre></td></tr></table></figure>

<h3 id="修改server-xml"><a href="#修改server-xml" class="headerlink" title="修改server.xml"></a>修改server.xml</h3><p>server.xml可以配置端口，编码以及配置项目等等，我们这里就配置一个端口，把默认的8080，修改成80</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /home/tomcat9/apache-tomcat-9.0.46/conf/server.xml</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617031259.jpg" alt="img"></p>
<h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>开放80端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd \--zone=public \--add-port=80/tcp \--permanent</span><br></pre></td></tr></table></figure>

<p>重启防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd \--reload</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>[root@localhost tomcat9]# /home/tomcat9/apache-tomcat-9.0.46/bin/startup.sh</p>
<p>看到下面界面说明安装成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617031209.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7部署Java项目</title>
    <url>/157.html</url>
    <content><![CDATA[<h3 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h3><p>具体步骤查看博客：<a href="https://blog.zoutl.cn/21.html">idea将Spring Boot项目打包成war包 | LeDao的博客 (zoutl.cn)</a></p>
<p>特别地，平时我们开发用Windows系统，而部署项目用Linux系统（没有C、D等盘符），那么我们需要修改文件路径</p>
<h4 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h4><blockquote>
<p>Java代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String mySettingLocation = <span class="string">&quot;E:\\MyProject\\IDEA\\ActualCombat\\MyBlog\\src\\main\\webapp\\static\\myConfig.setting&quot;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件路径</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#博客正文图片存储地址</span></span><br><span class="line"><span class="attr">blogImageFilePath:</span> <span class="string">C://Java/apache-tomcat-9.0.22-windows-x64/apache-tomcat-9.0.22-windows-x64/apache-tomcat-9.0.22/webapps/MyBlog/static/images/blogImage/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件MySQL连接</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库连接配置</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_myblog?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">12345</span></span><br></pre></td></tr></table></figure>

<h4 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h4><blockquote>
<p>Java代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String mySettingLocation = <span class="string">&quot;/home/tomcat9/apache-tomcat-9.0.46/webapps/MyBlog/static/myConfig.setting&quot;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件路径</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#博客正文图片存储地址</span></span><br><span class="line"><span class="attr">blogImageFilePath:</span> <span class="string">/home/tomcat9/apache-tomcat-9.0.46/webapps/MyBlog/static/images/blogImage/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件MySQL连接</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库连接配置</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.0.153:3306/db_myblog?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<h3 id="上传war包到webapps目录"><a href="#上传war包到webapps目录" class="headerlink" title="上传war包到webapps目录"></a>上传war包到webapps目录</h3><p>上传war包到Tomcat的webapps目录</p>
<h3 id="修改Tomcat的配置"><a href="#修改Tomcat的配置" class="headerlink" title="修改Tomcat的配置"></a>修改Tomcat的配置</h3><p>修改<code>/home/tomcat9/apache-tomcat-9.0.46/conf</code>中的<code>server.xml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /home/tomcat9/apache-tomcat-9.0.46/conf/server.xml</span><br></pre></td></tr></table></figure>

<p>在下图位置添加代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/home/tomcat9/apache-tomcat-9.0.46/webapps/MyBlog&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617043545.jpg" alt="img"></p>
<p>保存后退出</p>
<h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh /home/tomcat9/apache-tomcat-9.0.46/bin/startup.sh</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>在浏览器地址栏直接输入CentOS7的ip即可</p>
<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210617044137.jpg" alt="img"></strong></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7部署Java项目速度很慢</title>
    <url>/158.html</url>
    <content><![CDATA[<h3 id="查找-java-security-文件的路径"><a href="#查找-java-security-文件的路径" class="headerlink" title="查找 java.security 文件的路径"></a>查找 java.security 文件的路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name java.security</span><br></pre></td></tr></table></figure>

<h3 id="打开-java-security-文件"><a href="#打开-java-security-文件" class="headerlink" title="打开 java.security 文件"></a>打开 java.security 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /home/java/jdk1.8.0_131/jre/lib/security/java.security</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>securerandom.source=file:/dev/<font color="#dd0000">random</font>替换成：securerandom.source=file:/dev/<font color="#dd0000">urandom</font></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210618032852.jpg" alt="img"></p>
<p>保存并退出即可</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7实时查看Tomcat运行日志</title>
    <url>/159.html</url>
    <content><![CDATA[<h3 id="查找catalina-out的路径"><a href="#查找catalina-out的路径" class="headerlink" title="查找catalina.out的路径"></a>查找catalina.out的路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name catalina.out</span><br></pre></td></tr></table></figure>

<p>该文件在Tomcat安装目录的logs目录下</p>
<h3 id="实时查看Tomcat运行日志命令"><a href="#实时查看Tomcat运行日志命令" class="headerlink" title="实时查看Tomcat运行日志命令"></a>实时查看Tomcat运行日志命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f /home/tomcat9/apache-tomcat-9.0.46/logs/catalina.out</span><br></pre></td></tr></table></figure>

<h3 id="结果如下图"><a href="#结果如下图" class="headerlink" title="结果如下图"></a>结果如下图</h3><p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210618035601.jpg" alt="img"></strong></p>
<p><font color="#dd0000">按CTRL+C退出</font></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>一个Tomcat部署多个项目以及配置域名</title>
    <url>/16.html</url>
    <content><![CDATA[<p>首先找到服务器Tomcat的server.xml配置，然后在原来的基础上，多复制一份Host节点，然后 name 改成我们需要设置的域名以及Context节点对应好项目路径即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;jxc.zoutl.cn&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/home/tomcat9/apache-tomcat-9.0.46/webapps/JXC&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications Documentation at: /docs/config/valve.html --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- Access log processes all example. Documentation at: /docs/config/valve.html <span class="doctag">Note:</span> The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011181925.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Jedis连接</title>
    <url>/161.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-20 7:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.0.153&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;LeDao&quot;</span>);</span><br><span class="line">        String value = jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行代码时出现错误"><a href="#运行代码时出现错误" class="headerlink" title="运行代码时出现错误"></a>运行代码时出现错误</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620082302.jpg" alt="img"></p>
<blockquote>
<p>代表连接超时了，我们配置下防火墙，开一个6379端口权限，<font color="#dd0000">如果是云服务器要开放6379的防火墙</font></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改 <code>/usr/local/redis/redis.conf</code> 配置文件，将<code>bind 127.0.0.1</code>注释掉，在前面加<code>#</code>号即可（因为这里绑定了本机）</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620082316.jpg" alt="img"></p>
<h3 id="重启Redis服务"><a href="#重启Redis服务" class="headerlink" title="重启Redis服务"></a>重启Redis服务</h3><blockquote>
<p>重启Redis服务，再次运行Java代码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止Redis服务</span></span><br><span class="line">./bin/redis-cli shutdown</span><br><span class="line"><span class="comment"># 启动Redis服务</span></span><br><span class="line">./bin/redis-server ./redis.conf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>再次出现错误（下面是错误信息）</p>
</blockquote>
<p><font color="#dd0000">Exception in thread “main” redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command ‘CONFIG SET protected-mode no’ from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to ‘no’, and then restarting the server. 3) If you started the server manually just for testing, restart it with the ‘--protected-mode no’ option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.<br>   at redis.clients.jedis.Protocol.processError(Protocol.java:127)<br>   at redis.clients.jedis.Protocol.process(Protocol.java:161)<br>   at redis.clients.jedis.Protocol.read(Protocol.java:215)<br>   at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:340)<br>   at redis.clients.jedis.Connection.getStatusCodeReply(Connection.java:239)<br>   at redis.clients.jedis.Jedis.set(Jedis.java:121)<br>   at com.ledao.jedis.JedisTest.main(JedisTest.java:14)</font></p>
<p>出现错误的原因是因为远程连接 redis，因为 redis 的自我保护，会拒绝被访问，解决办法有两种：（<font color="#dd0000">推荐使用第二种方法：设置Redis连接密码</font>）</p>
<ol>
<li><p>关闭Redis的自我保护（<font color="#dd0000">不推荐使用</font>）</p>
<p>protected-mode yes 的yes修改为<code>no</code>即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620082329.jpg" alt="img"></p>
</li>
<li><p>设置Redis连接密码，关闭Redis服务后就会失效，需要重新设置（<font color="#00dd00">推荐使用</font>）</p>
<blockquote>
<p>进入客户端</p>
</blockquote>
<p>[root@localhost redis]# <code>./bin/redis-cli</code></p>
<blockquote>
<p>设置密码</p>
</blockquote>
<p>127.0.0.1:6379&gt; <code>config set requirepass 123456</code><br>OK</p>
<blockquote>
<p>验证是否设置成功（出现OK就说明设置成功了）</p>
</blockquote>
<p>127.0.0.1:6379&gt; <code>auth 123456</code><br>OK</p>
<blockquote>
<p>退出客户端</p>
</blockquote>
<p>127.0.0.1:6379&gt; <code>quit</code></p>
</li>
</ol>
<h3 id="设置Redis密码"><a href="#设置Redis密码" class="headerlink" title="设置Redis密码"></a>设置Redis密码</h3><p>Java代码中设置Redis密码<code>jedis.auth(&quot;123456&quot;)</code>，然后再次运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-20 7:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.0.153&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;LeDao&quot;</span>);</span><br><span class="line">        String value = jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620082147.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装Redis</title>
    <url>/160.html</url>
    <content><![CDATA[<h3 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h3><p>gcc编译c的，因为redis是c编写的，所以我们先安装下gcc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>wget方式下载redis压缩包，并解压，以及编译</p>
<p>下载命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.2.9.tar.gz</span><br></pre></td></tr></table></figure>

<p>解压命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-3.2.9.tar.gz</span><br></pre></td></tr></table></figure>

<p>编译命令，进入解压后的文件夹，在执行make命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-3.2.9</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make PREFIX=/usr/<span class="built_in">local</span>/redis install</span><br></pre></td></tr></table></figure>

<p>安装完后，需要将刚刚解压的文件夹内redis.conf复制到redis的安装目录/usr/local/redis/中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /root/redis-3.2.9/redis.conf /usr/<span class="built_in">local</span>/redis/</span><br></pre></td></tr></table></figure>

<h3 id="启动和关闭Redis"><a href="#启动和关闭Redis" class="headerlink" title="启动和关闭Redis"></a>启动和关闭Redis</h3><h4 id="前台启动和关闭"><a href="#前台启动和关闭" class="headerlink" title="前台启动和关闭"></a>前台启动和关闭</h4><p>启动命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-server </span><br></pre></td></tr></table></figure>

<p>看到下面的界面说明已经启动成功了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620003402.jpg" alt="img"></p>
<p>按<code>CTRL+C</code>退出</p>
<p>这种启动是前台启动，假如退出程序就终止或者退出了</p>
<p>所以这种服务程序，必须后台运行</p>
<h4 id="后台启动和关闭"><a href="#后台启动和关闭" class="headerlink" title="后台启动和关闭"></a>后台启动和关闭</h4><p><strong>修改配置文件redis.conf</strong></p>
<p>打开配置文件（打开后按/键，并输入关键字按下回车键可快速搜索文本内容）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p><code>daemonize no</code>修改成：<code>daemonize yes</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620003417.jpg" alt="img"></p>
<p><strong>加载配置文件运行Redis</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p><strong>搜索Redis服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep -i redis</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620003448.jpg" alt="img"></p>
<p>看到端口号说明已经启动成功了</p>
<p><strong>停止Redis服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-cli shutdown</span><br></pre></td></tr></table></figure>

<p>再次搜索Redis服务，发现端口号没了，说明Redis服务已经停止了</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis使用连接池</title>
    <url>/162.html</url>
    <content><![CDATA[<h3 id="池化的基本思想"><a href="#池化的基本思想" class="headerlink" title="池化的基本思想"></a>池化的基本思想</h3><ol>
<li><p>可以在初始化的时候创建一些对象，当有需要使用的时候直接从池中获取，提高响应速度；</p>
</li>
<li><p>使用过的对象不进行销毁，保存起来，等下一次需要对象的时候，拿出来重复使用，减少频繁创建对象所造成的销；</p>
</li>
<li><p>创建的对象统一保存，方面管理和维护。</p>
</li>
</ol>
<h3 id="池化好处总结"><a href="#池化好处总结" class="headerlink" title="池化好处总结"></a>池化好处总结</h3><ol>
<li><p>提高响应的速度</p>
</li>
<li><p>降低资源的消耗</p>
</li>
<li><p>方便管理和维护</p>
</li>
</ol>
<p>Jedis连接的就是连接池中JedisPool管理的资源，JedisPool保证资源在一个可控范围内，并且保障线程安全。使用合理的GenericObjectPoolConfig配置能够提升Redis的服务性能，降低资源开销。</p>
<h3 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h3><p>下列两表将对一些重要参数进行说明</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620090617.jpg" alt="img"></p>
<p>空闲Jedis对象检测由下列四个参数组合完成，testWhileIdle是该功能的开关。</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620090627.jpg" alt="img"></p>
<p>可以在org.apache.commons.pool2.impl.BaseObjectPoolConfig中查看全部默认值。</p>
<h3 id="关键参数设置建议"><a href="#关键参数设置建议" class="headerlink" title="关键参数设置建议"></a>关键参数设置建议</h3><h4 id="maxTotal（最大连接数）"><a href="#maxTotal（最大连接数）" class="headerlink" title="maxTotal（最大连接数）"></a>maxTotal（最大连接数）</h4><p>想合理设置maxTotal（最大连接数）需要考虑的因素较多，如：</p>
<ol>
<li>业务希望的Redis并发量</li>
<li>客户端执行命令时间</li>
<li>Redis资源，例如nodes（如应用个数等），maxTotal不能超过Redis的最大连接数</li>
<li>资源开销，例如虽然希望控制空闲连接，但又不希望因为连接池中频繁地释放和创建连接造成不必要的开销</li>
</ol>
<p>假设一次命令时间，即borrow|return resource加上Jedis执行命令 （ 含网络耗时）的平均耗时约为1ms，一个连接的QPS大约是1000，业务期望的QPS是50000，那么理论上需要的资源池大小是50000 / 1000 = 50。但事实上这只是个理论值，除此之外还要预留一些资源，所以maxTotal可以比理论值大一些。这个值不是越大越好，一方面连接太多会占用客户端和服务端资源，另一方面对于Redis这种高QPS的服务器，如果出现大命令的阻塞，即使设置再大的资源池也无济于事。</p>
<h4 id="maxIdle与minIdle"><a href="#maxIdle与minIdle" class="headerlink" title="maxIdle与minIdle"></a>maxIdle与minIdle</h4><p>maxIdle实际上才是业务需要的最大连接数，maxTotal 是为了给出余量，所以 maxIdle 不要设置得过小，否则会有new Jedis（新连接）开销，而minIdle是为了控制空闲资源检测。连接池的最佳性能是maxTotal=maxIdle，这样就避免了连接池伸缩带来的性能干扰。但如果并发量不大或者maxTotal设置过高，则会导致不必要的连接资源浪费，您可以根据实际总QPS和调用Redis的客户端规模整体评估每个节点所使用的连接池大小。</p>
<h4 id="使用监控获取合理值"><a href="#使用监控获取合理值" class="headerlink" title="使用监控获取合理值"></a>使用监控获取合理值</h4><p>在实际环境中，比较可靠的方法是通过监控来尝试获取参数的最佳值。可以考虑通过JMX等方式实现监控，从而找到合理值。</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-20 7:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">100</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, <span class="string">&quot;192.168.0.153&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;LeDao&quot;</span>);</span><br><span class="line">            String value = jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jedisPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jedisPool.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/u010648555/article/details/103858684">掌握JedisPoolConfig参数配置，学会调优技能_阿飞云-CSDN博客</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7关闭Redis的两种方法</title>
    <url>/163.html</url>
    <content><![CDATA[<h3 id="使用Linux命令"><a href="#使用Linux命令" class="headerlink" title="使用Linux命令"></a>使用Linux命令</h3><p>如果设置了连接密码，就不能使用此方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-cli shutdown</span><br></pre></td></tr></table></figure>

<h3 id="使用Redis命令"><a href="#使用Redis命令" class="headerlink" title="使用Redis命令"></a>使用Redis命令</h3><p>先进入Redis客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-cli </span><br></pre></td></tr></table></figure>

<p>进入客户端后输入<code>shutdown</code>关闭Redis服务，然后按ctrl+c退出</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>查看Redis服务是否开启（有端口号说明Redis服务已经启动，没有则说明服务已停止）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep -i redis</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis字符串</title>
    <url>/164.html</url>
    <content><![CDATA[<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>获取指定key的值</p>
<p><font color="#dd0000">get key</font></p>
<p>127.0.0.1:6379&gt; get name<br>“ledao”</p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>设置指定key的值（如果key不存在就新建并复制，存在则值覆盖）</p>
<p><font color="#dd0000">set key 值</font></p>
<p>127.0.0.1:6379&gt; <code>set name ledao</code><br>OK<br>127.0.0.1:6379&gt; <code>get name</code><br>“ledao”<br>127.0.0.1:6379&gt; <code>set name ledao333</code><br>OK<br>127.0.0.1:6379&gt; <code>get name</code><br>“ledao333”</p>
<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><p>删除指定key，删除一个或多个</p>
<p><font color="#dd0000">del key1 key2 …</font></p>
<p>127.0.0.1:6379&gt; <code>get num</code><br>“1”<br>127.0.0.1:6379&gt; <code>del num</code><br>(integer) 1<br>127.0.0.1:6379&gt; <code>get num</code><br>(nil)</p>
<h3 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h3><p>返回 key 中字符串值的子字符（包括头包括尾，下标从0开始计算）</p>
<p><font color="#dd0000">getrange key 开始位置 结束位置</font></p>
<p>127.0.0.1:6379&gt; <code>set name ledao333</code><br>OK<br>127.0.0.1:6379&gt; <code>get name</code><br>“ledao333”<br>127.0.0.1:6379&gt; <code>getrange name 0 1</code><br>“le”</p>
<h3 id="getset"><a href="#getset" class="headerlink" title="getset"></a>getset</h3><p>设置给定 key 的值，并返回 key 的旧值</p>
<p><font color="#dd0000">getset key 值</font></p>
<p>127.0.0.1:6379&gt; <code>getset name LeDao</code><br>“ledao333”<br>127.0.0.1:6379&gt; <code>get name</code><br>“LeDao”</p>
<h3 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h3><p>只有在 key 不存在时设置 key 的值</p>
<p><font color="#dd0000">setnx key 值</font></p>
<p>127.0.0.1:6379&gt; <code>get name</code><br>“LeDao”<br>127.0.0.1:6379&gt; <code>setnx name ledao</code><br>(integer) 0<br>127.0.0.1:6379&gt; <code>get name</code><br>“LeDao”</p>
<h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h3><p>返回 key 所储存的字符串值的长度</p>
<p><font color="#dd0000">strlen key</font></p>
<p>127.0.0.1:6379&gt; <code>get name</code><br>“LeDao”<br>127.0.0.1:6379&gt; <code>strlen name</code><br>(integer) 5</p>
<h3 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h3><p>同时设置一个或多个 key-value 对</p>
<p><font color="#dd0000">mset key1 值 key2 值 …</font></p>
<p>127.0.0.1:6379&gt; <code>mset name1 ledao1 name2 ledao2</code><br>OK<br>127.0.0.1:6379&gt; <code>get name1</code><br>“ledao1”<br>127.0.0.1:6379&gt; <code>get name2</code><br>“ledao2”</p>
<h3 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h3><p>将 key 中储存的数字值增一</p>
<p><font color="#dd0000">incr key</font></p>
<p>127.0.0.1:6379&gt; <code>set num 0</code><br>OK<br>127.0.0.1:6379&gt; <code>get num</code><br>“0”<br>127.0.0.1:6379&gt; <code>incr num</code><br>(integer) 1<br>127.0.0.1:6379&gt; <code>get num</code><br>“1”</p>
<h3 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h3><p>将 key 中储存的数字值减一</p>
<p><font color="#dd0000">decr key</font></p>
<p>127.0.0.1:6379&gt; <code>get num</code><br>“2”<br>127.0.0.1:6379&gt; <code>decr num</code><br>(integer) 1<br>127.0.0.1:6379&gt; <code>get num</code><br>“1”</p>
<h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><p>如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾，如果不存在就相当于set key value</p>
<p><font color="#dd0000">append key 值</font></p>
<p>127.0.0.1:6379&gt; <code>get name</code><br>“LeDao”<br>127.0.0.1:6379&gt; <code>append name 666</code><br>(integer) 8<br>127.0.0.1:6379&gt; <code>get name</code><br>“LeDao666”<br>127.0.0.1:6379&gt; <code>get name4</code><br>(nil)<br>127.0.0.1:6379&gt; <code>append name4 666</code><br>(integer) 3<br>127.0.0.1:6379&gt; <code>get name4</code><br>“666”</p>
<h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a>Java代码：</h3><p>请先设置Redis的连接密码，查看博客：<a href="https://blog.zoutl.cn/161.html">实现Jedis连接 | LeDao的博客 (zoutl.cn)</a> ，在第4点的第②小点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-20 7:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.0.153&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;LeDao的博客&quot;</span>, <span class="string">&quot;http://www.zoutl.cn&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;LeDao的博客网址：&quot;</span>+jedis.get(<span class="string">&quot;LeDao的博客&quot;</span>));</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620110136.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a><strong>PS.</strong></h3><p>更多命令：<a href="https://www.runoob.com/redis/redis-strings.html">https://www.runoob.com/redis/redis-strings.html</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis keys命令</title>
    <url>/165.html</url>
    <content><![CDATA[<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>获取指定 key 的值</p>
<p><font color="#dd0000">get key</font></p>
<p>127.0.0.1:6379&gt; <code>get name</code><br>“ledao”</p>
<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><p>删除指定key</p>
<p><font color="#dd0000">del key</font></p>
<p>127.0.0.1:6379&gt; <code>get num</code><br>“1”<br>127.0.0.1:6379&gt; <code>del num</code><br>(integer) 1<br>127.0.0.1:6379&gt; <code>get num</code><br>(nil)</p>
<h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><p>检查给定 key 是否存在</p>
<p><font color="#dd0000">exists key</font></p>
<p>127.0.0.1:6379&gt; <code>exists name</code><br>(integer) 1</p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>返回 key 所储存的值的类型删除指定key</p>
<p><font color="#dd0000">type key</font></p>
<p>127.0.0.1:6379&gt; <code>type name</code><br>string</p>
<h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><h4 id="keys-1"><a href="#keys-1" class="headerlink" title="keys *"></a>keys *</h4><p>显示所有key</p>
<p>127.0.0.1:6379&gt; <code>keys *</code><br>1)”set3”<br>2)”age”<br>3)”l1”<br>4)”newSet”<br>5)”l2”<br>6)”set1”<br>7)”1”<br>8)”fruitList”<br>9)”set2”</p>
<h4 id="keys-f"><a href="#keys-f" class="headerlink" title="keys f*"></a>keys f*</h4><p>查找所有以某字符串开头的key</p>
<p>127.0.0.1:6379&gt; <code>keys f*</code><br>1)”fruitList”</p>
<h3 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h3><p>重命名key</p>
<p><font color="#dd0000">rename key name</font></p>
<p>127.0.0.1:6379&gt; <code>rename list1 list2</code><br>OK</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a><strong>PS.</strong></h3><p>更多命令：<a href="https://www.runoob.com/redis/redis-keys.html">https://www.runoob.com/redis/redis-keys.html</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis哈希(Hash)</title>
    <url>/166.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>
<p>Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。</p>
<h3 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h3><p>为单个字段设置值</p>
<p><font color="#dd0000">hset key 字段名 值</font></p>
<p>127.0.0.1:6379&gt; <code>hset h1 username root</code><br>(integer) 1<br>127.0.0.1:6379&gt; <code>hset h1 password 123456</code><br>(integer) 1</p>
<h3 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h3><p>获取字段的值</p>
<p><font color="#dd0000">hget key 字段名</font></p>
<p>127.0.0.1:6379&gt; <code>hget h1 username</code><br>“root”<br>127.0.0.1:6379&gt; <code>hget h1 password</code><br>“123456”</p>
<h3 id="hmset"><a href="#hmset" class="headerlink" title="hmset"></a>hmset</h3><p>为多个字段一起设置值</p>
<p><font color="#dd0000">hmset key 字段名1 值 字段名2 值 …</font></p>
<p>127.0.0.1:6379&gt; <code>hmset h2 username ledao password 333</code><br>OK</p>
<h3 id="hmget"><a href="#hmget" class="headerlink" title="hmget"></a>hmget</h3><p>获取多个字段的值</p>
<p><font color="#dd0000">hmget key 字段名1 字段名2 …</font></p>
<p>127.0.0.1:6379&gt; <code>hmget h2 username password</code><br>1)”ledao”<br>2)”333”</p>
<h3 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h3><p>获取全部字段的值</p>
<p><font color="#dd0000">hgetall key</font></p>
<p>127.0.0.1:6379&gt; <code>hgetall h2</code><br>1)”username”<br>2)”ledao”<br>3)”password”<br>4)”333”</p>
<h3 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h3><p>删除属性，可以一次删除一个或者多个</p>
<p><font color="#dd0000">hdel key 字段名1 字段名2 …</font></p>
<p>127.0.0.1:6379&gt; <code>hdel h2 username password</code><br>(integer) 2<br>127.0.0.1:6379&gt; <code>hgetall h2</code><br>(empty list or set)</p>
<h3 id="hincrby"><a href="#hincrby" class="headerlink" title="hincrby"></a>hincrby</h3><p>给字段的值加一个数，这个字段的值的数据类型要为integer</p>
<p><font color="#dd0000">hincrby key 字段名 数值</font></p>
<p>127.0.0.1:6379&gt; <code>hset h1 age 20</code><br>(integer) 1<br>127.0.0.1:6379&gt; <code>hgetall h1</code><br>1)”username”<br>2)”root”<br>3)”password”<br>4)”123456”<br>5)”age”<br>6)”20”<br>127.0.0.1:6379&gt; <code>hincrby h1 age 5</code><br>(integer) 25</p>
<h3 id="hexists"><a href="#hexists" class="headerlink" title="hexists"></a>hexists</h3><p>判断字段是否存在，1表示存在，0表示不存在</p>
<p><font color="#dd0000">hexists key 字段名</font></p>
<p>127.0.0.1:6379&gt; <code>hexists h1 age</code><br>(integer) 1<br>127.0.0.1:6379&gt; <code>hexists h1 age2</code><br>(integer) 0</p>
<h3 id="hlen"><a href="#hlen" class="headerlink" title="hlen"></a>hlen</h3><p>获取hash属性个数</p>
<p><font color="#dd0000">hlen key</font></p>
<p>127.0.0.1:6379&gt; <code>hlen h1</code><br>(integer) 3</p>
<h3 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h3><p>获取所有属性名称</p>
<p><font color="#dd0000">hkeys key</font></p>
<p>127.0.0.1:6379&gt; <code>hkeys h1</code><br>1)”username”<br>2)”password”<br>3)”age”</p>
<h3 id="hvals"><a href="#hvals" class="headerlink" title="hvals"></a>hvals</h3><p>获取所有属性值</p>
<p><font color="#dd0000">hvals key</font></p>
<p>127.0.0.1:6379&gt; <code>hvals h1</code><br>1)”root”<br>2)”123456”<br>3)”25”</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a><strong>Java代码</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-20 7:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.0.153&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//设置字段</span></span><br><span class="line">        jedis.hset(<span class="string">&quot;h1&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;h1&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span> + jedis.hget(<span class="string">&quot;h1&quot;</span>, <span class="string">&quot;username&quot;</span>) + <span class="string">&quot;，密码：&quot;</span> + jedis.hget(<span class="string">&quot;h1&quot;</span>, <span class="string">&quot;password&quot;</span>));</span><br><span class="line">        <span class="comment">//获取全部字段</span></span><br><span class="line">        Map&lt;String, String&gt; map=jedis.hgetAll(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; stringStringEntry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(stringStringEntry.getKey()+<span class="string">&quot;:&quot;</span>+stringStringEntry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210620134006.jpg" alt="img"></strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis列表(List)</title>
    <url>/167.html</url>
    <content><![CDATA[<h3 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h3><p>方式添加，从左边开始添加</p>
<p><font color="#dd0000">lpush key value1 value2…</font></p>
<p>127.0.0.1:6379&gt; <code>lpush l1 a b c d</code><br>(integer) 4<br>127.0.0.1:6379&gt; <code>lpush l1 1 2 3 4</code><br>(integer) 8</p>
<h3 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h3><p>从右端开始添加（一般人比较习惯这种方式）</p>
<p><font color="#dd0000">rpush key value1 value2…</font></p>
<p>127.0.0.1:6379&gt; <code>rpush l2 a b c d</code><br>(integer) 4<br>127.0.0.1:6379&gt; <code>rpush l2 1 2 3 4</code><br>(integer) 8<br>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”a”<br>2)”b”<br>3)”c”<br>4)”d”<br>5)”1”<br>6)”2”<br>7)”3”<br>8)”4”</p>
<h3 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h3><p>获取指定方位的集合元素（end是-1时表示最后一个位置）</p>
<p><font color="#dd0000">lrange key start end</font></p>
<p>127.0.0.1:6379&gt; <code>lrange l1 0 -1</code><br>1)”4”<br>2)”3”<br>3)”2”<br>4)”1”<br>5)”d”<br>6)”c”<br>7)”b”<br>8)”a”</p>
<h3 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h3><p>左侧弹出集合元素，返回弹出的元素</p>
<p><font color="#dd0000">lpop/rpop key</font></p>
<p>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”a”<br>2)”b”<br>3)”c”<br>4)”d”<br>5)”1”<br>6)”2”<br>7)”3”<br>8)”4”<br>128.127.0.0.1:6379&gt; <code>lpop l2</code><br>“a”<br>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”b”<br>2)”c”<br>3)”d”<br>4)”1”<br>5)”2”<br>6)”3”<br>7)”4”</p>
<h3 id="rpop"><a href="#rpop" class="headerlink" title="rpop"></a>rpop</h3><p>右侧弹出集合元素，返回弹出的元素</p>
<p>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”b”<br>2)”c”<br>3)”d”<br>4)”1”<br>5)”2”<br>6)”3”<br>7)”4”</p>
<p>128.127.0.0.1:6379&gt; <code>rpop l2</code><br>“4”<br>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”b”<br>2)”c”<br>3)”d”<br>4)”1”<br>5)”2”<br>6)”3”</p>
<h3 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h3><p>查看元素个数</p>
<p><font color="#dd0000">llen key</font></p>
<p>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”b”<br>2)”c”<br>3)”d”<br>4)”1”<br>5)”2”<br>6)”3”<br>127.0.0.1:6379&gt; <code>llen l2</code><br>(integer) 6</p>
<h3 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h3><p>重新设置集合指定索引的值（即修改）</p>
<p><font color="#dd0000">lset key index value</font></p>
<p>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”b”<br>2)”c”<br>3)”d”<br>4)”1”<br>5)”2”<br>6)”3”<br>127.0.0.1:6379&gt; <code>lset l2 0 b1</code><br>OK<br>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”b1”<br>2)”c”<br>3)”d”<br>4)”1”<br>5)”2”<br>6)”3”</p>
<h3 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h3><p>在集合里插入指定元素</p>
<p>在某元素之前插入一个元素（在某元素之后插入一个元素只要将before修改为after即可）</p>
<p><font color="#dd0000">linsert key before 某元素 插入的元素</font></p>
<p>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”b1”<br>2)”c”<br>3)”d”<br>4)”1”<br>5)”2”<br>6)”3”<br>127.0.0.1:6379&gt; <code>linsert l2 before 1 0</code><br>(integer) 7<br>127.0.0.1:6379&gt; <code>lrange l2 0 -1</code><br>1)”b1”<br>2)”c”<br>3)”d”<br>4)”0”<br>5)”1”<br>6)”2”<br>7)”3”</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis结合JSON存储Java对象</title>
    <url>/168.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>先将Java对象转化成json字符串，然后Redis存储json字符串</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="引入gson依赖"><a href="#引入gson依赖" class="headerlink" title="引入gson依赖"></a>引入gson依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用到的方法"><a href="#使用到的方法" class="headerlink" title="使用到的方法"></a>使用到的方法</h4><p><strong>Jedis.rpop()</strong></p>
<p>右侧弹出元素</p>
<p><strong>Jedis.llen()</strong></p>
<p>获取Redis的list长度</p>
<p><strong>Jedis.rpush()</strong></p>
<p>从右侧开始添加元素</p>
<p><strong>Jedis.lrange()</strong></p>
<p>获取全部元素集合</p>
<p><strong>Gson.toJson()</strong></p>
<p>Java对象转化成json</p>
<p><strong>Gson.fromJson()</strong></p>
<p>json转化成Java对象</p>
<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><blockquote>
<p>Fruit实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-20 22:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(Integer id, String name, Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Fruit&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, num=&quot;</span> + num +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-20 7:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.0.153&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        Fruit fruit1 = <span class="keyword">new</span> Fruit(<span class="number">1</span>, <span class="string">&quot;苹果&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        Fruit fruit2 = <span class="keyword">new</span> Fruit(<span class="number">2</span>, <span class="string">&quot;梨&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        Fruit fruit3 = <span class="keyword">new</span> Fruit(<span class="number">3</span>, <span class="string">&quot;油桃&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fruitList.add(fruit1);</span><br><span class="line">        fruitList.add(fruit2);</span><br><span class="line">        fruitList.add(fruit3);</span><br><span class="line">        <span class="comment">//转化成json，便于redis存储Java对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;转化成json：&quot;</span>);</span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="keyword">for</span> (Fruit fruit : fruitList) &#123;</span><br><span class="line">            jedis.rpush(<span class="string">&quot;redisFruitList&quot;</span>, gson.toJson(fruit));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        List&lt;String&gt; redisFruitList = jedis.lrange(<span class="string">&quot;redisFruitList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : redisFruitList) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Redis的list转化成Java对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;转化成Java对象：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; redisFruitList.size(); i++) &#123;</span><br><span class="line">            Fruit fruit = gson.fromJson(redisFruitList.get(i), Fruit.class);</span><br><span class="line">            System.out.println(fruit.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//清空redisFruitList</span></span><br><span class="line">        Long length = jedis.llen(<span class="string">&quot;redisFruitList&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                jedis.rpop(<span class="string">&quot;redisFruitList&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210621074556.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSON</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集合(Set)</title>
    <url>/169.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>
<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>
<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
<h3 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h3><p>添加set元素（添加一个或多个），set集合如果不存在就会先创建集合</p>
<p><font color="#dd0000">sadd key member1 member2…</font></p>
<p>127.0.0.1:6379&gt; <code>sadd set1 a b c a</code><br>(integer) 3</p>
<h3 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h3><p>查看指定key集合元素</p>
<p><font color="#dd0000">smembers key</font></p>
<p>127.0.0.1:6379&gt; <code>smembers set1</code><br>1)”b”<br>2)”a”<br>3)”c”</p>
<h3 id="srem"><a href="#srem" class="headerlink" title="srem"></a>srem</h3><p>删除元素（删除一个或多个元素）</p>
<p><font color="#dd0000">srem key member1 member2…</font></p>
<p>127.0.0.1:6379&gt; <code>smembers set1</code><br>1)”1”<br>2)”c”<br>3)”a”<br>4)”b”<br>5)”3”<br>6)”2”<br>127.0.0.1:6379&gt; <code>srem set1 a 1</code><br>(integer) 2<br>127.0.0.1:6379&gt; <code>smembers set1</code><br>1)”b”<br>2)”c”<br>3)”3”<br>4)”2”</p>
<h3 id="sismember"><a href="#sismember" class="headerlink" title="sismember"></a>sismember</h3><p>判断某个元素是否存在（返回1表示存在，返回0表示不存在）</p>
<p><font color="#dd0000">sismember key member</font></p>
<p>127.0.0.1:6379&gt; <code>smembers set1</code><br>1)”b”<br>2)”c”<br>3)”3”<br>4)”2”<br>127.0.0.1:6379&gt; <code>sismember set1 a</code><br>(integer) 0<br>127.0.0.1:6379&gt; <code>sismember set1 2</code><br>(integer) 1</p>
<h3 id="sdiff"><a href="#sdiff" class="headerlink" title="sdiff"></a>sdiff</h3><p>计算两个集合的差集（key1去掉key1和key2的交集元素，key1和key2的位置交换会得到不同的结果）</p>
<p><font color="#dd0000">sdiff key1 key2</font></p>
<p>127.0.0.1:6379&gt; <code>sadd set2 a b c</code><br>(integer) 3<br>127.0.0.1:6379&gt; <code>sadd set3 b c d e</code><br>(integer) 4<br>127.0.0.1:6379&gt; <code>sdiff set2 set3</code><br>1)”a”<br>127.0.0.1:6379&gt; <code>sdiff set3 set2</code><br>1)”d”<br>2)”e”</p>
<h3 id="sinter"><a href="#sinter" class="headerlink" title="sinter"></a>sinter</h3><p>计算两个集合的交集</p>
<p><font color="#dd0000">sinter key1 key2</font></p>
<p>127.0.0.1:6379&gt; <code>sinter set2 set3</code><br>1)”b”<br>2)”c”</p>
<h3 id="sunion"><a href="#sunion" class="headerlink" title="sunion"></a>sunion</h3><p>计算两个集合的并集</p>
<p><font color="#dd0000">sunion key1 key2</font></p>
<p>127.0.0.1:6379&gt; <code>sunion set2 set3</code><br>1)”b”<br>2)”a”<br>3)”c”<br>4)”e”<br>5)”d”</p>
<h3 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h3><p>计算元素总数</p>
<p><font color="#dd0000">scard key</font></p>
<p>127.0.0.1:6379&gt; <code>smembers set1</code><br>1)”b”<br>2)”c”<br>3)”3”<br>4)”2”<br>127.0.0.1:6379&gt; <code>scard set1</code><br>(integer) 4</p>
<h3 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h3><p>随机取一个或多个元素，count为空或者是1时，只随机选一个元素</p>
<p><font color="#dd0000">srandmember key count</font></p>
<p>127.0.0.1:6379&gt; <code>srandmember set1</code><br>“3”<br>127.0.0.1:6379&gt; <code>srandmember set1</code><br>“b”<br>127.0.0.1:6379&gt; <code>srandmember set1 2</code><br>1)”b”<br>2)”3”<br>127.0.0.1:6379&gt; <code>srandmember set1 2</code><br>1)”3”<br>2)”2”</p>
<h3 id="sdiffstore"><a href="#sdiffstore" class="headerlink" title="sdiffstore"></a>sdiffstore</h3><p>把差集结果存储到新集合中</p>
<p><font color="#dd0000">sdiffstore newKey key1 key2</font></p>
<p>127.0.0.1:6379&gt; <code>smembers set2</code><br>1)”b”<br>2)”a”<br>3)”c”<br>127.0.0.1:6379&gt; <code>smembers set3</code><br>1)”d”<br>2)”b”<br>3)”e”<br>4)”c”<br>127.0.0.1:6379&gt; <code>sdiffstore newSet set2 set3</code><br>(integer) 1<br>127.0.0.1:6379&gt; <code>smembers newSet</code><br>1)”a”</p>
<h3 id="sinterstore"><a href="#sinterstore" class="headerlink" title="sinterstore"></a>sinterstore</h3><p>把交集结果存储到新集合中</p>
<p><font color="#dd0000">sinterstore newKey key1 key2</font></p>
<p>127.0.0.1:6379&gt; <code>smembers set2</code><br>1)”b”<br>2)”a”<br>3)”c”<br>127.0.0.1:6379&gt; <code>smembers set3</code><br>1)”d”<br>2)”b”<br>3)”e”<br>4)”c”<br>127.0.0.1:6379&gt; <code>sinterstore newSet set2 set3</code><br>(integer) 2<br>127.0.0.1:6379&gt; <code>smembers newSet</code><br>1)”b”<br>2)”c”</p>
<h3 id="sunionstore"><a href="#sunionstore" class="headerlink" title="sunionstore"></a>sunionstore</h3><p>把并集结果存储到新集合中</p>
<p><font color="#dd0000">sunionstore newKey key1 key2</font></p>
<p>127.0.0.1:6379&gt; <code>smembers set2</code><br>1)”b”<br>2)”a”<br>3)”c”<br>127.0.0.1:6379&gt; <code>smembers set3</code><br>1)”d”<br>2)”b”<br>3)”e”<br>4)”c”<br>127.0.0.1:6379&gt; <code>sunionstore newSet set2 set3</code><br>(integer) 5<br>127.0.0.1:6379&gt; <code>smembers newSet</code><br>1)”b”<br>2)”a”<br>3)”c”<br>4)”e”<br>5)”d”</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云设置二级域名</title>
    <url>/17.html</url>
    <content><![CDATA[<h3 id="进入控制台"><a href="#进入控制台" class="headerlink" title="进入控制台"></a>进入控制台</h3><p>在阿里云官网登录后，点击右上角的控制台</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011182614.jpg" alt="img"></p>
<h3 id="进入域名管理界面"><a href="#进入域名管理界面" class="headerlink" title="进入域名管理界面"></a>进入域名管理界面</h3><p>点击左侧菜单的域名</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011182732.jpg" alt="img"></p>
<h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011182912.jpg" alt="img"></p>
<p>点击添加记录（主机记录为我们二级域名所要设置的名称，记录值为阿里云本机的 id，其它的值根据图片设置即可）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201011183047.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis有序集合(sorted set)</title>
    <url>/170.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。</p>
<p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>
<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>
<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
<h3 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h3><p>添加元素，里面包括年龄和名称，根据数值从小到大排列，如果继续添加元素：①值已存在，则数值覆盖②值不存在，就会添加进去</p>
<p><font color="#dd0000">zadd key 数值1 字段1 数值2 字段2 …</font></p>
<p>127.0.0.1:6379&gt; <code>zadd age 11 tom 8 jack 22 mary</code><br>(integer) 3</p>
<h3 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h3><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>位置下标从0开始，结束位置如果是-1代表是最后一个</p>
<p><font color="#dd0000">zrange key start end</font></p>
<p>127.0.0.1:6379&gt; <code>zrange age 0 -1</code><br>1)”jack”<br>2)”tom”<br>3)”mary”</p>
<h4 id="显示数值"><a href="#显示数值" class="headerlink" title="显示数值"></a>显示数值</h4><p>上面没有显示数值，命令后面加上withscores可以显示数值</p>
<p><font color="#dd0000">zrange key 0 -1 withscores</font></p>
<p>127.0.0.1:6379&gt; <code>zrange age 0 -1 withscores</code><br>1)”jack”<br>2)”8”<br>3)”tom”<br>4)”11”<br>5)”mary”<br>6)”22”</p>
<h3 id="zrevrange"><a href="#zrevrange" class="headerlink" title="zrevrange"></a>zrevrange</h3><p>降序排列，和zrange相反</p>
<p><font color="#dd0000">zrevrange key start end withscores</font></p>
<p>127.0.0.1:6379&gt; <code>zrevrange age 0 -1 withscores</code><br>1)”mary”<br>2)”22”<br>3)”tom”<br>4)”11”<br>5)”jack”<br>6)”8”</p>
<h3 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h3><p>删除一个或多个元素</p>
<p><font color="#dd0000">zrem key 字段1 字段2 …</font></p>
<p>127.0.0.1:6379&gt; <code>zrange age 0 -1</code><br>1)”sherry”<br>2)”jack”<br>3)”tom”<br>4)”mary”</p>
<p>127.0.0.1:6379&gt; <code>zrem age sherry</code><br>(integer) 1<br>127.0.0.1:6379&gt; <code>zrange age 0 -1</code><br>1)”jack”<br>2)”tom”<br>3)”mary”</p>
<h3 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h3><p>查看集合里的元素个数</p>
<p><font color="#dd0000">zcard key</font></p>
<p>127.0.0.1:6379&gt; <code>zcard age</code><br>(integer) 3</p>
<h3 id="zremrangebyrank"><a href="#zremrangebyrank" class="headerlink" title="zremrangebyrank"></a>zremrangebyrank</h3><p>根据排名来删除元素</p>
<p><font color="#dd0000">zremrangebyrank key start end</font></p>
<p>127.0.0.1:6379&gt; <code>zrange age 0 -1 withscores</code><br> 1)”aa”<br> 2)”1”<br> 3)”bb”<br> 4)”2”<br> 5)”jack”<br> 6)”8”<br> 7)”tom”<br> 8)”11”<br> 9)”mary”<br>10)”22”<br>127.0.0.1:6379&gt; <code>zremrangebyrank age 0 1</code><br>(integer) 2<br>127.0.0.1:6379&gt; <code>zrange age 0 -1 withscores</code><br>1)”jack”<br>2)”8”<br>3)”tom”<br>4)”11”<br>5)”mary”<br>6)”22”</p>
<h3 id="zremrangebyscore"><a href="#zremrangebyscore" class="headerlink" title="zremrangebyscore"></a>zremrangebyscore</h3><p>根据数值范围来删除元素（包含）</p>
<p><font color="#dd0000">zremrangebyscore key min max</font></p>
<p>127.0.0.1:6379&gt; <code>zrange age 0 -1 withscores</code><br> 1)”aa”<br> 2)”1”<br> 3)”bb”<br> 4)”2”<br> 5)”jack”<br> 6)”8”<br> 7)”tom”<br> 8)”11”<br> 9)”mary”<br>10)”22”<br>127.0.0.1:6379&gt; <code>zremrangebyscore age 0 4</code><br>(integer) 2<br>127.0.0.1:6379&gt; <code>zrange age 0 -1 withscores</code><br>1)”jack”<br>2)”8”<br>3)”tom”<br>4)”11”<br>5)”mary”<br>6)”22”</p>
<h3 id="zrangebyscore"><a href="#zrangebyscore" class="headerlink" title="zrangebyscore"></a>zrangebyscore</h3><h4 id="根据评分范围来查找元素"><a href="#根据评分范围来查找元素" class="headerlink" title="根据评分范围来查找元素"></a>根据评分范围来查找元素</h4><p><font color="#dd0000">zrangebyscore key min max withscores</font></p>
<p>127.0.0.1:6379&gt; <code>zrange age 0 -1 withscores</code><br>1)”jack”<br>2)”8”<br>3)”tom”<br>4)”11”<br>5)”mary”<br>6)”22”<br>127.0.0.1:6379&gt; <code>zrangebyscore age 8 11 withscores</code><br>1)”jack”<br>2)”8”<br>3)”tom”<br>4)”11”</p>
<h4 id="限定查找起始"><a href="#限定查找起始" class="headerlink" title="限定查找起始"></a>限定查找起始</h4><p>第一个元素的下标为0，end为-1时查全部</p>
<p><font color="#dd0000">zrangebyscore key min max withscores limit statr end</font></p>
<p>127.0.0.1:6379&gt; <code>zrangebyscore age 0 100 withscores limit 0 2</code><br>1)”jack”<br>2)”8”<br>3)”tom”<br>4)”11”</p>
<h3 id="zincrby"><a href="#zincrby" class="headerlink" title="zincrby"></a>zincrby</h3><p>给指定元素加分</p>
<p><font color="#dd0000">zincrby key 数值 字段名</font></p>
<p>127.0.0.1:6379&gt; <code>zrange age 0 -1 withscores</code><br>1)”jack”<br>2)”8”<br>3)”tom”<br>4)”11”<br>5)”mary”<br>6)”22”<br>127.0.0.1:6379&gt; <code>zincrby age 2 jack</code><br>“10”<br>127.0.0.1:6379&gt; <code>zrange age 0 -1 withscores</code><br>1)”jack”<br>2)”10”<br>3)”tom”<br>4)”11”<br>5)”mary”<br>6)”22”</p>
<h3 id="zcount"><a href="#zcount" class="headerlink" title="zcount"></a>zcount</h3><p>查找指定数值范围的元素个数</p>
<p><font color="#dd0000">zcount key min max</font></p>
<p>127.0.0.1:6379&gt; zrange age 0 -1 withscores<br>1)”jack”<br>2)”10”<br>3)”tom”<br>4)”11”<br>5)”mary”<br>6)”22”<br>127.0.0.1:6379&gt; zcount age 9 10<br>(integer) 1</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Log4j</title>
    <url>/171.html</url>
    <content><![CDATA[<h3 id="引入Log4j依赖"><a href="#引入Log4j依赖" class="headerlink" title="引入Log4j依赖"></a>引入Log4j依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>新建一个log4j.properties文件，文件存放位置：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210621124219.jpg" alt="img"></p>
<p>文件内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, Console ,File  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Console</span></span><br><span class="line"><span class="meta">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender  </span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout  </span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">%d [%t] %-5p [%c] - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#File</span></span><br><span class="line"><span class="meta">log4j.appender.File</span> = <span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.File.File</span> = <span class="string">E://myLog.log</span></span><br><span class="line"><span class="meta">log4j.appender.File.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.File.layout.ConversionPattern</span> =<span class="string">%d [%t] %-5p [%c] - %m%n</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;调试信息&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;错误信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210621124230.jpg" alt="img"></p>
<p>E盘下也有一个myLog.log文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210621124239.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>图片压缩</title>
    <url>/172.html</url>
    <content><![CDATA[<h3 id="为什么要图片压缩？"><a href="#为什么要图片压缩？" class="headerlink" title="为什么要图片压缩？"></a>为什么要图片压缩？</h3><p>使用更少的带宽，可以加快网站加载速度</p>
<h3 id="tinypng"><a href="#tinypng" class="headerlink" title="tinypng"></a>tinypng</h3><h4 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h4><p><a href="https://tinypng.com/">https://tinypng.com/</a></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>点击虚线框可以选择要压缩的图片，或将图片（最多20张）拖到虚线框</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210621130101.jpg" alt="img"></p>
<p>压缩成功，点击下载按钮即可下载到本地</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210621130113.jpg" alt="img"></p>
<h3 id="squoosh"><a href="#squoosh" class="headerlink" title="squoosh"></a>squoosh</h3><h4 id="网站地址-1"><a href="#网站地址-1" class="headerlink" title="网站地址"></a>网站地址</h4><p><a href="https://squoosh.app/">https://squoosh.app/</a> </p>
<p>可以安装到电脑上，下载地址：<a href="https://squoosh-desktop.vercel.app/#download">https://squoosh-desktop.vercel.app/#download</a></p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>上传图片后会自动压缩，点击下载按钮即可下载到本地</p>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>squoosh更加方便，squoosh压缩后下载的是图片，tinypng下载的是图片的压缩包还要解压一下；squoosh还可以安装到电脑上，不需要打开浏览器</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat安装SSL证书</title>
    <url>/173.html</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>阿里云服务器、CentOS7系统、Tomcat9</p>
<h3 id="申请免费证书"><a href="#申请免费证书" class="headerlink" title="申请免费证书"></a>申请免费证书</h3><p>阿里云可申请一年的免费证书，申请证书教程链接为：<a href="https://help.aliyun.com/document_detail/98574.html?spm=a2c4g.11186623.6.600.1a2d7597CYqniO">https://help.aliyun.com/document_detail/98574.html?spm=a2c4g.11186623.6.600.1a2d7597CYqniO</a></p>
<h3 id="安装SSL证书前提条件"><a href="#安装SSL证书前提条件" class="headerlink" title="安装SSL证书前提条件"></a>安装SSL证书前提条件</h3><ol>
<li><p>已从阿里云SSL证书服务控制台下载Tomcat服务器证书（包含PFX格式证书文件和TXT格式密码文件）</p>
</li>
<li><p>申请SSL证书时绑定的域名已完成DNS解析、实现了该域名指向您Tomcat服务器的IP地址</p>
</li>
<li><p>域名解析设置完成后执行<code>ping www.yourdomain.com</code>命令，如果返回了您所设置解析的主机IP地址，说明解析成功</p>
</li>
</ol>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>解压Tomcat证书</p>
<p>每次下载证书都会产生新的密码，该密码仅匹配本次下载的证书。如果需要更新证书文件，同时也要更新匹配的密码</p>
</li>
<li><p>将下载的证书和密码文件拷贝到Tomcat的conf目录下</p>
</li>
<li><p>打开Tomcat/conf/server.xml，在server.xml文件中找到以下参数并进行修改</p>
<p>① 将Connector port修改为80，将redirectPort修改为SSL默认端口443，让HTTPS请求转发到443端口</p>
<p>修改前：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;80&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>② 将下面代码复制到server.xml中，certificateKeystoreFile代表证书文件的路径，certificateKeystorePassword为SSL证书的密码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;443&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span> <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Certificate</span>  <span class="attr">certificateKeystoreFile</span>=<span class="string">&quot;/home/tomcat9/apache-tomcat-9.0.46/conf/证书名称&quot;</span></span></span><br><span class="line"><span class="tag">		 <span class="attr">certificateKeystorePassword</span>=<span class="string">&quot;证书密码&quot;</span></span></span><br><span class="line"><span class="tag">		 <span class="attr">certificateKeystoreType</span>=<span class="string">&quot;PKCS12&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Connector</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③ 找到下面代码并修改</p>
<p>修改前：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;443&quot;</span> <span class="attr">secretRequired</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>④ 在web.xml文件最底部添加以下内容，实现HTTP自动跳转为HTTPS</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>SSL<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">user-data-constraint</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transport-guarantee</span>&gt;</span>CONFIDENTIAL<span class="tag">&lt;/<span class="name">transport-guarantee</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">user-data-constraint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>保存server.xml，重启Tomcat</p>
</li>
</ol>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>出现锁图标和https说明SSL证书已经安装成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210621213545.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>阿里云</tag>
        <tag>SSL证书</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis持久化</title>
    <url>/174.html</url>
    <content><![CDATA[<p>持久化是将程序数据在持久状态和瞬时状态间转换的机制。通俗的讲，就是瞬时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库中，能够长久保存）</p>
<p>持久化操作有两种方式：rdb方式、aof方式，可以单独使用或者结合使用</p>
<p>rdb方式：在指定的时间间隔写入硬盘，查看博客：<a href="https://blog.zoutl.cn/175.html">Redis 的持久化之 RDB 方式 | LeDao 的博客 (zoutl.cn)</a></p>
<p>aof方式：将以日志，记录每一个操作，服务器启动后就构建数据库，查看博客：<a href="https://blog.zoutl.cn/176.html">Redis 的持久化之 AOF 方式 | LeDao 的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的持久化之RDB方式</title>
    <url>/175.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>RDB方式，Redis是默认支持的</p>
<p>优势：只有一个文件，时间间隔的数据，可以归档为一个文件，方便压缩转移（就一个文件）</p>
<p>劣势：如果宕机，数据损失比较大，因为它是没一个时间段进行持久化操作的。也就是积攒的数据比较多，一旦懵逼，就彻底懵逼了</p>
<h3 id="查看Redis配置"><a href="#查看Redis配置" class="headerlink" title="查看Redis配置"></a>查看Redis配置</h3><p>[root@localhost ~]# cd /usr/local/redis/<br>[root@localhost redis]# vi redis.conf</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210622005939.jpg" alt="img"></p>
<p>save 900 1 表示 每900秒内至少有1个key发生变化，就持久化</p>
<p>save 300 10表示 每300秒内至少有10个key发生变化，就持久化</p>
<p>save 60 10000表示 每60秒内至少有10000个key发生变化，就持久化</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210622005950.jpg" alt="img"></p>
<p>dbfilename配置是保存的持久化的文件名，默认是dump.rdb</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210622010021.jpg" alt="img"></p>
<p><code>dir ./</code> 表示文件存储路径是当前路径</p>
<h3 id="查看当前路径的文件"><a href="#查看当前路径的文件" class="headerlink" title="查看当前路径的文件"></a>查看当前路径的文件</h3><p>[root@localhost redis]# ll</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210622010034.jpg" alt="img"></p>
<p>当前路径里确实是有dump.rdb这个文件的</p>
<h3 id="备份和恢复数据"><a href="#备份和恢复数据" class="headerlink" title="备份和恢复数据"></a>备份和恢复数据</h3><h4 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h4><p>删除已存在的备份文件</p>
<p>[root@localhost redis]# ls<br>bin  dump.rdb  redis.conf<br>[root@localhost redis]# rm dump.rdb<br>rm：是否删除普通文件 “dump.rdb”？y<br>[root@localhost redis]# ls<br>bin  redis.conf</p>
<p>打开Redis服务</p>
<p>[root@localhost redis]# ./bin/redis-server ./redis.conf</p>
<p>进入Redis客户端</p>
<p>[root@localhost redis]# ./bin/redis-cli </p>
<p>查看所有key（此时是没有数据的）</p>
<p>127.0.0.1:6379&gt; keys *<br>(empty list or set)</p>
<p>创建几个key</p>
<p>127.0.0.1:6379&gt; set a1 1<br>OK<br>127.0.0.1:6379&gt; set a2 2<br>OK<br>127.0.0.1:6379&gt; set a3 3<br>OK<br>127.0.0.1:6379&gt; keys *<br>1)”a3”<br>2)”a2”<br>3)”a1”</p>
<p>保存并关闭Redis（当前路径下多了一个备份文件dump.rdb）</p>
<p>127.0.0.1:6379&gt; shutdown save<br>not connected&gt; exit<br>[root@localhost redis]# ls<br>bin  dump.rdb  redis.conf</p>
<h4 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h4><p>再次打开Redis服务，查看所有key，发现有数据（说明是数据加载进来了，Redis服务启动时会自动加载备份文件）</p>
<p>[root@localhost redis]# ./bin/redis-server ./redis.conf<br>[root@localhost redis]# ./bin/redis-cli<br>127.0.0.1:6379&gt; keys *<br>1)”a2”<br>2)”a3”<br>3)”a1”</p>
<p>再次关闭Redis服务，将备份文件dump.rdb剪切到其它目录，然后启动Redis服务，查看所有key，发现是没有数据的（由于备份文件已经剪切到其它目录了，所以启动Redis服务时无法自动加载备份数据，查看所有key没有数据）</p>
<p>[root@localhost redis]# /usr/local/redis/bin/redis-cli shutdown<br>[root@localhost redis]# ls<br>bin  dump.rdb  redis.conf<br>[root@localhost redis]# mv dump.rdb /home/data/<br>[root@localhost redis]# ls<br>bin  redis.conf<br>[root@localhost redis]# ./bin/redis-server ./redis.conf<br>[root@localhost redis]# ./bin/redis-cli<br>127.0.0.1:6379&gt; keys *<br>(empty list or set)</p>
<p>然后我们将之前剪切到其它目录的备份文件复制到Redis备份文件指定目录中，将新创建的备份文件（关闭Redis服务时自动创建）覆盖掉，启动Redis服务后又有数据了（Redis会在启动时加载备份文件）</p>
<p>[root@localhost redis]# cp /home/data/dump.rdb /usr/local/redis/<br>cp：是否覆盖”/usr/local/redis/dump.rdb”？ y<br>[root@localhost redis]# ./bin/redis-server ./redis.conf<br>[root@localhost redis]# ./bin/redis-cli<br>127.0.0.1:6379&gt; keys *<br>1)”a1”<br>2)”a3”<br>3)”a2”</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Redis服务在启动时自动加载备份文件，平时我们可以定期把rdb文件备份到指定地方，需要恢复的时候，直接把rdb搞到redis备份文件指定目录/usr/local/redis下即可</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="http://blog.java1234.com/blog/articles/323.html">Redis的持久化之RDB方式_Java开源博客系统-Powered by java1234</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的持久化之AOF方式</title>
    <url>/176.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>AOF方式：将以日志，记录每一个操作</p>
<p>优势：安全性相对RDB方式高很多</p>
<p>劣势：效率相对RDB方式低很多</p>
<h3 id="查看和修改配置"><a href="#查看和修改配置" class="headerlink" title="查看和修改配置"></a>查看和修改配置</h3><p>找到并修改redis.conf</p>
<p>appendonly no默认关闭aof方式，我们修改成 yes 就开启</p>
<p>下面那个是默认的aof文件名</p>
<p>接下来找到</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210622023041.jpg" alt="img"></p>
<p>这里是三种同步策略：</p>
<p>always是只要发生修改，立即同步（推荐使用，安全性最高）</p>
<p>everysec是每秒同步一次</p>
<p>no是不同步 </p>
<p>我们修改成always</p>
<p>保存并退出</p>
<h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>启动Redis服务，增加几个key，退出客户端，查看当前目录，发现多了一个备份文件appendonly.aof</p>
<p>[root@localhost redis]# ./bin/redis-server ./redis.conf<br>[root@localhost redis]# ps -ef | grep -i redis<br>root    1754    1  0 02:04 ?     00:00:00 ./bin/redis-server *:6379<br>root    1758  1498  0 02:04 pts/0   00:00:00 grep –color=auto -i redis<br>[root@localhost redis]# ./bin/redis-cli<br>127.0.0.1:6379&gt; keys *<br>(empty list or set)<br>127.0.0.1:6379&gt; set a 1<br>OK<br>127.0.0.1:6379&gt; set b 2<br>OK<br>127.0.0.1:6379&gt; keys *<br>1)”a”<br>2)”b”</p>
<p>127.0.0.1:6379&gt; exit<br>[root@localhost redis]# ps -ef | grep -i redis<br>root    1754    1  0 02:04 ?     00:00:00 ./bin/redis-server *:6379<br>root    1761  1498  0 02:05 pts/0   00:00:00 grep –color=auto -i redis<br>[root@localhost redis]# ll<br>总用量 52<br>-rw-r–r–. 1 root root   77 6月  22 02:04 appendonly.aof<br>drwxr-xr-x. 2 root root  134 6月  20 00:37 bin<br>-rw-r–r–. 1 root root 46698 6月  22 02:02 redis.conf</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210622023055.jpg" alt="img"></p>
<p>退出Redis服务，用shutdown nosave命令关闭Redis就不会创建dump.rdb备份文件</p>
<p>[root@localhost redis]# ./bin/redis-cli<br>127.0.0.1:6379&gt; keys *<br>1)”a”<br>2)”b”</p>
<p>127.0.0.1:6379&gt; shutdown nosave<br>not connected&gt; exit<br>[root@localhost redis]# ll<br>总用量 52<br>-rw-r–r–. 1 root root   77 6月  22 02:04 appendonly.aof<br>drwxr-xr-x. 2 root root  134 6月  20 00:37 bin<br>-rw-r–r–. 1 root root 46698 6月  22 02:02 redis.conf</p>
<h3 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h3><p>将appendonly.aof剪切到其它目录，重启Redis服务，查看所有key，发现没有数据</p>
<p>[root@localhost redis]# ./bin/redis-server ./redis.conf<br>[root@localhost redis]# ./bin/redis-cli<br>127.0.0.1:6379&gt; keys *<br>(empty list or set)</p>
<p>退出Redis服务（shutdown nosave命令），将剪切到其它目录的appendonly.aof重新复制到备份文件指定目录/usr/local/redis，重启Redis服务，查看所有key，发现有数据</p>
<p>127.0.0.1:6379&gt; shutdown nosave<br>not connected&gt; exit<br>[root@localhost redis]# cp /home/data/appendonly.aof /usr/local/redis/<br>cp：是否覆盖”/usr/local/redis/appendonly.aof”？ y<br>[root@localhost redis]# ./bin/redis-server ./redis.conf<br>[root@localhost redis]# ./bin/redis-cli<br>127.0.0.1:6379&gt; keys *<br>1)”b”<br>2)”a”</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们平时可以把aof文件定期备份，然后需要的时候拷贝到redis下，重启即可</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="http://blog.java1234.com/blog/articles/324.html">Redis的持久化之AOF方式_Java开源博客系统-Powered by java1234</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven出现错误：Plugin org.springframework.boot:spring-boot-maven-plugin: not found的解决办法</title>
    <url>/177.html</url>
    <content><![CDATA[<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>给spring-boot-maven-plugin指定版本</p>
<h3 id="修改前"><a href="#修改前" class="headerlink" title="修改前"></a>修改前</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Java单元测试</title>
    <url>/179.html</url>
    <content><![CDATA[<h3 id="引入junit依赖"><a href="#引入junit依赖" class="headerlink" title="引入junit依赖"></a>引入junit依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建测试用文件夹"><a href="#创建测试用文件夹" class="headerlink" title="创建测试用文件夹"></a>创建测试用文件夹</h3><p>创建一个测试专用的文件夹（在src文件夹下创建）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624041537.jpg" alt="img"></p>
<h3 id="常用注解介绍"><a href="#常用注解介绍" class="headerlink" title="常用注解介绍"></a>常用注解介绍</h3><h4 id="Test"><a href="#Test" class="headerlink" title="@Test"></a>@Test</h4><p>把一个方法标记为测试方法</p>
<h4 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h4><p>每一个测试方法执行前自动调用一次</p>
<h4 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h4><p>每一个测试方法执行完自动调用一次</p>
<h4 id="BeforeClass"><a href="#BeforeClass" class="headerlink" title="@BeforeClass"></a>@BeforeClass</h4><p>所有测试方法执行前执行一次，在测试类还没有实例化就已经被加载，所以用static修饰</p>
<h4 id="AfterClass"><a href="#AfterClass" class="headerlink" title="@AfterClass"></a>@AfterClass</h4><p>所有测试方法执行完执行一次，在测试类还没有实例化就已经被加载，所以用static修饰</p>
<h4 id="Ignore"><a href="#Ignore" class="headerlink" title="@Ignore"></a>@Ignore</h4><p>暂不执行该测试方法</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.ir.annotations.Ignore;</span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-24 2:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始所有单元测试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">endAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;所有单元测试结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始单元测试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;单元测试结束&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ignoreMe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;忽略我&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;单元测试1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;单元测试2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624041328.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>a标签实现文件下载</title>
    <url>/178.html</url>
    <content><![CDATA[<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="一般文件"><a href="#一般文件" class="headerlink" title="一般文件"></a>一般文件</h4><p>通过纯前端技术实现文件下载，直接把a标签的href属性设置为文件路径即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.zoutl.cn/fileDownload/nhdogjmejiglipccpnnnanhbledajbpd.zip&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;下载&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;下载&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h4><p> <plugin>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-maven-plugin</artifactId>    <version>2.2.6.RELEASE</version></plugin>xml</p>
<p>download属性为空（下载名为vue.js的文件）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">download</span>=<span class="string">&quot;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.zoutl.cn/fileDownload/vue.js&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;下载&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>download属性不为空（下载名为vue3.js的文件）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">download</span>=<span class="string">&quot;vue3.js&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.zoutl.cn/fileDownload/vue.js&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;下载&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210623171915.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>注释</title>
    <url>/18.html</url>
    <content><![CDATA[<h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>格式： //注释文字</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201013120335.jpg" alt="img"></p>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>格式： /* 注释文字 */</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201013120418.jpg" alt="img"></p>
<h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>格式：/** 注释文字 */</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201013120220.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><ol>
<li><p>对于单行和多行注释，被注释的文字，不会被JVM（Java虚拟机）解释执行。所以，即使添加再多的注释，编译后生成的class文件占用硬盘字节多少不变</p>
</li>
<li><p>对于文档注释，是Java特有的注释，其中注释内容可以被JDK提供的工具Javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档</p>
</li>
<li><p>注释是一个程序员必须要具有的良好编程习惯，初学者编写程序必须养成习惯：先写注释再写代码</p>
</li>
<li><p>将自己的思想通过注释先整理出来，再用代码去体现，因为代码仅仅是思想的一种体现形式而已</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>创建第一个Vue应用</title>
    <url>/180.html</url>
    <content><![CDATA[<h3 id="引入Vue-js"><a href="#引入Vue-js" class="headerlink" title="引入Vue.js"></a>引入Vue.js</h3><ol>
<li><p>下载js文件后引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用CDN方法</p>
<p>开发环境版本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>生产环境版本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;flag?&#x27;color:blue&#x27;:&#x27;color:red&#x27;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;modifyColor&quot;</span>&gt;</span>改变p的颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!!&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">modifyColor</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.flag) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>改变输入框内容，上面的文本也随之改变，点击按钮文本的颜色由蓝色和红色来回变换</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624232437.jpg" alt="img"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>data 用于定义属性</p>
<p>methods 用于定义的函数，可以通过 return 来返回函数值</p>
<p>{ { } } 于输出对象属性和函数返回值</p>
<p>el 用于绑定某个id的标签</p>
<p>v-on:click 触发某个点击事件</p>
<p>v-model 动态绑定某个属性的值</p>
<p>v-bind 用于绑定HTML属性</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot项目添加webapp目录</title>
    <url>/181.html</url>
    <content><![CDATA[<h3 id="打开Project-Structure"><a href="#打开Project-Structure" class="headerlink" title="打开Project Structure"></a>打开Project Structure</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624111108.jpg" alt="img"></p>
<h3 id="添加Web服务"><a href="#添加Web服务" class="headerlink" title="添加Web服务"></a>添加Web服务</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624111123.jpg" alt="img"></p>
<h3 id="添加web-xml文件"><a href="#添加web-xml文件" class="headerlink" title="添加web.xml文件"></a>添加web.xml文件</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624111135.jpg" alt="img"></p>
<h3 id="选择web-xml的文件路径"><a href="#选择web-xml的文件路径" class="headerlink" title="选择web.xml的文件路径"></a>选择web.xml的文件路径</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624111146.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js条件语句</title>
    <url>/182.html</url>
    <content><![CDATA[<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>flag是true就显示我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>flag==true<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>flag==false<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;C&#x27;&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>D<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: <span class="string">&#x27;C&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>11111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js计算属性</title>
    <url>/184.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>计算属性关键词: computed</p>
<p>计算属性在处理一些复杂逻辑时是很有用的，在一个计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>计算X1²+X2²-2X1+3X2,其中X1=&#123;&#123;X1&#125;&#125;,X2=&#123;&#123;X2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;X1&#125;&#125; * &#123;&#123;X1&#125;&#125; + &#123;&#123;X2&#125;&#125; * &#123;&#123;X2&#125;&#125; - 2 * &#123;&#123;X1&#125;&#125; + 3 * &#123;&#123;X2&#125;&#125;=<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;calculate&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    输入X1:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;X1&quot;</span>&gt;</span>，</span><br><span class="line">    输入X2:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;X2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">X1</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">X2</span>: <span class="number">3</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">calculate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.X1 * <span class="built_in">this</span>.X1 + <span class="built_in">this</span>.X2 * <span class="built_in">this</span>.X2 - <span class="number">2</span> * <span class="built_in">this</span>.X1 + <span class="number">3</span> * <span class="built_in">this</span>.X2;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在输入框改变值，结果也会随之改变</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624231847.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js循环语句</title>
    <url>/183.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>循环使用 v-for 指令</p>
<p>v-for 指令需要以 <code>site in sites</code> 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名</p>
<p>如果要限制遍历的数量，则格式为：<code>site in sites.slice(0,3)</code>，3为数量代表只遍历3个</p>
<h3 id="迭代数组"><a href="#迭代数组" class="headerlink" title="迭代数组"></a>迭代数组</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;student in students&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;student.name&#125;&#125;的年龄：&#123;&#123;student.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">students</span>: [</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&#x27;Mary&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&#x27;Sherry&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;</span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624144800.jpg" alt="img"></p>
<h3 id="迭代对象"><a href="#迭代对象" class="headerlink" title="迭代对象"></a>迭代对象</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in student&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;index&#125;&#125;---&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">student</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">age</span>: <span class="number">14</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624144816.jpg" alt="img"></p>
<h3 id="迭代整数"><a href="#迭代整数" class="headerlink" title="迭代整数"></a>迭代整数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>遍历1到<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;n in num&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;n&lt;num&quot;</span>&gt;</span>&#123;&#123;n&#125;&#125;，<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">num</span>:<span class="number">33</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624144827.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js监听属性</title>
    <url>/185.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通过 watch 来响应数据的变化</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">        计数器:&#123;&#123;counter&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>（</span><br><span class="line">            修改前值为：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span>&#123;&#123;oldVal&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，</span><br><span class="line">            修改后值为：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;newVal&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>）</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCounter&quot;</span>&gt;</span>自加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;lessCounter&quot;</span>&gt;</span>自减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">counter</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">seen</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">oldVal</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">newVal</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">addCounter</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter++;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lessCounter</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.counter &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.counter--;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//第一个参数是新的值（改变后），第二个是旧的值（改变前）</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">counter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.oldVal = oldValue;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.newVal = newValue;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.seen = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624221541.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js样式绑定</title>
    <url>/186.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。</p>
<p>Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p>
<h3 id="class属性绑定"><a href="#class属性绑定" class="headerlink" title="class属性绑定"></a>class属性绑定</h3><p>①使用属性值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    第一种方式：</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;isActive?&#x27;active&#x27;:&#x27;active2&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    第二种方式：</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; &#x27;active2&#x27;: isActive,&#x27;active&#x27;:!isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;modifyClass&quot;</span>&gt;</span>改变样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">isActive</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">modifyClass</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.isActive = !<span class="built_in">this</span>.isActive;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624231555.jpg" alt="img"></p>
<p>②使用对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>classObject: &#123; &#x27;active&#x27;: &#123;&#123;classObject.active&#125;&#125;, &#x27;active2&#x27;: &#123;&#123;classObject.active2&#125;&#125; &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;modifyClass&quot;</span>&gt;</span>改变样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">classObject</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;active&#x27;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;active2&#x27;</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">modifyClass</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.classObject.active = !<span class="built_in">this</span>.classObject.active;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.classObject.active2 = !<span class="built_in">this</span>.classObject.active2;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624234936.jpg" alt="img"></p>
<p>③数组语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>class=&quot;&#123;&#123;activeClass&#125;&#125; &#123;&#123;active2Class&#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[activeClass,active2Class]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">activeClass</span>: <span class="string">&#x27;active&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">active2Class</span>: <span class="string">&#x27;active2&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210624235755.jpg" alt="img"></p>
<h3 id="Vue-js-style-内联样式"><a href="#Vue-js-style-内联样式" class="headerlink" title="Vue.js style(内联样式)"></a>Vue.js style(内联样式)</h3><p>①在 <strong>v-bind:style</strong> 直接设置样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;color:fontColor,fontSize:fontSize+&#x27;px&#x27;&#125;&quot;</span>&gt;</span>LeDao的博客<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;bigFontSize&quot;</span>&gt;</span>增大字号<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;smallFontSize&quot;</span>&gt;</span>减小字号<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">fontColor</span>: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fontSize</span>: <span class="number">15</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">bigFontSize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fontSize++;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">smallFontSize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fontSize--;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625000947.jpg" alt="img"></p>
<p>②绑定一个对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span>LeDao的博客：http://www.zoutl.cn<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">styleObject</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;33px&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③绑定多个对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[style1,style2]&quot;</span>&gt;</span>LeDao的博客<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">style1</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;font-size&#x27;</span>:<span class="string">&#x27;33px&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">style2</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;font-weight&#x27;</span>:<span class="string">&#x27;bold&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>一个优秀的制作GIF动图的软件：ScreenToGif</title>
    <url>/187.html</url>
    <content><![CDATA[<h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p>官网：<a href="https://www.screentogif.com/">https://www.screentogif.com/</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>打开软件，选择录像机</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625003918.jpg" alt="img"></p>
<p>调整录屏窗口大小</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625003946.jpg" alt="img"></p>
<p>点击右下角的红色圆点开始录像</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625004017.jpg" alt="img"></p>
<p>点击右下角的蓝色正方形完成录像</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625004059.jpg" alt="img"></p>
<p>选择文件、另存为、保存即可得到gif动图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625004148.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js事件处理器</title>
    <url>/188.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>事件监听使用 v-on 指令</p>
<p>v-on:click点击事件，可以简写成@click</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>计数器：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter--&quot;</span>&gt;</span>减1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(number)&quot;</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;number2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;less(number2)&quot;</span>&gt;</span>减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">counter</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">number</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">number2</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">add</span>: <span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter += <span class="built_in">parseInt</span>(number);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">less</span>: <span class="function"><span class="keyword">function</span> (<span class="params">number2</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter -= <span class="built_in">parseInt</span>(number2);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625015442.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js表单</title>
    <url>/189.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>用 v-model 指令在表单控件元素上创建双向数据绑定</p>
<h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>info1:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;info1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容...&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 333px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>info2:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space: pre&quot;</span>&gt;</span>&#123;&#123;info2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;info2&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入多行文本...&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 333px;height: 222px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">info1</span>:<span class="string">&#x27;LeDao的博客:http://www.zoutl.cn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">info2</span>:<span class="string">&#x27;LeDao的博客:\r\nhttp://www.zoutl.cn&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625100507.jpg" alt="img"></p>
<h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Edge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Edge&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;Edge&quot;</span>&gt;</span>Edge<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Chrome&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span>Chrome<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前选中:<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;picked&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">picked</span>: <span class="string">&#x27;Edge&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625102029.jpg" alt="img"></p>
<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 200px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>单个复选框:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkValue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>&#123;&#123;checkValue ? &#x27;是&#x27; : &#x27;否&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>多个复选框:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Edge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Edge&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;browers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;Edge&quot;</span>&gt;</span>Edge<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Chrome&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;browers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span>Chrome<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Firefox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;browers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的浏览器:<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;browers&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">checkValue</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">browers</span>: []</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625103546.jpg" alt="img"></p>
<h3 id="select列表"><a href="#select列表" class="headerlink" title="select列表"></a>select列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 222px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的浏览器是:<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;mySelect&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;mySelect&quot;</span> <span class="attr">name</span>=<span class="string">&quot;browers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择一个浏览器<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Edge&quot;</span>&gt;</span>Edge<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span>Chrome<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">mySelect</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625105025.jpg" alt="img"></strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>常量</title>
    <url>/19.html</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>常量表示不能改变的数值</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h4><p>所有整数</p>
<h4 id="小数常量"><a href="#小数常量" class="headerlink" title="小数常量"></a>小数常量</h4><p>所有小数</p>
<h4 id="布尔（boolean）型常量"><a href="#布尔（boolean）型常量" class="headerlink" title="布尔（boolean）型常量"></a>布尔（boolean）型常量</h4><p>只有两个数值，true、false</p>
<h4 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h4><p>将一个数字字母或者符号用单引号（ ‘ ‘ ）标识，如：’a’</p>
<h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><p>将一个或者多个字符用双引号（””）标识，如：”hello world”、”a”、””（空字符串）。</p>
<h4 id="null常量"><a href="#null常量" class="headerlink" title="null常量"></a>null常量</h4><p>只有一个数值就是：null</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js遍历数组时获取对象的下标</title>
    <url>/190.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>v-for=”(value, index) in 数组名”</p>
<p>第一个参数表示遍历时的对象，第二个参数则代表下标（参数值可以根据自己的需求设置）</p>
<h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><p>使用了数组下标设置数组的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>总价：&#123;&#123;calculatePriceTotal&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, index) in snacks&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background: beige&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span>数组下标:&#123;&#123;index&#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>对象:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>编号:&#123;&#123;value.id&#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>名称:&#123;&#123;value.name&#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>价格:&#123;&#123;value.price&#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>数量:&#123;&#123;value.num&#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>当前商品总价：&#123;&#123;value.num * value.price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 5px&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value.num&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNum(index)&quot;</span>&gt;</span>加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;lessNum(index)&quot;</span>&gt;</span>减1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">snacks</span>: [</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;零食1&#x27;</span>, <span class="attr">price</span>: <span class="number">11</span>, <span class="attr">num</span>: <span class="number">3</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;零食2&#x27;</span>, <span class="attr">price</span>: <span class="number">5</span>, <span class="attr">num</span>: <span class="number">2</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;零食3&#x27;</span>, <span class="attr">price</span>: <span class="number">8</span>, <span class="attr">num</span>: <span class="number">6</span>&#125;</span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">addNum</span>: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.snacks[index].num++;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lessNum</span>: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.snacks[index].num &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.snacks[index].num--;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">calculatePriceTotal</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.snacks.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    total += <span class="built_in">parseInt</span>(<span class="built_in">this</span>.snacks[i].num) * <span class="built_in">parseInt</span>(<span class="built_in">this</span>.snacks[i].price);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> total;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625135845.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js组件</title>
    <url>/191.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Vue.js组件有全局组件和局部组件</p>
<h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>所有实例都能用，注册方法如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;myh1&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;h1 style=&quot;color: red&quot;&gt;我的全局组件:myh1&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><p>在实例选项中注册，组件只能在这个实例中使用，注册方法如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//局部组件</span></span><br><span class="line"><span class="keyword">let</span> Child = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;我的局部组件:Child&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Child2 = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;我的局部组件:Child2&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h3><p>创建一个js文件专门用于定义组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//全局组件</span><br><span class="line">Vue.component(&#x27;myh1&#x27;, &#123;</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>我的全局组件:myh1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">//局部组件</span><br><span class="line">let Child = &#123;</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的局部组件:Child<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span><br><span class="line">&#125;</span><br><span class="line">let Child2 = &#123;</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的局部组件:Child2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Vue实例使用组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/component.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">测试app1（只有全局组件myh1生效，因为Vue实例中没有使用任何局部组件）</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myh1</span>&gt;</span><span class="tag">&lt;/<span class="name">myh1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myh2</span>&gt;</span><span class="tag">&lt;/<span class="name">myh2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myh3</span>&gt;</span><span class="tag">&lt;/<span class="name">myh3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">测试app2（全局组件myh1和局部组件（Child，Child2）都生效）</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myh1</span>&gt;</span><span class="tag">&lt;/<span class="name">myh1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myh2</span>&gt;</span><span class="tag">&lt;/<span class="name">myh2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myh3</span>&gt;</span><span class="tag">&lt;/<span class="name">myh3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app1&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;myh2&#x27;</span>: Child,</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;myh3&#x27;</span>: Child2</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625151002.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>父组件向子组件传递数据</title>
    <url>/192.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>prop 是子组件用来接受父组件传递过来的数据的一个自定义属性</p>
<p>父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”</p>
<p>关于父组件和子组件：（下面的这段话中相同颜色代表同一组件）</p>
<p>我们将某段代码封装成一个组件，而这个组件又在另一个组件中被引入，而引入该封装的组件的组件叫做父组件（另一个组件），被引入的组件叫做子组件（这个组件）</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>传递静态数据<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-span1</span> <span class="attr">message11</span>=<span class="string">&quot;11&quot;</span> <span class="attr">message22</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-span1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&quot;my-span1&quot;, &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        //传递多个数据</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        props: [&#x27;message11&#x27;, &#x27;message22&#x27;],</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template: &#x27;<span class="tag">&lt;<span class="name">span</span>&gt;</span>message11=</span><span class="template-variable">&#123;&#123;<span class="name">message11</span>&#125;&#125;</span><span class="xml">,message22=</span><span class="template-variable">&#123;&#123;<span class="name">message22</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el: &#x27;#app1&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>传递动态数据<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    父组件内容:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;parentMessage&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    子组件内容:</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-span1</span> <span class="attr">v-bind:message2</span>=<span class="string">&quot;parentMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-span1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-span1&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//传递单个数据</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>: [<span class="string">&#x27;message2&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;span&gt;&#123;&#123;message2&#125;&#125;&lt;/span&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">parentMessage</span>: <span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a><strong>结果</strong></h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625194623.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 组件 - 自定义事件</title>
    <url>/193.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件</p>
<p>使用 $on(eventName) 监听事件</p>
<p>使用 $emit(eventName) 触发事件</p>
<p>父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件，以下实例中子组件已经和它外部完全解耦了，它所做的只是触发一个父组件关心的内部事件</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-button</span> <span class="attr">v-on:increment</span>=<span class="string">&quot;incrementTotal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-button</span> <span class="attr">v-on:increment</span>=<span class="string">&quot;incrementTotal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-button&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;incrementHandler&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;/button&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">incrementHandler</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter++;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;increment&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">total</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">incrementTotal</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.total++;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a><strong>结果</strong></h3><p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625201841.jpg" alt="img"></strong></p>
<h3 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a><strong>代码解读</strong></h3><p>点击按钮时，触发子组件内部的incrementHandler点击事件（当前按钮的标签值counter加1，触发父组件的子组件my-button外部的increment事件），increment事件即执行Vue实例的incrementTotal方法（total加1）</p>
<p>子组件内部：子组件的代码，例如上面的代码中子组件的内部就是&lt;button @click=”incrementHandler”&gt;&lt;/button&gt;</p>
<p>子组件的外部：&lt;子组件名称&gt;&lt;/子组件名称&gt;多出来的内容，例如上面的代码中子组件的外部就是v-on:increment=”incrementTotal”</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js自定义指令</title>
    <url>/194.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>除了默认设置的核心指令( v-model 和 v-show )，Vue 也允许注册自定义指令</p>
<p>自定义指令分为全局指令和局部指令</p>
<p>下面分别注册全局指令和局部指令，指令功能：在页面加载时，元素获得焦点</p>
<h3 id="全局指令"><a href="#全局指令" class="headerlink" title="全局指令"></a>全局指令</h3><p>每个实例都可以使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 444px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>页面加载时,input元素自动获取焦点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">elements</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            elements.focus();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="局部指令"><a href="#局部指令" class="headerlink" title="局部指令"></a>局部指令</h3><p>只能在注册局部指令的实例中使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 444px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>页面加载时,input元素自动获取焦点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">focus</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    el.focus();</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625211215.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 路由</title>
    <url>/195.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容，通过 Vue.js 可以实现多视图的单页Web应用</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-router/2.7.0/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-router/2.7.0/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/blog1&quot;</span>&gt;</span>第一篇博客<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/blog2&quot;</span>&gt;</span>第二篇博客<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 定义（路由）组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> blog1 = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;p style=&quot;color: blue&quot;&gt;现在是第一篇博客&lt;/p&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> blog2 = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;p style=&quot;color: red&quot;&gt;现在是第二篇博客&lt;/p&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 定义路由</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> routes = [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/blog1&#x27;</span>, <span class="attr">component</span>: blog1&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/blog2&#x27;</span>, <span class="attr">component</span>: blog2&#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> router = <span class="keyword">new</span> VueRouter(&#123;routes&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 4. 创建和挂载根实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        router</span></span><br><span class="line"><span class="javascript">    &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625213813.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot解决跨域问题</title>
    <url>/196.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>如果没有实现跨域，前后端分离项目中Ajax就无法返回数据，方法有两个：（推荐使用第二种）</p>
<ol>
<li>使用@CrossOrigin注解</li>
<li>新建一个配置类，实现WebMvcConfigurer的addCorsMappings方法</li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="使用-CrossOrigin注解"><a href="#使用-CrossOrigin注解" class="headerlink" title="使用@CrossOrigin注解"></a>使用@CrossOrigin注解</h4><p>Spring Boot解决跨域使用@CrossOrigin注解，该注解有两个参数：</p>
<ol>
<li>origins： 允许可访问的域列表</li>
<li>maxAge:准备响应前的缓存持续的最大时间（以秒为单位）</li>
</ol>
<blockquote>
<p>在指定类上方添加注解，整个类的方法都可以跨域访问</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625235520.jpg" alt="img"></p>
<blockquote>
<p>在指定方法上方添加注解，只有这个方法可以跨域访问</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210625235531.jpg" alt="img"></p>
<h4 id="新建跨域配置类"><a href="#新建跨域配置类" class="headerlink" title="新建跨域配置类"></a>新建跨域配置类</h4><p>新建一个配置类，实现WebMvcConfigurer的addCorsMappings方法（推荐使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现跨域</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-29 22:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js Ajax(axios)</title>
    <url>/197.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Vue.js 2.0版本推荐使用axios来完成ajax请求，axios是一个基于Promise的HTTP库，可以用在浏览器和node.js中，<code>推荐使用axios</code>，不推荐使用vue-resource</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="直接在页面引入"><a href="#直接在页面引入" class="headerlink" title="直接在页面引入"></a>直接在页面引入</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用命令安装"><a href="#使用命令安装" class="headerlink" title="使用命令安装"></a>使用命令安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save axios</span><br></pre></td></tr></table></figure>

<h3 id="get请求示例"><a href="#get请求示例" class="headerlink" title="get请求示例"></a>get请求示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-router/2.7.0/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;returnInfo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>总数量：&#123;&#123;getTotal&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in returnInfo&quot;</span>&gt;</span></span><br><span class="line">        编号：&#123;&#123;value.id&#125;&#125;，名称：&#123;&#123;value.name&#125;&#125;，数量：&#123;&#123;value.num&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addOne(index)&quot;</span>&gt;</span>加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;lessOne(index)&quot;</span>&gt;</span>减1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">returnInfo</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">total</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            axios</span></span><br><span class="line"><span class="javascript">                .get(<span class="string">&#x27;https://www.zoutl.cn/getFruitListJson&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="built_in">this</span>.returnInfo = response.data.rows))</span></span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//水果数量加1</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">addOne</span>: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.returnInfo[index].num++;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//水果数量减1</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">lessOne</span>: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.returnInfo[index].num &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.returnInfo[index].num--;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//计算水果总数</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">getTotal</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.returnInfo.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    total += <span class="built_in">this</span>.returnInfo[i].num;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> total;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626015304.jpg" alt="img"></p>
<h3 id="post请求示例"><a href="#post请求示例" class="headerlink" title="post请求示例"></a>post请求示例</h3><blockquote>
<p>直接在url中拼接要传递的数据</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-router/2.7.0/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20%;margin-top: 10%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入水果的信息:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    编号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruitId&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruitName&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    数量:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruitNum&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;submitData&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">fruitId</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fruitName</span>: <span class="string">&#x27;苹果&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fruitNum</span>: <span class="number">3</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">submitData</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                axios</span></span><br><span class="line"><span class="javascript">                    .post(<span class="string">&#x27;https://www.zoutl.cn/getFruitJson2?id=&#x27;</span> + <span class="built_in">this</span>.fruitId + <span class="string">&#x27;&amp;name=&#x27;</span> + <span class="built_in">this</span>.fruitName + <span class="string">&#x27;&amp;num=&#x27;</span> + <span class="built_in">this</span>.fruitNum + <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> id = response.data.id;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> name = response.data.name;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> num = response.data.num;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;编号:&quot;</span> + id + <span class="string">&quot;，名称:&quot;</span> + name + <span class="string">&quot;，数量:&quot;</span> + num);</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用URLSearchParams传递数据</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-router/2.7.0/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20%;margin-top: 10%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入水果的信息:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    编号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruitId&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruitName&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    数量:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruitNum&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;submitData&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">fruitId</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fruitName</span>: <span class="string">&#x27;苹果&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fruitNum</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">myInfo</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">submitData</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> param = <span class="keyword">new</span> URLSearchParams();</span></span><br><span class="line"><span class="javascript">                param.append(<span class="string">&quot;id&quot;</span>, <span class="built_in">this</span>.fruitId);</span></span><br><span class="line"><span class="javascript">                param.append(<span class="string">&quot;name&quot;</span>, <span class="built_in">this</span>.fruitName);</span></span><br><span class="line"><span class="javascript">                param.append(<span class="string">&quot;num&quot;</span>, <span class="built_in">this</span>.fruitNum);</span></span><br><span class="line"><span class="javascript">                axios</span></span><br><span class="line"><span class="javascript">                    .post(<span class="string">&#x27;https://www.zoutl.cn/getFruitJson2&#x27;</span>, param)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> id = response.data.id;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> name = response.data.name;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> num = response.data.num;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;编号:&quot;</span> + id + <span class="string">&quot;，名称:&quot;</span> + name + <span class="string">&quot;，数量:&quot;</span> + num);</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626032621.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js的事件处理器中Ajax请求无法通过this调用Vue实例的数据</title>
    <url>/198.html</url>
    <content><![CDATA[<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>Ajax请求外定义变量</p>
<p>let _this=this;</p>
<p>Ajax请求内使用该变量调用Vue实例的数据</p>
<p>_this.数据名=要修改的值</p>
<h3 id="错误的代码"><a href="#错误的代码" class="headerlink" title="错误的代码"></a>错误的代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-router/2.7.0/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20%;margin-top: 10%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>传递的数据:<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;myInfo&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入水果的信息:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    编号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruitId&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruitName&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    数量:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruitNum&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;submitData&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">fruitId</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fruitName</span>: <span class="string">&#x27;苹果&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fruitNum</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">myInfo</span>: <span class="string">&#x27;这里显示传递的数据&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">submitData</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                axios</span></span><br><span class="line"><span class="javascript">                    .post(<span class="string">&#x27;https://www.zoutl.cn/getFruitJson2?id=&#x27;</span> + <span class="built_in">this</span>.fruitId + <span class="string">&#x27;&amp;name=&#x27;</span> + <span class="built_in">this</span>.fruitName + <span class="string">&#x27;&amp;num=&#x27;</span> + <span class="built_in">this</span>.fruitNum + <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> id = response.data.id;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> name = response.data.name;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> num = response.data.num;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.myInfo = <span class="string">&quot;编号:&quot;</span> + id + <span class="string">&quot;，名称:&quot;</span> + name + <span class="string">&quot;，数量:&quot;</span> + num;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击提交按钮后，红色字体内容不改变</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626121839.jpg" alt="img"></p>
<h3 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h3><p>修改methods内的submitData方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">	<span class="attr">submitData</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">let</span> _this = <span class="built_in">this</span>;</span><br><span class="line">		axios</span><br><span class="line">			.post(<span class="string">&#x27;https://www.zoutl.cn/getFruitJson2?id=&#x27;</span> + <span class="built_in">this</span>.fruitId + <span class="string">&#x27;&amp;name=&#x27;</span> + <span class="built_in">this</span>.fruitName + <span class="string">&#x27;&amp;num=&#x27;</span> + <span class="built_in">this</span>.fruitNum + <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">			.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">let</span> id = response.data.id;</span><br><span class="line">				<span class="keyword">let</span> name = response.data.name;</span><br><span class="line">				<span class="keyword">let</span> num = response.data.num;</span><br><span class="line">				_this.myInfo = <span class="string">&quot;编号:&quot;</span> + id + <span class="string">&quot;，名称:&quot;</span> + name + <span class="string">&quot;，数量:&quot;</span> + num;</span><br><span class="line">			&#125;)</span><br><span class="line">			.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(error);</span><br><span class="line">			&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击提交按钮后，红色字体内容改变</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626122020.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js Ajax(vue-resource)</title>
    <url>/199.html</url>
    <content><![CDATA[<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;myInfo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;get()&quot;</span>&gt;</span>获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">myInfo</span>:<span class="string">&#x27;看这里&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> _this = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http</span></span><br><span class="line"><span class="javascript">                    .get(<span class="string">&#x27;https://www.zoutl.cn/getFruitListJson&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        _this.myInfo = result.data;</span></span><br><span class="line"><span class="javascript">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626125622.jpg" alt="img"></strong></p>
<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;myInfo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;post()&quot;</span>&gt;</span>获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">myInfo</span>: <span class="string">&#x27;看这里&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">post</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> _this = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http</span></span><br><span class="line"><span class="javascript">                    .post(<span class="string">&#x27;https://www.zoutl.cn/getFruitJson2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//传递的数据</span></span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="string">&#x27;香蕉&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">num</span>: <span class="number">6</span></span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//如果Web服务器无法处理编码为 application/json 的请求，可以启用 emulateJSON 选项</span></span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">emulateJSON</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    )</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        _this.myInfo = result.data;</span></span><br><span class="line"><span class="javascript">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626130632.jpg" alt="img"></strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Java环境配置</title>
    <url>/2.html</url>
    <content><![CDATA[<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>网上有很多教程，这里就不说明了</p>
<h3 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h3><p>右击”我的电脑”，点击”属性”，选择”高级系统设置”</p>
<h4 id="配置变量：JAVA-HOME"><a href="#配置变量：JAVA-HOME" class="headerlink" title="配置变量：JAVA_HOME"></a>配置变量：JAVA_HOME</h4><p>本地JDK安装路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">F:\java\jdk1.8.0_92</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010123055.jpg"></p>
<h4 id="配置变量：classpath"><a href="#配置变量：classpath" class="headerlink" title="配置变量：classpath"></a>配置变量：classpath</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar </span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010123126.jpg"></p>
<h4 id="配置变量：Path"><a href="#配置变量：Path" class="headerlink" title="配置变量：Path"></a>配置变量：Path</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">F:\java\jdk1.8.0_92\bin</span><br><span class="line">F:\java\jre\bin</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201020230001.jpg" alt="20201010123126.jpg"></p>
<h3 id="测试JDK是否安装成功"><a href="#测试JDK是否安装成功" class="headerlink" title="测试JDK是否安装成功"></a><strong>测试JDK是否安装成功</strong></h3><h4 id="打开CMD"><a href="#打开CMD" class="headerlink" title="打开CMD"></a>打开CMD</h4><p>快捷键：win+R，输入CMD</p>
<h4 id="输入下面的命令"><a href="#输入下面的命令" class="headerlink" title="输入下面的命令"></a>输入下面的命令</h4><p>键入命令: java -version、java、javac 几个命令，出现以下信息，说明环境变量配置成功；</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010124737.jpg" alt="20201010123126.jpg"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010124749.jpg" alt="20201010123126.jpg"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010124800.jpg" alt="20201010123126.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>进制</title>
    <url>/20.html</url>
    <content><![CDATA[<h3 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h3><p>我们平时所有的数字就是十进制</p>
<h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p>用 0 和 1 表示</p>
<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><h4 id="二进制转换成十进制"><a href="#二进制转换成十进制" class="headerlink" title="二进制转换成十进制"></a>二进制转换成十进制</h4><blockquote>
<p>整数二进制转化为十进制</p>
</blockquote>
<p>方法：“按权展开求和”，该方法的具体步骤是先将二进制的数写成加权系数展开式，而后根据十进制的加法规则进行求和</p>
<p>规律：个位上的数字的次数是0，十位上的数字的次数是1，……，依次递增，而十分位的数字的次数是-1，百分位上数字的次数是-2，……，依次递减</p>
<p>例如：二进制整数11001=1*2^4 + 1*2^3 + 0*2^2 + 0*2^1 + 1*2^0=25</p>
<blockquote>
<p>小数二进制转化为十进制</p>
</blockquote>
<p>二进制小bai数的位权从小数点向右依次为-1、-2、-3……，按照这个du位权计算就可以zhi得到十进制小数</p>
<p>例如：二进制小数0.1011=1*2^(-1) + 0*2^(-2) + 1*2^(-3) + 1*2^(-4)=0.6875</p>
<h4 id="十进制转换成二进制"><a href="#十进制转换成二进制" class="headerlink" title="十进制转换成二进制"></a>十进制转换成二进制</h4><p>一个十进制数转换为二进制数要分整数部分和小数部分分别转换，最后再组合到一起</p>
<blockquote>
<p>整数十进制转换成二进制</p>
</blockquote>
<p>整数部分采用 “除2取余，逆序排列”法。具体做法是：用2整除十进制整数，可以得到一个商和余数；再用2去除商，又会得到一个商和余数，如此进行，直到商为小于1时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次排列起来</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201013132701.jpg" alt="img"></p>
<blockquote>
<p>小数十进制转换成二进制</p>
</blockquote>
<p>小数部分要使用“乘 2 取整法”。即用十进制的小数乘以 2 并取走结果的整数(必是 0 或 1)，然后再用剩下的小数重复刚才的步骤，直到剩余的小数为 0 时停止，最后将每次得到的整数部分按先后顺序从左到右排列即得到所对应二进制小数。</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201013134023.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli脚手架新建和删除Vue项目</title>
    <url>/201.html</url>
    <content><![CDATA[<h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p>主要看vue-cli的版本，如果版本是2.x，那么创建项目的命令为<code>vue init webpack 项目名称</code>；如果版本是3.x及以上，那么创建项目的命令为<code>vue create 项目名称</code></p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Node.js</td>
<td align="center">14.17.1</td>
</tr>
<tr>
<td align="center">npm</td>
<td align="center">6.14.13</td>
</tr>
<tr>
<td align="center">vue-cli</td>
<td align="center">2.9.6</td>
</tr>
</tbody></table>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>在 Vue 项目存储文件夹中打开CMD，输入命令：<code>vue init webpack vue_demo</code>，vue_demo 是项目名称，然后进行一些配置</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-06%20104020.png"></p>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><h4 id="项目名称"><a href="#项目名称" class="headerlink" title="项目名称"></a>项目名称</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/202237_090705_1646615226.png"></p>
<h4 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307091149551.png" alt="image-20220307091149551"></p>
<h4 id="作者信息"><a href="#作者信息" class="headerlink" title="作者信息"></a>作者信息</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307091418406.png" alt="image-20220307091418406"></p>
<h4 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307091631999.png" alt="image-20220307091631999"></p>
<h4 id="是否安装vue-router"><a href="#是否安装vue-router" class="headerlink" title="是否安装vue-router"></a>是否安装vue-router</h4><p>现在不安装的话，后期可以在项目中安装</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307091923533.png" alt="image-20220307091923533"></p>
<h4 id="使用ESLint"><a href="#使用ESLint" class="headerlink" title="使用ESLint"></a>使用ESLint</h4><p>ESLint是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码，<font color="#dd0000">建议不使用</font></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307092303480.png" alt="image-20220307092303480"></p>
<h4 id="安装单元测试"><a href="#安装单元测试" class="headerlink" title="安装单元测试"></a>安装单元测试</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307092422569.png" alt="image-20220307092422569"></p>
<h4 id="安装E2E测试框架NightWatch"><a href="#安装E2E测试框架NightWatch" class="headerlink" title="安装E2E测试框架NightWatch"></a>安装E2E测试框架NightWatch</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307092548041.png" alt="image-20220307092548041"></p>
<h4 id="选择包管理工具"><a href="#选择包管理工具" class="headerlink" title="选择包管理工具"></a>选择包管理工具</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307092719191.png" alt="image-20220307092719191"></p>
<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p>打开package.json文件，点击第9行左边的启动按钮，选择第一个选项启动即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226203527215.png" alt="image-20220226203527215"></p>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>打开运行信息的地址即可访问项目，出现以下页面说明成功运行</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626151925.jpg" alt="img"></p>
<p>要停止运行，使用快捷键CTRL+C，或者点击IDE的停止按钮</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-06%20104713.jpg"></p>
<h3 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h3><p>修改端口为80，修改 config 文件夹的 index.js，<code>port:8080</code>改为<code>port:80</code></p>
<p>让项目启动时自动打开浏览器，修改 config 文件夹的 index.js，<code>autoOpenBrower:false</code>改为<code>autoOpenBrower:true</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626151833.jpg" alt="img"></p>
<h3 id="删除项目"><a href="#删除项目" class="headerlink" title="删除项目"></a>删除项目</h3><p>直接删除对应文件夹即可</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果一直卡住在<code>/ fetchMetadata: sill pacote range manifest for</code>，那就更换成淘宝的源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>查看设置结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220329180906559.png" alt="image-20220329180906559"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>安装vue-cli脚手架</title>
    <url>/200.html</url>
    <content><![CDATA[<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>官网：<a href="https://nodejs.org/">https://nodejs.org</a></p>
<p>下载第一个稳定版本，点击安装文件一直下一步即可（可自己选择安装路径）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626143355.jpg" alt="img"></p>
<p>检验是否安装成功，分别输入命令<code>node --version</code>或<code>node -V</code>、<code>npm -v</code>都可以看到版本号说明Node.js安装完成</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626143404.jpg" alt="img"></p>
<h3 id="安装vue-cli脚手架"><a href="#安装vue-cli脚手架" class="headerlink" title="安装vue-cli脚手架"></a>安装vue-cli脚手架</h3><p>打开CMD，输入下面命令安装，如果报错且报错信息为<font color="#dd0000">The operation was rejected by your operating system</font>，就以管理员身份运行CMD，再次安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>等待安装完成，输入命令：<code>vue -V</code>，看到版本号说明脚手架安装完成</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626143413.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>基于vue-cli搭建自己的项目</title>
    <url>/202.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在src/components下新建一个HelloWorld.vue文件，每个.vue文件都包括三个部分：&lt;template&gt;模版代码块，&lt;script&gt;是js代码块，&lt;style&gt;是样式代码块，其中如果&lt;style&gt;使用了scoped属性（让当前组件的样式不会修改到其它地方的样式，在父组件中是不能直接修改子组件的样式的，需要在父组件中使用vue的深度作用选择器），该样式只在本.vue文件下生效</p>
<h3 id="HelloWolrd-vue"><a href="#HelloWolrd-vue" class="headerlink" title="HelloWolrd.vue"></a>HelloWolrd.vue</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>&#123;&#123; info &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">info</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改App-vue"><a href="#修改App-vue" class="headerlink" title="修改App.vue"></a>修改App.vue</h3><p>删除App.vue的全部代码，重写，在&lt;template&gt;中使用组件，&lt;script&gt;中引入组件，&lt;style&gt;中写样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld&#x27;</span><span class="comment">//引入组件HelloWorld.vue</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//映射组件标签,可以写成HelloWorld:HelloWorld,如果文件名和组件名一样那么可简写成HelloWorld</span></span></span><br><span class="line"><span class="javascript">    HelloWorld</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改main-js"><a href="#修改main-js" class="headerlink" title="修改main.js"></a>修改main.js</h3><p>src下的main.js 这个是项目入口配置文件，代码也删除重写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">入口js:创建实例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;App&gt;&lt;/App&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626215741.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>基于vue-cli安装与卸载Element UI</title>
    <url>/203.html</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h4><p>一共有三个方法：</p>
<ol>
<li>使用npm命令</li>
<li>使用cnpm命令</li>
<li>在package.json中添加</li>
</ol>
<h4 id="使用npm命令"><a href="#使用npm命令" class="headerlink" title="使用npm命令"></a>使用npm命令</h4><p>有三个地方可以执行npm命令</p>
<ol>
<li>使用 CMD 命令打开项目文件夹后</li>
<li>使用 Git Bash 命令打开项目文件夹后</li>
<li>WebStorm 中使用 Terminal 命令窗口</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<h4 id="使用cnpm命令"><a href="#使用cnpm命令" class="headerlink" title="使用cnpm命令"></a>使用cnpm命令</h4><p>cnpm 是淘宝版 npm，如果因为网络原因无法使用 npm 命令，那么就可以使用 cnpm 命令，cnpm 安装和卸载 Element UI 的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">cnpm i element-ui -S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">cnpm uninstall element-ui</span><br></pre></td></tr></table></figure>

<h4 id="在package-json中添加"><a href="#在package-json中添加" class="headerlink" title="在package.json中添加"></a>在package.json中添加</h4><ol>
<li><p>打开 package.js 文件，找到 devDependencies 并在最后加上<code>&quot;element-ui&quot;: &quot;^2.15.6&quot;</code>，多个依赖之间用<code>英文逗号,</code>隔开</p>
</li>
<li><p>通过 npm install 或者 cnpm install 命令进行安装</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">入口js:创建实例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span> <span class="comment">//新添加</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span> <span class="comment">//新添加，避免后期打包样式不同，要放在import App from &#x27;./App&#x27;;之前</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line">Vue.use(ElementUI)<span class="comment">//新添加</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;App&gt;&lt;/App&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>到此，Element UI安装成功</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>在 src/main.js 中添加以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>

<p>添加的位置如下面代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">入口js:创建实例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span> <span class="comment">//新添加</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span> <span class="comment">//新添加，避免后期打包样式不同，要放在import App from &#x27;./App&#x27;;之前</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line">Vue.use(ElementUI)<span class="comment">//新添加</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;App&gt;&lt;/App&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>新建ElementUI.vue，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 60%;margin-left: 20%;margin-top: 200px&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;ElementUI&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">tableData</span>: [&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>App.vue代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ElementUI</span>&gt;</span><span class="tag">&lt;/<span class="name">ElementUI</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;./components/ElementUI&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    ElementUI</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210626233935.jpg" alt="img"></p>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>有三个地方可以执行npm命令</p>
<ol>
<li>使用 CMD 命令打开项目文件夹后</li>
<li>使用 Git Bash 命令打开项目文件夹后</li>
<li>WebStorm 中使用 Terminal 命令窗口</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall element-ui</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Element UI</tag>
      </tags>
  </entry>
  <entry>
    <title>使用动态组件实现组件切换</title>
    <url>/204.html</url>
    <content><![CDATA[<h3 id="定义两个组件"><a href="#定义两个组件" class="headerlink" title="定义两个组件"></a>定义两个组件</h3><p>Student.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 10px&quot;</span>&gt;</span>当前是学生表<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;students&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 60%;margin-left: 20%;margin-top: 20px&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">students</span>:[</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;小花&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;雪莉&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Teacher.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 10px&quot;</span>&gt;</span>当前是教师表<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;teachers&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 60%;margin-left: 20%;margin-top: 20px&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;Teacher&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">teachers</span>:[</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;Sherry&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;Mary&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在App-vue中引入上面两个组件"><a href="#在App-vue中引入上面两个组件" class="headerlink" title="在App.vue中引入上面两个组件"></a>在App.vue中引入上面两个组件</h3><p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;currentCom=&#x27;Student&#x27;&quot;</span>&gt;</span>查看学生<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;currentCom=&#x27;Teacher&#x27;&quot;</span>&gt;</span>查看教师<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentCom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Student <span class="keyword">from</span> <span class="string">&#x27;./components/Student&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Teacher <span class="keyword">from</span> <span class="string">&#x27;./components/Teacher&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">currentCom</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    Student,</span></span><br><span class="line"><span class="javascript">    Teacher</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210627003748.jpg" alt="img"></strong></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>本实例使用了Element UI，请先安装Element UI：<a href="https://blog.zoutl.cn/203.html">基于 vue-cli 安装与卸载 Element UI | LeDao 的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>使用路由实现组件切换</title>
    <url>/205.html</url>
    <content><![CDATA[<blockquote>
<p>新建项目时选择自动下载vue-router</p>
</blockquote>
<h3 id="修改src-main-js"><a href="#修改src-main-js" class="headerlink" title="修改src/main.js"></a>修改src/main.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span> <span class="comment">//新添加</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span> <span class="comment">//新添加，避免后期打包样式不同，要放在import App from &#x27;./App&#x27;;之前</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(ElementUI)<span class="comment">//新添加</span></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  <span class="attr">components</span>: &#123;App&#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="修改src-router-index-js"><a href="#修改src-router-index-js" class="headerlink" title="修改src/router/index.js"></a>修改src/router/index.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> Student <span class="keyword">from</span> <span class="string">&quot;../components/Student&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Teacher <span class="keyword">from</span> <span class="string">&quot;../components/Teacher&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="comment">//定义路由地址和组件</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/Student&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Student</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/Teacher&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Teacher</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/Student&quot;</span>&gt;</span>学生<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/Teacher&quot;</span>&gt;</span>教师<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Student-Vue"><a href="#Student-Vue" class="headerlink" title="Student.Vue"></a>Student.Vue</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 10px&quot;</span>&gt;</span>当前是学生表<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;students&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 60%;margin-left: 20%;margin-top: 20px&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">students</span>:[</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;小花&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;雪莉&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Teacher-vue"><a href="#Teacher-vue" class="headerlink" title="Teacher.vue"></a>Teacher.vue</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 10px&quot;</span>&gt;</span>当前是教师表<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;teachers&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 60%;margin-left: 20%;margin-top: 20px&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;Teacher&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">teachers</span>:[</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;Sherry&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>:<span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="string">&#x27;Mary&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210627020527.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Element UI引入第三方图标</title>
    <url>/206.html</url>
    <content><![CDATA[<blockquote>
<p>Element UI自带的图标数量太少了,并不能满足我们的开发需求</p>
</blockquote>
<h3 id="第三方图标地址"><a href="#第三方图标地址" class="headerlink" title="第三方图标地址"></a>第三方图标地址</h3><p>链接为：<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><blockquote>
<p>查找需要的图标，添加入库</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210628153045.jpg" alt="img"></p>
<blockquote>
<p>点击右上角的购物车图标按钮，添加到项目，没有项目就新建</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210628153128.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210628153137.jpg" alt="img"></p>
<blockquote>
<p>修改项目设置，可以给图标加一个前缀</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210628153346.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210628153401.jpg" alt="img"></p>
<blockquote>
<p>修改图片（样式、名称等）</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210628153521.jpg" alt="img"></p>
<blockquote>
<p>选择Font Class，下载至本地</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210628153607.jpg" alt="img"></p>
<blockquote>
<p>将下载的压缩包解压后，将里面的文件复制到项目中</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210628153740.jpg" alt="img"></p>
<blockquote>
<p>在项目中引用</p>
</blockquote>
<p>在<code>/src/main.js</code>中引入即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/myicon/iconfont.css&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Element UI</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot+Mybatis使用Element UI分页</title>
    <url>/207.html</url>
    <content><![CDATA[<blockquote>
<p>前端向后端发送的数据有当前页、每页记录数，后端向前端发送的数据有查询到的数据集合、数据总记录数（满足查询条件的全部数据的总记录数）</p>
</blockquote>
<h3 id="前端分页代码"><a href="#前端分页代码" class="headerlink" title="前端分页代码"></a>前端分页代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">      <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;margin-top: 8px&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">background</span></span></span><br><span class="line"><span class="tag">      <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:current-page.sync</span>=<span class="string">&quot;pagination.page&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page-size.sync</span>=<span class="string">&quot;pagination.size&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:total</span>=<span class="string">&quot;pagination.count&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="分页属性"><a href="#分页属性" class="headerlink" title="分页属性"></a>分页属性</h3><p>包括当前页，每页记录数，数据总记录数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pagination: &#123;</span><br><span class="line">  <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">size</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新当前页的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//刷新当前页的值</span></span><br><span class="line"><span class="function"><span class="title">handleCurrentChange</span>(<span class="params">page</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.pagination.page = page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="请求后台"><a href="#请求后台" class="headerlink" title="请求后台"></a>请求后台</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get(<span class="string">&#x27;http://localhost/paper/getListFindByUserId?userId=&#x27;</span> + sessionStorage.getItem(<span class="string">&quot;userId&quot;</span>) + <span class="string">&#x27;&amp;page=&#x27;</span> + <span class="built_in">this</span>.pagination.page + <span class="string">&#x27;&amp;size=&#x27;</span> + <span class="built_in">this</span>.pagination.size)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="built_in">this</span>.myPaper = response.data.rows, <span class="built_in">this</span>.pagination.count = response.data.total))</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="mapper-xml代码"><a href="#mapper-xml代码" class="headerlink" title="mapper.xml代码"></a>mapper.xml代码</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;paperResult&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from t_paper</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userId != null&quot;</span>&gt;</span></span><br><span class="line">			and userId = #&#123;userId&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">	order by id desc</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;start != null and size != null&quot;</span>&gt;</span></span><br><span class="line">		limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">	select count(*)</span><br><span class="line">	from t_paper</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userId != null&quot;</span>&gt;</span></span><br><span class="line">			and userId = #&#123;userId&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="请求的后端方法"><a href="#请求的后端方法" class="headerlink" title="请求的后端方法"></a>请求的后端方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id获取试卷(分页)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getListFindByUserId&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">getListFindByUserId</span><span class="params">(Integer userId, <span class="meta">@RequestParam(value = &quot;page&quot;,required = false)</span>Integer page, <span class="meta">@RequestParam(value = &quot;size&quot;,required = false)</span>Integer size)</span> </span>&#123;</span><br><span class="line">	PageBean pageBean = <span class="keyword">new</span> PageBean(page, size);</span><br><span class="line">	Map resultMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">	Map map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">	map.put(<span class="string">&quot;userId&quot;</span>, userId);</span><br><span class="line">	map.put(<span class="string">&quot;start&quot;</span>, pageBean.getStart());</span><br><span class="line">	map.put(<span class="string">&quot;size&quot;</span>, pageBean.getPageSize());</span><br><span class="line">	List&lt;Paper&gt; paperList = paperService.list(map);</span><br><span class="line">	resultMap.put(<span class="string">&quot;total&quot;</span>, paperService.getCount(map));</span><br><span class="line">	resultMap.put(<span class="string">&quot;rows&quot;</span>, paperList);</span><br><span class="line">	<span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分页Model类"><a href="#分页Model类" class="headerlink" title="分页Model类"></a>分页Model类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页Model类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-09-10 21:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第几页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> page;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 起始页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageBean</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.page = page;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(<span class="keyword">int</span> page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.page = page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (page - <span class="number">1</span>) * pageSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210701223215.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>MyBatis</tag>
        <tag>Element UI</tag>
      </tags>
  </entry>
  <entry>
    <title>在线考试系统</title>
    <url>/208.html</url>
    <content><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><h4 id="GitHub地址"><a href="#GitHub地址" class="headerlink" title="GitHub地址"></a>GitHub地址</h4><p>前端代码地址：<a href="https://github.com/a6678696/ExamSystem2">https://github.com/a6678696/ExamSystem2</a></p>
<p>后端代码地址：<a href="https://github.com/a6678696/ExamSystem">https://github.com/a6678696/ExamSystem</a></p>
<h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><p>本项目为前后端分离项目，使用的技术有：Spring Boot、Mybatis、MySQL5.6、Vue.js、Element UI</p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="考生功能"><a href="#考生功能" class="headerlink" title="考生功能"></a>考生功能</h4><p>注册、登录、在线考试（交卷、强制交卷、自动交卷）、查看成绩以及试卷详情、修改密码、注销登录</p>
<h4 id="教师功能"><a href="#教师功能" class="headerlink" title="教师功能"></a>教师功能</h4><p>登录、发布试题（单选题和填空题）、查看全部试题（包括其他教师发布的试题）、我的试题管理（增删改查）、查看全部学生成绩、修改密码、注销登录</p>
<h4 id="管理员功能"><a href="#管理员功能" class="headerlink" title="管理员功能"></a>管理员功能</h4><p>和教师的功能一样，但是多了用户管理（添加、修改、查看用户信息）、全部试题管理、科目管理</p>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="考生"><a href="#考生" class="headerlink" title="考生"></a>考生</h4><h5 id="考生注册"><a href="#考生注册" class="headerlink" title="考生注册"></a>考生注册</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221116152550893.png" alt="image-20221116152550893"></p>
<h5 id="考生登录"><a href="#考生登录" class="headerlink" title="考生登录"></a>考生登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221116152944537.png" alt="image-20221116152944537"></p>
<h5 id="考生界面"><a href="#考生界面" class="headerlink" title="考生界面"></a>考生界面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702045121.jpg" alt="img"></p>
<h5 id="选择试题类型"><a href="#选择试题类型" class="headerlink" title="选择试题类型"></a>选择试题类型</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702044642.jpg" alt="img"></p>
<h5 id="考生考试"><a href="#考生考试" class="headerlink" title="考生考试"></a>考生考试</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702044652.jpg" alt="img"></p>
<h5 id="考生查看成绩"><a href="#考生查看成绩" class="headerlink" title="考生查看成绩"></a>考生查看成绩</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702044705.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702045408.jpg" alt="img"></p>
<h5 id="考生修改密码"><a href="#考生修改密码" class="headerlink" title="考生修改密码"></a>考生修改密码</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702044718.jpg" alt="img"></p>
<h5 id="考生注销登录"><a href="#考生注销登录" class="headerlink" title="考生注销登录"></a>考生注销登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702044731.jpg" alt="img"></p>
<h4 id="教师"><a href="#教师" class="headerlink" title="教师"></a>教师</h4><h5 id="教师登录"><a href="#教师登录" class="headerlink" title="教师登录"></a>教师登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050134.jpg" alt="img"></p>
<h5 id="教师界面"><a href="#教师界面" class="headerlink" title="教师界面"></a>教师界面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050148.jpg" alt="img"></p>
<h5 id="教师查看学生成绩"><a href="#教师查看学生成绩" class="headerlink" title="教师查看学生成绩"></a>教师查看学生成绩</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050207.jpg" alt="img"></p>
<h5 id="教师添加试题"><a href="#教师添加试题" class="headerlink" title="教师添加试题"></a>教师添加试题</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050225.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050234.jpg" alt="img"></p>
<h5 id="教师查看全部试题"><a href="#教师查看全部试题" class="headerlink" title="教师查看全部试题"></a>教师查看全部试题</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050246.jpg" alt="img"></p>
<h5 id="教师管理我的试题"><a href="#教师管理我的试题" class="headerlink" title="教师管理我的试题"></a>教师管理我的试题</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050255.jpg" alt="img"></p>
<h5 id="教师修改密码"><a href="#教师修改密码" class="headerlink" title="教师修改密码"></a>教师修改密码</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050306.jpg" alt="img"></p>
<h5 id="教师注销登录"><a href="#教师注销登录" class="headerlink" title="教师注销登录"></a>教师注销登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050316.jpg" alt="img"></p>
<h4 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h4><h5 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050658.jpg" alt="img"></p>
<h5 id="管理员界面"><a href="#管理员界面" class="headerlink" title="管理员界面"></a>管理员界面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210703033842.jpg" alt="img"></p>
<h5 id="科目管理"><a href="#科目管理" class="headerlink" title="科目管理"></a>科目管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210703033826.jpg" alt="img"></p>
<h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050717.jpg" alt="img"></p>
<h5 id="全部试题管理"><a href="#全部试题管理" class="headerlink" title="全部试题管理"></a>全部试题管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210702050728.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>在本地IDE部署本项目的步骤查看博客：<a href="https://blog.zoutl.cn/453.html">前后端分离项目在本地IDE部署步骤 | LeDao的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中四种循环语句</title>
    <url>/209.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java中循环有while、do…while…，for，增强for</p>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	System.out.println(<span class="string">&quot;请输入一个数字:&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">		System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="do…while…"><a href="#do…while…" class="headerlink" title="do…while…"></a>do…while…</h3><p>即使循环条件不满足，也至少执行一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">		i++;</span><br><span class="line">	&#125; <span class="keyword">while</span> (i &lt; <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">		System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h3><p>一般用于遍历数组和集合，数据类型为数组或集合的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>[] intArr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i : intArr) &#123;</span><br><span class="line">		System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>idea将Spring Boot项目打包成war包</title>
    <url>/21.html</url>
    <content><![CDATA[<h3 id="修改pom-xml文件"><a href="#修改pom-xml文件" class="headerlink" title="修改pom.xml文件"></a>修改pom.xml文件</h3><h4 id="修改打包方式"><a href="#修改打包方式" class="headerlink" title="修改打包方式"></a>修改打包方式</h4><p>修改pom.xml的packaging节点改 war</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015115645.jpg" alt="img"></p>
<h4 id="排除Tomcat容器"><a href="#排除Tomcat容器" class="headerlink" title="排除Tomcat容器"></a>排除Tomcat容器</h4><p>排除Spring Boot内置的Tomcat容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--移除嵌入式tomcat插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--移除嵌入式tomcat插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改finalName节点"><a href="#修改finalName节点" class="headerlink" title="修改finalName节点"></a>修改finalName节点</h4><p>修改打包后的war包名（finalName节点）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>JXC<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="实现configure方法"><a href="#实现configure方法" class="headerlink" title="实现configure方法"></a>实现configure方法</h3><p>启动类继承SpringBootServletInitializer类并实现configure方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.ledao.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyblogApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(MyblogApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyblogApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>用idea打包，点击idea的Maven图形界面的package</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201015134809.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>cmd命令运行一个Java文件</title>
    <url>/210.html</url>
    <content><![CDATA[<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><p>名称为HelloWorld.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用javac命令"><a href="#使用javac命令" class="headerlink" title="使用javac命令"></a>使用javac命令</h3><p>将.java文件编译成.class字节码文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure>

<h3 id="使用java命令"><a href="#使用java命令" class="headerlink" title="使用java命令"></a>使用java命令</h3><p>运行一个已编译的Java程序，参数是类名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210707092300.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Java自定义异常</title>
    <url>/211.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>可以继承的父类有Throwable、Exception、RunTimeException，一般继承后两个，如果不要求调用者一定要处理抛出的异常，就继承RuntimeException</p>
<h3 id="自定义异常类构造方法"><a href="#自定义异常类构造方法" class="headerlink" title="自定义异常类构造方法"></a>自定义异常类构造方法</h3><p>idea可以自动生成，Alt+Insert快捷键，选择构造方法</p>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><h4 id="MyException-java"><a href="#MyException-java" class="headerlink" title="MyException.java"></a>MyException.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-07 10:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, Throwable cause, <span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="People-java"><a href="#People-java" class="headerlink" title="People.java"></a>People.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-07 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;男&quot;</span>.equals(sex) || <span class="string">&quot;女&quot;</span>.equals(sex)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;性别必须是男或女&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People people = <span class="keyword">new</span> People();</span><br><span class="line">        people.setSex(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210707105859.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.cnblogs.com/schangxiang/p/11179314.html">Java自定义异常 - 拭不去の泪痕 - 博客园</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>创建线程的四种方式</title>
    <url>/212.html</url>
    <content><![CDATA[<h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>通过继承Thread类，并重写它的run方法，我们就可以创建一个线程，然后通过start方法开启线程（开启线程前的代码会先执行完）。不要使用run方法，因为使用run方法会把线程当作普通方法使用，就不是多线程运行了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-09 22:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现-Runnable接口"><a href="#实现-Runnable接口" class="headerlink" title="实现 Runnable接口"></a>实现 Runnable接口</h3><p>通过实现Runnable，并实现run方法，也可以创建一个线程，这种方法比继承Thread类好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-09 22:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现-Callable-接口"><a href="#实现-Callable-接口" class="headerlink" title="实现 Callable 接口"></a>实现 Callable 接口</h3><p>实现Callable接口，并结合Future实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-09 22:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        FutureTask task = <span class="keyword">new</span> FutureTask(<span class="keyword">new</span> MyThread());</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">        String result = (String) task.get();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过线程池创建线程"><a href="#通过线程池创建线程" class="headerlink" title="通过线程池创建线程"></a>通过线程池创建线程</h3><p>用JDK自带的Executors来创建线程池对象（推荐使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.thread.ThreadFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-25 13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;玩游戏---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取系统处理器个数，作为线程池数量</span></span><br><span class="line">        <span class="keyword">int</span> nThreads = Runtime.getRuntime().availableProcessors();</span><br><span class="line">        System.out.println(nThreads);</span><br><span class="line">        ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">                .setNamePrefix(<span class="string">&quot;demo-pool-%d&quot;</span>).build();</span><br><span class="line">        ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(nThreads,</span><br><span class="line">                <span class="number">200</span>,</span><br><span class="line">                <span class="number">0L</span>,</span><br><span class="line">                TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">1024</span>),</span><br><span class="line">                namedThreadFactory,</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> ThreadTest3());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学习---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的ThreadPoolExecutor构造方法的一些参数说明如下（按顺序）：</p>
<ol>
<li><code>corePoolSize</code> - 即使空闲时仍保留在池中的线程数，除非设置 allowCoreThreadTimeOut </li>
<li><code>maximumPoolSize</code> - 池中允许的最大线程数 </li>
<li><code>keepAliveTime</code> - 当线程数大于内核时，这是多余的空闲线程在终止前等待新任务的最大时间</li>
<li><code>unit</code> - keepAliveTime参数的时间单位 </li>
<li><code>workQueue</code> - 用于在执行任务之前使用的队列。 这个队列将仅保存execute方法提交的Runnable任务 </li>
<li><code>threadFactory</code> - 执行程序创建新线程时使用的工厂 </li>
<li><code>handler</code> - 执行被阻止时使用的处理程序，因为达到线程限制和队列容量</li>
</ol>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://segmentfault.com/a/1190000037589073">面试官问我：创建线程有几种方式？我笑了 - SegmentFault 思否</a></p>
<p>更多线程池的使用查看：<a href="https://www.cnblogs.com/vipstone/p/14149065.html">线程池的7种创建方式，强烈推荐你用它… - Java中文社群 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis使用分页插件PageHelper</title>
    <url>/213.html</url>
    <content><![CDATA[<blockquote>
<p>GitHub完整代码地址：<a href="https://github.com/a6678696/MyBatisPageHelperTest">https://github.com/a6678696/MyBatisPageHelperTest</a></p>
</blockquote>
<h3 id="pom-xml引入分页插件"><a href="#pom-xml引入分页插件" class="headerlink" title="pom.xml引入分页插件"></a>pom.xml引入分页插件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">helperDialect:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure>

<h3 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-13 23:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a>UserMapper.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-13 23:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找全部用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--suppress ALL--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ledao.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;nickName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;nickName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserResult&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-13 23:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找全部用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">PageInfo <span class="title">findAll</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.ledao.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-13 23:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo <span class="title">findAll</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(page, size);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.findAll();</span><br><span class="line">        PageInfo result = <span class="keyword">new</span> PageInfo&lt;&gt;(userList);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-14 0:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo <span class="title">findAll</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll(page, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>浏览器地址栏输入<a href="http://localhost/user/findAll?page=3&amp;size=4">http://localhost/user/findAll?page=3&amp;size=4</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210714010421.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器格式化JSON数据插件</title>
    <url>/214.html</url>
    <content><![CDATA[<h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><ol>
<li><p>Edge直接安装</p>
<p>微软Edge外接程序下载地址：<a href="https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home">https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home</a></p>
<p>搜索JSONview并安装即可</p>
</li>
<li><p>通过下载插件包安装</p>
<p>下载地址：<a href="https://www.extfans.com/productivity/cgphfnglahpambfhocchajalljaeegef/">https://www.extfans.com/productivity/cgphfnglahpambfhocchajalljaeegef/</a></p>
</li>
</ol>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote>
<p>使用插件前</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210714015811.jpg" alt="img"></p>
<blockquote>
<p>使用插件后</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210714015821.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>将JSON字符串转为list</title>
    <url>/215.html</url>
    <content><![CDATA[<h3 id="引入hutool依赖"><a href="#引入hutool依赖" class="headerlink" title="引入hutool依赖"></a>引入hutool依赖</h3><p>使用到该依赖的HTTP请求方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTTP请求的地址为：<a href="http://www.zoutl.cn/getFruitListJson">http://www.zoutl.cn/getFruitListJson</a> ，返回的结果如下图（下面四种方法只能处理中括号[]以及其中的内容，所以要对HTTP请求返回的结果进行截取处理）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210718040651.jpg" alt="img"></p>
<h3 id="Fruit实体类"><a href="#Fruit实体类" class="headerlink" title="Fruit实体类"></a>Fruit实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-17 22:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用GSON"><a href="#使用GSON" class="headerlink" title="使用GSON"></a>使用GSON</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.TypeToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//http请求获取json字符串</span></span><br><span class="line">        String str = HttpUtil.get(<span class="string">&quot;https://www.zoutl.cn/getFruitListJson&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> start = str.indexOf(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> end = str.indexOf(<span class="string">&quot;]&quot;</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//截取字符串</span></span><br><span class="line">        str = str.substring(start, end);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//转为list</span></span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        List&lt;Fruit&gt; fruitList = gson.fromJson(str, <span class="keyword">new</span> TypeToken&lt;List&lt;Fruit&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">        <span class="keyword">for</span> (Fruit fruit : fruitList) &#123;</span><br><span class="line">            System.out.println(fruit.getId() + <span class="string">&quot;,&quot;</span> + fruit.getName() + <span class="string">&quot;,&quot;</span> + fruit.getNum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用FastJSON"><a href="#使用FastJSON" class="headerlink" title="使用FastJSON"></a>使用FastJSON</h3><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java代码-1"><a href="#Java代码-1" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//http请求获取json字符串</span></span><br><span class="line">        String str = HttpUtil.get(<span class="string">&quot;https://www.zoutl.cn/getFruitListJson&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> start = str.indexOf(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> end = str.indexOf(<span class="string">&quot;]&quot;</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//截取字符串</span></span><br><span class="line">        str = str.substring(start, end);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//转为list</span></span><br><span class="line">        List&lt;Fruit&gt; fruitList = JSON.parseArray(str, Fruit.class);</span><br><span class="line">        <span class="keyword">for</span> (Fruit fruit : fruitList) &#123;</span><br><span class="line">            System.out.println(fruit.getId() + <span class="string">&quot;,&quot;</span> + fruit.getName() + <span class="string">&quot;,&quot;</span> + fruit.getNum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用JackJSON"><a href="#使用JackJSON" class="headerlink" title="使用JackJSON"></a>使用JackJSON</h3><h4 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java代码-2"><a href="#Java代码-2" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//http请求获取json字符串</span></span><br><span class="line">        String str = HttpUtil.get(<span class="string">&quot;https://www.zoutl.cn/getFruitListJson&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> start = str.indexOf(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> end = str.indexOf(<span class="string">&quot;]&quot;</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//截取字符串</span></span><br><span class="line">        str = str.substring(start, end);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//转为list</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        List&lt;Fruit&gt; fruitList = objectMapper.readValue(str, <span class="keyword">new</span> TypeReference&lt;List&lt;Fruit&gt;&gt;()&#123;&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Fruit fruit : fruitList) &#123;</span><br><span class="line">            System.out.println(fruit.getId() + <span class="string">&quot;,&quot;</span> + fruit.getName() + <span class="string">&quot;,&quot;</span> + fruit.getNum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="传统方式org-json"><a href="#传统方式org-json" class="headerlink" title="传统方式org.json"></a>传统方式org.json</h3><h4 id="引入依赖-3"><a href="#引入依赖-3" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>20210307<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java代码-3"><a href="#Java代码-3" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//http请求获取json字符串</span></span><br><span class="line">        String str = HttpUtil.get(<span class="string">&quot;https://www.zoutl.cn/getFruitListJson&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> start = str.indexOf(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> end = str.indexOf(<span class="string">&quot;]&quot;</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//截取字符串</span></span><br><span class="line">        str = str.substring(start, end);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//先转为jsonArray</span></span><br><span class="line">        JSONArray jsonArray = <span class="keyword">new</span> JSONArray(str);</span><br><span class="line">        <span class="comment">//转为list</span></span><br><span class="line">        List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object o : jsonArray) &#123;</span><br><span class="line">            <span class="comment">//将数组的每个元素转为jsonObject</span></span><br><span class="line">            JSONObject jsonObject = <span class="keyword">new</span> JSONObject(o.toString());</span><br><span class="line">            Fruit fruit = <span class="keyword">new</span> Fruit();</span><br><span class="line">            fruit.setId((Integer) jsonObject.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            fruit.setName((String) jsonObject.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            fruit.setNum((Integer) jsonObject.get(<span class="string">&quot;num&quot;</span>));</span><br><span class="line">            fruitList.add(fruit);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Fruit fruit : fruitList) &#123;</span><br><span class="line">            System.out.println(fruit.getId() + <span class="string">&quot;,&quot;</span> + fruit.getName() + <span class="string">&quot;,&quot;</span> + fruit.getNum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210718025513.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>highlight.js实现代码复制</title>
    <url>/216.html</url>
    <content><![CDATA[<h3 id="下载js文件"><a href="#下载js文件" class="headerlink" title="下载js文件"></a>下载js文件</h3><p>阿里云盘链接：<a href="https://www.aliyundrive.com/s/LGzQZBYXYGZ">https://www.aliyundrive.com/s/LGzQZBYXYGZ</a></p>
<h3 id="前端引入样式和js文件"><a href="#前端引入样式和js文件" class="headerlink" title="前端引入样式和js文件"></a>前端引入样式和js文件</h3><p>引入顺序按下面代码所示，顺序不同可能会得不到我们想要的结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码高亮样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/styles/androidstudio.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--行号js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/highlight.line-numbers.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--代码高亮js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/highlight.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--代码复制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/highlightjs-copy-button.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/highlightjs-copy-button.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--初始化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	hljs.initHighlightingOnLoad();<span class="comment">//代码高亮</span></span></span><br><span class="line"><span class="javascript">	hljsln.initLineNumbersOnLoad();<span class="comment">//行号</span></span></span><br><span class="line"><span class="javascript">	hljs.initCopyButtonOnLoad();<span class="comment">//代码复制</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改复制代码按钮大小及其样式"><a href="#修改复制代码按钮大小及其样式" class="headerlink" title="修改复制代码按钮大小及其样式"></a>修改复制代码按钮大小及其样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hljs-button</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0b0b0b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-button</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#6eb9f1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210718200718.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a><strong>PS.</strong></h3><p>来源：<a href="https://github.com/DevCreel/highlightjs-copy-button.js">https://github.com/DevCreel/highlightjs-copy-button.js</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>highlight.js</tag>
      </tags>
  </entry>
  <entry>
    <title>一款免费且好用的SSH连接工具</title>
    <url>/217.html</url>
    <content><![CDATA[<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>免费、简单、有图形界面可以直接操作文件、可以使用网页版无需安装</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><p>官网地址：<a href="https://www.terminal.icu/">https://www.terminal.icu/</a></p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>注册并登录后，添加自己的服务器，输入对应ip及其登录密码开始连接即可</p>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>左侧上方是命令行输入终端，下方是图形界面（可以直接操作文件），右侧是系统的一些信息</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210718233808.jpg"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的HTML解析器：jsoup</title>
    <url>/218.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>从一个URL，文件或字符串中解析HTML</p>
<p>使用DOM或CSS选择器来查找、取出数据</p>
<p>可操作HTML元素、属性、文本</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="Jsoup-connect-url字符串-get"><a href="#Jsoup-connect-url字符串-get" class="headerlink" title="Jsoup.connect(url字符串).get()"></a>Jsoup.connect(url字符串).get()</h3><p>从URL加载HTML</p>
<h3 id="Jsoup-parse-HTML文件路径"><a href="#Jsoup-parse-HTML文件路径" class="headerlink" title="Jsoup.parse(HTML文件路径)"></a>Jsoup.parse(HTML文件路径)</h3><p>从文件加载HTML</p>
<h3 id="Jsoup-parse-HTML字符串"><a href="#Jsoup-parse-HTML字符串" class="headerlink" title="Jsoup.parse(HTML字符串)"></a>Jsoup.parse(HTML字符串)</h3><p>从字符串加载HTML</p>
<h3 id="document-title"><a href="#document-title" class="headerlink" title="document.title()"></a>document.title()</h3><p>获取HTML页面的标题</p>
<h3 id="document-select"><a href="#document-select" class="headerlink" title="document.select()"></a>document.select()</h3><p>获取标签</p>
<h3 id="elements-attr"><a href="#elements-attr" class="headerlink" title="elements.attr()"></a>elements.attr()</h3><p>获取标签的属性</p>
<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><h4 id="Link实体类"><a href="#Link实体类" class="headerlink" title="Link实体类"></a>Link实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-20 8:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String linkName;</span><br><span class="line">    <span class="keyword">private</span> String linkUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLinkName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkName</span><span class="params">(String linkName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.linkName = linkName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLinkUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkUrl</span><span class="params">(String linkUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.linkUrl = linkUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> entity.Link;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        List&lt;Link&gt; linkList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//爬取前3页</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">//获取该页面的HTML源代码</span></span><br><span class="line">            Document document = Jsoup.connect(<span class="string">&quot;http://www.zoutl.cn/index?page=&quot;</span> + i).get();</span><br><span class="line">            <span class="comment">//爬取id为div1的链接</span></span><br><span class="line">            Elements links = document.select(<span class="string">&quot;a#div1&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element link : links) &#123;</span><br><span class="line">                Link link1 = <span class="keyword">new</span> Link();</span><br><span class="line">                link1.setLinkName(link.text());</span><br><span class="line">                link1.setLinkUrl(<span class="string">&quot;http://www.zoutl.cn&quot;</span> + link.attr(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">                linkList.add(link1);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date() + <span class="string">&quot;: 完成第&quot;</span> + i + <span class="string">&quot;页的爬取&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Link link : linkList) &#123;</span><br><span class="line">            System.out.println(index + <span class="string">&quot;、&quot;</span> + link.getLinkName() + <span class="string">&quot;：&quot;</span> + link.getLinkUrl());</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210720222308.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jsoup</tag>
      </tags>
  </entry>
  <entry>
    <title>线性查找</title>
    <url>/219.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>线性查找又称顺序查找，是一种最简单的查找方法，它的基本思想是从第一个记录开始，逐个比较记录的关键字，直到和给定的K值相等，则查找成功；若比较结果与文件中n个记录的关键字都不等，则查找失败。</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">65</span>, <span class="number">13</span>, <span class="number">67</span>, <span class="number">23</span>, <span class="number">89</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入你要查找的数：&quot;</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == arr[i]) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你要查找的数的数组下标为：&quot;</span> + i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你要查找的数不存在！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210720225427.jpg" alt="img"> <img src="https://image.zoutl.cn/hexo-blog/blogImage/20210720225213.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA Maven工具栏按钮的作用</title>
    <url>/22.html</url>
    <content><![CDATA[<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201016002833.jpg" alt="img"></p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>清理，在进行真正的构建之前进行一些清理工作，移除所有上一次构建生成的文件。执行该命令会删除项目路径下的target文件，但是不会删除本地的maven仓库已经生成的jar文件</p>
<h3 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h3><p>验证，验证工程是否正确，所需的信息是否完整</p>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>编译源码，编译生成class文件，编译命令，只编译选定的目标，不管之前是否已经编译过，会在你的项目路径下生成一个target目录，在该目录中包含一个classes文件夹，里面全是生成的class文件及字节码文件</p>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>单元测试，测试</p>
<h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>打包，将工程文件打包为指定的格式，例如JAR，WAR等。这个命令会在你的项目路径下一个target目录，并且拥有compile命令的功能进行编译，同时会在target目录下生成项目的jar/war文件。如果a项目依赖于b项目，打包b项目时，只会打包到b项目下target下，编译a项目时就会报错，因为找不到所依赖的b项目，说明a项目在本地仓库是没有找到它所依赖的b项目，这时就用到install命令了</p>
<h3 id="verify"><a href="#verify" class="headerlink" title="verify"></a>verify</h3><p>核实，检查package是否有效、符合标准</p>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>安装至本地仓库，将包安装至本地仓库，以让其它项目依赖。该命令包含了package命令功能，不但会在项目路径下生成class文件和jar包，同时会在你的本地maven仓库生成jar文件，供其他项目使用（如果没有设置过 maven本地仓库，一般在用户/.m2目录下。如果a项目依赖于b项目，那么install b项目时，会在本地仓库同时生成pom文件和jar文件，解决了上面打包package出错的问题）</p>
<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>功能类似compile，只是只对整个项目进行编译</p>
<h3 id="site"><a href="#site" class="headerlink" title="site"></a>site</h3><p>站点，生成项目的站点文档</p>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p>复制到远程仓库</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/220.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用<a href="https://baike.baidu.com/item/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/1347176">顺序存储结构</a>，而且表中元素按关键字有序排列。</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1、必须采用顺序存储结构</p>
<p>2、必须按关键字大小有序排列</p>
<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>二分查找的基本思想是将n个元素分成大致相等的两部分，取a[n/2]与x做比较，如果x=a[n/2],则找到x,算法中止；如果x&lt;a[n/2],则只要在数组a的左半部分继续搜索x,如果x&gt;a[n/2],则只要在数组a的右半部搜索x</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入你要查找的数：&quot;</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + index + <span class="string">&quot;次: start=&quot;</span> + start + <span class="string">&quot;,end=&quot;</span> + end + <span class="string">&quot;,mid=&quot;</span> + mid);</span><br><span class="line">            <span class="keyword">if</span> (num &lt; arr[mid]) &#123;</span><br><span class="line">                end = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; num) &#123;</span><br><span class="line">                start = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你要查找的数不存在！！&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;循环执行了&quot;</span> + index + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你要查找的数的数组下标为：&quot;</span> + result);</span><br><span class="line">            System.out.println(<span class="string">&quot;循环执行了&quot;</span> + index + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210721001613.jpg" alt="img"> <img src="https://image.zoutl.cn/hexo-blog/blogImage/20210721001623.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA Alt+Enter快捷键添加javadoc文档注释被disabled的解决方法</title>
    <url>/221.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Alt+Enter快捷键本来是有添加javadoc文档注释选项的，但是不小心点击disabled后，该选项就没有了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210721030304.jpg" alt="img"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li><p>打开配置（快捷键为Ctrl+Shift+S）</p>
</li>
<li><p>根据下图提示找到Add Javadoc，勾选后保存即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210721030315.jpg" alt="img"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/222.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素</p>
<h3 id="栈的操作"><a href="#栈的操作" class="headerlink" title="栈的操作"></a>栈的操作</h3><h4 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h4><p>测试此堆栈是否为空</p>
<h4 id="peek"><a href="#peek" class="headerlink" title="peek()"></a>peek()</h4><p>查看此堆栈顶部的对象，而不从堆栈中删除它</p>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>删除此堆栈顶部的对象，并将该对象作为此函数的值返回</p>
<h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>将元素添加到堆栈的顶部</p>
<h3 id="栈的代码实现"><a href="#栈的代码实现" class="headerlink" title="栈的代码实现"></a>栈的代码实现</h3><p>Java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-03 19:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">//判断是否为空,true表示堆栈为空</span></span><br><span class="line">        System.out.println(stack.empty());</span><br><span class="line">        stack.push(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="comment">//查看顶部元素</span></span><br><span class="line">        System.out.println(stack.peek());</span><br><span class="line">        <span class="comment">//移除顶部元素,移除后返回这个元素</span></span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210721101619.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/223.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列</p>
<p>队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表</p>
<p>LinkedList类实现了Queue接口，因此我们可以把LinkedList当成Queue来用</p>
<h3 id="队列的操作"><a href="#队列的操作" class="headerlink" title="队列的操作"></a>队列的操作</h3><p>使用了LinkedList类的方法进行封装，更多LinkedList类的方法去查看JDK</p>
<h4 id="enqueue"><a href="#enqueue" class="headerlink" title="enqueue"></a>enqueue</h4><p>加入队列（在表的后端进行插入操作）</p>
<h4 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue"></a>dequeue</h4><p>离开队列（在表的前端进行删除操作）</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//加入队列</span></span><br><span class="line">        enqueue(<span class="number">1</span>, linkedList);</span><br><span class="line">        enqueue(<span class="number">3</span>, linkedList);</span><br><span class="line">        enqueue(<span class="number">4</span>, linkedList);</span><br><span class="line">        enqueue(<span class="number">6</span>, linkedList);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        System.out.print(<span class="string">&quot;当前所有元素: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : linkedList) &#123;</span><br><span class="line">            System.out.print(integer + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//离开队列</span></span><br><span class="line">        dequeue(linkedList);</span><br><span class="line">        System.out.print(<span class="string">&quot;当前所有元素: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : linkedList) &#123;</span><br><span class="line">            System.out.print(integer + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 离开队列(删除)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> linkedList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dequeue</span><span class="params">(LinkedList&lt;Integer&gt; linkedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (linkedList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            linkedList.removeFirst();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加入队列(插入)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> linkedList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> a, LinkedList&lt;Integer&gt; linkedList)</span> </span>&#123;</span><br><span class="line">        linkedList.addLast(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210721104559.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot引入MyBatis-Plus</title>
    <url>/224.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">file-size-threshold:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">100MB</span></span><br><span class="line">  <span class="comment">#数据库连接配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_test?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># 如果是放在src/main/java目录下 classpath:/com/*/*/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 如果是放在resource目录 classpath:/mapper/**.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**.xml</span></span><br></pre></td></tr></table></figure>

<h3 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h3><p>启动类里也需要加一个mapper扫描配置@MapperScan(“com.ledao.mapper”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.ledao.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyBatisPlusDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210722235006.jpg" alt="img"></p>
<h4 id="BlogType实体类"><a href="#BlogType实体类" class="headerlink" title="BlogType实体类"></a>BlogType实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-22 22:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_blogtype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;sortNum&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sortNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BlogTypeMapper"><a href="#BlogTypeMapper" class="headerlink" title="BlogTypeMapper"></a>BlogTypeMapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.BlogType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-22 22:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogTypeMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">BlogType</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.BlogType;</span><br><span class="line"><span class="keyword">import</span> com.ledao.mapper.BlogTypeMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BlogTypeMapper blogTypeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;BlogType&gt; blogTypeList = blogTypeMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (BlogType blogType : blogTypeList) &#123;</span><br><span class="line">            System.out.println(blogType.getId() + <span class="string">&quot;,&quot;</span> + blogType.getName() + <span class="string">&quot;,&quot;</span> + blogType.getSortNum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210722235115.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus Mapper CRUD 接口之Insert</title>
    <url>/225.html</url>
    <content><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span></span>;</span><br></pre></td></tr></table></figure>

<p>参数为要插入的实体</p>
<p>该方法返回的是成功插入的数据条数，所以我们可以根据返回的结果是否大于0来判断是否插入成功，大于代表成功，反之则是失败</p>
<h3 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>

<p>目的：让插入的数据的id自增</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>Java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BlogType blogType = <span class="keyword">new</span> BlogType();</span><br><span class="line">	blogType.setName(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">	blogType.setSortNum(<span class="number">22</span>);</span><br><span class="line">	<span class="keyword">int</span> result = blogTypeMapper.insert(blogType);</span><br><span class="line">	<span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;插入失败&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210723011628.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus 条件构造器</title>
    <url>/226.html</url>
    <content><![CDATA[<h3 id="条件构造器层级关系"><a href="#条件构造器层级关系" class="headerlink" title="条件构造器层级关系"></a>条件构造器层级关系</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210723091224.jpg" alt="img"></p>
<p>介绍 ：</p>
<ol>
<li><p>上图绿色框为抽象类abstract</p>
</li>
<li><p>蓝色框为正常class类，可new对象</p>
</li>
<li><p>黄色箭头指向为父子类关系，箭头指向为父类</p>
</li>
</ol>
<p>wapper介绍 ：</p>
<ol>
<li><p>Wrapper ： 条件构造抽象类，最顶端父类，抽象类中提供4个方法西面贴源码展示</p>
</li>
<li><p>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</p>
</li>
<li><p>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。</p>
</li>
<li><p>LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper</p>
</li>
<li><p>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</p>
</li>
<li><p>QueryWrapper ： Entity 对象封装操作类，不是用lambda语法</p>
</li>
<li><p>UpdateWrapper ： Update 条件封装，用于Entity对象更新操作</p>
</li>
</ol>
<h3 id="各函数及其实例"><a href="#各函数及其实例" class="headerlink" title="各函数及其实例"></a>各函数及其实例</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210723091601.jpg" alt="img"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	QueryWrapper&lt;BlogType&gt; blogTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">	<span class="comment">//name中包含tis的数据</span></span><br><span class="line">	blogTypeQueryWrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tis&quot;</span>);</span><br><span class="line">	List&lt;BlogType&gt; blogTypeList = blogTypeMapper.selectList(blogTypeQueryWrapper);</span><br><span class="line">	<span class="keyword">for</span> (BlogType blogType : blogTypeList) &#123;</span><br><span class="line">		System.out.println(blogType.getId() + <span class="string">&quot;,&quot;</span> + blogType.getName() + <span class="string">&quot;,&quot;</span> + blogType.getSortNum());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210723094034.jpg" alt="img"></p>
<h4 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a>UpdateWrapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	UpdateWrapper&lt;BlogType&gt; blogTypeUpdateWrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">	<span class="comment">//id是28的数据</span></span><br><span class="line">	blogTypeUpdateWrapper.eq(<span class="string">&quot;id&quot;</span>, <span class="number">28</span>);</span><br><span class="line">	BlogType blogType = <span class="keyword">new</span> BlogType();</span><br><span class="line">	blogType.setName(<span class="string">&quot;spring&quot;</span>);</span><br><span class="line">	blogType.setSortNum(<span class="number">23</span>);</span><br><span class="line">	<span class="comment">//更新成功返回1,失败返回0,可用于判断是否更新成功</span></span><br><span class="line">	<span class="keyword">int</span> result = blogTypeMapper.update(blogType, blogTypeUpdateWrapper);</span><br><span class="line">	<span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;更新成功!!&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;更新失败!!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/m0_37034294/article/details/82917234">https://blog.csdn.net/m0_37034294/article/details/82917234</a></p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus 自定义SQL</title>
    <url>/227.html</url>
    <content><![CDATA[<h3 id="自定义SQL的方式"><a href="#自定义SQL的方式" class="headerlink" title="自定义SQL的方式"></a>自定义SQL的方式</h3><ol>
<li><p>Annotation注解方式</p>
</li>
<li><p>XML配置文件方式</p>
</li>
</ol>
<h4 id="Annotation注解方式"><a href="#Annotation注解方式" class="headerlink" title="Annotation注解方式"></a>Annotation注解方式</h4><p>直接先定义接口方法，然后在接口方法上面开发注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.BlogType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-22 22:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogTypeMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找博客类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_blogtype where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">BlogType <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="XML配置文件方式"><a href="#XML配置文件方式" class="headerlink" title="XML配置文件方式"></a>XML配置文件方式</h4><p>1、修改application.yml配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 如果是放在src/main/java目录下 classpath:/com/*/*/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 如果是放在resource目录 classpath:/mapper/**.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**.xml</span></span><br></pre></td></tr></table></figure>

<p>2、自定义接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.BlogType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-22 22:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogTypeMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">BlogType</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据情况获取博客类型列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;BlogType&gt; <span class="title">list</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、xml文件实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--suppress ALL--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ledao.mapper.BlogTypeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BlogResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.ledao.entity.BlogType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sortNum&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sortNum&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BlogResult&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_blogtype</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and name like #&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;start != null and size != null&quot;</span>&gt;</span></span><br><span class="line">            limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">	map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;%a%&quot;</span>);</span><br><span class="line">	List&lt;BlogType&gt; blogTypeList = blogTypeMapper.list(map);</span><br><span class="line">	<span class="keyword">for</span> (BlogType blogType : blogTypeList) &#123;</span><br><span class="line">		System.out.println(blogType.getId() + <span class="string">&quot;,&quot;</span> + blogType.getName() + <span class="string">&quot;,&quot;</span> + blogType.getSortNum());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、结果</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210723101956.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.jianshu.com/p/c0dd01a82fcc">https://www.jianshu.com/p/c0dd01a82fcc</a></p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus Mapper CRUD 接口之Delete</title>
    <url>/228.html</url>
    <content><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	QueryWrapper&lt;BlogType&gt; blogTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">	blogTypeQueryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;spring&quot;</span>);</span><br><span class="line">	blogTypeMapper.delete(blogTypeQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="deleteBatchIds"><a href="#deleteBatchIds" class="headerlink" title="deleteBatchIds"></a>deleteBatchIds</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	List&lt;Integer&gt; idList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	idList.add(<span class="number">29</span>);</span><br><span class="line">	idList.add(<span class="number">30</span>);</span><br><span class="line">	idList.add(<span class="number">31</span>);</span><br><span class="line">	<span class="keyword">int</span> result = blogTypeMapper.deleteBatchIds(idList);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="deleteById"><a href="#deleteById" class="headerlink" title="deleteById"></a>deleteById</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> result = blogTypeMapper.deleteById(<span class="number">32</span>);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="deleteByMap"><a href="#deleteByMap" class="headerlink" title="deleteByMap"></a>deleteByMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">	map.put(<span class="string">&quot;name&quot;</span>, <span class="number">1</span>);</span><br><span class="line">	map.put(<span class="string">&quot;sortNum&quot;</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">int</span> result = blogTypeMapper.deleteByMap(map);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus Mapper CRUD 接口之Update</title>
    <url>/229.html</url>
    <content><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T updateEntity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; whereWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 修改</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	UpdateWrapper&lt;BlogType&gt; blogTypeUpdateWrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">	blogTypeUpdateWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;spring&quot;</span>);</span><br><span class="line">	BlogType blogType = <span class="keyword">new</span> BlogType();</span><br><span class="line">	blogType.setSortNum(<span class="number">111</span>);</span><br><span class="line">	blogTypeMapper.update(blogType, blogTypeUpdateWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="updateById"><a href="#updateById" class="headerlink" title="updateById"></a>updateById</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BlogType blogType = <span class="keyword">new</span> BlogType();</span><br><span class="line">	blogType.setId(<span class="number">34</span>);</span><br><span class="line">	blogType.setName(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">	blogType.setSortNum(<span class="number">222</span>);</span><br><span class="line">	blogTypeMapper.updateById(blogType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>宠物医院管理系统</title>
    <url>/23.html</url>
    <content><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>GitHub地址：<a href="https://github.com/a6678696/PetHospital">https://github.com/a6678696/PetHospital</a></p>
<h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><p>本项目核心技术采用Spring Boot+Mybatis；开发工具idea；数据库MySQL5.6；模版引擎采用的是Thymeleaf；安全框架采用Shiro，实现了完整权限系统，Controller方法采用Shiro注解来实现有效的权限控制；前台界面采用了Bootstrap技术；后台界面采用了EasyUI技术；</p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>本系统前台面向的用户是客户，客户可以进行预约、浏览医院发布的文章、进入医院商城为宠物购物、如有疑问可以向官方留言、还可以查看关于自己的所有记录信息，如：看病记录、预约记录、疫苗注射记录等。后台面向的用户是医院人员，系统管理员拥有最高权限，可以对所有数据进行管理，为所有的角色分配权限以及创建角色；业务管理员的权限主要是对一些常用数据的维护；医生可以接受客户发布的预约医生的预约单以及处理属于自己的预约单，回答客户的问诊；美容师可以接受客户发布的预约美容的预约单以及处理属于自己的预约单。</p>
<blockquote>
<p>本系统的详细功能需求如下所示</p>
</blockquote>
<h4 id="未注册用户"><a href="#未注册用户" class="headerlink" title="未注册用户"></a>未注册用户</h4><p>非注册用户（即游客身份）进入医院官网首页，可以浏览关于医院的宣传以及医院发布的文章，进入医院商城浏览正在发售的商品，搜索已发布的文章和商品，注册以及登录。</p>
<h4 id="已注册用户"><a href="#已注册用户" class="headerlink" title="已注册用户"></a>已注册用户</h4><p>注册用户可以修改个人信息和宠物信息，发布预约单（预约医生和美容师），在医院的商城购物，收藏商品，给官方留言，查看与自己相关的记录信息，如：病例记录、预约记录、问诊记录、订单记录等，注销退出系统。</p>
<h4 id="医生"><a href="#医生" class="headerlink" title="医生"></a>医生</h4><p>医生可以查看并接受客户发布的未被处理的预约医生的预约单，结束属于自己的预约单，回复客户的网上问诊以及查看自己回复的问诊记录，修改个人密码，安全退出系统。</p>
<h4 id="美容师"><a href="#美容师" class="headerlink" title="美容师"></a>美容师</h4><p>美容师可以查看并接受客户发布的未被处理的预约美容师的预约单，结束属于自己的预约单。</p>
<h4 id="业务管理员"><a href="#业务管理员" class="headerlink" title="业务管理员"></a>业务管理员</h4><p>业务管理员具有进货管理（包括进货入库、退货出库、进货单据查询、退货单据查询以及当前库存查询）、销售管理（包括销售出库、客户退货入库、销售单据查询、退货单据查询）、库存管理（包括商品报损、商品报溢、库存报警、报损报溢记录查询）、查看统计数据（供应商进退货单统计、客户进退货单统计、按日统计销售利润、按月统计销售利润）、供应商管理、客户管理、商品管理、期初库存管理、前台轮播图管理、设备类型管理、设备管理、设备使用管理、设备使用记录管理、文章类型管理、文章管理、客户留言管理、医院用品管理、医院用品出入库管理、医院用品出入库记录管理、客户消息管理、客户订单处理、客户预约单管理、客户问诊记录管理、病历单管理、化验记录管理、疫苗注射记录管理、客户回访记录管理、寄养记录管理、修改密码、安全退出系统。</p>
<h4 id="系统管理员"><a href="#系统管理员" class="headerlink" title="系统管理员"></a>系统管理员</h4><p>系统管理员除了具备业务管理员的所有权限外，还有创建角色并赋予角色权限的功能，还可以查看系统操作日志。</p>
<h4 id="系统自身"><a href="#系统自身" class="headerlink" title="系统自身"></a>系统自身</h4><p>系统每天0点自动创建明天的分别属于各个医生或美容师各个时间段的空预约单（未被客户接受的预约单）、每分钟自动筛选出5分钟后过期的空预约单并从数据库删除、每分钟自动筛选和取消客户提交的超过一天未支付的订单并释放库存、每天凌晨1点自动将发布日期超过3个月的商品的”新品”标签去掉、医院上班后（8点）系统自动给当天有预约的客户发送提醒消息</p>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><h5 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001151.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001236.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001310.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001352.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001428.jpg" alt="img"></p>
<h5 id="客户登录界面"><a href="#客户登录界面" class="headerlink" title="客户登录界面"></a>客户登录界面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001525.jpg" alt="img"></p>
<h5 id="客户注册页面"><a href="#客户注册页面" class="headerlink" title="客户注册页面"></a>客户注册页面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001613.jpg" alt="img"></p>
<h5 id="医院商城首页"><a href="#医院商城首页" class="headerlink" title="医院商城首页"></a>医院商城首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001654.jpg" alt="img"></p>
<h5 id="查看商品详情"><a href="#查看商品详情" class="headerlink" title="查看商品详情"></a>查看商品详情</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001744.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001853.jpg" alt="img"></p>
<h5 id="查看已收货客户评论"><a href="#查看已收货客户评论" class="headerlink" title="查看已收货客户评论"></a>查看已收货客户评论</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001927.jpg" alt="img"></p>
<h5 id="商品推荐和浏览记录"><a href="#商品推荐和浏览记录" class="headerlink" title="商品推荐和浏览记录"></a>商品推荐和浏览记录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017001959.jpg" alt="img"></p>
<h5 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002119.jpg" alt="img"></p>
<h5 id="订单成功提交"><a href="#订单成功提交" class="headerlink" title="订单成功提交"></a>订单成功提交</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002200.jpg" alt="img"></p>
<h5 id="支付订单"><a href="#支付订单" class="headerlink" title="支付订单"></a>支付订单</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002233.jpg" alt="img"></p>
<h5 id="查看订单详情"><a href="#查看订单详情" class="headerlink" title="查看订单详情"></a>查看订单详情</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002317.jpg" alt="img"></p>
<h5 id="查看全部订单"><a href="#查看全部订单" class="headerlink" title="查看全部订单"></a>查看全部订单</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002357.jpg" alt="img"></p>
<h5 id="查看已收藏商品"><a href="#查看已收藏商品" class="headerlink" title="查看已收藏商品"></a>查看已收藏商品</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002442.jpg" alt="img"></p>
<h5 id="个人中心功能列表"><a href="#个人中心功能列表" class="headerlink" title="个人中心功能列表"></a>个人中心功能列表</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002526.jpg" alt="img"></p>
<h5 id="查看可预约医生"><a href="#查看可预约医生" class="headerlink" title="查看可预约医生"></a>查看可预约医生</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002628.jpg" alt="img"></p>
<h5 id="预约医生"><a href="#预约医生" class="headerlink" title="预约医生"></a>预约医生</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002654.jpg" alt="img"></p>
<h5 id="按类别查看文章"><a href="#按类别查看文章" class="headerlink" title="按类别查看文章"></a>按类别查看文章</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002735.jpg" alt="img"></p>
<h5 id="查看文章详情"><a href="#查看文章详情" class="headerlink" title="查看文章详情"></a>查看文章详情</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002807.jpg" alt="img"></p>
<h5 id="客户留言"><a href="#客户留言" class="headerlink" title="客户留言"></a>客户留言</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017002905.jpg" alt="img"></p>
<h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><h5 id="后台登录"><a href="#后台登录" class="headerlink" title="后台登录"></a>后台登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017003134.jpg" alt="img"></p>
<h5 id="管理员功能介绍"><a href="#管理员功能介绍" class="headerlink" title="管理员功能介绍"></a>管理员功能介绍</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017003233.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017003317.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017003349.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus Mapper CRUD 接口之Select</title>
    <url>/230.html</url>
    <content><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line"><span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="function">T <span class="title">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="function">Integer <span class="title">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><h4 id="selectById"><a href="#selectById" class="headerlink" title="selectById"></a>selectById</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BlogType blogType = blogTypeMapper.selectById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(blogType.getId() + <span class="string">&quot;,&quot;</span> + blogType.getName() + <span class="string">&quot;,&quot;</span> + blogType.getSortNum());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="selectOne"><a href="#selectOne" class="headerlink" title="selectOne"></a>selectOne</h4><p> 如果查到的数据不是 1 条时会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	QueryWrapper&lt;BlogType&gt; blogTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">	blogTypeQueryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;MyBatis&quot;</span>);</span><br><span class="line">	BlogType blogType = blogTypeMapper.selectOne(blogTypeQueryWrapper);</span><br><span class="line">	System.out.println(blogType.getId() + <span class="string">&quot;,&quot;</span> + blogType.getName() + <span class="string">&quot;,&quot;</span> + blogType.getSortNum());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="selectBatchIds"><a href="#selectBatchIds" class="headerlink" title="selectBatchIds"></a>selectBatchIds</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	List&lt;Integer&gt; idList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	idList.add(<span class="number">1</span>);</span><br><span class="line">	idList.add(<span class="number">5</span>);</span><br><span class="line">	idList.add(<span class="number">6</span>);</span><br><span class="line">	idList.add(<span class="number">7</span>);</span><br><span class="line">	List&lt;BlogType&gt; blogTypeList = blogTypeMapper.selectBatchIds(idList);</span><br><span class="line">	<span class="keyword">for</span> (BlogType blogType : blogTypeList) &#123;</span><br><span class="line">		System.out.println(blogType.getId() + <span class="string">&quot;,&quot;</span> + blogType.getName() + <span class="string">&quot;,&quot;</span> + blogType.getSortNum());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="selectList"><a href="#selectList" class="headerlink" title="selectList"></a>selectList</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//参数为空时查询所有</span></span><br><span class="line">	List&lt;BlogType&gt; blogTypeList = blogTypeMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">	<span class="keyword">for</span> (BlogType blogType : blogTypeList) &#123;</span><br><span class="line">		System.out.println(blogType.getId() + <span class="string">&quot;,&quot;</span> + blogType.getName() + <span class="string">&quot;,&quot;</span> + blogType.getSortNum());</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">	<span class="comment">//根据条件查询</span></span><br><span class="line">	QueryWrapper&lt;BlogType&gt; blogTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">	blogTypeQueryWrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">	List&lt;BlogType&gt; blogTypeList1 = blogTypeMapper.selectList(blogTypeQueryWrapper);</span><br><span class="line">	<span class="keyword">for</span> (BlogType blogType : blogTypeList1) &#123;</span><br><span class="line">		System.out.println(blogType.getId() + <span class="string">&quot;,&quot;</span> + blogType.getName() + <span class="string">&quot;,&quot;</span> + blogType.getSortNum());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="selectByMap"><a href="#selectByMap" class="headerlink" title="selectByMap"></a>selectByMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">	map.put(<span class="string">&quot;sortNum&quot;</span>, <span class="number">81</span>);</span><br><span class="line">	List&lt;BlogType&gt; blogTypeList = blogTypeMapper.selectByMap(map);</span><br><span class="line">	<span class="keyword">for</span> (BlogType blogType : blogTypeList) &#123;</span><br><span class="line">		System.out.println(blogType.getId() + <span class="string">&quot;,&quot;</span> + blogType.getName() + <span class="string">&quot;,&quot;</span> + blogType.getSortNum());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="selectMaps"><a href="#selectMaps" class="headerlink" title="selectMaps"></a>selectMaps</h4><p>查询到的数据以键值对的方式存储在map中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	QueryWrapper&lt;BlogType&gt; blogTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">	blogTypeQueryWrapper.gt(<span class="string">&quot;id&quot;</span>, <span class="number">5</span>).like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">	List&lt;Map&lt;String, Object&gt;&gt; mapList = blogTypeMapper.selectMaps(blogTypeQueryWrapper);</span><br><span class="line">	<span class="keyword">for</span> (Map&lt;String, Object&gt; map : mapList) &#123;</span><br><span class="line">		System.out.println(map.get(<span class="string">&quot;id&quot;</span>)+<span class="string">&quot;,&quot;</span>+map.get(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;,&quot;</span>+map.get(<span class="string">&quot;sortNum&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="selectObjs"><a href="#selectObjs" class="headerlink" title="selectObjs"></a>selectObjs</h4><p>只返回一个字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectObjs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	QueryWrapper&lt;BlogType&gt; blogTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">	<span class="comment">//选择要查询的字段,不选择就返回第一个字段(一般是id)</span></span><br><span class="line">	blogTypeQueryWrapper.select(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">	<span class="comment">//查询条件</span></span><br><span class="line">	blogTypeQueryWrapper.gt(<span class="string">&quot;id&quot;</span>, <span class="number">5</span>);</span><br><span class="line">	List&lt;Object&gt; objectList = blogTypeMapper.selectObjs(blogTypeQueryWrapper);</span><br><span class="line">	System.out.println(objectList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="selectPage"><a href="#selectPage" class="headerlink" title="selectPage"></a>selectPage</h4><p>先配置分页插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-15 4:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//设置查询条件</span></span><br><span class="line">	QueryWrapper&lt;BlogType&gt; blogTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">	blogTypeQueryWrapper.gt(<span class="string">&quot;id&quot;</span>, <span class="number">7</span>);</span><br><span class="line">	<span class="comment">//设置当前页以及每页记录数</span></span><br><span class="line">	Page&lt;BlogType&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="comment">//获取记录</span></span><br><span class="line">	Page&lt;BlogType&gt; blogTypePage = blogTypeMapper.selectPage(page, blogTypeQueryWrapper);</span><br><span class="line">	List&lt;BlogType&gt; blogTypeList = blogTypePage.getRecords();</span><br><span class="line">	<span class="keyword">for</span> (BlogType blogType : blogTypeList) &#123;</span><br><span class="line">		System.out.println(blogType);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="selectMapsPage"><a href="#selectMapsPage" class="headerlink" title="selectMapsPage"></a>selectMapsPage</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectMapsPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//设置查询条件</span></span><br><span class="line">	QueryWrapper&lt;BlogType&gt; blogTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">	blogTypeQueryWrapper.gt(<span class="string">&quot;id&quot;</span>, <span class="number">7</span>);</span><br><span class="line">	<span class="comment">//设置当前页以及每页记录数</span></span><br><span class="line">	Page page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">	IPage&lt;Map&lt;String, Object&gt;&gt; mapIPage = blogTypeMapper.selectMapsPage(page, blogTypeQueryWrapper);</span><br><span class="line">	<span class="keyword">for</span> (Map&lt;String, Object&gt; record : mapIPage.getRecords()) &#123;</span><br><span class="line">		System.out.println(record);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="selectCount"><a href="#selectCount" class="headerlink" title="selectCount"></a>selectCount</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	QueryWrapper&lt;BlogType&gt; blogTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">	blogTypeQueryWrapper.gt(<span class="string">&quot;id&quot;</span>, <span class="number">7</span>);</span><br><span class="line">	<span class="keyword">int</span> count = blogTypeMapper.selectCount(blogTypeQueryWrapper);</span><br><span class="line">	System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Java将一个数组复制给另一个数组</title>
    <url>/231.html</url>
    <content><![CDATA[<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length];</span><br><span class="line">        <span class="comment">//复制</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            arr2[i] = arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : arr2) &#123;</span><br><span class="line">            System.out.print(j + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="System-ararycopy"><a href="#System-ararycopy" class="headerlink" title="System.ararycopy"></a>System.ararycopy</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length];</span><br><span class="line">        <span class="comment">//复制</span></span><br><span class="line">        System.arraycopy(arr1, <span class="number">0</span>, arr2, <span class="number">0</span>, arr1.length);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : arr2) &#123;</span><br><span class="line">            System.out.print(j + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><p>如果数组等长，而且对应copy，使用int[] B= A.clone()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = arr1.clone();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : arr2) &#123;</span><br><span class="line">            System.out.print(j + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java跳出多重循环</title>
    <url>/232.html</url>
    <content><![CDATA[<p>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         </p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>给for循环添加一个标记，然后使用<code>break 标记</code>跳到标记处，即可实现跳出多重循环</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JAVA</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        here:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;外层第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;次循环&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; <span class="number">3</span>; i1++) &#123;</span><br><span class="line">                System.out.print(i1 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (i1 == <span class="number">1</span> &amp;&amp; i == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span> here;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>可以看到，当外层循环的i=1和内循环的i1=1同时成立时，就会跳出循环</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210724110315.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Gson获取JSON字符串的值</title>
    <url>/233.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用的方法"><a href="#使用的方法" class="headerlink" title="使用的方法"></a>使用的方法</h3><ol>
<li><p>JsonElement parseString(String json)</p>
<p>解析json字符串为JsonElement</p>
</li>
<li><p>JsonObject getAsJsonObject()</p>
<p>将字符串解析为JsonObject对象</p>
</li>
<li><p>JsonObject getAsJsonObject(String memberName)</p>
<p>获取某个对象</p>
</li>
<li><p>JsonElement get(String memberName)</p>
<p>获取对象的属性值</p>
</li>
<li><p>String getAsString()</p>
<p>返回对象属性值的字符串值</p>
</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="要测试的JSON字符串"><a href="#要测试的JSON字符串" class="headerlink" title="要测试的JSON字符串"></a>要测试的JSON字符串</h4><p>这次测试是获取data.token.accessToken</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;uuid&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;nickname&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;blog&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;company&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;location&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;remark&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;gender&quot;</span>: <span class="string">&quot;UNKNOWN&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;GITHUB&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;token&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;accessToken&quot;</span>: <span class="string">&quot;gho_V7z5mRl3zrZAclRnSdhmczkYW2jvx&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;expireIn&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;refreshToken&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;openId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;accessCode&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;unionId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;scope&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;tokenType&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;idToken&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;macAlgorithm&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;macKey&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;oauthToken&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;oauthTokenSecret&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;userId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;screenName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;oauthCallbackConfirmed&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.JsonElement;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonParser;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String json = <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;code\&quot;: 2000,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;msg\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;data\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;uuid\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;username\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;nickname\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;avatar\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;blog\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;company\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;location\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;email\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;remark\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;gender\&quot;: \&quot;UNKNOWN\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;source\&quot;: \&quot;GITHUB\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;token\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;accessToken\&quot;: \&quot;gho_V7z5mRl3zrZAclRnSdhmczkYW2jvx\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;expireIn\&quot;: 0,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;refreshToken\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;uid\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;openId\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;accessCode\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;unionId\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;scope\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;tokenType\&quot;: \&quot;bearer\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;idToken\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;macAlgorithm\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;macKey\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;code\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;oauthToken\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;oauthTokenSecret\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;userId\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;screenName\&quot;: null,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;oauthCallbackConfirmed\&quot;: null\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">//解析json字符串为JsonElement</span></span><br><span class="line">        JsonElement jsonElement = JsonParser.parseString(json);</span><br><span class="line">        <span class="comment">//将json字符串变成对象</span></span><br><span class="line">        JsonObject root = jsonElement.getAsJsonObject();</span><br><span class="line">        <span class="comment">//获取data对象</span></span><br><span class="line">        JsonObject data = root.getAsJsonObject(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        <span class="comment">//获取token对象</span></span><br><span class="line">        JsonObject token = data.getAsJsonObject(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//获取token对象的accessToken属性的值</span></span><br><span class="line">        String accessToken = token.get(<span class="string">&quot;accessToken&quot;</span>).getAsString();</span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        System.out.println(accessToken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210728061802.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub创建第三方应用</title>
    <url>/234.html</url>
    <content><![CDATA[<h3 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h3><blockquote>
<p>点击右上角头像选择Settings进入设置</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210728075055.jpg" alt="img"></p>
<blockquote>
<p>左侧菜单选择Developer settings</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210728075108.jpg" alt="img"></p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><blockquote>
<p>左侧菜单选择OAuth Apps，点击右边的New OAuth App按钮</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210728075122.jpg" alt="img"></p>
<blockquote>
<p>填写信息后，点击下方绿色的Register applaction按钮创建应用</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210728075131.jpg" alt="img"></p>
<p>Application name一般填写自己的网站名称即可</p>
<p>Application description一般填写自己的应用描述即可</p>
<p>Homepage URL填写自己的网站首页地址</p>
<p>Authorization callback URL，该地址为用户授权后需要跳转到的自己网站的地址，默认携带一个code参数以上信息输入完成后</p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>JustAuth实现GitHub登录</title>
    <url>/235.html</url>
    <content><![CDATA[<h3 id="GitHub创建第三方应用"><a href="#GitHub创建第三方应用" class="headerlink" title="GitHub创建第三方应用"></a>GitHub创建第三方应用</h3><p>具体步骤查看博客：<a href="/234.html">GitHub创建第三方应用</a></p>
<p>copy以下三个信息：Client ID、Client Secret和Authorization callback URL</p>
<h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure>

<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.zhyd.oauth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JustAuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="创建Request"><a href="#创建Request" class="headerlink" title="创建Request"></a>创建Request</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AuthRequest authRequest = <span class="keyword">new</span> AuthGithubRequest(AuthConfig.builder()</span><br><span class="line">                .clientId(<span class="string">&quot;Client ID&quot;</span>)</span><br><span class="line">                .clientSecret(<span class="string">&quot;Client Secret&quot;</span>)</span><br><span class="line">                .redirectUri(<span class="string">&quot;应用回调地址&quot;</span>)</span><br><span class="line">                .build());</span><br></pre></td></tr></table></figure>

<h3 id="生成授权地址"><a href="#生成授权地址" class="headerlink" title="生成授权地址"></a>生成授权地址</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String authorizeUrl = authRequest.authorize(AuthStateUtils.createState());</span><br></pre></td></tr></table></figure>

<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><h4 id="IndexController"><a href="#IndexController" class="headerlink" title="IndexController"></a>IndexController</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-28 0:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;h2 style=&#x27;text-align: center&#x27;&gt;&lt;a href=&#x27;/oauth/login/github&#x27;&gt;github登录&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#x27;/oauth/login/gitee&#x27;&gt;gitee登录&lt;/a&gt;&lt;/span&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/home&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;主页&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JustAuthController"><a href="#JustAuthController" class="headerlink" title="JustAuthController"></a>JustAuthController</h4><p>Client ID、Client Secret和Authorization callback URL更换为自己的,下面代码中的是错误的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.config.AuthConfig;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.model.AuthCallback;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.model.AuthResponse;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.request.AuthGiteeRequest;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.request.AuthGithubRequest;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.request.AuthRequest;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.utils.AuthStateUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-28 0:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/oauth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JustAuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重定向</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login/&#123;type&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(<span class="meta">@PathVariable</span> String type, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建request</span></span><br><span class="line">        AuthRequest authRequest = getAuthRequest(type);</span><br><span class="line">        <span class="comment">//重定向到授权链接</span></span><br><span class="line">        response.sendRedirect(authRequest.authorize(AuthStateUtils.createState()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录后回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/callback/&#123;type&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthResponse <span class="title">callback</span><span class="params">(<span class="meta">@PathVariable</span> String type, AuthCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建request</span></span><br><span class="line">        AuthRequest authRequest = getAuthRequest(type);</span><br><span class="line">        <span class="comment">//登录(获取用户信息)</span></span><br><span class="line">        AuthResponse authResponse = authRequest.login(callback);</span><br><span class="line">        <span class="keyword">return</span> authResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权平台创建响应的request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AuthRequest <span class="title">getAuthRequest</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        AuthRequest authRequest = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="comment">//github平台</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;github&quot;</span>:</span><br><span class="line">                authRequest = <span class="keyword">new</span> AuthGithubRequest(AuthConfig.builder()</span><br><span class="line">                        .clientId(<span class="string">&quot;803de7712b9908181&quot;</span>)</span><br><span class="line">                        .clientSecret(<span class="string">&quot;e863222b3de13fe5ca91224e4651c0316e&quot;</span>)</span><br><span class="line">                        .redirectUri(<span class="string">&quot;http://localhost:80/oauth/callback/github&quot;</span>)</span><br><span class="line">                        .build());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//gitee平台</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;gitee&quot;</span>:</span><br><span class="line">                authRequest = <span class="keyword">new</span> AuthGiteeRequest(AuthConfig.builder()</span><br><span class="line">                        .clientId(<span class="string">&quot;e7c5c4c0cadb936b728b5d87af2ae1f2958c0a2cb24af4daa6f29a5f7&quot;</span>)</span><br><span class="line">                        .clientSecret(<span class="string">&quot;823a0fd650add2468a8e31ac684b7c614b1783331c73b32bb29040&quot;</span>)</span><br><span class="line">                        .redirectUri(<span class="string">&quot;http://localhost:80/oauth/callback/gitee&quot;</span>)</span><br><span class="line">                        .build());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authRequest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a><strong>结果</strong></h3><p>浏览器地址栏输入：<a href="http://localhost/">http://localhost</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210728135421.jpg" alt="img"></p>
<p><strong>GitHub登录返回的结果</strong></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210728135430.jpg" alt="img"></p>
<p><strong>Gitee登录返回的结果</strong></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210728135442.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>代码中包含了Gitee登录</p>
<p>GitHub完整代码地址：<a href="https://github.com/a6678696/JustAuthDemo">https://github.com/a6678696/JustAuthDemo</a></p>
<p>更多第三方登录教程查看：<a href="https://justauth.wiki/">https://justauth.wiki/</a></p>
<p>如果需要获取返回的用户信息，callback方法返回的数据类型修改为AuthResponse&lt;AuthUser&gt;，完整代码如下：（可直接覆盖上面代码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录后回调</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callback</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/callback/&#123;type&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthResponse&lt;AuthUser&gt; <span class="title">callback</span><span class="params">(<span class="meta">@PathVariable</span> String type, AuthCallback callback)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建request</span></span><br><span class="line">	AuthRequest authRequest = getAuthRequest(type);</span><br><span class="line">	<span class="comment">//登录(获取用户信息)</span></span><br><span class="line">	AuthResponse&lt;AuthUser&gt; authResponse = authRequest.login(callback);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印授权回传代码（2000 表示成功，可以用来判断用户登录是否成功）</span></span><br><span class="line">	System.out.println(<span class="string">&quot;状态码：&quot;</span> + authResponse.getCode());</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印用户的昵称、ID、头像</span></span><br><span class="line">	System.out.println(<span class="string">&quot;用户的uuid：&quot;</span> + authResponse.getData().getUuid());</span><br><span class="line">	System.out.println(<span class="string">&quot;用户的昵称：&quot;</span> + authResponse.getData().getNickname());</span><br><span class="line">	System.out.println(<span class="string">&quot;用户的头像：&quot;</span> + authResponse.getData().getAvatar());</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印用户的Token中的access_token</span></span><br><span class="line">	System.out.println(<span class="string">&quot;access_token：&quot;</span> + authResponse.getData().getToken().getAccessToken());</span><br><span class="line">	<span class="keyword">return</span> authResponse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>GitHub</tag>
        <tag>JustAuth</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub配置SSH Key</title>
    <url>/236.html</url>
    <content><![CDATA[<h3 id="配置SSH-Keys的好处"><a href="#配置SSH-Keys的好处" class="headerlink" title="配置SSH Keys的好处"></a>配置SSH Keys的好处</h3><p>在管理Git项目上，很多时候都是直接使用https url克隆到本地，当然也有有些人使用SSH url克隆到本地。</p>
<p>这两种方式的主要区别在于：</p>
<p>使用https url克隆对初学者来说会比较方便，复制https url然后到Git Bash里面直接用clone命令克隆到本地就好了，但是每次fetch和push代码都需要输入账号和密码，这也是https方式的麻烦之处。</p>
<p>而使用SSH url克隆却需要在克隆之前先配置和添加好SSH key，如果你想要使用SSH url将代码提交到GitHub的话，你必须是这个项目的拥有者，否则你是无法添加SSH key的。</p>
<p>另外SSH默认是每次fetch和push代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行fetch和push也可以另外进行设置。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="打开Git命令窗口"><a href="#打开Git命令窗口" class="headerlink" title="打开Git命令窗口"></a>打开Git命令窗口</h4><p>桌面上右键鼠标选择Git bash here打开Git</p>
<h4 id="检查本机已存在的SSH密匙"><a href="#检查本机已存在的SSH密匙" class="headerlink" title="检查本机已存在的SSH密匙"></a>检查本机已存在的SSH密匙</h4><p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>

<p>出现 No such file or directory 说明本机没有SSH密匙，否则继续输入ls查看.ssh文件夹内的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>如果有下面两个文件，说明本机有SSH密匙</p>
<p>id_rsa  id_rsa.pub</p>
<h4 id="创建本机的SSH密匙"><a href="#创建本机的SSH密匙" class="headerlink" title="创建本机的SSH密匙"></a>创建本机的SSH密匙</h4><p><font color="#dd0000">本机有SSH密匙则跳过本步骤</font></p>
<p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;注册Github账户时用的邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>连续按下回车键三次，至此本机的SSH密匙创建完成，该密钥一般存放在C盘的用户文件夹的.ssh文件夹中（我的是<code>C:\Users\LeDao\.ssh</code>）</p>
<h4 id="配置Github的SSH-Key"><a href="#配置Github的SSH-Key" class="headerlink" title="配置Github的SSH Key"></a><strong>配置Github的SSH Key</strong></h4><p>进入Github首页，点击右上角的头像选择Settings，选择左侧菜单的SSH and GPG keys，然后点击右侧的New SSH key按钮，打开上面第三步的本地密钥id_rsa.pub文件（用记事本打开并复制其内容），复制到GitHub的key文本框中，title可以随意设置</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210729123108.jpg" alt="img"></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>输入下面命令来测试是否配置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>出现<font color="#dd0000">Are you sure you want to continue connecting (yes/no/[fingerprint])?</font></p>
<p>输入<code>yes</code></p>
<p>看到<font color="#00dd00">Hi a6678696! You’ve successfully authenticated, but GitHub does not provide shell access.</font></p>
<p>说明配置成功</p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Git上传本地代码到GitHub</title>
    <url>/237.html</url>
    <content><![CDATA[<h3 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h3><p>初始化一个 Git 仓库，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（需要进入要初始化的文件夹内部，右键点击选择Git Bash Here）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>输入命令查看当前状态：<code>git status</code>，文件名颜色为红色</p>
<h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>输入命令查看当前状态：<code>git status</code>，文件名颜色为绿色</p>
<h3 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交备注&quot;</span></span><br></pre></td></tr></table></figure>

<p>输入命令查看当前状态：<code>git status</code>，发现没有东西可以提交</p>
<h3 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h3><p>记得先配置GitHub的SSH Key，如何配置查看博客：<a href="https://blog.zoutl.cn/236.html">GitHub 配置 SSH Key | LeDao’s Blog (zoutl.cn)</a></p>
<h3 id="和远程仓库关联"><a href="#和远程仓库关联" class="headerlink" title="和远程仓库关联"></a>和远程仓库关联</h3><p>把GitHub的SSH链接放到origin后，获取步骤看下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221206190919103.png" alt="image-20221206190919103"></p>
<p>输入关联命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin GitHub的SSH链接</span><br></pre></td></tr></table></figure>

<h3 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h3><p>输入推送命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210729132853.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub连接报错：&quot;ssh :connect to host github.com port :22 Connection timed out&quot;</title>
    <url>/238.html</url>
    <content><![CDATA[<h3 id="新建config文本"><a href="#新建config文本" class="headerlink" title="新建config文本"></a>新建config文本</h3><p>在存放公钥私钥（id_rsa 和 id_rsa.pub）的文件夹里，新建config文本，内容如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User 注册GitHub的邮箱</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port <span class="number">443</span></span><br></pre></td></tr></table></figure>

<h3 id="测试连接是否成功"><a href="#测试连接是否成功" class="headerlink" title="测试连接是否成功"></a>测试连接是否成功</h3><p>再次执行 <code>ssh -T git@github.com</code> 时，会出现提示如下，回车”yes”即可</p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>cmd命令操作MySQL数据库</title>
    <url>/24.html</url>
    <content><![CDATA[<h3 id="进入数据库命令行"><a href="#进入数据库命令行" class="headerlink" title="进入数据库命令行"></a>进入数据库命令行</h3><p>先进入数据库安装的盘符（如果要进入C盘根目录则连续敲两下命令cd .. ）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">d:</span><br></pre></td></tr></table></figure>

<p>然后进入数据库安装目录的bin文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> QQ\mysql_5.6.24_winx64\mysql-5.6.24-winx64\bin</span><br></pre></td></tr></table></figure>

<p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>输入MySQL密码即可操作数据库</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="查看已有数据库"><a href="#查看已有数据库" class="headerlink" title="查看已有数据库"></a>查看已有数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure>

<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名；</span><br></pre></td></tr></table></figure>

<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP DATABASE 数据库名；</span><br></pre></td></tr></table></figure>

<h4 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure>

<h4 id="查看已有的表"><a href="#查看已有的表" class="headerlink" title="查看已有的表"></a>查看已有的表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages绑定自定义域名</title>
    <url>/239.html</url>
    <content><![CDATA[<h3 id="修改对应域名的主机记录"><a href="#修改对应域名的主机记录" class="headerlink" title="修改对应域名的主机记录"></a>修改对应域名的主机记录</h3><p>下图是阿里云的修改界面，主机记录为绑定的完整域名</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-02%20013054.png"></p>
<h4 id="修改记录类型"><a href="#修改记录类型" class="headerlink" title="修改记录类型"></a>修改记录类型</h4><p>记录类型选CNAME</p>
<h4 id="修改记录值"><a href="#修改记录值" class="headerlink" title="修改记录值"></a>修改记录值</h4><p>记录值填GitHub Pages的访问地址（你的GitHub用户名.github.io）</p>
<h3 id="新建CNAME文件"><a href="#新建CNAME文件" class="headerlink" title="新建CNAME文件"></a>新建CNAME文件</h3><h4 id="GitHub仓库中新建"><a href="#GitHub仓库中新建" class="headerlink" title="GitHub仓库中新建"></a>GitHub仓库中新建</h4><p>文件内容为你要绑定的域名</p>
<h4 id="取消强制HTTPS"><a href="#取消强制HTTPS" class="headerlink" title="取消强制HTTPS"></a>取消强制HTTPS</h4><p>取消下图的Enforce HTTPS的勾选即可，（进入该仓库的Settings，点击左侧菜单的Pages进入下面界面）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-02%20014616.png"></p>
<h4 id="再次新建CNAME文件"><a href="#再次新建CNAME文件" class="headerlink" title="再次新建CNAME文件"></a>再次新建CNAME文件</h4><p>最好也在hexo的根目录的source文件夹中也新建相同的文件，内容也是你要绑定的域名</p>
<p>这样做的原因：如果根目录没有这个文件，通过hexo d命令更新仓库时会删除掉仓库中的CNAME文件，那就又需要在仓库中新建CNAME文件</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>稍后即可通过绑定的域名访问GitHub  Pages了</p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next安装黑暗模式</title>
    <url>/240.html</url>
    <content><![CDATA[<h3 id="next自带的黑暗模式"><a href="#next自带的黑暗模式" class="headerlink" title="next自带的黑暗模式"></a>next自带的黑暗模式</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>配置十分简单</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>缺少切换按钮，默认是根据系统偏好（系统是否处于暗黑模式）来决定是否启用</p>
<h4 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h4><p>修改next的主题配置文件_config.yml的darkmode对应的值为true</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="自己安装"><a href="#自己安装" class="headerlink" title="自己安装"></a>自己安装</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>插件名称：hexo-next-darkmode，安装前先关闭自带的黑暗模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-next-darkmode --save</span><br></pre></td></tr></table></figure>

<h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>在next的主题配置文件_config.yml中添加下面内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Darkmode JS</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/rqh656418510/hexo-next-darkmode, https://github.com/sandoche/Darkmode.js</span></span><br><span class="line"><span class="attr">darkmode_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">&#x27;64px&#x27;</span> <span class="comment"># default: &#x27;32px&#x27;</span></span><br><span class="line">  <span class="attr">right:</span> <span class="string">&#x27;unset&#x27;</span> <span class="comment"># default: &#x27;32px&#x27;</span></span><br><span class="line">  <span class="attr">left:</span> <span class="string">&#x27;32px&#x27;</span> <span class="comment"># default: &#x27;unset&#x27;</span></span><br><span class="line">  <span class="attr">time:</span> <span class="string">&#x27;0.5s&#x27;</span> <span class="comment"># default: &#x27;0.3s&#x27;</span></span><br><span class="line">  <span class="attr">mixColor:</span> <span class="string">&#x27;transparent&#x27;</span> <span class="comment"># default: &#x27;#fff&#x27;</span></span><br><span class="line">  <span class="attr">backgroundColor:</span> <span class="string">&#x27;transparent&#x27;</span> <span class="comment"># default: &#x27;#fff&#x27;</span></span><br><span class="line">  <span class="attr">buttonColorDark:</span> <span class="string">&#x27;#100f2c&#x27;</span> <span class="comment"># default: &#x27;#100f2c&#x27;</span></span><br><span class="line">  <span class="attr">buttonColorLight:</span> <span class="string">&#x27;#fff&#x27;</span> <span class="comment"># default: &#x27;#fff&#x27;</span></span><br><span class="line">  <span class="attr">isActivated:</span> <span class="literal">true</span> <span class="comment"># default false</span></span><br><span class="line">  <span class="attr">saveInCookies:</span> <span class="literal">true</span> <span class="comment"># default: true</span></span><br><span class="line">  <span class="attr">label:</span> <span class="string">&#x27;🌓&#x27;</span> <span class="comment"># default: &#x27;&#x27;</span></span><br><span class="line">  <span class="attr">autoMatchOsTheme:</span> <span class="literal">true</span> <span class="comment"># default: true</span></span><br><span class="line">  <span class="attr">libUrl:</span> <span class="comment"># Set custom library cdn url for Darkmode.js</span></span><br></pre></td></tr></table></figure>

<p>至此，黑暗模式安装完成，点击左下角的按钮即可切换黑暗模式</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-02%20101911.png"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.techgrow.cn/posts/abf4aee1.html">Hexo Next 8.x 主题添加可切换的暗黑模式</a></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next开启本地搜索</title>
    <url>/241.html</url>
    <content><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>插件名称为：hexo-generator-search</p>
<p>安装命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p>修改主题的_config.yml，修改local_search的enable为true，代表启用本地搜索</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">6</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="修改根目录的-config-yml"><a href="#修改根目录的-config-yml" class="headerlink" title="修改根目录的_config.yml"></a>修改根目录的_config.yml</h3><p>在根目录的_config.yml中添加以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>重新部署网站后就可以使用本地搜索功能了</p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/242.html</url>
    <content><![CDATA[<h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)</p>
<p>在某些情况（尤其是更换主题后），如果对站点的更改无论如何也不生效，就运行该命令。</p>
<h3 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h3><p>生成静态文件</p>
<p>是hexo generate的简写</p>
<h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><p>部署网站，同时将网站的改动提交到GitHub仓库</p>
<p>是hexo deploy的简写</p>
<h3 id="hexo-g-d"><a href="#hexo-g-d" class="headerlink" title="hexo g -d"></a>hexo g -d</h3><p><code>hexo g</code>和<code>hexo d</code>先后执行</p>
<h3 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h3><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<p>是hexo server的简写</p>
<h3 id="hexo-v"><a href="#hexo-v" class="headerlink" title="hexo v"></a>hexo v</h3><p>显示hexo的版本</p>
<p>是hexo version的简写</p>
<h3 id="hexo-new-“文章名称”"><a href="#hexo-new-“文章名称”" class="headerlink" title="hexo new “文章名称”"></a>hexo new “文章名称”</h3><p>新建一个<font color="#dd0000">文章名称.md</font>，该文件在站点根目录的<font color="#dd0000">source/_post/</font>中</p>
<h3 id="hexo-new-page-“名称”"><a href="#hexo-new-page-“名称”" class="headerlink" title="hexo new page “名称”"></a>hexo new page “名称”</h3><p>新建一个页面，这个页面在站点根目录的<code>source/名称/</code>中（名为index.md），可以通过<code>/名称/</code>访问这个页面</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>以上都是我常用的命令，更多命令及详情查看：<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next创建标签页</title>
    <url>/243.html</url>
    <content><![CDATA[<h3 id="创建命令"><a href="#创建命令" class="headerlink" title="创建命令"></a>创建命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>

<p>在站点根目录下的source文件夹中会新建一个名为tags的文件夹，文件夹中有一个<font color="#dd0000">index.md</font>文件</p>
<h3 id="修改index-md文件"><a href="#修改index-md文件" class="headerlink" title="修改index.md文件"></a>修改index.md文件</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: </span><br><span class="line">date: 2021-07-29 15:03:57</span><br><span class="line">comments: false</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<p>title为该页面的标题</p>
<p>date为创建时间</p>
<p>comments: false代表该页面不能评论（没有评论模块）</p>
<p>type: “tags”代表对应文章的tags</p>
<h3 id="指定文章的tags变量"><a href="#指定文章的tags变量" class="headerlink" title="指定文章的tags变量"></a>指定文章的tags变量</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-03%20131829.png"></p>
<p>文章的Front-matter添加tags变量，例如：（tags变量填标签名）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: hexo next创建标签页</span><br><span class="line">date: 2021-08-03 12:59:53</span><br><span class="line">tags: hexo</span><br></pre></td></tr></table></figure>

<h3 id="修改主题的配置文件-config-yml"><a href="#修改主题的配置文件-config-yml" class="headerlink" title="修改主题的配置文件_config.yml"></a>修改主题的配置文件_config.yml</h3><p>在memu中添加tags，加#号会注释掉不显示</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="comment">#日期: /time/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<h3 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-03%20132524.png"></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitalk显示：未找到相关的Issues进行评论</title>
    <url>/244.html</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>已经正确安装Gitalk</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="GitHub网站登录"><a href="#GitHub网站登录" class="headerlink" title="GitHub网站登录"></a>GitHub网站登录</h4><p>进入GitHub网站，登录Gitalk评论仓库的所有者账号</p>
<h4 id="Gitalk登录GitHub账号"><a href="#Gitalk登录GitHub账号" class="headerlink" title="Gitalk登录GitHub账号"></a>Gitalk登录GitHub账号</h4><p>进入显示<font color="#dd0000">未找到相关的 Issues 进行评论</font>的网页，点击<font color="#dd0000">使用GitHub登录</font>按钮，Gitalk评论仓库将自动创建一个当前网页的 Issues ，然后每进入一个显示<font color="#dd0000">未找到相关的 Issues 进行评论</font>的网页，将会自动创建 Issues</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-03%20134819.png"></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-03%20140545.png"></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next添加页脚网站运行时间</title>
    <url>/245.html</url>
    <content><![CDATA[<h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;sitetime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">siteTime</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.setTimeout(<span class="string">&quot;siteTime()&quot;</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> seconds = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> minutes = seconds * <span class="number">60</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> hours = minutes * <span class="number">60</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> days = hours * <span class="number">24</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> years = days * <span class="number">365</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> todayYear = today.getFullYear();</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> todayMonth = today.getMonth()+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> todayDate = today.getDate();</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> todayHour = today.getHours();</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> todayMinute = today.getMinutes();</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> todaySecond = today.getSeconds();</span></span><br><span class="line"><span class="javascript">		<span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">		Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">		year - 作为date对象的年份，为4位年份值</span></span></span><br><span class="line"><span class="comment"><span class="javascript">		month - 0-11之间的整数，做为date对象的月份</span></span></span><br><span class="line"><span class="comment"><span class="javascript">		day - 1-31之间的整数，做为date对象的天数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">		hours - 0(午夜24点)-23之间的整数，做为date对象的小时数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">		minutes - 0-59之间的整数，做为date对象的分钟数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">		seconds - 0-59之间的整数，做为date对象的秒数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">		microseconds - 0-999之间的整数，做为date对象的毫秒数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> t1 = <span class="built_in">Date</span>.UTC(<span class="number">2020</span>,<span class="number">02</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">00</span>,<span class="number">00</span>); <span class="comment">//北京时间2018-2-13 00:00:00</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> t2 = <span class="built_in">Date</span>.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> diff = t2-t1;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> diffYears = <span class="built_in">Math</span>.floor(diff/years);</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> diffDays = <span class="built_in">Math</span>.floor((diff/days)-diffYears*<span class="number">365</span>);</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> diffHours = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days)/hours);</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> diffMinutes = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours)/minutes);</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> diffSeconds = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.getElementById(<span class="string">&quot;sitetime&quot;</span>).innerHTML=<span class="string">&quot; 已运行&quot;</span>+<span class="comment">/*diffYears+&quot; 年 &quot;+*/</span>diffDays+<span class="string">&quot; 天 &quot;</span>+diffHours+<span class="string">&quot; 小时 &quot;</span>+diffMinutes+<span class="string">&quot; 分钟 &quot;</span>+diffSeconds+<span class="string">&quot; 秒&quot;</span>;</span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript">	siteTime();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在页脚文件添加"><a href="#在页脚文件添加" class="headerlink" title="在页脚文件添加"></a>在页脚文件添加</h3><p>文件名称为：<font color="#dd0000">footer.swig</font>，文件路径：<font color="#dd0000">themes/next/layout/_partials/footer.swig</font></p>
<p>在哪里添加根据自己的需求而定</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-03%20214348.png"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/qq_39720594/article/details/105411030">https://blog.csdn.net/qq_39720594/article/details/105411030</a></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Java获取随机数</title>
    <url>/246.html</url>
    <content><![CDATA[<h3 id="System-currentTimeMillis"><a href="#System-currentTimeMillis" class="headerlink" title="System.currentTimeMillis()"></a>System.currentTimeMillis()</h3><p>通过System.currentTimeMillis()来获取随机数，实际上是获取当前时间毫秒数，它是long类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">        System.out.println(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h3><p>它返回的是0(包含)到1(不包含)之间的double值，如果要返回[0,100]的int整数，只需要将获得的结果乘以100再转换为int类型即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//[0,1)</span></span><br><span class="line">        <span class="keyword">double</span> d = Math.random();</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        <span class="comment">//[0,100]</span></span><br><span class="line">        <span class="keyword">int</span> i = (<span class="keyword">int</span>) (d * <span class="number">100</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Random-nextInt-int-bound"><a href="#Random-nextInt-int-bound" class="headerlink" title="Random.nextInt(int bound)"></a>Random.nextInt(int bound)</h3><p>获取[0,bound-1]的int整数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//[0,99]</span></span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Hexo新建博客的模板</title>
    <url>/247.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通过<code>hexo new &quot;博客名称&quot;</code>命令新建博客时，默认使用的模板是<code>post.md</code>，该文件在站点根目录的<code>scaffolds</code>文件夹中，修改hexo新建博客的模板一共有两种方法：</p>
<ol>
<li>直接修改post.md</li>
<li>新建自己的模板</li>
</ol>
<p>下面以添加categories（分类）为例</p>
<h3 id="直接修改post-md"><a href="#直接修改post-md" class="headerlink" title="直接修改post.md"></a>直接修改post.md</h3><p>在文章属性Front-matter中添加categories，<font color="#dd0000">推荐使用这种方式</font></p>
<p><strong>添加前（markdown源码）</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line"><span class="section">tags:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p><strong>添加后（markdown源码）</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line"><span class="section">categories:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h3 id="新建自己的模板"><a href="#新建自己的模板" class="headerlink" title="新建自己的模板"></a>新建自己的模板</h3><p>新建一个名为<code>blog.md</code>的模板（名称可以根据自己的需求随便取，但是不可以与当前的文件夹中的文件重名，也不可以命名为page.md，因为<code>hexo new page &quot;名称&quot;</code>命令是新建一个页面），添加以下内容（markdown源码）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line"><span class="section">categories:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>如果要新建博客，通过<code>hexo new blog &quot;博客名称&quot;</code>命令新建，该命令中的<code>blog</code>字段说明使用的是名为<code>blog.md</code>的模板</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>详情查看hexo官网：<a href="https://hexo.io/zh-cn/docs/writing">https://hexo.io/zh-cn/docs/writing</a></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Config整合Eureka</title>
    <url>/248.html</url>
    <content><![CDATA[<h3 id="上传配置文件到GitHub"><a href="#上传配置文件到GitHub" class="headerlink" title="上传配置文件到GitHub"></a>上传配置文件到GitHub</h3><p>配置文件名为：eureka_config.yml，上传到GitHub的microservice-config库中，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span>  <span class="comment">#当前使用的是dev配置</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2004</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span> </span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false 由于该应用为注册中心，所以设置为false,代表不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false 由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置为false</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">       <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>       <span class="comment">#设置与Eureka注册中心交互的地址，查询服务和注册服务用到       #设置与Eureka注册中心交互的地址，查询服务和注册服务用到</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2004</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span>  </span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span> </span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false 由于该应用为注册中心，所以设置为false,代表不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false 由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置为false</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">       <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>       <span class="comment">#设置与Eureka注册中心交互的地址，查询服务和注册服务用到       #设置与Eureka注册中心交互的地址，查询服务和注册服务用到</span></span><br></pre></td></tr></table></figure>

<h3 id="整合过程"><a href="#整合过程" class="headerlink" title="整合过程"></a>整合过程</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Cloud Client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Eureka服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-eureka-server-config</span></span><br></pre></td></tr></table></figure>

<h4 id="bootstrap-yml配置"><a href="#bootstrap-yml配置" class="headerlink" title="bootstrap.yml配置"></a>bootstrap.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-eureka-server-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">eureka_config</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://configserver.ledao.com:4001</span>  <span class="comment"># 配置configserver地址</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>  <span class="comment"># 级别</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>  <span class="comment"># 分支git中 默认master</span></span><br></pre></td></tr></table></figure>

<h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Config整合Eureka启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-18 23:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication_2004</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication_2004.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加本地域名映射"><a href="#添加本地域名映射" class="headerlink" title="添加本地域名映射"></a>添加本地域名映射</h4><p>找到 C:\Windows\System32\drivers\etc 打开hosts，底部加配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>  eureka2004.ledao.com</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动项目：microservice-config-server-4001和microservice-eureka-server-config-2004</p>
<p>地址栏输入：<a href="http://eureka2004.ledao.com:2004/">http://eureka2004.ledao.com:2004/</a> ，如果配置成功会看到Eureka界面</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>整合提供者服务和消费者服务的过程也基本相似</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo隐藏文章</title>
    <url>/249.html</url>
    <content><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-hide-posts --save</span><br></pre></td></tr></table></figure>

<h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-hide-posts</span></span><br><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="comment"># 可以改成其他你喜欢的名字</span></span><br><span class="line">  <span class="attr">filter:</span> <span class="string">hidden</span></span><br><span class="line">  <span class="comment"># 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span></span><br><span class="line">  <span class="comment"># 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span></span><br><span class="line">  <span class="comment"># 留空则默认全部隐藏</span></span><br><span class="line">  <span class="attr">public_generators:</span> []</span><br><span class="line">  <span class="comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  <span class="attr">noindex:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="隐藏文章"><a href="#隐藏文章" class="headerlink" title="隐藏文章"></a>隐藏文章</h3><p>在文章属性Front-matter中添加<font color="#dd0000">hidden: true</font>，如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo隐藏文章</span><br><span class="line">tags: hexo</span><br><span class="line">categories: hexo</span><br><span class="line">abbrlink: 49410</span><br><span class="line">date: 2021-08-06 10:15:05</span><br><span class="line"><span class="section">hidden: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>隐藏后可通过该文章的链接访问，可以通过 <font color="#dd0000">hexo hidden:list </font>查看已隐藏的文章</p>
<p>如果不想让人通过该文章的链接访问，那么我们可以加密文章，如何加密文章查看：<a href="https://blog.zoutl.cn/250.html">hexo加密文章</a></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL创建表语句</title>
    <url>/25.html</url>
    <content><![CDATA[<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>主键：primary key，自增：auto_increment</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_bookType(</span><br><span class="line"> </span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line"> </span><br><span class="line">bookTypeName <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"> </span><br><span class="line">bookTypeDesc <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line"> </span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_book(</span><br><span class="line"> </span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line"> </span><br><span class="line">bookName <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"> </span><br><span class="line">author <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"> </span><br><span class="line">price <span class="type">DECIMAL</span>(<span class="number">6</span>,<span class="number">2</span>),</span><br><span class="line"> </span><br><span class="line">bookTypeId <span class="type">INT</span>,</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CONSTRAINT</span> `fk` <span class="keyword">FOREIGN</span> KEY (`bookTypeId`) <span class="keyword">REFERENCES</span> `t_bookType`(`id`)</span><br><span class="line"> </span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名; </span><br></pre></td></tr></table></figure>

<h3 id="查看表的创建语句"><a href="#查看表的创建语句" class="headerlink" title="查看表的创建语句"></a>查看表的创建语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名; </span><br></pre></td></tr></table></figure>

<h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_book RENAME t_book2; </span><br></pre></td></tr></table></figure>

<h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><p>更改后的名字 数据类型（长度）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_book CHANGE bookName bookName2 <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<h3 id="在第一行添加字段"><a href="#在第一行添加字段" class="headerlink" title="在第一行添加字段"></a>在第一行添加字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_book <span class="keyword">ADD</span> test <span class="type">INT</span> <span class="keyword">FIRST</span>;</span><br></pre></td></tr></table></figure>

<h3 id="在某个字段后添加字段"><a href="#在某个字段后添加字段" class="headerlink" title="在某个字段后添加字段"></a>在某个字段后添加字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_book <span class="keyword">ADD</span> test1 <span class="type">INT</span> after author;</span><br></pre></td></tr></table></figure>

<h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_book <span class="keyword">DROP</span> test;</span><br></pre></td></tr></table></figure>

<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>有外键约束的要先删除完子表，才能删除主表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t_book;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo加密文章</title>
    <url>/250.html</url>
    <content><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><p>将 “password” 字段添加到文章信息头</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line"><span class="section">password: hello</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>执行命令：hexo clean，hexo g，hexo s</p>
<p>然后可以在本地预览加密的文章</p>
<h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><p>可以中文化提示信息以及更多配置（也可以不配置）</p>
<p>在站点根目录的_config.yml文件中添加下面内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加密文章</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">有东西被加密了,</span> <span class="string">请输入密码查看.</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">xray</span></span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md</a></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10安装ZooKeeper</title>
    <url>/251.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>进入ZooKeeper主页：<a href="https://zookeeper.apache.org/index.html">https://zookeeper.apache.org/index.html</a> ，点击Download进入下载页面</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20175632.png"></p>
<p>根据自己的需求下载对应的版本，下载第一个</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20175138.png"></p>
<p>点击HTTP下的下载链接</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20175221.png"></p>
<p>下载完的文件名中包含bin字段（从版本3.5.5开始，带有bin名称的包才是我们想要的下载可以直接使用的里面有编译后的二进制的包，而之前的普通的tar.gz的包里面是只是源码的包无法直接使用）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20175857.png"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将下载好的文件解压，再解压，如果出现替换文件提示，选择全否</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20180005.png"></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>点击bin文件夹中的zkServer.cmd运行，如果出现一个CMD窗口马上就关闭，说明启动失败自动关闭窗口，这时我们需要查看错误信息，修改zkServer.cmd（在文件的最后新建一行，加上pause）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20184217.png"></p>
<p>再次运行查看错误信息，从下图可以看到conf文件夹中没有zoo.cfg这个文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20180147.png"></p>
<p>将conf文件夹的zoo_sample.cfg这个文件重命名为zoo.cfg</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20180220.png"></p>
<p>再次启动，如果看到端口号：2181，说明启动成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20180256.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
        <tag>ZooKeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装ZooKeeper</title>
    <url>/252.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>创建一个文件夹存放ZooKeeper，进入该文件夹后使用swet命令下载apache-zookeeper-3.7.0-bin.tar.gz（<font color="#dd0000">我的阿里云CentOS7服务器中使用wge命令</font>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://downloads.apache.org/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.7.0-bin.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>进入conf文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/zookeeper/apache-zookeeper-3.7.0-bin/conf/</span><br></pre></td></tr></table></figure>

<p>复制zoo_sample.cfg到当前目录，并命令为zoo.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>进入解压后的文件夹apache-zookeeper-3.7.0-bin</p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/zkServer.sh start</span><br></pre></td></tr></table></figure>

<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><p>查看当前状态，看到下图说明启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/zkServer.sh status</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20211050.png"></p>
<p>也进入客户端查看运行状态，看到 <font color="#dd0000">Welcome to Zookeeper!</font>说明启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/zkCli.sh -server localhost:2181</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20210924.png"></p>
<h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/zkServer.sh stop</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>ZooKeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Dubbo Admin控制台</title>
    <url>/254.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>阿里云盘链接：<a href="https://www.aliyundrive.com/s/nZaiPAfGKnq">https://www.aliyundrive.com/s/nZaiPAfGKnq</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装一个Tomcat7，平时不使用，专门用来运行Dubbo Admin控制台，安装步骤 ：<a href="https://blog.zoutl.cn/147.html">安装 Tomcat | LeDao 的博客 (zoutl.cn)</a></p>
<p>删除Tomcat7的安装目录webapp/ROOT文件夹中的全部文件（该ROOT文件夹为直接输入端口号时显示的Tomcat主页）</p>
<p>解压下载的dubbo-admin-2.6.0.war，复制解压后的所有文件到webapp/ROOT文件夹中</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20234017.png"></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>必须先启动Zookeeper，如何启动查看：<a href="https://blog.zoutl.cn/251.html">Windows10 安装 ZooKeeper | LeDao 的博客 (zoutl.cn)</a></p>
<p>双击Tomcat7的安装目录bin文件夹中的startup.bat运行Tomcat7，在浏览器地址栏输入localhost:8080，输入用户名和密码，默认用户名和密码都是root</p>
<p>如果输入localhost:8080后出现下面图片所示的界面，说明8080端口被占用了，那么直接修改Tomcat7的默认端口，去修改Tomcat7的配置文件server.xml（在conf文件夹中）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20235223.png"></p>
<p>修改前：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改后：（我修改为8888）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8888&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在地址栏中输入localhost:8888，输入用户名和密码，即可进入Dubbo Admin控制台</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20235847.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ZooKeeper</tag>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA创建Maven项目</title>
    <url>/253.html</url>
    <content><![CDATA[<h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><blockquote>
<p>选择Maven项目、JDK版本、Maven Archetype（选maven-archetype-webapp，可以不创建后面再加入）</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20220412.png"></p>
<h3 id="取名"><a href="#取名" class="headerlink" title="取名"></a>取名</h3><blockquote>
<p>取名以及选择项目路径</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20220536.png"></p>
<h3 id="填写配置"><a href="#填写配置" class="headerlink" title="填写配置"></a>填写配置</h3><blockquote>
<p>选择本机的Maven安装路径、配置文件、仓库路径</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-09%20220708.png"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>消费Dubbo服务</title>
    <url>/256.html</url>
    <content><![CDATA[<p>新建一个子模块项目名称为Consumer</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.35.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="新建dubbo-demo-consumer-xml"><a href="#新建dubbo-demo-consumer-xml" class="headerlink" title="新建dubbo-demo-consumer.xml"></a>新建dubbo-demo-consumer.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;demo-consumer&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用zookeeper注册中心暴露服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://localhost:2181&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--生成远程服务代理，可以和本地bean一样使用demoProviderService  check属性，启动的时候是否检查 一般设置为false 启动的时候不检查--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;demoProviderService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;service.DemoProviderService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><h4 id="DemoProviderService-java"><a href="#DemoProviderService-java" class="headerlink" title="DemoProviderService.java"></a>DemoProviderService.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务提供者接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-10 2:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoProviderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> service.DemoProviderService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-10 2:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;dubbo-demo-consumer.xml&quot;</span>);</span><br><span class="line">        context.start();</span><br><span class="line">        DemoProviderService demoProviderService = (DemoProviderService) context.getBean(<span class="string">&quot;demoProviderService&quot;</span>);</span><br><span class="line">        String result = demoProviderService.sayHello(<span class="string">&quot;小米&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;远程调用的结果：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>Consumer子模块项目没有服务提供者接口的实现类，但是调用了Provider子模块项目的服务提供者接口的实现类，从而实现消费Dubbo服务</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20022051.png"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20022200.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>发布Dubbo服务</title>
    <url>/255.html</url>
    <content><![CDATA[<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>新建一个Maven项目名称为DubboDemo，在该项目下新建一个子模块项目名称为Provider</p>
<p>创建java和resources文件夹</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20000838.png"></p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.35.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><p>服务提供者接口DemoProviderService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务提供者接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-09 22:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoProviderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务提供者接口实现类DemoProviderServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> service.DemoProviderService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务提供者接口实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-10 2:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoProviderServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoProviderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务员（端口：20880）&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h3><p>在resources文件夹中新建，命名为dubbo-demo-provider.xml，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供方应用名称, 用于计算依赖关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;demo-provider&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用zookeeper注册中心暴露服务地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://localhost:2181&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用dubbo协议在20880端口暴露服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--service实现类作为本地的一个bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoProviderService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.DemoProviderServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明需要暴露的服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;service.DemoProviderService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoProviderService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-10 2:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;dubbo-demo-provider.xml&quot;</span>);</span><br><span class="line">        context.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务提供者注册成功（端口：20880）&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>在Dubbo Admin控制台中查看服务，如何使用Dubbo Admin控制台查看博客：<a href="/254.html">使用Dubbo Admin控制台</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20001746.png"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20022214.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA创建Maven多模块项目</title>
    <url>/257.html</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>已经创建好一个Maven项目（在创建这个项目时不需要勾选Create from archetype），可以直接删除它的src文件夹，我们把该项目称为父模块</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>鼠标右击该父模块，选择New  &gt;&gt; Module，然后像新建项目那样操作即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20122822.png"></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20122255.png"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven使用parent统一管理依赖版本</title>
    <url>/258.html</url>
    <content><![CDATA[<h3 id="新建子模块"><a href="#新建子模块" class="headerlink" title="新建子模块"></a>新建子模块</h3><p>新建一个Maven子模块并命名为Parent，不需要勾选Create from archetype，删除src文件夹</p>
<h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p>添加一个dependencyManagement节点，在dependencyManagement节点内添加dependencies节点，并在dependencies节点内添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>pom.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Parent Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.35.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="统一管理版本"><a href="#统一管理版本" class="headerlink" title="统一管理版本"></a>统一管理版本</h3><p>在properties节点内管理依赖版本，修改后的pom.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Parent Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖版本管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Api.version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">Api.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">zkclient.version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">zkclient.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">curator-framework.version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">curator-framework.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.46<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j-api.version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">slf4j-api.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-lang3.version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">commons-lang3.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">netty-all.version</span>&gt;</span>4.0.35.Final<span class="tag">&lt;/<span class="name">netty-all.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;Api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zkclient.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;curator-framework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-lang3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;netty-all.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="其它模块继承"><a href="#其它模块继承" class="headerlink" title="其它模块继承"></a>其它模块继承</h3><p>使用parent节点继承，节点内填要继承的模块依赖引用路径，Parent模块的引用路径如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整parent节点及其代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>继承的模块也需要引入依赖，但是不需要引入版本号，版本号由继承得到，完整pom.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Provider Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven出现错误：&quot;Parent, please verify your project structure&quot;的解决办法</title>
    <url>/259.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>该错误出现在使用parent节点继承其它模块的依赖版本号时</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在parent节点加入&lt;relativePath/&gt;，完整parent节点如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL对表数据进行增删改查</title>
    <url>/26.html</url>
    <content><![CDATA[<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `db_student`.`t_student` (`id`, `stuName`, `age`, `sex`, `gradeName`)<span class="keyword">VALUES</span>(<span class="string">&#x27;15&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;大四&#x27;</span>); </span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `db_student`.`t_student` <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="string">&#x27;16&#x27;</span>; </span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE `db_student`.`t_student` <span class="keyword">SET</span> `sex`<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>,`gradeName`<span class="operator">=</span><span class="string">&#x27;大四&#x27;</span> <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="string">&#x27;16&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> db_miaosha.`t_user` <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">14</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo抽取服务提供者和消费者的共同接口</title>
    <url>/260.html</url>
    <content><![CDATA[<h3 id="抽取原因"><a href="#抽取原因" class="headerlink" title="抽取原因"></a>抽取原因</h3><p>抽取前需要在服务提供者以及消费者模块中分别定义一次接口，抽取后只需要定义一次即可，可以提高开发的效率</p>
<h3 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h3><p>新建一个子模块项目存放接口，我命令为Api</p>
<h3 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h3><p>在java文件夹中新建service文件夹，再创建一个接口，该接口和服务提供者以及消费者的接口路径、名称要一样</p>
<h3 id="删除接口"><a href="#删除接口" class="headerlink" title="删除接口"></a>删除接口</h3><p>然后删除掉服务提供者和消费者的接口，删除后服务提供者以及消费者会报错</p>
<h3 id="引入存放接口模块的依赖"><a href="#引入存放接口模块的依赖" class="headerlink" title="引入存放接口模块的依赖"></a>引入存放接口模块的依赖</h3><p>引入的依赖路径在Api模块的pom.xml，如下图：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20143533.png"></p>
<p>在服务提供者以及消费者pom.xml的dependencies节点中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>至此，共同接口抽取完成</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo服务集群实现负载均衡</title>
    <url>/261.html</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>当某个服务并发量特别大的时候，一个服务延迟太高，我们就需要进行服务集群，例如某个项目一天注册量10万，这个注册功能就必须要进行集群了，否则一个服务无法应付这么大的并发量</p>
<p>企业级项目多个服务集群，每个服务都放不同机器，不仅能实现负载均衡，也能进行容错；就算一个机器挂了，其他机器可以继续服务</p>
<p>多个服务也提供权重设置，来动态设置请求分发量</p>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>dubbo的服务集群很简单，只需要配置文件里改个端口即可，其他代码不需要动</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>在之前Provider子模块项目的基础上，直接修改dubbo-demo-provider.xml的端口号即可（端口号只要不被占用即可，不需要和本文章的端口号一样）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用dubbo协议在20880端口暴露服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用dubbo协议在20881端口暴露服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20881&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="#dd0000">上面的教程已经实现了服务集群，下面的教程只是为了可以更直观看到结果</font></p>
<p>为了可以更直观看到结果，我不直接修改dubbo-demo-provider.xml的端口号，而是新建三个文件：DemoProviderServiceImpl2.java、dubbo-demo-provider2.xml、ProviderTest2.java（路径和原来的文件一样），执行ProviderTest.java和ProviderTest2.java会分别发布两个Dubbo服务：一个端口为20880，另一个端口为20881，三个文件的代码如下：</p>
<p><strong>dubbo-demo-provider2.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供方应用名称, 用于计算依赖关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;demo-provider&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用zookeeper注册中心暴露服务地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://localhost:2181&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用dubbo协议在20881端口暴露服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20881&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--service实现类作为本地的一个bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoProviderService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.DemoProviderServiceImpl2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明需要暴露的服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;service.DemoProviderService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoProviderService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>DemoProviderServiceImpl2.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> service.DemoProviderService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务提供者接口实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-10 2:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoProviderServiceImpl2</span> <span class="keyword">implements</span> <span class="title">DemoProviderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务员（端口：20881）&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ProviderTest2.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-10 2:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;dubbo-demo-provider2.xml&quot;</span>);</span><br><span class="line">        context.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务提供者注册成功（端口：20881）&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>分别执行ProviderTest.java和ProviderTest2.java后</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20212025.png"></p>
<p>执行Consumer子模块的ConsumerTest.java后，会有两个结果（因为有两个提供者的服务，消费某个服务的概率为<font color="#dd0000">该服务的权重/所有服务的总权重</font>，所以要提高某个服务被消费的概率就提高该服务的权重即可）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20212606.png"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-10%20212630.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud搭建公共模块项目</title>
    <url>/263.html</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>存放一些其他项目公用的东西，比如实体类，工具类等</p>
<h3 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h3><p>该Module为Maven项目，命名为microservice-common</p>
<h4 id="继承依赖"><a href="#继承依赖" class="headerlink" title="继承依赖"></a>继承依赖</h4><p>在pom.xml文件中加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-common Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="新建Student实体类"><a href="#新建Student实体类" class="headerlink" title="新建Student实体类"></a>新建Student实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 13:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(length = 50)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年纪</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(length = 50)</span></span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(String grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h4><p>新建一个名为db_springcloud的数据库，不需要添加表，jpa会根据实体类自动生成</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud搭建父项目</title>
    <url>/262.html</url>
    <content><![CDATA[<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>新建一个名称为SpringCloud普通项目，删除src文件夹</p>
<h3 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h3><h4 id="Module-概述"><a href="#Module-概述" class="headerlink" title="Module 概述"></a>Module 概述</h4><p>在SpringCloud下新建一个Module Maven项目，名称为microservice，删除src文件夹，用于管理依赖版本，pom.xml文件的packaging节点修改为pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><p>引入Spring Cloud、Spring Boot、连接池依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Spring Cloud--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Spring Boot--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud搭建服务提供者项目</title>
    <url>/264.html</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用于提供服务</p>
<h3 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h3><p>该Module为Maven项目，命名为microservice-student-provider-1001</p>
<h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承microservice依赖版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-student-provider-1001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-student-provider-1001 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入microservice-common依赖,引入后可以使用microservice-common的实体类,工具类等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><p>在resources中新建application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">1001</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_springcloud?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="学生Repository接口"><a href="#学生Repository接口" class="headerlink" title="学生Repository接口"></a>学生Repository接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生Repository接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 13:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Student</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="学生信息Service接口"><a href="#学生信息Service接口" class="headerlink" title="学生信息Service接口"></a>学生信息Service接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生信息Service接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 13:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加或者修改学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Student <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="学生信息Service实现类"><a href="#学生信息Service实现类" class="headerlink" title="学生信息Service实现类"></a>学生信息Service实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生信息Service实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 13:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;studentService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        studentRepository.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        studentRepository.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务提供者-学生信息控制器"><a href="#服务提供者-学生信息控制器" class="headerlink" title="服务提供者-学生信息控制器"></a>服务提供者-学生信息控制器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务提供者-学生信息控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 13:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加或者修改学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            studentService.save(student);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            studentService.delete(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务提供者启动类"><a href="#服务提供者启动类" class="headerlink" title="服务提供者启动类"></a>服务提供者启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务提供者启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 14:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EntityScan(&quot;com/ledao/entity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentProviderApplication_1001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudentProviderApplication_1001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>运行服务提供者启动类后，在浏览器地址栏输入对应URL可以进行增删查改操作，端口为1001</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud搭建服务消费者项目</title>
    <url>/265.html</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用于消费服务</p>
<h3 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h3><p>该Module为Maven项目，命名为microservice-student-consumer-80</p>
<h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承microservice依赖版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-student-consumer-80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-student-consumer-80 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入microservice-common依赖,引入后可以使用microservice-common的实体类,工具类等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><p>在resources中新建application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<h4 id="SpringCloud相关配置"><a href="#SpringCloud相关配置" class="headerlink" title="SpringCloud相关配置"></a>SpringCloud相关配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringCloud相关配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 14:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用服务模版</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务消费者-学生信息控制器"><a href="#服务消费者-学生信息控制器" class="headerlink" title="服务消费者-学生信息控制器"></a>服务消费者-学生信息控制器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestClientException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务消费者-学生信息控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRE_HOST = <span class="string">&quot;http://localhost:1001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加或者修改学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PRE_HOST + <span class="string">&quot;/student/save&quot;</span>, student, Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PRE_HOST + <span class="string">&quot;/student/list&quot;</span>, List.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PRE_HOST + <span class="string">&quot;/student/get/&quot;</span> + id, Student.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            restTemplate.getForObject(PRE_HOST + <span class="string">&quot;/student/delete/&quot;</span> + id, Boolean.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RestClientException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务消费者启动类"><a href="#服务消费者启动类" class="headerlink" title="服务消费者启动类"></a>服务消费者启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务消费者启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 15:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConsumerApplication_80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudentConsumerApplication_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>运行服务消费者启动类后，在浏览器地址栏输入对应URL可以进行增删查改操作，端口为80，通过端口80调用端口1001的方法</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Eureka服务注册中心</title>
    <url>/266.html</url>
    <content><![CDATA[<h3 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h3><p>该Module为Maven项目，命名为microservice-eureka-server-2001</p>
<h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承microservice依赖版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-eureka-server-2001<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-eureka-server-2001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Eureka服务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><p>在resources中新建application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka注册中心实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false 由于该应用为注册中心，所以设置为false,代表不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false 由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置为false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>       <span class="comment">#设置与Eureka注册中心交互的地址，查询服务和注册服务用到</span></span><br></pre></td></tr></table></figure>

<h4 id="Eureka服务启动类"><a href="#Eureka服务启动类" class="headerlink" title="Eureka服务启动类"></a>Eureka服务启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Eureka服务启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 16:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication_2001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication_2001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行Eureka服务启动类后，在浏览器地址栏输入：<a href="http://localhost:2001/">http://localhost:2001/</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-11%20180544.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>服务提供者注册到Eureka</title>
    <url>/267.html</url>
    <content><![CDATA[<p>在microservice-student-provider-1001子模块项目的基础上修改</p>
<h3 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h3><p>加上eureka客户端依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改application-yml"><a href="#修改application-yml" class="headerlink" title="修改application.yml"></a>修改application.yml</h3><p>直接添加下面代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>  <span class="comment">#eureka客户端主机实例名称</span></span><br><span class="line">    <span class="attr">appname:</span> <span class="string">microservice-student</span>  <span class="comment">#客户端服务名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">microservice-student:1001</span> <span class="comment">#客户端实例名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#显示IP</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:2001/eureka</span>   <span class="comment">#把服务注册到eureka注册中心</span></span><br></pre></td></tr></table></figure>

<p>在启动类加上@EnableEurekaClient注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务提供者启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 14:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EntityScan(&quot;com/ledao/entity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentProviderApplication_1001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudentProviderApplication_1001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>分别启动microservice-student-provider-1001和microservice-eureka-server-2001子模块项目</p>
<p>浏览器地址栏输入 <a href="http://localhost:2001/">http://localhost:2001/</a> ，Eureka服务注册中心出现了划红线处的服务</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-11%20200124.png"></p>
<h3 id="配置info信息"><a href="#配置info信息" class="headerlink" title="配置info信息"></a>配置info信息</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>点击上图的划红线处的链接可以查看一些信息，比如：该服务的groupId、artifactId、version，继承的artifactId、该服务的负责人和电话</p>
<h4 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h4><p>在服务提供者项目pom.xml里加入actuator监控依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- actuator监控引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父项目pom.xml里的build节点加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在服务提供者项目application.yml加上info配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">current.groupId:</span> <span class="string">@project.groupId@</span></span><br><span class="line">  <span class="attr">current.artifactId:</span> <span class="string">@project.artifactId@</span></span><br><span class="line">  <span class="attr">current.version:</span> <span class="string">@project.version@</span></span><br><span class="line">  <span class="attr">parent.artifactId:</span> <span class="string">@project.parent.artifactId@</span></span><br><span class="line">  <span class="string">负责人:</span> <span class="string">张三</span></span><br><span class="line">  <span class="string">联系电话:</span> <span class="number">110</span></span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-11%20210834.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>Eureka注册中心高可用集群配置</title>
    <url>/268.html</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>当注册中心扛不住高并发时，就需要集群了</p>
<h3 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h3><p>新建两个Module，一个名称为：microservice-eureka-server-2002，另一个名称为：microservice-eureka-server-2003</p>
<h3 id="继承依赖"><a href="#继承依赖" class="headerlink" title="继承依赖"></a>继承依赖</h3><p>在新建的两个Module的pom.xml中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承microservice依赖版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在新建的两个Module的pom.xml中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Eureka服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h3><p>在新建的两个Module都添加启动类，名称分别为：EurekaServerApplication_2002和EurekaServerApplication_2003，可以直接复制EurekaServerApplication_2001.java的内容然后修改名称即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Eureka服务启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 16:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication_2001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication_2001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置本机host"><a href="#配置本机host" class="headerlink" title="配置本机host"></a>配置本机host</h3><p>前面单机的时候 eureka注册中心实例名称 是localhost，现在是集群，不能三个实例都是localhost，这里复杂的办法是搞三个虚拟机，比较麻烦，这里有简单办法，直接配置本机hosts，来实现本机域名映射；</p>
<p>找到 C:\Windows\System32\drivers\etc 打开hosts，加配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>  eureka2001.ledao.com</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>  eureka2002.ledao.com</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>  eureka2003.ledao.com</span><br></pre></td></tr></table></figure>

<h3 id="修改application-yml"><a href="#修改application-yml" class="headerlink" title="修改application.yml"></a>修改application.yml</h3><p>修改三个项目的application.yml文件，主要是修改 hostname和defaultZone</p>
<p>microservice-eureka-server-<strong>2001</strong>的application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># hostname: localhost #eureka注册中心实例名称 单机</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka2001.ledao.com</span> <span class="comment"># 集群</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false 由于该应用为注册中心，所以设置为false,代表不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false 由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置为false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka2002.ledao.com:2002/eureka/,http://eureka2003.ledao.com:2003/eureka/</span> <span class="comment"># 集群</span></span><br><span class="line">      <span class="comment">#单机defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka注册中心交互的地址，查询服务和注册服务用到</span></span><br></pre></td></tr></table></figure>

<p>microservice-eureka-server-<strong>2002</strong>的application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2002</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># hostname: localhost #eureka注册中心实例名称 单机</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka2002.ledao.com</span> <span class="comment"># 集群</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false 由于该应用为注册中心，所以设置为false,代表不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false 由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置为false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka2001.ledao.com:2001/eureka/,http://eureka2003.ledao.com:2003/eureka/</span> <span class="comment"># 集群</span></span><br><span class="line">      <span class="comment">#单机defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka注册中心交互的地址，查询服务和注册服务用到</span></span><br></pre></td></tr></table></figure>

<p>microservice-eureka-server-<strong>2003</strong>的application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2003</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># hostname: localhost #eureka注册中心实例名称 单机</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka2003.ledao.com</span> <span class="comment"># 集群</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false 由于该应用为注册中心，所以设置为false,代表不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false 由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置为false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka2002.ledao.com:2002/eureka/,http://eureka2003.ledao.com:2003/eureka/</span> <span class="comment"># 集群</span></span><br><span class="line">      <span class="comment">#单机defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka注册中心交互的地址，查询服务和注册服务用到</span></span><br></pre></td></tr></table></figure>

<p>服务提供者项目microservice-student-provider-1001的application.yml，主要修改eureka.client.service-url.defaultZone</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">1001</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_springcloud?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>  <span class="comment">#eureka客户端主机实例名称</span></span><br><span class="line">    <span class="attr">appname:</span> <span class="string">microservice-student</span>  <span class="comment">#客户端服务名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">microservice-student:1001</span> <span class="comment">#客户端实例名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#显示IP</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># defaultZone: http://localhost:2001/eureka   #把服务注册到eureka注册中心 #单机</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka2001.ledao.com:2001/eureka/,http://eureka2002.ledao.com:2002/eureka/,http://eureka2003.ledao.com:2003/eureka/</span> <span class="comment"># 集群</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">current.groupId:</span> <span class="string">@project.groupId@</span></span><br><span class="line">  <span class="attr">current.artifactId:</span> <span class="string">@project.artifactId@</span></span><br><span class="line">  <span class="attr">current.version:</span> <span class="string">@project.version@</span></span><br><span class="line">  <span class="attr">parent.artifactId:</span> <span class="string">@project.parent.artifactId@</span></span><br><span class="line">  <span class="string">负责人:</span> <span class="string">张三</span></span><br><span class="line">  <span class="string">联系电话:</span> <span class="number">110</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运行microservice-eureka-server-2001、microservice-eureka-server-2002、microservice-eureka-server-2003和microservice-student-provider-1001四个项目后开始测试</p>
<p>下面三个链接都可以测试</p>
<p><a href="http://eureka2001.ledao.com:2001/">http://eureka2001.ledao.com:2001/</a></p>
<p><a href="http://eureka2002.ledao.com:2002/">http://eureka2002.ledao.com:2002/</a></p>
<p><a href="http://eureka2003.ledao.com:2003/">http://eureka2003.ledao.com:2003/</a></p>
<p>结果</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-11%20222023.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>Ribbon调用服务</title>
    <url>/269.html</url>
    <content><![CDATA[<h3 id="Ribbon简介"><a href="#Ribbon简介" class="headerlink" title="Ribbon简介"></a>Ribbon简介</h3><p>Ribbon是Netflix发布的负载均衡器，它有助于控制HTTP和TCP的客户端的行为。为Ribbon配置服务提供者地址后，Ribbon就可基于某种负载均衡算法，自动地帮助服务消费者去请求。Ribbon默认为我们提供了很多负载均衡算法，例如轮询、随机等。当然，我们也可为Ribbon实现自定义的负载均衡算法。</p>
<p>在Spring Cloud中，当Ribbon与Eureka配合使用时，Ribbon可自动从Eureka Server获取服务提供者地址列表，并基于负载均衡算法，请求其中一个服务提供者实例。下图展示了Ribbon与Eureka配合使用时的架构。</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-11%20222222.jpg"></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>我们修改microservice-student-consumer-80子模块项目</p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改application-yml"><a href="#修改application-yml" class="headerlink" title="修改application.yml"></a>修改application.yml</h4><p>添加下面内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#false 由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置为false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka2001.ledao.com:2001/eureka/,http://eureka2002.ledao.com:2002/eureka/,http://eureka2003.ledao.com:2003/eureka/</span></span><br></pre></td></tr></table></figure>

<h4 id="添加-LoadBalanced注解"><a href="#添加-LoadBalanced注解" class="headerlink" title="添加@LoadBalanced注解"></a>添加@LoadBalanced注解</h4><p>SpringCloudConfig.java的getRestTemplate()方法上添加@LoadBalanced注解（负载均衡配置）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringCloud相关配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 14:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用服务模版</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加注解-EnableEurekaClient"><a href="#添加注解-EnableEurekaClient" class="headerlink" title="添加注解@EnableEurekaClient"></a>添加注解@EnableEurekaClient</h4><p>因为和eureka整合，所以启动类StudentConsumerApplication_80 加个注解 @EnableEurekaClient</p>
<h4 id="指定应用名称"><a href="#指定应用名称" class="headerlink" title="指定应用名称"></a>指定应用名称</h4><p>在服务提供者microservice-student-provider-1001的application.yml以下配置（microservice-student为微服务应用名称）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">microservice-student</span></span><br></pre></td></tr></table></figure>

<p>在spring配置下添加，完整spring配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-student</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_springcloud?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="修改PRE-HOST"><a href="#修改PRE-HOST" class="headerlink" title="修改PRE_HOST"></a>修改PRE_HOST</h4><p>修改服务消费者子模块项目的StudentConsumerController.java中的PRE_HOST为 <a href="http://microservice-student/">http://MICROSERVICE-STUDENT</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRE_HOST = <span class="string">&quot;http://MICROSERVICE-STUDENT&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>依次运行microservice-eureka-server-2001、microservice-eureka-server-2002、microservice-eureka-server-2003、microservice-student-provider-1001、microservice-student-consumer-80子模块项目</p>
<p>浏览器地址栏输入：<a href="http://localhost/student/list">http://localhost/student/list</a> ，出现下面结果说明调用服务成功（下面是格式化过的JSON串）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-11%20232700.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Eureka</tag>
        <tag>Ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL单表查询</title>
    <url>/27.html</url>
    <content><![CDATA[<h3 id="查询全部表数据"><a href="#查询全部表数据" class="headerlink" title="查询全部表数据"></a>查询全部表数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#可以不按顺序</span><br><span class="line"><span class="keyword">SELECT</span> id,stuName,age,sex,gradeName <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201028012504.jpg" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student; </span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201028012504.jpg" alt="img"></p>
<h3 id="查询指定表数据"><a href="#查询指定表数据" class="headerlink" title="查询指定表数据"></a>查询指定表数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> stuName,gradeName <span class="keyword">FROM</span> t_student; </span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201028012620.jpg" alt="img"></p>
<p>查询表数据语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#id为<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>; </span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017011751.jpg" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#年龄大于<span class="number">24</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">24</span>; </span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201028012858.jpg" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#年龄是<span class="number">21</span>，<span class="number">23</span>，<span class="number">24</span>的</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age <span class="keyword">IN</span>(<span class="number">21</span>,<span class="number">23</span>,<span class="number">24</span>); </span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201028013330.jpg" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#年龄不是<span class="number">21</span>，<span class="number">23</span>，<span class="number">24</span>的</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="number">21</span>,<span class="number">23</span>,<span class="number">24</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201028013828.jpg" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#年龄在<span class="number">21</span>和<span class="number">24</span>之间的，包括</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">21</span> <span class="keyword">AND</span> <span class="number">24</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201028014000.jpg" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#年龄不在<span class="number">21</span>和<span class="number">24</span>之间的，包括</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">21</span> <span class="keyword">AND</span> <span class="number">24</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201028014339.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Ribbon负载均衡</title>
    <url>/270.html</url>
    <content><![CDATA[<h3 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h3><p>新建两个Module，一个名称为：microservice-student-provider-1002，另一个名称为：microservice-student-provider-1003，通过三个服务提供者实现集群，然后才能演示负载均衡，以及负载均衡策略</p>
<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>pom.xml，application.yml，以及java类都复制一份，启动类名称对应Module的名称的数字进行修改</p>
<p>yml配置文件有两处要修改：port端口和服务实例名称对应Module的名称的数字进行修改</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-12%20021214.png"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-12%20021239.png"></p>
<h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><p>为了方便查看具体执行了哪个服务提供者，在三个服务提供者的StudentProviderController的list方法中添加一条打印语句，打印语句的数字对应Module的名称的数字进行修改</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-12%20021619.png"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>先启动三个eureka集群，再启动三个服务提供者集群</p>
<p>测试服务提供者：</p>
<p><a href="http://localhost:1001/student/list">http://localhost:1001/student/list</a></p>
<p><a href="http://localhost:1002/student/list">http://localhost:1002/student/list</a></p>
<p><a href="http://localhost:1003/student/list">http://localhost:1003/student/list</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-12%20032238.png"></p>
<p>测试下Eureka：</p>
<p><a href="http://eureka2001.ledao.com:2001/">http://eureka2001.ledao.com:2001/</a></p>
<p><a href="http://eureka2002.ledao.com:2002/">http://eureka2002.ledao.com:2002/</a></p>
<p><a href="http://eureka2003.ledao.com:2003/">http://eureka2003.ledao.com:2003/</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-12%20032132.png"></p>
<p>启动服务消费者：</p>
<p><a href="http://localhost/student/list">http://localhost/student/list</a></p>
<p>每刷新一次页面，就消费一次服务，消费了哪个服务就在该服务的控制台打印下面语句</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-12%20032830.png"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-12%20032843.png"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-12%20032855.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>Ribbon策略</title>
    <url>/271.html</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Ribbon默认的策略是轮询策略，这种默认的轮询策略肯定是不能满足实际需求的，比如有3个服务提供者，突然挂了一个，这样的话，默认轮询 ，总有1/3的概率访问失败，会出现下面的错误，所以需要选择合适的策略</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-12%20033945.png"></p>
<h3 id="策略大全"><a href="#策略大全" class="headerlink" title="策略大全"></a>策略大全</h3><table>
<thead>
<tr>
<th align="left">策略名</th>
<th>策略声明</th>
<th>策略描述</th>
<th>实现说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BestAvailableRule</td>
<td>public class BestAvailableRule extends ClientConfigEnabledRoundRobinRule</td>
<td>选择一个最小的并发请求的server</td>
<td>逐个考察Server，如果Server被tripped了，则忽略，在选择其中ActiveRequestsCount最小的server</td>
</tr>
<tr>
<td align="left">AvailabilityFilteringRule</td>
<td>public class AvailabilityFilteringRule extends PredicateBasedRule</td>
<td>过滤掉那些因为一直连接失败的被标记为circuit tripped的后端server，并过滤掉那些高并发的的后端server（active connections 超过配置的阈值）</td>
<td>使用一个AvailabilityPredicate来包含过滤server的逻辑，其实就就是检查status里记录的各个server的运行状态</td>
</tr>
<tr>
<td align="left">WeightedResponseTimeRule</td>
<td>public class WeightedResponseTimeRule extends RoundRobinRule</td>
<td>根据响应时间分配一个weight，响应时间越长，weight越小，被选中的可能性越低。</td>
<td>一个后台线程定期的从status里面读取评价响应时间，为每个server计算一个weight。Weight的计算也比较简单responsetime 减去每个server自己平均的responsetime是server的权重。当刚开始运行，没有形成status时，使用roubine策略选择server。</td>
</tr>
<tr>
<td align="left">RetryRule</td>
<td>public class RetryRule extends AbstractLoadBalancerRule</td>
<td>对选定的负载均衡策略机上重试机制。</td>
<td>在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server</td>
</tr>
<tr>
<td align="left">RoundRobinRule</td>
<td>public class RoundRobinRule extends AbstractLoadBalancerRule</td>
<td>roundRobin方式轮询选择server</td>
<td>轮询index，选择index对应位置的server</td>
</tr>
<tr>
<td align="left">RandomRule</td>
<td>public class RandomRule extends AbstractLoadBalancerRule</td>
<td>随机选择一个server</td>
<td>在index上随机，选择index对应位置的server</td>
</tr>
<tr>
<td align="left">ZoneAvoidanceRule</td>
<td>public class ZoneAvoidanceRule extends PredicateBasedRule</td>
<td>复合判断server所在区域的性能和server的可用性选择server</td>
<td>使用ZoneAvoidancePredicate和AvailabilityPredicate来判断是否选择某个server，前一个判断判定一个zone的运行性能是否可用，剔除不可用的zone（的所有server），AvailabilityPredicate用于过滤掉连接数过多的Server。</td>
</tr>
</tbody></table>
<h3 id="使用策略"><a href="#使用策略" class="headerlink" title="使用策略"></a>使用策略</h3><p>在服务消费端 SpringCloudConfig 配置类自定义策略，用IRule实现，以实现RetryRule策略为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义轮询算法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RetryRule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Feign</title>
    <url>/272.html</url>
    <content><![CDATA[<h3 id="Feign简介"><a href="#Feign简介" class="headerlink" title="Feign简介"></a>Feign简介</h3><p>Feign是一个声明式的Web Service客户端，它使得编写Web Serivce客户端变得更加简单。我们只需要使用Feign来创建一个接口并用注解来配置它既可完成。它具备可插拔的注解支持，包括Feign注解和JAX-RS注解。Feign也支持可插拔的编码器和解码器。Spring Cloud为Feign增加了对Spring MVC注解的支持，还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="修改公共模块项目"><a href="#修改公共模块项目" class="headerlink" title="修改公共模块项目"></a>修改公共模块项目</h4><p>公共模块项目名称为： microservice-common </p>
<p>pom.xml引入Feign依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建StudentClientService接口（新建一个service包并存放在里面），加入<font color="#dd0000">@FeignClient(value = “MICROSERVICE-STUDENT”)</font>注解定义FeignClient并指定调用的服务名称MICROSERVICE-STUDENT</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.feign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Student Feign接口客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-13 3:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;MICROSERVICE-STUDENT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentClientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/student/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Student <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/student/list&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加或者修改学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/student/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">save</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/student/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="新建Feign消费者项目"><a href="#新建Feign消费者项目" class="headerlink" title="新建Feign消费者项目"></a>新建Feign消费者项目</h4><p>新建一个Module，命名为：microservice-student-consumer-feign-80</p>
<p>将microservice-student-consumer-80消费者项目的文件都复制到新建的Feign消费者项目，将pom.xml引入的依赖也全部复制过去并引入feign依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改启动类</p>
<p>启动类如果也复制了过来，就重命名为：StudentConsumerFeignApplication_80，并添加注解：<font color="#dd0000">@EnableFeignClients</font></p>
<p>修改Controller</p>
<p>因为现在用Fiegn，所以把restTemplate去掉，改成注入service，调用service方法来实现服务的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.StudentClientService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestClientException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Feign服务消费者-学生信息控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-11 14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConsumerFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentClientService studentClientService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加或者修改学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentClientService.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentClientService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentClientService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            studentClientService.delete(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RestClientException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>启动三个Eureka服务注册中心和三个提供者服务，再启动上面新建的Feign消费者项目，然后浏览器地址栏输入：<a href="http://localhost/student/list">http://localhost/student/list</a> ，如果看到返回的学生列表说明Feign配置成功</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hystrix断路器</title>
    <url>/274.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>hystrix对应的中文名字是“豪猪”，豪猪周身长满了刺，能保护自己不受天敌的伤害，代表了一种防御机制，这与hystrix本身的功能不谋而合，因此Netflix团队将该框架命名为Hystrix，并使用了对应的卡通形象做作为logo。</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-14%20033811.jpg" alt="img"></p>
<p>在一个分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，如何能够保证在一个依赖出问题的情况下，不会导致整体服务失败，这个就是Hystrix需要做的事情。Hystrix提供了熔断、隔离、Fallback、cache、监控等功能，能够在一个、或多个依赖同时出现问题时保证系统依然可用。</p>
<h3 id="服务雪崩效应"><a href="#服务雪崩效应" class="headerlink" title="服务雪崩效应"></a><strong>服务雪崩效应</strong></h3><p>当一个请求依赖多个服务的时候：</p>
<p>正常情况下的访问</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-14%20034111.jpg" alt="img"></p>
<p>但是，当请求的服务中出现无法访问、异常、超时等问题时（图中的I），那么用户的请求将会被阻塞</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-14%20034116.jpg" alt="img"></p>
<p>如果多个用户的请求中，都存在无法访问的服务，那么他们都将陷入阻塞的状态中</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-14%20034122.jpg" alt="img"></p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>Hystrix断路器可以通过服务熔断和服务降级来解决上述的服务雪崩效应</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>熔断机制是应对雪崩效应的一种微服务链路保护机制，当某个服务不可用或者响应时间超时，会进行服务降级，进而熔断该节点的服务调用，快速返回自定义的错误影响页面信息</p>
<h4 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h4><p>命名为microservice-student-provider-hystrix-1004，把microservice-student-provider-1001的配置和代码都复制一份到新建的Module中</p>
<h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><p>引入Hystrix断路器依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hystrix断路器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改application-yml"><a href="#修改application-yml" class="headerlink" title="修改application.yml"></a>修改application.yml</h4><p>修改server.port为1004，eureka.instance.instance-id为microservice-student-hystrix:1004</p>
<h4 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h4><p>如果是复制过来的，重命名为StudentProviderHystrixApplication_1004，并添加@EnableCircuitBreaker注解支持Hystrix断路器</p>
<h4 id="修改消费者Controller"><a href="#修改消费者Controller" class="headerlink" title="修改消费者Controller"></a>修改消费者Controller</h4><p>StudentConsumerController.java在microservice-student-consumer-80项目中</p>
<p>添加getInfo方法，用于调用服务的getInfo方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getInfo&quot;)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(PRE_HOST + <span class="string">&quot;/student/getInfo&quot;</span>, Map.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改提供者Controller"><a href="#修改提供者Controller" class="headerlink" title="修改提供者Controller"></a>修改提供者Controller</h4><p>StudentProviderController.java在microservice-student-provider-hystrix-1004项目中</p>
<p>添加两个方法：getInfo方法和getInfoFallback方法</p>
<p>在hystrix中默认1秒算超时，使用Thread.sleep(2000)模拟请求超时（@HystrixCommand注解定义了请求超时的时候就请求getInfoFallback方法，返回500 系统出错，稍后重试），不使用就不会超时（执行完getInfo方法，返回200 业务数据）。由于请求超时的时候进行服务降级，进而熔断该节点的服务调用，快速返回自定义的错误影响页面信息，所以可以有效地解决雪崩效应</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getInfo&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;getInfoFallback&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    map.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;业务数据&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求超时就请求我</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfoFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;系统出错，稍后重试&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>先启动三个eureka，再启动带hystrix的provider，最后启动普通的consumer</p>
<p>浏览器地址输入：<a href="http://localhost/student/getInfo">http://localhost/student/getInfo</a></p>
<p>使用Thread.sleep(2000)时会超时，返回500 系统出错，稍后重试，如下图：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-14%20043656.png" alt="img"></p>
<p>注释掉Thread.sleep(2000)时不会超时，返回200 业务数据，如下图：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-14%20043727.png" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Hystrix修改默认超时时间</title>
    <url>/275.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Hystrix的默认超时时间是1秒，有时候正常请求响应的时间就超过了1秒，所以1秒钟并不能满足日常的开发需求，需要根据实际情况设置超时时间</p>
<h3 id="源码位置"><a href="#源码位置" class="headerlink" title="源码位置"></a>源码位置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_executionTimeoutInMilliseconds = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-15%20005052.png" alt="img"></p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>在application.yml中添加下面配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span> </span><br><span class="line">  <span class="attr">command:</span> </span><br><span class="line">    <span class="attr">default:</span> </span><br><span class="line">      <span class="attr">execution:</span> </span><br><span class="line">        <span class="attr">isolation:</span> </span><br><span class="line">          <span class="attr">thread:</span> </span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<p>数值的单位为毫秒，1000毫秒==1秒</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>先启动三个eureka，再启动带hystrix的provider，最后启动普通的consumer</p>
<p>浏览器地址输入：<a href="http://localhost/student/getInfo">http://localhost/student/getInfo</a></p>
<p>上面配置已经将Hystrix的默认超时时间修改为3秒，使用Thread.sleep(2000)让程序睡眠两秒也不会超时</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Hystrix集群监控turbine</title>
    <url>/277.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Hystrix集群监控使用的是turbine，而turbine是基于Dashboard的</p>
<h3 id="组建Hystrix集群"><a href="#组建Hystrix集群" class="headerlink" title="组建Hystrix集群"></a>组建Hystrix集群</h3><p>新建一个Module，该Module为Maven项目，命名为：microservice-student-provider-hystrix-1005，把microservice-student-provider-hystrix-1004的所有文件都复制一份过来，修改几个地方：</p>
<h4 id="修改application-yml"><a href="#修改application-yml" class="headerlink" title="修改application.yml"></a>修改application.yml</h4><p>server.port修改为：1005，eureka.instance.instance-id: microservice-student-hystrix修改为：1005</p>
<h4 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h4><p>如果启动类是复制过来的，重命名为：StudentProviderHystrixApplication_1005</p>
<h3 id="新建集群监控项目"><a href="#新建集群监控项目" class="headerlink" title="新建集群监控项目"></a>新建集群监控项目</h3><p>新建一个Module，命名为：microservice-student-consumer-hystrix-turbine-91</p>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>继承父项目的依赖版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承microservice依赖版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">91</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka2001.ledao.com:2001/eureka/,http://eureka2002.ledao.com:2002/eureka/,http://eureka2003.ledao.com:2003/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="attr">app-config:</span> <span class="string">microservice-student</span>   <span class="comment"># 指定要监控的应用名称</span></span><br><span class="line">  <span class="attr">clusterNameExpression:</span> <span class="string">&quot;&#x27;default&#x27;&quot;</span> <span class="comment">#表示集群的名字为default</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">turbine</span></span><br></pre></td></tr></table></figure>

<h4 id="新建启动类"><a href="#新建启动类" class="headerlink" title="新建启动类"></a>新建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.EnableTurbine;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hystrix集群监控启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-16 1:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableTurbine</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConsumerTurbineApplication_91</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudentConsumerTurbineApplication_91.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="启动以下项目"><a href="#启动以下项目" class="headerlink" title="启动以下项目"></a>启动以下项目</h4><p>microservice-eureka-server-2001</p>
<p>microservice-eureka-server-2002</p>
<p>microservice-eureka-server-2003</p>
<p>microservice-student-provider-hystrix-1004</p>
<p>microservice-student-provider-hystrix-1005</p>
<p>microservice-student-consumer-80</p>
<p>microservice-student-consumer-hystrix-dashboard-90</p>
<p>microservice-student-consumer-hystrix-turbine-91</p>
<h4 id="调用服务集群"><a href="#调用服务集群" class="headerlink" title="调用服务集群"></a>调用服务集群</h4><p>浏览器地址栏输入：<a href="http://localhost/student/getInfo">http://localhost/student/getInfo</a></p>
<h4 id="监控数据"><a href="#监控数据" class="headerlink" title="监控数据"></a>监控数据</h4><p>浏览器地址栏输入：<a href="http://localhost:91/turbine.stream">http://localhost:91/turbine.stream</a></p>
<p>如果使用图形界面监控，则先输入：<a href="http://localhost:90/hystrix">http://localhost:90/hystrix</a> 打开图形监控界面，在第一个输入框输入：<a href="http://localhost:91/turbine.stream">http://localhost:91/turbine.stream</a> ，再点击按钮即可</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Hystrix使用服务监控</title>
    <url>/276.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Hystrix提供了 准实时的服务调用监控项目Dashboard，能够实时记录通过Hystrix发起的请求执行情况，可以通过图表的形式展现给用户看。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h4><p>该Module为Maven项目，命名为：microservice-student-consumer-hystrix-dashboard-90</p>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>记得先继承父项目的依赖版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承microservice依赖版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">90</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hystrix服务监控90启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-15 17:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConsumerDashBoardApplication_90</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudentConsumerDashBoardApplication_90.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><p>在浏览器地址栏输入：<a href="http://localhost:90/hystrix">http://localhost:90/hystrix</a> ，出现下面界面说明配置成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-15%20181605.png" alt="img"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>先启动三个eureka，然后再启动microservice-student-provider-hystrix-1004</p>
<h4 id="开始监控"><a href="#开始监控" class="headerlink" title="开始监控"></a>开始监控</h4><p>输入：<a href="http://localhost:1004/hystrix.stream">http://localhost:1004/hystrix.stream</a> ，一直是ping，然后data返回数据</p>
<p>如果要使用图形界面监控，浏览器地址栏输入：<a href="http://localhost:90/hystrix">http://localhost:90/hystrix</a> ，出现上图，在第一个输入框输入：<a href="http://localhost:1004/hystrix.stream">http://localhost:1004/hystrix.stream</a> ，然后点击Monitor Stream按钮即可，会出现下面界面</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-15%20182527.png" alt="img"></p>
<h4 id="指标含义"><a href="#指标含义" class="headerlink" title="指标含义"></a>指标含义</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-15%20182601.png" alt="img"></p>
<h4 id="各种情况"><a href="#各种情况" class="headerlink" title="各种情况"></a>各种情况</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-15%20182633.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>整合Feign和Hystrix实现服务熔断服务降级彻底解耦</title>
    <url>/278.html</url>
    <content><![CDATA[<h3 id="解耦原因"><a href="#解耦原因" class="headerlink" title="解耦原因"></a>解耦原因</h3><p>下面代码使用<font color="#dd0000">@HystrixCommand(fallbackMethod = “getInfoFallback”)</font>业务代码耦合度太高，不利于维护，所以需要整合Feign和Hystrix进行解耦</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getInfo&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;getInfoFallback&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    map.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;业务数据1004&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求超时就请求我</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfoFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;系统出错，稍后重试&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="修改Hystrix服务提供者项目"><a href="#修改Hystrix服务提供者项目" class="headerlink" title="修改Hystrix服务提供者项目"></a>修改Hystrix服务提供者项目</h4><p>项目名为：microservice-student-provider-hystrix-1004和microservice-student-provider-hystrix-1005</p>
<p>在StudentService.java中添加新的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Map&lt;String,Object&gt; <span class="title">getInfo</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>在StudentServiceImpl.java中实现上面的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    map.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;业务数据1004&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在StudentProviderController.java中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getInfo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    <span class="keyword">return</span> studentService.getInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改公共项目"><a href="#修改公共项目" class="headerlink" title="修改公共项目"></a>修改公共项目</h4><p>项目名为：microservice-common</p>
<p>在StudentClientService.java中添加getInfo接口方法，并修改@FeignClient注解为：@FeignClient(value = “MICROSERVICE-STUDENT”, fallbackFactory = StudentClientFallbackFactory.class)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student/getInfo&quot;)</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getInfo</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>新建StudentClientFallbackFactory.java，实现FallbackFactory&lt;StudentClientService&gt;接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> feign.hystrix.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-16 2:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">StudentClientService</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentClientService <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentClientService() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Student <span class="title">get</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">                map.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">                map.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;系统出错，稍后重试&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> map;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改Feign消费者项目"><a href="#修改Feign消费者项目" class="headerlink" title="修改Feign消费者项目"></a>修改Feign消费者项目</h4><p>项目名为：microservice-student-consumer-feign-80</p>
<p>在StudentConsumerFeignController.java中添加调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getInfo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> studentClientService.getInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>application.yml加上hystrix支持</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="配置超时时间"><a href="#配置超时时间" class="headerlink" title="配置超时时间"></a>配置超时时间</h4><p>因为整合了Feign和Hystrix，原来服务提供者的Hystrix超时时间配置没用了，如何配置查看：<a href="/281.html">Feign和Hystrix整合后配置超时时间</a></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动以下项目：</p>
<p>microservice-eureka-server-2001</p>
<p>microservice-eureka-server-2002</p>
<p>microservice-eureka-server-2003</p>
<p>microservice-student-provider-hystrix-1004</p>
<p>microservice-student-provider-hystrix-1005</p>
<p>microservice-student-consumer-feign-80</p>
<p>如果超时的情况返回错误信息（<font color="#dd0000">500  系统出错，稍后重试</font>），说明配置成功</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Feign</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Git恢复之前的版本</title>
    <url>/279.html</url>
    <content><![CDATA[<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>回退（reset）、反做（revert）</p>
<h3 id="回退（reset）"><a href="#回退（reset）" class="headerlink" title="回退（reset）"></a>回退（reset）</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>git reset的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本，如下图所示，假设我们要回退到版本一</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20041222.png"></p>
<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了，就可以用这种方法</p>
<h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><blockquote>
<p>查看版本号</p>
</blockquote>
<p>先查看当前库有哪些版本号，查看方法有两种：</p>
<ol>
<li><p>Git命令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p> commit后的黄色字符串就是版本号</p>
<p> <img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20042055.png"></p>
</li>
<li><p>在GitHub中查看</p>
<p> 点击下图的提交数</p>
<p> <img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20041534.png"></p>
<p> 点击下图的复制按钮即可复制完整版本号</p>
<p> <img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20041538.png"></p>
</li>
</ol>
<blockquote>
<p>开始回退</p>
</blockquote>
<p>使用下面命令将版本回退</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 目标版本号</span><br></pre></td></tr></table></figure>

<p>使用下面命令提交更改，<code>-f</code>代表强制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure>

<h3 id="反做（revert）"><a href="#反做（revert）" class="headerlink" title="反做（revert）"></a>反做（revert）</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>git revert是用于<code>反做</code>某一个版本，以达到撤销该版本的修改的目的。比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用git revert命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西<br><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20041230.png"></p>
<h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法</p>
<h4 id="具体操作-1"><a href="#具体操作-1" class="headerlink" title="具体操作"></a>具体操作</h4><p>查看版本号，上面有具体操作</p>
<p>使用下面命令反做，这里可能会出现冲突，那么需要手动修改冲突的文件，而且要git add 文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert -n 版本号</span><br></pre></td></tr></table></figure>

<p>使用下面命令提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交备注信息&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用下面命令提交更改到远程库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/yxlshk/article/details/79944535">https://blog.csdn.net/yxlshk/article/details/79944535</a></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10输入法获取当前时间</title>
    <url>/280.html</url>
    <content><![CDATA[<h3 id="打开输入法设置"><a href="#打开输入法设置" class="headerlink" title="打开输入法设置"></a>打开输入法设置</h3><p><strong>右击单击右下角的输入法选项，选择设置</strong></p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20045135.png" style="zoom:67%;" />

<h3 id="选择词库和自学习"><a href="#选择词库和自学习" class="headerlink" title="选择词库和自学习"></a><strong>选择词库和自学习</strong></h3><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20045223.png" style="zoom:67%;" />

<h3 id="点击添加或编辑自定义短语"><a href="#点击添加或编辑自定义短语" class="headerlink" title="点击添加或编辑自定义短语"></a><strong>点击添加或编辑自定义短语</strong></h3><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20045244.png" style="zoom:67%;" />

<h3 id="添加短语"><a href="#添加短语" class="headerlink" title="添加短语"></a>添加短语</h3><p>添加短语：<font color="#dd0000">%yyyy%-%MM%-%dd% %HH%:%mm%:%ss%</font></p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20045457.png" style="zoom:67%;" />

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h3><p>在中文模式下输入<code>sj</code>即可获取当前时间</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA创建Spring Boot项目</title>
    <url>/28.html</url>
    <content><![CDATA[<h3 id="选择项目的类别"><a href="#选择项目的类别" class="headerlink" title="选择项目的类别"></a>选择项目的类别</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017235309.jpg" alt="img"></p>
<h3 id="选择环境"><a href="#选择环境" class="headerlink" title="选择环境"></a>选择环境</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017235941.jpg" alt="img"></p>
<h3 id="选择技术"><a href="#选择技术" class="headerlink" title="选择技术"></a>选择技术</h3><p>选择项目开发需要用到的技术</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201017235822.jpg" alt="img"></p>
<h3 id="填写项目的名称"><a href="#填写项目的名称" class="headerlink" title="填写项目的名称"></a>填写项目的名称</h3><p>填写项目的名称以及项目路径，即可完成Spring Boot项目的创建</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018000110.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign和Hystrix整合后配置超时时间</title>
    <url>/281.html</url>
    <content><![CDATA[<p>Feign和Hystrix整合后,原来服务提供者的Hystrix超时时间配置没用了</p>
<p>把microservice-student-provider-hystrix-1004和microservice-student-provider-hystrix-1005的超时时间配置删除，添加到带Feign的服务消费项目的application.yml中（项目名为：microservice-student-consumer-feign-80）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<p>虽然添加了超时时间配置，但是还是无效，无效原因为：feign 也有一个超时时间的设置，feign底层是ribbon的封装，所以直接配置ribbon，ribbon默认超时也是1秒。所以这里都是强制要求，ribbon的超时时间要大于hystrix的超时时间，否则 hystrix自定义的超时时间毫无意义</p>
<p>所以还得加个 ribbon超时时间设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure>

<p>到此，超时时间配置完成，新的超时时间已经生效</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Feign</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Zuul路由配置</title>
    <url>/282.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20224912.jpg"></p>
<p>上图的API路由网关服务由Zuul实现，主要就是对外提供服务接口的时候，起到了请求的路由和过滤作用，也因此能够隐藏内部服务的接口细节，从来有利于保护系统的安全性</p>
<h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><h4 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h4><p>该Module为Maven项目，命名为：microservice-zuul-3001</p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>引入zuul路由网关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zuul路由网关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承microservice依赖版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-zuul-3001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- zuul路由网关 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入microservice-common依赖,引入后可以使用microservice-common的实体类,工具类等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- actuator监控 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- hystrix容错 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3001</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">microservice-zuul:3001</span> <span class="comment">#客户端实例名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#显示IP</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka2001.ledao.com:2001/eureka/,http://eureka2002.ledao.com:2002/eureka/,http://eureka2003.ledao.com:2003/eureka/</span> <span class="comment"># 集群</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">groupId:</span> <span class="string">@project.groupId@</span></span><br><span class="line">  <span class="attr">artifactId:</span> <span class="string">@project.artifactId@</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">@project.version@</span></span><br><span class="line">  <span class="string">负责人:</span> <span class="string">王五</span></span><br><span class="line">  <span class="string">联系电话:</span> <span class="number">110</span></span><br></pre></td></tr></table></figure>

<h4 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h4><p>找到 C:\Windows\System32\drivers\etc 打开hosts，底部加配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>  zuul.ledao.com</span><br></pre></td></tr></table></figure>

<h4 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-17 22:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication_3001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication_3001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>启动以下项目：</p>
<p>microservice-eureka-server-2001</p>
<p>microservice-eureka-server-2002</p>
<p>microservice-eureka-server-2003</p>
<p>microservice-student-provider-hystrix-1004</p>
<p>microservice-zuul-3001</p>
<p>microservice-student-consumer-feign-80</p>
<p>eureka注册中心有两个服务：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-17%20232447.png"></p>
<h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>①直接访问</p>
<p>直接通过 <a href="http://localhost/student/list">http://localhost/student/list</a> 访问</p>
<p>②通过zuul路由</p>
<p>通过 <a href="http://zuul.ledao.com:3001/microservice-student/student/list">http://zuul.ledao.com:3001/microservice-student/student/list</a> 访问</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>Zuul路由映射规则配置</title>
    <url>/283.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>默认路由请求地址，很容易暴露接口细节，可以通过配置映射规则来提高服务的安全性</p>
<h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><p>在application.yml中添加以下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">studentServer.serviceId:</span> <span class="string">microservice-student</span> <span class="comment">#服务名称</span></span><br><span class="line">    <span class="attr">studentServer.path:</span> <span class="string">/studentServer/**</span> <span class="comment">#替代服务的路径</span></span><br></pre></td></tr></table></figure>

<p>现在可以通过 <a href="http://zuul.ledao.com:3001/studentServer/student/list">http://zuul.ledao.com:3001/studentServer/student/list</a> 访问了</p>
<p>但是也可以通过 <a href="http://zuul.ledao.com:3001/microservice-student/student/list">http://zuul.ledao.com:3001/microservice-student/student/list</a> 访问，这样是不安全的，如果要忽略microservice-student服务就添加配置：ignored-services: “microservice-student”，如果要忽略所有的服务名称则修改为：ignored-services: “*”，完整配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">studentServer.serviceId:</span> <span class="string">microservice-student</span> <span class="comment">#服务名称</span></span><br><span class="line">    <span class="attr">studentServer.path:</span> <span class="string">/studentServer/**</span> <span class="comment">#替代服务的路径</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果添加请求前缀，就添加配置：prefix: /ledao，<code>最终配置</code>如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Zuul路由配置</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">studentServer.serviceId:</span> <span class="string">microservice-student</span> <span class="comment">#服务名称</span></span><br><span class="line">    <span class="attr">studentServer.path:</span> <span class="string">/studentServer/**</span> <span class="comment">#替代服务的路径</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#忽略的服务</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/ledao</span> <span class="comment">#前缀</span></span><br></pre></td></tr></table></figure>

<p>现在只能通过 <a href="http://zuul.ledao.com:3001/ledao/studentServer/student/list">http://zuul.ledao.com:3001/ledao/studentServer/student/list</a> 访问，其它请求方式的结果都是404</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>Zuul请求过滤配置</title>
    <url>/284.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>有时候系统的功能并不对外开放，所以在请求服务时可以过滤掉非法请求。Zuul通过ZuulFilter过滤器实现，每次经过Zuul服务网关，我们都对带来的token进行有效性验证，验证不通过就无法请求成功</p>
<h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><h4 id="定义过滤类"><a href="#定义过滤类" class="headerlink" title="定义过滤类"></a>定义过滤类</h4><p>命名为：AccessFilter.java，继承ZuulFilter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-18 0:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(AccessFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的类型 这里用pre，代表会再请求被路由之前执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的执行顺序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断该过滤器是否要被执行,返回true则执行过滤器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的具体执行逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line">        String parameter = request.getParameter(<span class="string">&quot;accessToken&quot;</span>);</span><br><span class="line">        logger.info(request.getRequestURI() + <span class="string">&quot;请求访问&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (parameter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;accessToken为空!&quot;</span>);</span><br><span class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            requestContext.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            requestContext.setResponseBody(<span class="string">&quot;&#123;\&quot;result\&quot;:\&quot;accessToken is empty!\&quot;&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(request.getRequestURI() + <span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="开启Filter配置"><a href="#开启Filter配置" class="headerlink" title="开启Filter配置"></a>开启Filter配置</h4><p>新建一个类，命名为：ZuulConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.filter.AccessFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Zuul配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-18 0:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccessFilter <span class="title">accessFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccessFilter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>直接输入：<a href="http://zuul.ledao.com:3001/ledao/studentServer/student/list">http://zuul.ledao.com:3001/ledao/studentServer/student/list</a> ，请求失败，返回错误信息：<font color="#dd0000">{“result”: “accessToken is empty!”}</font></p>
<p>加上<font color="#dd0000">?accessToken=111</font>，即：<a href="http://zuul.ledao.com:3001/ledao/studentServer/student/list?accessToken=111">http://zuul.ledao.com:3001/ledao/studentServer/student/list?accessToken=111</a> ，请求成功，返回正确的数据</p>
<p>本文主要是实现过滤配置，上面只是模拟了有accessToken</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Config Server</title>
    <url>/286.html</url>
    <content><![CDATA[<h3 id="GitHub新建仓库"><a href="#GitHub新建仓库" class="headerlink" title="GitHub新建仓库"></a>GitHub新建仓库</h3><p>GitHub新建一个仓库，命名为：microservice-config</p>
<p>在本地新建一个文件夹，也命名为：microservice-config，在文件夹内新建三个文件：application.yml、application-v1.yml和application-v2.yml，主要用于访问</p>
<p>application.yml内容为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">profile:</span> <span class="string">hello</span></span><br></pre></td></tr></table></figure>

<p>application-v1.yml内容为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">profile:</span> <span class="string">hello111</span></span><br></pre></td></tr></table></figure>

<p>application-v2.yml内容为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">profile:</span> <span class="string">hello222</span></span><br></pre></td></tr></table></figure>

<p>把文件夹内的所有文件都上传到刚刚新建的GitHub仓库中</p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h4><p>在idea中新建一个Module，为Maven项目，命名为：microservice-config-server-4001</p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>引入依赖config server依赖，我的完整pom.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承microservice依赖版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-config-server-4001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入microservice-common依赖,引入后可以使用microservice-common的实体类,工具类等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><p>uri为GitHub仓库的http地址，但是去掉了后缀<code>.git</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">4001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/a6678696/microservice-config</span></span><br></pre></td></tr></table></figure>

<h4 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置服务启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-18 18:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication_4001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication_4001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加本地域名映射"><a href="#添加本地域名映射" class="headerlink" title="添加本地域名映射"></a>添加本地域名映射</h4><p>找到 C:\Windows\System32\drivers\etc 打开hosts，底部加配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>  configserver.ledao.com</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动microservice-config-server-4001项目</p>
<p>地址栏输入：<a href="http://configserver.ledao.com:4001/application-v1.yml">http://configserver.ledao.com:4001/application-v1.yml</a> 可以返回application-v1.yml的内容</p>
<p>地址栏输入：<a href="http://configserver.ledao.com:4001/application-v2.yml">http://configserver.ledao.com:4001/application-v2.yml</a> 可以返回application-v2.yml的内容</p>
<p>地址栏输入：<a href="http://configserver.ledao.com:4001/application-v3.yml">http://configserver.ledao.com:4001/application-v3.yml</a> 会返回application.yml的内容，其实GitHub仓库中并没有application-v3.yml这个文件，但是却访问了它，最终会返回根文件application.yml的内容</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>请求路径匹配规则如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Git修改远程仓库地址</title>
    <url>/285.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>由于需要将代码上传到另一个仓库，所以需要修改一下远程仓库地址，修改的方法有三个：</p>
<ol>
<li>直接使用一条命令修改，<font color="#dd0000">推荐使用</font></li>
<li>删除原来的远程库地址，再绑定</li>
<li>修改config文件</li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="直接使用一条命令修改"><a href="#直接使用一条命令修改" class="headerlink" title="直接使用一条命令修改"></a>直接使用一条命令修改</h4><p>修改命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin url地址</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221211191425708.png" alt="image-20221211191425708"></p>
<h4 id="先删除再绑定"><a href="#先删除再绑定" class="headerlink" title="先删除再绑定"></a>先删除再绑定</h4><p>删除命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>

<p>绑定命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin url地址</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221211191734828.png" alt="image-20221211191734828"></p>
<h4 id="修改config文件"><a href="#修改config文件" class="headerlink" title="修改config文件"></a>修改config文件</h4><p>config文件的路径如下图所示，直接把里面的url地址改掉即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221211192024617.png" alt="image-20221211192024617"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>查看远程仓库地址命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-18%20182819.png"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot启动报错：Cannot determine embedded database driver class for database type NONE的解决办法</title>
    <url>/287.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Spring Boot项目启动时报错：Cannot determine embedded database driver class for database type NONE</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-18%20201505.png"></p>
<h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>这是因为spring boot默认会加载org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration类，DataSourceAutoConfiguration类使用了@Configuration注解向spring注入了dataSource bean。因为工程中没有关于dataSource相关的配置信息，所以当spring创建dataSource bean因缺少相关的信息就会报错</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>解决办法有两种：一种是修改启动类注解，另一种是配置数据源</p>
<h4 id="修改注解"><a href="#修改注解" class="headerlink" title="修改注解"></a>修改注解</h4><p>在启动类中修改注解@SpringBootApplication为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><p>在application.yml中配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-student</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_springcloud?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="http://wuwenliang.net/2018/07/15/springboot%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Cannot-determine-embedded-database/">springboot常见问题之启动报错Cannot determine embedded database</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Config Client</title>
    <url>/288.html</url>
    <content><![CDATA[<h3 id="上传文件到GitHub"><a href="#上传文件到GitHub" class="headerlink" title="上传文件到GitHub"></a>上传文件到GitHub</h3><p>把之前上传到GitHub的microservice-config库中的文件都删除掉，再新建三个文件：application.yml、crm-dev.yml、crm-test.yml，然后上传到GitHub的microservice-config库中</p>
<p>application.yml内容为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">111</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">222</span></span><br></pre></td></tr></table></figure>

<p>crm-dev.yml内容为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7777</span></span><br></pre></td></tr></table></figure>

<p>crm-test.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">88888</span></span><br></pre></td></tr></table></figure>

<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h4><p>在idea中新建一个Module，为Maven项目，命名为：microservice-config-client-5001</p>
<h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5001</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<h4 id="bootstrap-yml配置"><a href="#bootstrap-yml配置" class="headerlink" title="bootstrap.yml配置"></a>bootstrap.yml配置</h4><p>新建一个配置文件，命名为：bootstrap.yml，优先级比application.yml高</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">application-dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">crm</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://configserver.ledao.com:4001</span>  <span class="comment"># 配置configserver地址</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#级别</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支git中,默认master</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Config Server启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-18 21:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientApplication_5001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientApplication_5001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加ConfigClientController类"><a href="#添加ConfigClientController类" class="headerlink" title="添加ConfigClientController类"></a>添加ConfigClientController类</h4><p>主要用于提供测试接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-18 21:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getPort&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(String port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加本地域名映射"><a href="#添加本地域名映射" class="headerlink" title="添加本地域名映射"></a>添加本地域名映射</h4><p>找到 C:\Windows\System32\drivers\etc 打开hosts，底部加配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>  client-config.ledao.com</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>地址栏输入：<a href="http://client-config.ledao.com:5001/getPort">http://client-config.ledao.com:5001/getPort</a> ，根据bootstrap.yml的配置获取不同文件的port</p>
<ol>
<li><p>当spring.cloud.config.name=application，spring.cloud.config.profile=dev时</p>
<p>返回<code>111</code>，此时返回的是application.yml的dev端口</p>
</li>
<li><p>当spring.cloud.config.name=application，spring.cloud.config.profile=test时</p>
<p>返回<code>222</code>，此时返回的是application.yml的test端口</p>
</li>
<li><p>当spring.cloud.config.name=crm，spring.cloud.config.profile=dev时</p>
<p>返回<code>7777</code>，此时返回的是crm-dev.yml的端口</p>
</li>
<li><p>当spring.cloud.config.name=crm，spring.cloud.config.profile=test时</p>
<p>返回<code>88888</code>，此时返回的是crm-test.yml的端口</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Config配置搜索路径</title>
    <url>/289.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>当配置文件一多，如果配置文件只放在根目录下，后期会不好管理，所以根据项目分类配置文件是很有必要的</p>
<h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><p>在microservice-config-server-4001项目的application.yml文件中配置search-paths</p>
<p>完整application.yml如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">4001</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/a6678696/microservice-config</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="comment">#后面接文件夹名称,没有配置的文件夹里的配置文件是访问不到的</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">aa</span> <span class="comment">#文件夹名称</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">bb</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>新建三个文件夹：aa、bb、cc，文件夹中分别放3个配置文件 nns.yml，nns2.yml，nns3.yml，上传这三个配置文件到GitHub的microservice-config库中，文件内容如下：</p>
<mark class="hl-label blue">nns.yml</mark> 

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">aaadev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">aaatest</span></span><br></pre></td></tr></table></figure>

<mark class="hl-label blue">nns2.yml</mark> 

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">bbbdev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">bbbtest</span></span><br></pre></td></tr></table></figure>

<mark class="hl-label blue">nns3.yml</mark> 

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">cccdev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">ccctest</span></span><br></pre></td></tr></table></figure>

<p>地址栏输入：<a href="http://configserver.ledao.com:4001/nns-dev.yml">http://configserver.ledao.com:4001/nns-dev.yml</a> ，访问到了，有name属性</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-19%20011929.png"></p>
<p>地址栏输入：<a href="http://configserver.ledao.com:4001/nns3-dev.yml">http://configserver.ledao.com:4001/nns3-dev.yml</a> ，没有访问到了，没有name属性</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-19%20011947.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA连接MySQL数据库</title>
    <url>/29.html</url>
    <content><![CDATA[<h3 id="选择数据库类型"><a href="#选择数据库类型" class="headerlink" title="选择数据库类型"></a>选择数据库类型</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018003753.jpg" alt="img"></p>
<h3 id="填写配置信息"><a href="#填写配置信息" class="headerlink" title="填写配置信息"></a>填写配置信息</h3><p>URL填：<code>jdbc:mysql://localhost:3306/db_myblog?serverTimezone=UTC</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018004005.jpg" alt="img"></p>
<h3 id="测试是否连接成功"><a href="#测试是否连接成功" class="headerlink" title="测试是否连接成功"></a>测试是否连接成功</h3><p>点击上图的Test Connection按钮测试是否可以成功连接,成功后点击OK即可</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装Docker</title>
    <url>/290.html</url>
    <content><![CDATA[<h3 id="登录身份"><a href="#登录身份" class="headerlink" title="登录身份"></a>登录身份</h3><p>使用root身份登录，一般默认都是用root身份</p>
<h3 id="查看系统内核"><a href="#查看系统内核" class="headerlink" title="查看系统内核"></a>查看系统内核</h3><p>Docker要求CentOS系统的内核版本高于3.10，安装前先查看自己的CentOS系统能否安装Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<h3 id="更新yum包"><a href="#更新yum包" class="headerlink" title="更新yum包"></a>更新yum包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>如果安装过旧版本的话，没有就跳过此步骤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><p>安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<h3 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h3 id="安装新版本"><a href="#安装新版本" class="headerlink" title="安装新版本"></a>安装新版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>看到版本号说明安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="安装hello-world镜像"><a href="#安装hello-world镜像" class="headerlink" title="安装hello-world镜像"></a>安装hello-world镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull hello-world</span><br></pre></td></tr></table></figure>

<h4 id="创建hello-world的一个容器并启动"><a href="#创建hello-world的一个容器并启动" class="headerlink" title="创建hello-world的一个容器并启动"></a>创建hello-world的一个容器并启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<p>看到<font color="#dd0000">Hello from Docker!</font>，说明容器启动成功</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker配置阿里云镜像仓库</title>
    <url>/291.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Docker默认远程仓库是 <a href="https://hub.docker.com/">https://hub.docker.com/</a> ，下载速度会很慢，所以要配置一下国内镜像</p>
<h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><h4 id="获取镜像地址"><a href="#获取镜像地址" class="headerlink" title="获取镜像地址"></a>获取镜像地址</h4><p>进入阿里云容器镜像服务地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">点这里快速进入</a>，登录后复制镜像仓库地址</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-19%20200741.png"></p>
<h4 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h4><p>在/etc/docker文件夹下新建一个名为 <mark class="hl-label blue">daemon.json</mark>  的配置文件，内容如下：（链接填自己的）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://*********.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重启daemon"><a href="#重启daemon" class="headerlink" title="重启daemon"></a>重启daemon</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h4 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>下载一个tomcat，命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure>

<p>发现速度快了很多</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用pull命令时报错</title>
    <url>/292.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用pull命令安装容器时报错：Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/&quot;">https://registry-1.docker.io/v2/&quot;</a>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="配置国内镜像"><a href="#配置国内镜像" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h4><p>查看博客：<a href="/291.html">Docker配置阿里云镜像仓库</a></p>
<h4 id="添加DNS地址"><a href="#添加DNS地址" class="headerlink" title="添加DNS地址"></a>添加DNS地址</h4><p>如果配置了国内镜像地址还是报错，就添加DNS地址，在/etc/resolv.conf中添加两行代码：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">nameserver <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line">nameserver <span class="number">8.8</span>.<span class="number">4.4</span></span><br></pre></td></tr></table></figure>

<p>重启一下Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/293.html</url>
    <content><![CDATA[<h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><h4 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h4 id="停止Docker"><a href="#停止Docker" class="headerlink" title="停止Docker"></a>停止Docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<h4 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启Docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h4 id="查看Docker概要信息"><a href="#查看Docker概要信息" class="headerlink" title="查看Docker概要信息"></a>查看Docker概要信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info	</span><br></pre></td></tr></table></figure>

<h4 id="查看Docker帮助文档"><a href="#查看Docker帮助文档" class="headerlink" title="查看Docker帮助文档"></a>查看Docker帮助文档</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<h4 id="查看Docker版本信息"><a href="#查看Docker版本信息" class="headerlink" title="查看Docker版本信息"></a>查看Docker版本信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-19%20211328.png"></p>
<table>
<thead>
<tr>
<th align="center">目录名称</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">REPOSITORY</td>
<td align="center">镜像的仓库源</td>
</tr>
<tr>
<td align="center">TAG</td>
<td align="center">镜像的标签（版本）同一个仓库有多个TAG的镜像，多个版本；我们用REPOSITORY:TAG来定义不同的镜像；</td>
</tr>
<tr>
<td align="center">IMAGE ID</td>
<td align="center">镜像ID，镜像的唯一标识</td>
</tr>
<tr>
<td align="center">CREATE</td>
<td align="center">镜像创建时间</td>
</tr>
<tr>
<td align="center">SIZE</td>
<td align="center">镜像大小</td>
</tr>
</tbody></table>
<h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure>

<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>下载最新版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure>

<p>下载指定版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名称:版本号</span><br></pre></td></tr></table></figure>

<h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>不加版本号就删除最新版</p>
<p>普通删除，如果镜像正在运行就无法删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像名称:版本号</span><br></pre></td></tr></table></figure>

<p>强制删除，即使镜像正在运行也可以删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi -f 镜像名称:版本号</span><br></pre></td></tr></table></figure>

<h4 id="查看元数据"><a href="#查看元数据" class="headerlink" title="查看元数据"></a>查看元数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect 镜像id</span><br></pre></td></tr></table></figure>

<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><p>普通方式创建容器：创建容器（容器为<font color="#dd0000">停止</font>状态）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name 自定义名称 镜像id</span><br></pre></td></tr></table></figure>

<p>交互式创建容器：创建并进入该容器（容器为<font color="#00dd00">运行</font>状态）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name 自定义名称 镜像id</span><br></pre></td></tr></table></figure>

<p>守护方式创建容器：创建容器但是不进入（容器为<font color="#00dd00">运行</font>状态）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -di --name 自定义名称 镜像id</span><br></pre></td></tr></table></figure>

<p>端口映射，可以通过：<a href="http://192.168.0.140:8888/">http://192.168.0.140:8888/</a> 访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name 自定义名称 -d -p 8888:8080 镜像id</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>
<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>
<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>
<li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li>
<li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li>
<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li>
<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>
<li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li>
<li><strong>-h “mars”:</strong> 指定容器的hostname；</li>
<li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li>
<li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li>
<li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li>
<li>**-m:**设置容器使用内存最大值；</li>
<li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>
<li><strong>–link=[]:</strong> 添加链接到另一个容器；</li>
<li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li>
<li><strong>–volume , -v:</strong> 绑定一个卷</li>
</ul>
<h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><p>容器停止并退出，命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>容器不停止退出，按键组合为：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">CTRL+P+Q</span><br></pre></td></tr></table></figure>

<h4 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h4><p>查看正在运行的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>查看所有容器，包括已经停止的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p>显示最近创建的2个容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -n 2</span><br></pre></td></tr></table></figure>

<p>查看停止的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -f status=exited</span><br></pre></td></tr></table></figure>

<p>所有选项说明：</p>
<p>-a ：显示所有的容器，包括未运行的</p>
<p>-f ：根据条件过滤显示的内容</p>
<p>–format ：指定返回值的模板文件</p>
<p>-l ：显示最近创建的容器</p>
<p>-n ：列出最近创建的n个容器</p>
<p>–no-trunc ：不截断输出</p>
<p>-q ：静默模式，只显示容器编号</p>
<p>-s ：显示总的文件大小</p>
<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>进入正在运行的容器，参数可以是容器id也可以是容器名称，<font color="#dd0000">建议使用容器id</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker attach 容器id或者容器名称</span><br></pre></td></tr></table></figure>

<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>启动已经停止的容器，参数可以是容器id也可以是容器名称，<font color="#dd0000">建议使用容器id</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 容器id或者容器名称</span><br></pre></td></tr></table></figure>

<h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><p>重启正在运行的容器，参数可以是容器id也可以是容器名称，<font color="#dd0000">建议使用容器id</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart 容器id或者容器名称</span><br></pre></td></tr></table></figure>

<h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><p>停止正在运行的容器，参数可以是容器id也可以是容器名称，<font color="#dd0000">建议使用容器id</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop 容器id或者容器名称</span><br></pre></td></tr></table></figure>

<p>暴力删除，直接杀掉进程，参数可以是容器id也可以是容器名称，<font color="#dd0000">建议使用容器id，不推荐此方法</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> 容器id或者容器名称</span><br></pre></td></tr></table></figure>

<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p>删除已经停止的容器，正在运行的容器要先停止再删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure>

<p>强制删除正在运行的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm -f 容器id</span><br></pre></td></tr></table></figure>

<p>删除多个容器，多个容器id用空格隔开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm -f 容器id1 容器id2</span><br></pre></td></tr></table></figure>

<p>删除所有容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -qa)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><code>-f</code>：通过 SIGKILL 信号强制删除一个运行中的容器。</li>
<li><code>-l</code>：移除容器间的网络连接，而非容器本身。</li>
<li><code>-v</code>：删除与容器关联的卷。</li>
</ul>
<h4 id="执行容器命令"><a href="#执行容器命令" class="headerlink" title="执行容器命令"></a>执行容器命令</h4><p>不进入容器并执行容器的命令，例子：<font color="#dd0000">docker exec 0f4c269bb2cf ls -l /sys/</font>，本例子的容器为CentOS系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器id 容器的可执行命令</span><br></pre></td></tr></table></figure>

<h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs 容器id</span><br></pre></td></tr></table></figure>

<p>某容器的日志文件位置为：在<font color="#dd0000">/var/lib/docker/containers</font>下找到对应容器的文件夹，打开文件夹后后一个.log后缀的文件，这就是日志文件了,如果时间久了日志文件变得很大，就直接操作该文件即可</p>
<h4 id="查看容器进程"><a href="#查看容器进程" class="headerlink" title="查看容器进程"></a>查看容器进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure>

<h4 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h4><p>宿主机（当前系统：VM虚拟机正在运行的系统）文件或者目录拷贝到容器内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp 需要拷贝的文件或者目录 容器名称或r:容器目录</span><br></pre></td></tr></table></figure>

<p>容器文件或者目录拷贝到宿主机内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp 容器名称:容器文件或者目录 宿主机目录</span><br></pre></td></tr></table></figure>

<h4 id="查看元数据-1"><a href="#查看元数据-1" class="headerlink" title="查看元数据"></a>查看元数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>

<h4 id="重命名容器"><a href="#重命名容器" class="headerlink" title="重命名容器"></a>重命名容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rename 原容器名 新容器名</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker启动Tomcat成功后外部却无法访问</title>
    <url>/294.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在创建Docker的Tomcat容器时使用了端口映射，外部无法通过 <font color="#dd0000">http://虚拟机IP:映射的端口号</font> 来访问</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Docker某些Tomcat版本的webapps是空的，直接访问是访问不到的，但是这些Tomcat有一个webapps.dist目录，这个目录就是原来的webapps目录</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="第一种办法"><a href="#第一种办法" class="headerlink" title="第一种办法"></a>第一种办法</h4><p>使用webapps目录不为空的Tomcat版本，webapps目录不为空的Tomcat版本有：8.0.52、8.5.28，直接使用这两个版本即可</p>
<h4 id="第二种办法"><a href="#第二种办法" class="headerlink" title="第二种办法"></a>第二种办法</h4><p>使用webapps目录为空的Tomcat版本，删除掉webapps空目录，再将webapps.dist目录命名为webapps</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker映射端口6666时无法访问</title>
    <url>/295.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在创建Docker的Tomcat容器时使用了端口映射，我映射的端口号是6666，外部使用谷歌浏览器却无法访问</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>6666端口使用谷歌浏览器、火狐浏览器、新版Edge浏览器是无法访问的，被我们遗忘的IE浏览器却可以访问！！</p>
<p>上述浏览器我都亲自验证过，其它浏览器不清楚情况</p>
<p>更多无法访问的端口号如下：</p>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">原因</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">tcpmux</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">echo</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">discard</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">systat</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">daytime</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">netstat</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">qotd</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">chargen</td>
</tr>
<tr>
<td align="center">20</td>
<td align="center">ftp data</td>
</tr>
<tr>
<td align="center">21</td>
<td align="center">ftp access</td>
</tr>
<tr>
<td align="center">22</td>
<td align="center">ssh</td>
</tr>
<tr>
<td align="center">23</td>
<td align="center">telnet</td>
</tr>
<tr>
<td align="center">25</td>
<td align="center">smtp</td>
</tr>
<tr>
<td align="center">37</td>
<td align="center">time</td>
</tr>
<tr>
<td align="center">42</td>
<td align="center">name</td>
</tr>
<tr>
<td align="center">43</td>
<td align="center">nicname</td>
</tr>
<tr>
<td align="center">53</td>
<td align="center">domain</td>
</tr>
<tr>
<td align="center">77</td>
<td align="center">priv-rjs</td>
</tr>
<tr>
<td align="center">79</td>
<td align="center">finger</td>
</tr>
<tr>
<td align="center">87</td>
<td align="center">ttylink</td>
</tr>
<tr>
<td align="center">95</td>
<td align="center">supdup</td>
</tr>
<tr>
<td align="center">101</td>
<td align="center">hostriame</td>
</tr>
<tr>
<td align="center">102</td>
<td align="center">iso-tsap</td>
</tr>
<tr>
<td align="center">103</td>
<td align="center">gppitnp</td>
</tr>
<tr>
<td align="center">104</td>
<td align="center">acr-nema</td>
</tr>
<tr>
<td align="center">109</td>
<td align="center">pop2</td>
</tr>
<tr>
<td align="center">110</td>
<td align="center">pop3</td>
</tr>
<tr>
<td align="center">111</td>
<td align="center">sunrpc</td>
</tr>
<tr>
<td align="center">113</td>
<td align="center">auth</td>
</tr>
<tr>
<td align="center">115</td>
<td align="center">sftp</td>
</tr>
<tr>
<td align="center">117</td>
<td align="center">uucp-path</td>
</tr>
<tr>
<td align="center">119</td>
<td align="center">nntp</td>
</tr>
<tr>
<td align="center">123</td>
<td align="center">NTP</td>
</tr>
<tr>
<td align="center">135</td>
<td align="center">loc-srv /epmap</td>
</tr>
<tr>
<td align="center">139</td>
<td align="center">netbios</td>
</tr>
<tr>
<td align="center">143</td>
<td align="center">imap2</td>
</tr>
<tr>
<td align="center">179</td>
<td align="center">BGP</td>
</tr>
<tr>
<td align="center">389</td>
<td align="center">ldap</td>
</tr>
<tr>
<td align="center">465</td>
<td align="center">smtp+ssl</td>
</tr>
<tr>
<td align="center">512</td>
<td align="center">print / exec</td>
</tr>
<tr>
<td align="center">513</td>
<td align="center">login</td>
</tr>
<tr>
<td align="center">514</td>
<td align="center">shell</td>
</tr>
<tr>
<td align="center">515</td>
<td align="center">printer</td>
</tr>
<tr>
<td align="center">526</td>
<td align="center">tempo</td>
</tr>
<tr>
<td align="center">530</td>
<td align="center">courier</td>
</tr>
<tr>
<td align="center">531</td>
<td align="center">chat</td>
</tr>
<tr>
<td align="center">532</td>
<td align="center">netnews</td>
</tr>
<tr>
<td align="center">540</td>
<td align="center">uucp</td>
</tr>
<tr>
<td align="center">556</td>
<td align="center">remotefs</td>
</tr>
<tr>
<td align="center">563</td>
<td align="center">nntp+ssl</td>
</tr>
<tr>
<td align="center">587</td>
<td align="center">stmp?</td>
</tr>
<tr>
<td align="center">601</td>
<td align="center">??</td>
</tr>
<tr>
<td align="center">636</td>
<td align="center">ldap+ssl</td>
</tr>
<tr>
<td align="center">993</td>
<td align="center">ldap+ssl</td>
</tr>
<tr>
<td align="center">995</td>
<td align="center">pop3+ssl</td>
</tr>
<tr>
<td align="center">2049</td>
<td align="center">nfs</td>
</tr>
<tr>
<td align="center">3659</td>
<td align="center">apple-sasl / PasswordServer</td>
</tr>
<tr>
<td align="center">4045</td>
<td align="center">lockd</td>
</tr>
<tr>
<td align="center">6000</td>
<td align="center">X11</td>
</tr>
<tr>
<td align="center">6665</td>
<td align="center">Alternate IRC [Apple addition]</td>
</tr>
<tr>
<td align="center">6666</td>
<td align="center">Alternate IRC [Apple addition]</td>
</tr>
<tr>
<td align="center">6667</td>
<td align="center">Standard IRC [Apple addition]</td>
</tr>
<tr>
<td align="center">6668</td>
<td align="center">Alternate IRC [Apple addition]</td>
</tr>
<tr>
<td align="center">6669</td>
<td align="center">Alternate IRC [Apple addition]</td>
</tr>
</tbody></table>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改端口号，避免使用上表的端口号</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker提交运行时容器为镜像</title>
    <url>/296.html</url>
    <content><![CDATA[<p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -a=<span class="string">&#x27;作者&#x27;</span> -m=<span class="string">&#x27;备注&#x27;</span> 运行时容器ID Docker用户名/新镜像名称:版本号</span><br></pre></td></tr></table></figure>

<p>下图中划红线的镜像就是刚刚提交的镜像</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20150855.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker推送镜像到hub服务器</title>
    <url>/297.html</url>
    <content><![CDATA[<h3 id="注册Docker账号"><a href="#注册Docker账号" class="headerlink" title="注册Docker账号"></a>注册Docker账号</h3><p>在Docker的hub官网注册，官网地址为：<a href="https://hub.docker.com/">https://hub.docker.com/</a> ，注册后记住用户名和密码</p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>输入登录命令，在输入自己的用户名和密码即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>

<h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>推送命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push Docker用户名/新镜像名称:版本号</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20211111.jpg"></p>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>在Docker的hub官网登录后即可看到刚刚推送的镜像</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20212908.jpg"></p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>查看镜像时有个拉取命令,如下图所示</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20002354.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker推送镜像到阿里云</title>
    <url>/298.html</url>
    <content><![CDATA[<h3 id="进入阿里云镜像控制台"><a href="#进入阿里云镜像控制台" class="headerlink" title="进入阿里云镜像控制台"></a>进入阿里云镜像控制台</h3><p>控制台地址：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a> ，登录</p>
<h3 id="创建命令空间"><a href="#创建命令空间" class="headerlink" title="创建命令空间"></a>创建命令空间</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232121.jpg"></p>
<h3 id="创建镜像仓库"><a href="#创建镜像仓库" class="headerlink" title="创建镜像仓库"></a>创建镜像仓库</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232151.jpg"></p>
<h4 id="填写仓库信息"><a href="#填写仓库信息" class="headerlink" title="填写仓库信息"></a>填写仓库信息</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232215.jpg"></p>
<h4 id="选择本地仓库"><a href="#选择本地仓库" class="headerlink" title="选择本地仓库"></a>选择本地仓库</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232235.jpg"></p>
<h4 id="阿里云提供的命令"><a href="#阿里云提供的命令" class="headerlink" title="阿里云提供的命令"></a>阿里云提供的命令</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-20%20232417.jpg"></p>
<h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login --username=用户名 registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure>

<p>创建一个阿里云专用镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag 要推送的镜像id registry.cn-hangzhou.aliyuncs.com/ledao/tomcat:[镜像版本号]</span><br></pre></td></tr></table></figure>

<p>下图中版本号为1.1的就是刚刚创建的</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20001143.jpg"></p>
<p>推送</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/ledao/tomcat:[镜像版本号]</span><br></pre></td></tr></table></figure>

<p>查看阿里云的镜像仓库中成功推送的镜像</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20001002.jpg"></p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/ledao/tomcat:[阿里云的镜像版本号]</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20001943.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker创建容器时目录挂载</title>
    <url>/299.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以实现宿主机和容器目录的双向自动同步</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>Docker可以使用cp命令来实现数据传递，这种方式非常麻烦，通过容器目录挂载，能够轻松实现代码上传，配置修改，日志同步等需求</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="单个目录"><a href="#单个目录" class="headerlink" title="单个目录"></a>单个目录</h4><p>拥有全部权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v  /宿主机目录:/容器目录 镜像名</span><br></pre></td></tr></table></figure>

<p>挂载目录只读</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v  /宿主机目录:/容器目录:ro 镜像名</span><br></pre></td></tr></table></figure>

<h4 id="多个目录"><a href="#多个目录" class="headerlink" title="多个目录"></a>多个目录</h4><p>拥有全部权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2  镜像名</span><br></pre></td></tr></table></figure>

<p>挂载目录只读</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v /宿主机目录:/容器目录:ro -v /宿主机目录2:/容器目录2:ro  镜像名</span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>同步的是多级目录，可能会出现权限不足的提示，这是因为Centos7中的安全模块selinux把权限禁掉了，我们需要在命令的后面添加<code>--privileged=true</code>来解决挂载的目录没有权限的问题</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>一般来说，都是创建容器时进行目录挂载，对于已经创建好的容器如果忘了挂载目录但是又想挂载目录，方法有两种：①提交这个容器为新的镜像，然后创建这个新镜像的容器同时进行目录挂载（此方式较简单）②修改这个容器的配置文件</p>
<p>具体步骤查看博客：<a href="https://blog.zoutl.cn/300.html">Docker修改已创建容器的挂载目录</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个Java程序:HelloWorld</title>
    <url>/3.html</url>
    <content><![CDATA[<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010130141.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA彻底删除一个项目</title>
    <url>/30.html</url>
    <content><![CDATA[<h3 id="删除Module"><a href="#删除Module" class="headerlink" title="删除Module"></a>删除Module</h3><p>在idea的project栏中右键点击项目,选择Remove Module</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018010656.jpg" alt="img"></p>
<p>在确认框中点击Remove，删除后项目文件还会有残余</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018010910.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018011035.jpg" alt="img"></p>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>右键点击pom.xml，然后选择Show in Explorer（为了快速找到项目文件的文件夹），把文件夹中的文件都删除掉即可（在手动删除文件之前，先选择 IDEA 的 File 菜单，选择Close Project关闭项目,然后在项目所在路径删除项目的文件夹）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018011449.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018011406.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker修改已创建容器的挂载目录</title>
    <url>/300.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一般来说，都是创建容器时进行目录挂载，对于已经创建好的容器如果忘了挂载目录但是又想挂载目录</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol>
<li>提交这个容器为新的镜像，然后创建这个新镜像的容器同时进行目录挂载（此方式较简单）</li>
<li>修改这个容器的配置文件</li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="提交新镜像再创建容器"><a href="#提交新镜像再创建容器" class="headerlink" title="提交新镜像再创建容器"></a>提交新镜像再创建容器</h4><p>查看下面两篇博客即可实现修改已创建容器的挂载目录</p>
<ol>
<li><a href="/296.html">Docker提交运行时容器为镜像</a> ，将要挂载目录的已创建容器提交为本地新镜像</li>
<li><a href="/299.html">Docker创建容器时目录挂载 </a>，创建容器时使用新镜像的镜像id顺便挂载目录</li>
</ol>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>停止Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<p>配置文件路径</p>
<p>/var/lib/docker/containers/[容器id]</p>
<p>修改配置文件hostconfig.json，在”Binds”节点中增加挂载目录的关系，前面的<font color="#dd0000">/home/hData/</font>是宿主机目录，后面的<font color="#dd0000">/cData</font>是容器目录，如果是多个用英文逗号隔开</p>
<p>单个目录例子：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Binds&quot;</span>:[<span class="string">&quot;/home/hData/:/cData&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>多个目录例子：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Binds&quot;</span>:[<span class="string">&quot;/home/hData:/cData&quot;</span>,<span class="string">&quot;/home/hData2:/cData2&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>修改配置文件config.v2.json，在”MountPoints” 节点中增加挂载目录</p>
<p>单个目录例子：（第一段代码是原始的，第二段代码是格式化过的，格式化后更好修改）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;MountPoints&quot;</span>:&#123;<span class="attr">&quot;/cData&quot;</span>:&#123;<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData&quot;</span>,<span class="attr">&quot;Destination&quot;</span>:<span class="string">&quot;/cData&quot;</span>,<span class="attr">&quot;RW&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;Name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Driver&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Propagation&quot;</span>:<span class="string">&quot;rprivate&quot;</span>,<span class="attr">&quot;Spec&quot;</span>:&#123;<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData/&quot;</span>,<span class="attr">&quot;Target&quot;</span>:<span class="string">&quot;/cData&quot;</span>&#125;,<span class="attr">&quot;SkipMountpointCreation&quot;</span>:<span class="literal">false</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;MountPoints&quot;</span>: &#123;</span><br><span class="line">	<span class="attr">&quot;/cData&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/cData&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Spec&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData/&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;Target&quot;</span>: <span class="string">&quot;/cData&quot;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">&quot;SkipMountpointCreation&quot;</span>: <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多个目录例子：（第一段代码是原始的，第二段代码是格式化过的，格式化后更好修改）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;MountPoints&quot;</span>:&#123;<span class="attr">&quot;/cData&quot;</span>:&#123;<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData&quot;</span>,<span class="attr">&quot;Destination&quot;</span>:<span class="string">&quot;/cData&quot;</span>,<span class="attr">&quot;RW&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;Name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Driver&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Propagation&quot;</span>:<span class="string">&quot;rprivate&quot;</span>,<span class="attr">&quot;Spec&quot;</span>:&#123;<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData&quot;</span>,<span class="attr">&quot;Target&quot;</span>:<span class="string">&quot;/cData&quot;</span>&#125;,<span class="attr">&quot;SkipMountpointCreation&quot;</span>:<span class="literal">false</span>&#125;,<span class="attr">&quot;/cData2&quot;</span>:&#123;<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData2&quot;</span>,<span class="attr">&quot;Destination&quot;</span>:<span class="string">&quot;/cData2&quot;</span>,<span class="attr">&quot;RW&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;Name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Driver&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Propagation&quot;</span>:<span class="string">&quot;rprivate&quot;</span>,<span class="attr">&quot;Spec&quot;</span>:&#123;<span class="attr">&quot;Type&quot;</span>:<span class="string">&quot;bind&quot;</span>,<span class="attr">&quot;Source&quot;</span>:<span class="string">&quot;/home/hData2&quot;</span>,<span class="attr">&quot;Target&quot;</span>:<span class="string">&quot;/cData2&quot;</span>&#125;,<span class="attr">&quot;SkipMountpointCreation&quot;</span>:<span class="literal">false</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;MountPoints&quot;</span>: &#123;</span><br><span class="line">	<span class="attr">&quot;/cData&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/cData&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Spec&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;Target&quot;</span>: <span class="string">&quot;/cData&quot;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">&quot;SkipMountpointCreation&quot;</span>: <span class="literal">false</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;/cData2&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData2&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/cData2&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Spec&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/hData2&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;Target&quot;</span>: <span class="string">&quot;/cData2&quot;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">&quot;SkipMountpointCreation&quot;</span>: <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p>启动刚刚修改的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 容器id</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装和配置Tomcat容器并部署Java项目</title>
    <url>/301.html</url>
    <content><![CDATA[<h3 id="创建Tomcat容器"><a href="#创建Tomcat容器" class="headerlink" title="创建Tomcat容器"></a>创建Tomcat容器</h3><p>创建的这个容器只是用来获取文件路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name 自定义名称 -di -p 8080:8080 Tomcat镜像id</span><br></pre></td></tr></table></figure>

<h3 id="获取文件路径"><a href="#获取文件路径" class="headerlink" title="获取文件路径"></a>获取文件路径</h3><p>进入容器的文件夹中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it Tomcat容器id /bin/bash</span><br></pre></td></tr></table></figure>

<p>获取三个文件夹<font color="#dd0000">conf、webapps、logs</font>的文件路径</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20095054.jpg"></p>
<h3 id="复制文件到宿主机"><a href="#复制文件到宿主机" class="headerlink" title="复制文件到宿主机"></a>复制文件到宿主机</h3><p>在宿主机的 home 目录下新建 tomcat 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/tomcat</span><br></pre></td></tr></table></figure>

<p>复制容器里的 <font color="#dd0000">/usr/local/tomcat/conf、/usr/local/tomcat/webapps</font> 到宿主机/home/tomcat/</p>
<p>复制 /usr/local/tomcat/conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:/usr/<span class="built_in">local</span>/tomcat/conf /home/tomcat/</span><br></pre></td></tr></table></figure>

<p>复制 /usr/local/tomcat/webapps</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:/usr/<span class="built_in">local</span>/tomcat/webapps /home/tomcat/</span><br></pre></td></tr></table></figure>

<h3 id="创建新的Tomcat容器"><a href="#创建新的Tomcat容器" class="headerlink" title="创建新的Tomcat容器"></a>创建新的Tomcat容器</h3><p>这个容器是用来部署Java项目的，创建时挂载 <font color="#dd0000">/home/tomcat/conf、/home/tomcat/webapps、home/tomcat/logs</font></p>
<p>创建容器并挂载目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name 自定义名称 -di -p 80:8080 -v /home/tomcat/conf:/usr/<span class="built_in">local</span>/tomcat/conf -v /home/tomcat/webapps:/usr/<span class="built_in">local</span>/tomcat/webapps -v /home/tomcat/logs:/usr/<span class="built_in">local</span>/tomcat/logs Tomcat镜像id</span><br></pre></td></tr></table></figure>

<h3 id="上传Java项目"><a href="#上传Java项目" class="headerlink" title="上传Java项目"></a>上传Java项目</h3><p>上传到 <font color="#dd0000">/home/tomcat/webapps</font> 目录下，我上传的文件名为：WebTest.war，Docker 的 Tomcat 是热部署的所以会自动部署Java项目，过了一会儿就可以访问这个项目了，访问路径为：<font color="#dd0000">http://虚拟机的ip/WebTest</font></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改宿主机的 <font color="#dd0000">/home/tomcat/conf</font> 目录下的 <font color="#dd0000">server.xml</font>，添加以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/usr/local/tomcat/webapps/WebTest&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加位置如下图：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20102700.png"></p>
<p>重启新创建的Tomcat容器，即部署Java项目的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart 容器id</span><br></pre></td></tr></table></figure>

<p>然后访问项目可以不加项目名了，访问路径为：<font color="#dd0000">http://虚拟机的ip</font></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Java</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装和配置MySQL容器</title>
    <url>/302.html</url>
    <content><![CDATA[<h3 id="创建MySQL容器"><a href="#创建MySQL容器" class="headerlink" title="创建MySQL容器"></a>创建MySQL容器</h3><p>创建的这个容器只是用来获取文件路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name 自定义名称 -di -p 3305:3306 -e MYSQL_ROOT_PASSWORD=123456 MySQL镜像id</span><br></pre></td></tr></table></figure>

<h3 id="获取文件路径"><a href="#获取文件路径" class="headerlink" title="获取文件路径"></a>获取文件路径</h3><p>进入容器的文件夹中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器id /bin/bash</span><br></pre></td></tr></table></figure>

<p>获取conf.d、log、mysql的文件路径，分别如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/mysql/conf.d</span><br><span class="line">/var/<span class="built_in">log</span></span><br><span class="line">/var/lib/mysql</span><br></pre></td></tr></table></figure>

<h3 id="复制文件到宿主机"><a href="#复制文件到宿主机" class="headerlink" title="复制文件到宿主机"></a>复制文件到宿主机</h3><p>在宿主机的 home 目录下新建 mysql 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/mysql</span><br></pre></td></tr></table></figure>

<p>复制容器里的 /etc/mysql/conf.d、/var/log、/var/lib/mysql到宿主机/home/mysql</p>
<p>复制/etc/mysql/conf.d</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:/etc/mysql/conf.d /home/mysql/</span><br></pre></td></tr></table></figure>

<p>复制/var/log</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:/var/<span class="built_in">log</span> /home/mysql/</span><br></pre></td></tr></table></figure>

<p>复制/var/lib/mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:/var/lib/mysql /home/mysql/</span><br></pre></td></tr></table></figure>

<h3 id="创建新的MySQL容器"><a href="#创建新的MySQL容器" class="headerlink" title="创建新的MySQL容器"></a>创建新的MySQL容器</h3><p>创建时挂载 /etc/mysql/conf.d、/var/log、/var/lib/mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -di --name 自定义名称 -p 3303:3306 -v /etc/mysql/conf.d:/home/mysql/conf -v /var/<span class="built_in">log</span>:/home/mysql/<span class="built_in">log</span> -v /var/lib/mysql:/home/mysql/mysql -e MYSQL_ROOT_PASSWORD=123456 MySQL镜像id</span><br></pre></td></tr></table></figure>

<p>重启新的MySQL容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart 容器id</span><br></pre></td></tr></table></figure>

<h3 id="SQLyog连接数据库"><a href="#SQLyog连接数据库" class="headerlink" title="SQLyog连接数据库"></a>SQLyog连接数据库</h3><p>连接数据库，主机地址填虚拟机IP，端口和密码填创建容器时设置的，用户名是root</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20112355.png"></p>
<p>执行sql脚本导入数据</p>
<p>然后就可以操作mysql容器的数据库了，Java项目连接数据库的基本信息也是填上面的</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker备份和恢复镜像</title>
    <url>/303.html</url>
    <content><![CDATA[<h3 id="备份镜像"><a href="#备份镜像" class="headerlink" title="备份镜像"></a>备份镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o 备份镜像的名称  源镜像名称:tag版本</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20211044.jpg"></p>
<h3 id="恢复镜像"><a href="#恢复镜像" class="headerlink" title="恢复镜像"></a>恢复镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load -i 镜像文件</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20211126.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerFile常用指令</title>
    <url>/304.html</url>
    <content><![CDATA[<h3 id="DockerFile简介"><a href="#DockerFile简介" class="headerlink" title="DockerFile简介"></a>DockerFile简介</h3><p>dockerfile用于快速有序且直观地完成对镜像的定制</p>
<p>Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>FROM指令是整个Dockerfile的入口，必须是第一条指令。其代表新制作镜像的基础镜像。基础镜像可以自己制作，也可以从开源的仓库pull，例如dockerhub或是国内阿里云的免费仓库。</p>
<p>Docker中存在一种特殊的情况，就是不以任何基础镜像为基准，此时可以第一句话使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM scratch</span><br></pre></td></tr></table></figure>

<p>来表示以空白镜像为基础，也就是直接将可执行文件复制进镜像。例如swarm、coreos/etcd等。</p>
<h4 id="RUN指令"><a href="#RUN指令" class="headerlink" title="RUN指令"></a>RUN指令</h4><p>是dockerfile中最常用的指令之一。用来执行命令行上的命令。RUN的格式分为两种：</p>
<p>第一种：<br>shell格式：<code>RUN&lt;命令&gt;</code>，类似于直接在终端输入命令。例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">RUN echo <span class="string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; <span class="regexp">/usr/share</span><span class="regexp">/tomcat/welcome</span>.html</span><br></pre></td></tr></table></figure>

<p>第二种：<br>exec格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>。<br>RUN既然可以像在命令行那样工作，那么就也可以实现传参来运行指令：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:<span class="number">14.04</span></span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y gcc libc6-dev <span class="built_in">make</span></span><br><span class="line">RUN wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</span></span><br><span class="line">RUN mkdir -p /usr/src/redis</span><br><span class="line">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=<span class="number">1</span></span><br><span class="line">RUN <span class="built_in">make</span> -C /usr/src/redis</span><br><span class="line">RUN <span class="built_in">make</span> -C /usr/src/redis install</span><br></pre></td></tr></table></figure>

<p>RUN一次就代表Dockerfile中的一层。而docker镜像的构建就是不断去完善每一层需要做的事情。而dockerfi对一个file中层数是有限制的，最大不超过127层。因此，RUN提供命令的串联功能，也就是允许每一层可包含多种操作，他们会按照书写顺序来依次执行。那么上面的例子可以变为：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:<span class="number">14.04</span></span><br><span class="line">RUN buildDeps=<span class="string">&#x27;gcc libc6-dev make&#x27;</span> \</span><br><span class="line">    &amp;&amp; apt-<span class="keyword">get</span> update \</span><br><span class="line">    &amp;&amp; apt-<span class="keyword">get</span> install -y $buildDeps \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</span> \</span><br><span class="line">    &amp;&amp; mkdir -p /usr/src/redis \</span><br><span class="line">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=<span class="number">1</span> \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis install \</span><br><span class="line">    &amp;&amp; rm -rf /<span class="keyword">var</span>/lib/apt/lists<span class="comment">/* \</span></span><br><span class="line"><span class="comment">    &amp;&amp; rm redis.tar.gz \</span></span><br><span class="line"><span class="comment">    &amp;&amp; rm -r /usr/src/redis \</span></span><br><span class="line"><span class="comment">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span></span><br></pre></td></tr></table></figure>

<p>换行用 \ ，注释用 # ，平时书写注意缩进来保证文件的可读性。上述例子中的最后一句还进行了无关文件的清理，进一步保证每一层的最优和最小</p>
<p>注意事项：<br>镜像的初衷是进行功能的模块化，也是尽可能让每个容器干最少的事情，那么我们在书写dockerfile的时候要注意这个问题，每一层的东西确保是必须的，否则就不要进行安装或是拷贝。</p>
<h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><p>指定作者<br>句法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">MAINTAINER <span class="tag">&lt;<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>该指令是为镜像添加标签<br>句法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">LABEL <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> ...</span><br></pre></td></tr></table></figure>

<p>一个Dockerfile种可以有多个LABEL，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LABEL multi.label1=<span class="string">&quot;value1&quot;</span> \</span><br><span class="line">multi.label2=<span class="string">&quot;value2&quot;</span> \</span><br><span class="line">other=<span class="string">&quot;value3&quot;</span></span><br></pre></td></tr></table></figure>

<p>说明：LABEL会继承基础镜像种的LABEL，如遇到key相同，则值覆盖</p>
<h4 id="COPY指令"><a href="#COPY指令" class="headerlink" title="COPY指令"></a>COPY指令</h4><p>该指令用于将宿主机文件拷贝至镜像内的指定路径<br>格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">COPY &lt;源路径&gt;... &lt;目标路径&gt;</span><br><span class="line">或</span><br><span class="line">COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</span><br></pre></td></tr></table></figure>

<p>也就是说，原路径可以有多个，而目标路径唯一<br>注意事项：</p>
<p>1、可以使用符合GO规范的通配符，例如：<code>COPY hom* /mydir/</code><br>2、目的路径可以是镜像内的绝对路径，也可以是相对于当前工作目录的相对路径<br>3、COPY过来的文件权限与原始权限相同。如需更改，请用传统Liunx的chmod命令进行修改即可</p>
<h4 id="ADD高级复制"><a href="#ADD高级复制" class="headerlink" title="ADD高级复制"></a>ADD高级复制</h4><p>ADD的本质作用类似于COPY，但是其更复杂：</p>
<p>1、ADD过来的压缩包可以自动在目标路径下进行解压<br>2、原始路径可以是一个连接，ADD过程会尝试从该链接下载所需的文件到目的路径<br>3、一般情况下，建议使用COPY而不是ADD，因为COPY过来的文件可以配合使用RUN来进行解压或是其他操作，搭配使用更灵活，且单条语句所负担的功能唯一</p>
<h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>该指令用于指定Dockerfile中该指令下面的操作所在的工作目录<br>类似于 cd 命令</p>
<h4 id="CMD-服务启动指令"><a href="#CMD-服务启动指令" class="headerlink" title="CMD 服务启动指令"></a>CMD 服务启动指令</h4><p>Docker不是虚拟机而是一个进程，作为进程，当然可以制定启动镜像时的具体参数。说白了就是制定一些你想自动启动的服务<br>格式：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">shell 格式：<span class="built_in">CMD</span> &lt;命令&gt;</span><br><span class="line">exec 格式：<span class="built_in">CMD</span> [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>...]</span><br><span class="line">参数列表格式：<span class="built_in">CMD</span> [<span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>...]。在指定了 ENTRYPOINT 指令后，用 <span class="built_in">CMD</span> 指定具体的参数。</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<p>1、CMD中的启动参数可以被更新覆盖。例如：<br>Dockerfile中若是用CMD指定启动镜像时执行/bin/bash，那么在启动镜像时输入<code>docker run -it ubuntu ./test.sh</code> 则会用./test.sh命令来覆盖/bin/bash命令<br>2、推荐使用exec格式的CMD书写。这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 “，而不要使用单引号<br>3、如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：<code>CMD echo /java</code><br>在实际执行中，会将其变更为：<br><code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo /java&quot; ]</code></p>
<h4 id="ENV设置环境变量"><a href="#ENV设置环境变量" class="headerlink" title="ENV设置环境变量"></a>ENV设置环境变量</h4><p>说是环境变量还不说是一个全局变量。在前面定义，后面可以通过 $ 取值进行使用<br>格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ENV <span class="tag">&lt;<span class="name">key</span>&gt;</span> <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">ENV <span class="tag">&lt;<span class="name">key1</span>&gt;</span>=<span class="tag">&lt;<span class="name">value1</span>&gt;</span> <span class="tag">&lt;<span class="name">key2</span>&gt;</span>=<span class="tag">&lt;<span class="name">value2</span>&gt;</span>...</span><br></pre></td></tr></table></figure>

<p>例如可以指定一些包的版本号，这样更新镜像很方便，或是保存一些密码（该功能慎用，自己玩还是可以的）</p>
<h4 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h4><p>语法形式: <code>ARG &lt;name&gt;[=&lt;default value&gt;]</code><br>ARG和ENV效果类似，都是用来设置观景变量的。唯一 不同的是dockerfile中的ARG编译好后是不会出现在打开的容器内的</p>
<p>ARG在dockerfile中创建一个全局参数，参数可以给定一个默认值，在编译时可以传参对其进行覆盖。如果ARG指令有默认值并且在构建期间没有接收到参数、则使用默认值。一个dockerfile中可以包含多个ARG参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">docker build --build-arg <span class="tag">&lt;<span class="name">varname</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以使用ARG或ENV指令来指定RUN指令可用的变量，如果ARG和ENV同时指定了一个相同名称的变量、则ENV设置的变量会覆盖ARG设置的变量。如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 FROM ubuntu</span><br><span class="line">2 ARG CONT_IMG_VER</span><br><span class="line">3 ENV CONT_IMG_VER v1.0.0</span><br><span class="line">4 RUN <span class="built_in">echo</span> <span class="variable">$CONT_IMG_VER</span></span><br></pre></td></tr></table></figure>

<p>使用   <code>docker build --build-arg CONT_IMG_VER=v2.0.1 .</code> 最终输出v1.0.0 </p>
<p>一个ARG指令的有效范围在其定义的构建阶段内、如果要在多个阶段中都有效、则必须在每个阶段都使用ARG指令；<strong>与ARG不同  ENV设置参数的有效期为整个构建期内</strong></p>
<h4 id="VOLUME-挂在共享卷"><a href="#VOLUME-挂在共享卷" class="headerlink" title="VOLUME 挂在共享卷"></a>VOLUME 挂在共享卷</h4><p>格式为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure>

<p>Docker的使用原则除了每个容器干尽量少的事情外，还尽可能要求容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，也就是将本地磁盘的某一个目录挂载至容器内。同时这样的共享目录可以被多个不同的容器所使用</p>
<p>除了可以在dockerfile中指定这一参数外，在运行启动容器时也可以附带这一参数来指定共享卷：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">docker run -it --name container-test -h CONTAINER -v /<span class="keyword">data</span> debian /bin/bash</span><br></pre></td></tr></table></figure>

<p>上述命令也可以覆盖dockerfile中的目录设定。</p>
<h4 id="USER指定用户"><a href="#USER指定用户" class="headerlink" title="USER指定用户"></a>USER指定用户</h4><p>在书写dockerfile时，某些层的操作若想切换用户名，可以使用该参数指定某些层的用户，并且是存在的用户名。<br> 格式：<code>USER &lt;用户名&gt;</code></p>
<p>如果以 <code>root</code> 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 <code>su</code> 或者 <code>sudo</code>，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 <code>gosu</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span></span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line"><span class="comment"># 下载 gosu</span></span><br><span class="line">RUN wget -O /usr/<span class="built_in">local</span>/bin/gosu <span class="string">&quot;https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64&quot;</span> \</span><br><span class="line">    &amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/gosu \</span><br><span class="line">    &amp;&amp; gosu nobody <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置 CMD，并以另外的用户执行</span></span><br><span class="line">CMD [ <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;gosu&quot;</span>, <span class="string">&quot;redis&quot;</span>, <span class="string">&quot;redis-server&quot;</span> ]</span><br></pre></td></tr></table></figure>

<h4 id="EXPOSE暴漏端口"><a href="#EXPOSE暴漏端口" class="headerlink" title="EXPOSE暴漏端口"></a>EXPOSE暴漏端口</h4><p>句法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure>

<p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口</p>
<p>要将 EXPOSE 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.jianshu.com/p/2a90fc6ee383">https://www.jianshu.com/p/2a90fc6ee383</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerFile</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerFile构建自定义CentOS</title>
    <url>/305.html</url>
    <content><![CDATA[<h3 id="编写DockerFile"><a href="#编写DockerFile" class="headerlink" title="编写DockerFile"></a>编写DockerFile</h3><p>新建一个文件，命名为：mycentosDockerFile，没有后缀名，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER ledao&lt;f1203007469@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">LABEL name=<span class="string">&quot;LeDao CentOS Image&quot;</span> \</span><br><span class="line">	build-date=<span class="string">&quot;2021-08-21&quot;</span></span><br><span class="line"></span><br><span class="line">ENV WORKPATH /home/</span><br><span class="line">WORKDIR <span class="variable">$WORKPATH</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>命令的最后面有个英文句号.（少了句号不行）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f /home/dockerfile/mycentosDockerFile -t a6678696/mycentos:1.1 .</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20232745.png"></p>
<h3 id="查看镜像构建历史"><a href="#查看镜像构建历史" class="headerlink" title="查看镜像构建历史"></a>查看镜像构建历史</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">history</span> 镜像id</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-21%20233507.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerFile</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerFile构建自定义Tomcat</title>
    <url>/306.html</url>
    <content><![CDATA[<h3 id="编写DockerFile"><a href="#编写DockerFile" class="headerlink" title="编写DockerFile"></a>编写DockerFile</h3><p>新建一个文件，命名为：mytomcatdockerfile，没有后缀名，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER LeDao&lt;f1203007469@gmail.com&gt;</span><br><span class="line"> </span><br><span class="line">LABEL name=<span class="string">&quot;LeDao Tomcat Image&quot;</span> \</span><br><span class="line">    build-date=<span class="string">&quot;2021-08-22 00:16:53&quot;</span></span><br><span class="line">    </span><br><span class="line">COPY  copyright.txt /home/copyright.txt</span><br><span class="line">ADD server-jre-8u151-linux-x64.tar.gz /home/</span><br><span class="line">ADD apache-tomcat-8.5.37.tar.gz /home/</span><br><span class="line"> </span><br><span class="line">ENV WORKPATH /home/apache-tomcat-8.5.37/</span><br><span class="line">WORKDIR <span class="variable">$WORKPATH</span></span><br><span class="line"> </span><br><span class="line">ENV JAVA_HOME /home/jdk1.8.0_151</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /home/apache-tomcat-8.5.37/</span><br><span class="line">ENV CATALINA_BASE /home/apache-tomcat-8.5.37/</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD [<span class="string">&quot;/home/apache-tomcat-8.5.37/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>创建/home/dockerfile目录，把mytomcatdockerfile、copyright.txt、server-jre-8u151-linux-x64.tar.gz、apache-tomcat-8.5.37.tar.gz复制到该目录下，并进入该目录</p>
<p>四个文件的百度网盘链接：</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1ldCQGNay95IvVlOzeMQdXg">https://pan.baidu.com/s/1ldCQGNay95IvVlOzeMQdXg</a> </p>
<p>提取码：<code>62h2</code></p>
</blockquote>
<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>命令的最后面有个英文句号.（少了句号不行）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f mytomcatdockerfile -t a6678696/mytomcat:1.2 .</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20010340.jpg"></p>
<h3 id="查看镜像构造历史"><a href="#查看镜像构造历史" class="headerlink" title="查看镜像构造历史"></a>查看镜像构造历史</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20010515.png"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Docker</tag>
        <tag>DockerFile</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerFile创建镜像时报错：file not found in build context or excluded by</title>
    <url>/307.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>DockerFile创建镜像时使用COPY和ADD指令时，检测到源文件不存在就会报错</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>DockerFile文件和源文件放在同一目录下，并且先进入这个目录再执行创建镜像命令</p>
<p>例如我的DockerFile文件和源文件都在/home/dockerfile目录中（如下图所示），那么我就要进入/home/dockerfile目录，然后执行DockerFile创建镜像的命令</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20013057.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerFile</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerFile通过VOLUME指令创建容器卷来实现容器的目录挂载</title>
    <url>/308.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>DockerFile创建镜像时通过VOLUME指令创建几个容器卷，然后创建这个镜像的容器时，这个容器就有了这几个容器卷目录，并与宿主机自动创建的对应目录实现了挂载</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VOLUME[<span class="string">&#x27;目录1&#x27;</span>,<span class="string">&#x27;目录2&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="编写DockerFile"><a href="#编写DockerFile" class="headerlink" title="编写DockerFile"></a>编写DockerFile</h4><p>新建一个文件，命名为：myVolumeDockerFile，没有后缀名，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;/home/v1&quot;</span>,<span class="string">&quot;/home/v2&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f myVolumeDockerFile -t a6678696/mycentos:1.2 .</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20040035.jpg"></p>
<h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it 9123279cfb4f</span><br></pre></td></tr></table></figure>

<h4 id="找到挂载的目录"><a href="#找到挂载的目录" class="headerlink" title="找到挂载的目录"></a>找到挂载的目录</h4><p>①找到容器挂载的容器卷v1，v2</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20040322.jpg"></p>
<p>②找到宿主机挂载的容器卷</p>
<p>通过inspect命令获取容器的元数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>

<p>找到Mounts节点，Source为宿主机的目录，Destination为容器的目录，两个目录是挂载的</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-22%20040846.jpg"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>docker run -v 命令创建挂载目录更好，可以自定义宿主机目录</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerFile</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerFile的CMD, ENTRYPOINT指令</title>
    <url>/309.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>CMD，ENTRYPOINT都是容器启动的时候，执行执行命令，都支持exec和shell方式</p>
<p>一般用法有两种：①单独一个CMD②先使用ENTRYPOINT（用于执行命令），然后结合CMD使用（用于追加参数）</p>
<p>有多个CMD时，只有最后一个CMD生效</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>一般开发和Docker官方都建议用 exec格式</p>
<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>第一种用法：运行一个可执行的文件并提供参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CMD [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>第二种用法：为ENTRYPOINT指定参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CMD [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] </span><br></pre></td></tr></table></figure>

<p>第三种用法(shell格式)：是以”/bin/sh -c”的方法执行的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CMD <span class="built_in">command</span> param1 param2</span><br></pre></td></tr></table></figure>

<h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p> exec 格式, 推荐</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTRYPOINT [“executable”, “param1”, “param2”]</span><br></pre></td></tr></table></figure>

<p> shell 格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTRYPOINT <span class="built_in">command</span> param1 param2</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="单个CMD"><a href="#单个CMD" class="headerlink" title="单个CMD"></a>单个CMD</h4><p>编写DockerFile，命名为df1，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;第一个CMD&quot;</span></span><br></pre></td></tr></table></figure>

<p>构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f df1 -t a6678696/df:1.1 .</span><br></pre></td></tr></table></figure>

<p>创建和运行该镜像的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run 镜像id</span><br></pre></td></tr></table></figure>

<p>结果如下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20000826.jpg"></p>
<h4 id="多个CMD"><a href="#多个CMD" class="headerlink" title="多个CMD"></a>多个CMD</h4><p>编写DockerFile，命名为df2，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;第一个CMD&quot;</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;第二个CMD&quot;</span></span><br></pre></td></tr></table></figure>

<p>构建镜像</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> build -f df<span class="number">2</span> -t a<span class="number">6678696</span>/df:<span class="number">1</span>.<span class="number">2</span> .</span><br></pre></td></tr></table></figure>

<p>创建和运行该镜像的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run 镜像id</span><br></pre></td></tr></table></figure>

<p>结果如下图，第一个CMD命令没有生效，生效的是最后一个CMD</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20000929.jpg"></p>
<h4 id="先ENTRYPOINT后CMD"><a href="#先ENTRYPOINT后CMD" class="headerlink" title="先ENTRYPOINT后CMD"></a>先ENTRYPOINT后CMD</h4><p>编写DockerFile，命名为df3，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;ls&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;-l&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f df3 -t a6678696/df:1.3 .</span><br></pre></td></tr></table></figure>

<p>创建和运行该镜像的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run 镜像id</span><br></pre></td></tr></table></figure>

<p>结果如下图，以ls -l格式查看文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20001442.png"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerFile</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA中Git版本回退</title>
    <url>/31.html</url>
    <content><![CDATA[<h3 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h3><p>右键点击项目，选择Git的Show History</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018015701.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018015828.jpg" alt="img"></p>
<h3 id="选择目标版本"><a href="#选择目标版本" class="headerlink" title="选择目标版本"></a>选择目标版本</h3><p>右键点击要回退的目标代码版本，选择Copy Revision Number（复制代码版本的版本号）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018020137.jpg" alt="img"></p>
<p>目标版本代码的版本号：<font color="#00dd00">a9431f9ccc6eceb67693ad0f706877dd54347bde</font></p>
<p>当前版本代码的版本号：<font color="#dd0000">573161acd112e954813933bccee221ca3e6f5aec</font></p>
<h3 id="开始回退"><a href="#开始回退" class="headerlink" title="开始回退"></a>开始回退</h3><p>右键点击项目，依次选中Git-&gt;Repository-&gt;Reset HEAD</p>
<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018020738.jpg" alt="img"></strong></p>
<p>Reset Type选择Hard，To Commit输入要回退的目标版本号，然后点击Reset即可回退到目标代码版本</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201018021257.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerFile的ONBUILD指令</title>
    <url>/310.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>父镜像在被子镜像继承后父镜像的ONBUILD被触发，可以把ONBUID理解为一个触发器。编写Dockerfile的时候，其他命令都是为了自身镜像服务的，只有ONBUILD是为了子镜像服务</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="构建父镜像"><a href="#构建父镜像" class="headerlink" title="构建父镜像"></a>构建父镜像</h4><p>编写父镜像DockerFile，命名为：parent_df，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">ONBUILD RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<p>构建父镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f parent_df -t parent .</span><br></pre></td></tr></table></figure>

<h4 id="构建子镜像"><a href="#构建子镜像" class="headerlink" title="构建子镜像"></a>构建子镜像</h4><p>编写子镜像DockerFile，命名为：son_df，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM parent</span><br></pre></td></tr></table></figure>

<p>构建子镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> docker build -f son_df -t son .</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>当构建子镜像的时候，父镜像的ONBUILD会触发，子镜像直接安装vim，父镜像是没有安装vim的。所以使用父镜像创建的容器使用vim命令会报错，而用子镜像创建的容器可以使用vim命令</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerFile</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建私有仓库</title>
    <url>/311.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Docker私有仓库程序本身就是一个镜像，主要是企业内部用来存放镜像的仓库，相对官方仓库以及阿里云仓库，具有更高的保密安全级别</p>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="拉取私有仓库镜像"><a href="#拉取私有仓库镜像" class="headerlink" title="拉取私有仓库镜像"></a>拉取私有仓库镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>

<h4 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -di --name=myRegistry -p 5000:5000 registry</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>浏览器地址栏输入：<font color="#dd0000">http://虚拟机id:5000/v2/_catalog</font>，看到下图说明搭建成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20024525.jpg"></p>
<h4 id="修改daemon-json"><a href="#修改daemon-json" class="headerlink" title="修改daemon.json"></a>修改daemon.json</h4><p>该文件在 <font color="#dd0000">/etc/docker</font> 目录下，添加以下代码让Docker信任私有仓库</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;虚拟机id:5000&quot;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启Docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><h4 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h4><p>标记要上传到私有仓库的镜像为私有仓库的镜像（标记只是引用，镜像id还是被标记的镜像的id）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag 镜像id 虚拟机id:5000/自定义名称</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20033246.png"></p>
<p>推送镜像到私有仓库，推送前先启动私有仓库的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push 上图划红线的镜像名称</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p>浏览器地址栏输入：<font color="#dd0000">http://虚拟机id:5000/v2/_catalog</font>，从下图可以看到镜像上传成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-23%20033447.jpg"></p>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p>先删除刚刚上传的本地镜像，然后再从私有仓库拉取镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull 虚拟机id:5000/上图的镜像名称</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA创建Spring项目</title>
    <url>/313.html</url>
    <content><![CDATA[<h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><p>查看博客：<a href="https://blog.zoutl.cn/253.html">idea创建Maven项目</a></p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>命名为：applicationContext.xml，完整代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="学生实体类"><a href="#学生实体类" class="headerlink" title="学生实体类"></a>学生实体类</h4><p>命名为：Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-24 1:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><p>命名为：Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-24 1:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;student1&quot;</span>);</span><br><span class="line">        System.out.println(student.getId()+<span class="string">&quot;,&quot;</span>+student.getName()+<span class="string">&quot;,&quot;</span>+ student.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>运行测试类的main方法，结果如下：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20021110.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker私有仓库删除镜像</title>
    <url>/312.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>对于私有仓库的镜像，Docker是没有命令对其进行删除的</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>进入私有仓库的容器内，找到镜像文件，然后手动删除即可</p>
<h3 id="删除过程"><a href="#删除过程" class="headerlink" title="删除过程"></a>删除过程</h3><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>先运行对应私有仓库的容器，然后进入容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 私有仓库容器id sh</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>该配置文件在 /etc/docker/registry 目录下，名称为：config.yml ，在storage节点添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>完整config.yml代码如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">:5000</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> [<span class="string">nosniff</span>]</span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="找到镜像文件"><a href="#找到镜像文件" class="headerlink" title="找到镜像文件"></a>找到镜像文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">&quot;*要删除镜像名称*&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>进入上一步找到的镜像文件的路径，然后开始删除，该镜像文件是文件夹所以删除时追加参数-r</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -r 镜像名称</span><br></pre></td></tr></table></figure>

<h4 id="同步配置文件"><a href="#同步配置文件" class="headerlink" title="同步配置文件"></a>同步配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure>

<h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><p>浏览器地址栏输入：<font color="#dd0000">http://虚拟机id:5000/v2/_catalog</font>，可以看到对应的镜像已经没了</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>form表单无法提交input disabled内容</title>
    <url>/315.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用了disable属性让文本框无法编辑，但是提交form表单时无法获取该文本框的值，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/student/update&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;margin-top: 10%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;student.id&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;student.name&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;student.age&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>disabled=”disabled”修改为readonly=”readonly”即可</p>
<h3 id="readonly和disabled的区别"><a href="#readonly和disabled的区别" class="headerlink" title="readonly和disabled的区别"></a>readonly和disabled的区别</h3><p>readonly：针对input(text / password)和textarea有效，在设置为true的情况下，用户可以获得焦点，但是不能编辑，在提交表单时，输入项会作为form的内容提交</p>
<p>disabled：针对所有表单元素（select，button，input，textarea等），在设置为disabled为true的情况下，表单输入项不能获得焦点，用户的所有操作无意义，在提交表单时，表单输入项不会被提交</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10释放被占用端口</title>
    <url>/314.html</url>
    <content><![CDATA[<h3 id="查看PID"><a href="#查看PID" class="headerlink" title="查看PID"></a>查看PID</h3><p>打开CMD，输入命令查看端口4000的PID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">&quot;4000&quot;</span></span><br></pre></td></tr></table></figure>

<p>看下图的0.0.0.0:4000，LISTENING后的数值：16388就是PID</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20044304.png"></p>
<h3 id="释放端口"><a href="#释放端口" class="headerlink" title="释放端口"></a>释放端口</h3><h4 id="CMD方式释放"><a href="#CMD方式释放" class="headerlink" title="CMD方式释放"></a>CMD方式释放</h4><p>输入以下命令，PID为上图LISTENING后的数值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill /T /F /PID 16388</span><br></pre></td></tr></table></figure>

<h4 id="任务管理器释放"><a href="#任务管理器释放" class="headerlink" title="任务管理器释放"></a>任务管理器释放</h4><p>查看指定 PID 的进程（也可以不看，记住PID即可）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist|findstr <span class="string">&quot;16388&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20044328.png"></p>
<p>打开任务管理，选择详细信息选项，根据进程名称或者PID找到进程</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20044726.jpg"></p>
<p>右键点击并选择结束任务</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-24%20044745.jpg"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Nginx</title>
    <url>/316.html</url>
    <content><![CDATA[<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<h3 id="创建并运行容器"><a href="#创建并运行容器" class="headerlink" title="创建并运行容器"></a>创建并运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=自定义名称 -v /home/data/nginx:/etc/nginx -p 80:80 nginx镜像id</span><br></pre></td></tr></table></figure>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx容器id bash</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址栏输入<font color="#dd0000">虚拟机IP</font>，看到<code>Welcome to nginx!</code>说明安装成功</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx实现反向代理</title>
    <url>/317.html</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>在云服务器上运行好项目，并且可以通过<code>IP地址:端口号</code>访问，拥有自己的域名</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h4><p>打开<code>/etc/nginx/conf.d</code>目录下的<code>default.conf</code>配置文件，在最下面添加以下代码，<code>upstream</code>和<code>server</code>成对出现</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">upstream</span> <span class="string">test &#123;</span></span><br><span class="line">  <span class="attr">server</span> <span class="string">121.222.34.112:8080;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line"><span class="comment">    #域名</span></span><br><span class="line">    <span class="attr">server_name</span>  <span class="string">test.ztlztl.cn;</span></span><br><span class="line"><span class="comment">    #charset koi8-r;</span></span><br><span class="line"><span class="comment">    #access_log  logs/host.access.log  main;</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line"><span class="comment">        #root   html;</span></span><br><span class="line"><span class="comment">        #index  index.html index.htm;</span></span><br><span class="line">      <span class="attr">proxy_pass</span> <span class="string">http://test;</span></span><br><span class="line">      <span class="attr">proxy_connect_timeout</span> <span class="string">30; #连接超时 默认为60秒</span></span><br><span class="line">      <span class="attr">proxy_read_timeout</span> <span class="string">30; #读取超时 默认为60秒</span></span><br><span class="line">      <span class="attr">proxy_send_timeout</span> <span class="string">30; #发送超时 默认为60秒</span></span><br><span class="line">      <span class="attr">access_log</span> <span class="string">off;</span></span><br><span class="line">      <span class="attr">break;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #error_page  404              /404.html;</span></span><br><span class="line"><span class="comment">    # redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="attr">error_page</span>   <span class="string">500 502 503 504  /50x.html;</span></span><br><span class="line">    <span class="attr">location</span> = <span class="string">/50x.html &#123;</span></span><br><span class="line">        <span class="attr">root</span>   <span class="string">html;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h4><p><code>upstream test</code>的<code>test</code>填项目的名称即可，<code>server</code>接项目的IP地址以及端口号，<code>server_name</code>后面是域名，proxy_pass后面是之前的项目名称</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>可以通过<code>test.ztlztl.cn</code>域名访问项目</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx实现负载均衡</title>
    <url>/318.html</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>在云服务器上运行好两个及以上相同的项目，并且都可以通过<code>IP地址:端口号</code>访问，拥有自己的域名</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>在实现反向代理的博客基础上修改<code>upstream</code>（有多少个项目就有多少个server），博客链接为：<a href="https://blog.zoutl.cn/317.html">Nginx 实现反向代理</a></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">upstream</span> <span class="string">test &#123;</span></span><br><span class="line">  <span class="attr">server</span> <span class="string">121.222.34.112:8080;</span></span><br><span class="line">  <span class="attr">server</span> <span class="string">121.211.34.112:8080;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>通过域名可以访问，即使有一个项目掉线了也可以正常访问</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx负载均衡策略</title>
    <url>/319.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Nginx负载均衡策略有：轮询（默认）、weight权重、ip_hash、least_conn最少连接</p>
<h3 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h3><p>每个请求轮流分配到不同的后端服务器，如果后端服务器挂掉，则自动被剔除</p>
<p>实例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="weight权重"><a href="#weight权重" class="headerlink" title="weight权重"></a>weight权重</h3><p>根据weight权重，请求会根据权重比例分发给不同后端服务器，weight权重越高，分配的比例越大；实际分配时，根据服务器硬件配置高低，来具体分配weight权重，硬件配置高的，weight就配置高点</p>
<p>实例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span> weight=<span class="number">5</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span> weight=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><p>ip_hash策略是根据用户客户端的IP的hash值来分配具体服务器，这样每个访问客户端都会固定访问某一个服务器，这样可以解决session丢失问题，很多网站都采用这种策略来搞负载均衡，主要考虑到session问题</p>
<p>实例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">	 ip_hash;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="least-conn"><a href="#least-conn" class="headerlink" title="least_conn"></a>least_conn</h3><p>web请求会被分发到连接数最少的服务器上</p>
<p>实例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">	 least_conn;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx负载均衡backup和down配置</title>
    <url>/320.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这两个配置很多时候用于运维，维护某个机器的时候用</p>
<h3 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h3><p>其他非backup机器挂掉后，才会请求backup机器</p>
<p>实例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span> backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="down"><a href="#down" class="headerlink" title="down"></a>down</h3><p>配置down的服务器不参与负载均衡，</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">8080</span>;</span><br><span class="line">     server <span class="number">172.17</span>.<span class="number">0.3</span>:<span class="number">9090</span> down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx实现动静分离</title>
    <url>/321.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>动静分离是指在web服务器架构中，将静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问的架构设计方法，进而提升整个服务访问性能和可维护性</p>
<p>我们可以把静态html页面，css样式，js文件，以及图片文件这些静态放Nginx服务器中，然后把动态请求显示的文件放类似Tomcat这样的容器服务器</p>
<p>这样方便维护，也可以提高系统性能</p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>云服务器安装好Nginx，拥有自己的域名（解析一个二级域名来用于访问静态资源）</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="新建静态资源"><a href="#新建静态资源" class="headerlink" title="新建静态资源"></a>新建静态资源</h4><p>在/<code>home/nginx</code>目录下放静态资源</p>
<blockquote>
<p>index.html，放在/<code>home/nginx</code>目录下</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://static.zoutl.cn/static/css/my.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://static.zoutl.cn/static/js/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Nginx静态资源服务器测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://static.zoutl.cn/static/img/2.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 666px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>my.css，放在/<code>home/nginx/static/css</code>目录下</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>my.js，放在/<code>home/nginx/static/js</code>目录下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>修改Nginx的default.conf配置文件，修改成自己的域名和资源根目录</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220325130820874.png" alt="image-20220325130820874"></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>浏览器地址栏输入：<a href="http://static.zoutl.cn/">http://static.zoutl.cn/</a>，结果如下：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-29%20233353.gif"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyUI标签页右键单击事件添加</title>
    <url>/32.html</url>
    <content><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;easyui-menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mm-tabrefresh&quot;</span> <span class="attr">data-options</span>=<span class="string">&quot;name:&#x27;1&#x27;,iconCls:&#x27;icon-refresh&#x27;&quot;</span>&gt;</span> 刷新当前标签页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu-sep&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mm-tabclose&quot;</span> <span class="attr">data-options</span>=<span class="string">&quot;name:&#x27;2&#x27;,iconCls:&#x27;icon-closetab&#x27;&quot;</span>&gt;</span>关闭当前标签页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mm-tabcloseall&quot;</span> <span class="attr">data-options</span>=<span class="string">&quot;name:&#x27;3&#x27;,iconCls:&#x27;icon-closealltab&#x27;&quot;</span>&gt;</span>关闭全部标签页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mm-tabcloseother&quot;</span> <span class="attr">data-options</span>=<span class="string">&quot;name:&#x27;4&#x27;,iconCls:&#x27;icon-closeothertab&#x27;&quot;</span>&gt;</span>关闭其他标签页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mm-tabcloseright&quot;</span> <span class="attr">data-options</span>=<span class="string">&quot;name:&#x27;5&#x27;,iconCls:&#x27;icon-closerighttab&#x27;&quot;</span>&gt;</span>关闭右侧标签页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mm-tabcloseleft&quot;</span> <span class="attr">data-options</span>=<span class="string">&quot;name:&#x27;6&#x27;,iconCls:&#x27;icon-closelefttab&#x27;&quot;</span>&gt;</span>关闭左侧标签页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 监听右键事件，创建右键菜单</span></span><br><span class="line">    $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(&#123;</span><br><span class="line">        <span class="attr">onContextMenu</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e, title, index</span>) </span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                $(<span class="string">&#x27;#menu&#x27;</span>).menu(<span class="string">&#x27;show&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">left</span>: e.pageX,</span><br><span class="line">                    <span class="attr">top</span>: e.pageY</span><br><span class="line">                &#125;).data(<span class="string">&quot;tabTitle&quot;</span>, title);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 右键菜单click</span></span><br><span class="line">    $(<span class="string">&quot;#menu&quot;</span>).menu(&#123;</span><br><span class="line">        <span class="attr">onClick</span>: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            closeTab(<span class="built_in">this</span>, item.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">closeTab</span>(<span class="params">menu, type</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> allTabs = $(<span class="string">&quot;#tabs&quot;</span>).tabs(<span class="string">&#x27;tabs&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> allTabtitle = [];</span><br><span class="line">        $.each(allTabs, <span class="function"><span class="keyword">function</span> (<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> opt = $(n).panel(<span class="string">&#x27;options&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (opt.closable)</span><br><span class="line">                allTabtitle.push(opt.title);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> curTabTitle = $(menu).data(<span class="string">&quot;tabTitle&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> curTabIndex = $(<span class="string">&quot;#tabs&quot;</span>).tabs(<span class="string">&quot;getTabIndex&quot;</span>, $(<span class="string">&quot;#tabs&quot;</span>).tabs(<span class="string">&quot;getTab&quot;</span>, curTabTitle));</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>: <span class="comment">// 刷新当前标签页</span></span><br><span class="line">                <span class="keyword">var</span> currentTab = $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(<span class="string">&#x27;getSelected&#x27;</span>);</span><br><span class="line">                <span class="keyword">var</span> url = $(currentTab.panel(<span class="string">&#x27;options&#x27;</span>)).attr(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line">                $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(<span class="string">&#x27;update&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">tab</span>: currentTab,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">href</span>: url</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                currentTab.panel(<span class="string">&#x27;refresh&#x27;</span>);</span><br><span class="line">                <span class="comment">// var panel = $(&quot;#tabs&quot;).tabs(&quot;getTab&quot;, curTabTitle).panel(&quot;refresh&quot;);</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>: <span class="comment">// 关闭当前标签页</span></span><br><span class="line">                $(<span class="string">&quot;#tabs&quot;</span>).tabs(<span class="string">&quot;close&quot;</span>, curTabIndex);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>: <span class="comment">// 关闭全部标签页</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allTabtitle.length; i++) &#123;</span><br><span class="line">                    $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(<span class="string">&#x27;close&#x27;</span>, allTabtitle[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>: <span class="comment">// 关闭其他标签页</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allTabtitle.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (curTabTitle != allTabtitle[i])</span><br><span class="line">                        $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(<span class="string">&#x27;close&#x27;</span>, allTabtitle[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(<span class="string">&#x27;select&#x27;</span>, curTabTitle);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>: <span class="comment">// 关闭右侧标签页</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = curTabIndex; i &lt; allTabtitle.length; i++) &#123;</span><br><span class="line">                    $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(<span class="string">&#x27;close&#x27;</span>, allTabtitle[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(<span class="string">&#x27;select&#x27;</span>, curTabTitle);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;6&quot;</span>: <span class="comment">// 关闭左侧标签页</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; curTabIndex - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(<span class="string">&#x27;close&#x27;</span>, allTabtitle[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">&#x27;#tabs&#x27;</span>).tabs(<span class="string">&#x27;select&#x27;</span>, curTabTitle);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201019131852.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>EasyUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx实现虚拟主机</title>
    <url>/322.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>虚拟主机概念比较广，可以是虚拟硬件来实现多网站，多应用运行，也可以是通过一些代理服务器来实现单机多网站运行，例如：我们一个服务器上可以部署三个网站，然后通过三个不同的域名访问</p>
<p>Nginx可以通过反向代理来实现虚拟主机</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>查看博客：<a href="https://blog.zoutl.cn/317.html">Nginx 实现反向代理 | LeDao 的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装Nginx</title>
    <url>/323.html</url>
    <content><![CDATA[<h3 id="添加Nginx源"><a href="#添加Nginx源" class="headerlink" title="添加Nginx源"></a>添加Nginx源</h3><p>CentOS7默认是没有Nginx源的，Nginx官方提供了添加源的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>

<h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>

<h3 id="设置开机自动运行"><a href="#设置开机自动运行" class="headerlink" title="设置开机自动运行"></a>设置开机自动运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>查看状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status  firewalld</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址栏输入虚拟机IP，看到 <font color="#dd0000">Welcome to nginx! </font>就说明安装成功</p>
<h3 id="卸载nginx"><a href="#卸载nginx" class="headerlink" title="卸载nginx"></a>卸载nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove nginx</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>CentOS7关闭Nginx命令，nginx.service可简写成nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop nginx.service</span><br></pre></td></tr></table></figure>

<p>CentOS7启动Nginx命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>

<p>CentOS7重启Nginx命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装Keepalived</title>
    <url>/324.html</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install keepalived</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure>

<p>关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop keepalived.service</span><br></pre></td></tr></table></figure>

<p>重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart keepalived.service</span><br></pre></td></tr></table></figure>

<p>查看日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/messages</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>配置文件在/etc/keepalived目录下，名称为：keepalived.conf</p>
<p>日志文件在/var/log目录下，名称为：messages</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Nginx</tag>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware克隆虚拟机</title>
    <url>/325.html</url>
    <content><![CDATA[<h3 id="关闭虚拟机"><a href="#关闭虚拟机" class="headerlink" title="关闭虚拟机"></a>关闭虚拟机</h3><p>如果要克隆的虚拟机正在运行，就先把它停掉，正在运行的虚拟机是无法克隆的</p>
<h3 id="开始克隆"><a href="#开始克隆" class="headerlink" title="开始克隆"></a>开始克隆</h3><blockquote>
<p>选中要克隆的虚拟机右键点击，选择 <font color="#dd0000">管理–&gt;&gt;克隆</font></p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20124552.png"></p>
<blockquote>
<p>克隆类型选择完整克隆</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20124640.png"></p>
<blockquote>
<p>填写虚拟机名称以及存储路径</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20124658.png"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived+Nginx实现高可用集群配置</title>
    <url>/326.html</url>
    <content><![CDATA[<h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><p>克隆当前虚拟机，查看克隆步骤：<a href="/325.html">VMware克隆虚拟机</a> ，当前虚拟机为主机，克隆的虚拟机为备用机（主机崩了才会启用备用机）</p>
<h3 id="配置主机"><a href="#配置主机" class="headerlink" title="配置主机"></a>配置主机</h3><h4 id="配置虚拟机hosts"><a href="#配置虚拟机hosts" class="headerlink" title="配置虚拟机hosts"></a>配置虚拟机hosts</h4><p>文件路径为：/etc/hosts，在底部添加：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span> KEEPALIVED_NGINX_MASTER</span><br></pre></td></tr></table></figure>

<h4 id="Keepalived配置介绍"><a href="#Keepalived配置介绍" class="headerlink" title="Keepalived配置介绍"></a>Keepalived配置介绍</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123; <span class="comment"># keepalived服务宕机异常出现的时候，发送通知邮件 可以是多个</span></span><br><span class="line">     acassen@firewall.loc  <span class="comment">#  收件人邮箱1</span></span><br><span class="line">     failover@firewall.loc <span class="comment">#  收件人邮箱2</span></span><br><span class="line">     sysadmin@firewall.loc <span class="comment">#  收件人邮箱3</span></span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc  <span class="comment">#邮件发件人</span></span><br><span class="line">   smtp_server <span class="number">192.168</span>.<span class="number">200.1</span>  <span class="comment"># 邮件服务器地址</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span>   <span class="comment"># 超时时间</span></span><br><span class="line">   router_id LVS_DEVEL   <span class="comment"># 路由id 多个keepalived集群的时候 必须一致</span></span><br><span class="line">   vrrp_skip_check_adv_addr <span class="comment"># 默认是不跳过检查。检查收到的VRRP通告中的所有地址可能会比较耗时，设置此命令的意思是，如果通告与接收的上一个通告来自相同的master路由器，则不执行检查(跳过检查)。</span></span><br><span class="line">   vrrp_strict   <span class="comment"># 这个东西要注释掉，否则要出乱子。严格遵守VRRP协议。下列情况将会阻止启动Keepalived：1. 没有VIP地址。2. 单播邻居。3. 在VRRP版本2中有IPv6地址。</span></span><br><span class="line">   vrrp_garp_interval <span class="number">0</span>  <span class="comment"># 小数类型，单位秒，在一个网卡上每组gratuitous arp消息之间的延迟时间，默认为0，一个发送的消息=n组 arp报文</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span> <span class="comment"># 小数类型，单位秒， 在一个网卡上每组na消息之间的延迟时间，默认为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># vrrp实例  我们集群设置 多机配置，除了state和priority不一样，其他都一样</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER  <span class="comment"># 服务器状态 MASTER是主服务器  BACKUP是备份服务器 主服务器的priority要比备份服务器大</span></span><br><span class="line">    interface eth0 <span class="comment"># 通信端口 通过ip addr可以看到 根据自己的机器配置</span></span><br><span class="line">    virtual_router_id <span class="number">51</span>  <span class="comment"># vrrp实例id  keepalived集群，实例id必须一致</span></span><br><span class="line">    priority <span class="number">100</span>  <span class="comment"># 权重比  主服务器的priority要比备份服务器大</span></span><br><span class="line">    advert_int <span class="number">1</span>  <span class="comment"># 心跳间隔  单位秒  keepalived多机器集群 通过心跳检测，如果发送心跳没反应 就立刻接管；</span></span><br><span class="line">    authentication &#123; <span class="comment"># 服务器之间通信密码</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123; <span class="comment"># 自定义虚拟IP </span></span><br><span class="line">        <span class="number">192.168</span>.<span class="number">200.16</span></span><br><span class="line">        <span class="number">192.168</span>.<span class="number">200.17</span></span><br><span class="line">        <span class="number">192.168</span>.<span class="number">200.18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改Keepalived配置文件"><a href="#修改Keepalived配置文件" class="headerlink" title="修改Keepalived配置文件"></a>修改Keepalived配置文件</h4><p>修改 /etc/keepalived 目录下的keepalived.conf配置文件，除了global_defs和vrrp_instance VI_1节点配置外，下面的节点配置都删除</p>
<p>global_defs.router_id修改为：KEEPALIVED_NGINX_MASTER</p>
<p>把global_defs.vrrp_strict注释掉</p>
<p>vrrp_instance VI_1.state修改为：MASTER</p>
<p>vrrp_instance VI_1.interface修改为：ens33</p>
<p>vrrp_instance VI_1.priority修改为：100</p>
<p>vrrp_instance VI_1.virtual_ipaddress修改为：192.168.1.99</p>
<p>完整keepalived.conf配置如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">! Configuration <span class="keyword">File</span> for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server <span class="number">192.168</span>.<span class="number">200.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id KEEPALIVED_NGINX_MASTER</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   <span class="comment"># vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span>.<span class="number">1.99</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置备用机"><a href="#配置备用机" class="headerlink" title="配置备用机"></a>配置备用机</h3><h4 id="配置虚拟机hosts-1"><a href="#配置虚拟机hosts-1" class="headerlink" title="配置虚拟机hosts"></a>配置虚拟机hosts</h4><p>文件路径为：/etc/hosts，在底部添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 KEEPALIVED_NGINX_BACKUP</span><br></pre></td></tr></table></figure>

<h4 id="修改Keepalived配置文件-1"><a href="#修改Keepalived配置文件-1" class="headerlink" title="修改Keepalived配置文件"></a>修改Keepalived配置文件</h4><p>修改 /etc/keepalived 目录下的keepalived.conf配置文件，除了global_defs和vrrp_instance VI_1节点配置外，下面的节点配置都删除</p>
<p>global_defs.router_id修改为：KEEPALIVED_NGINX_BACKUP</p>
<p>把global_defs.vrrp_strict注释掉</p>
<p>vrrp_instance VI_1.state修改为：BACKUP</p>
<p>vrrp_instance VI_1.interface修改为：ens33</p>
<p>vrrp_instance VI_1.priority修改为：50</p>
<p>vrrp_instance VI_1.virtual_ipaddress修改为：192.168.1.99</p>
<p>完整keepalived.conf配置如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">! Configuration <span class="keyword">File</span> for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server <span class="number">192.168</span>.<span class="number">200.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id KEEPALIVED_NGINX_BACKUP</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   <span class="comment"># vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP <span class="comment"># 服务器状态 MASTER是主服务器  BACKUP是备份服务器 主服务器的priority要比备份服务器大</span></span><br><span class="line">    interface ens33 <span class="comment"># 通信端口 通过ip addr可以看到 根据自己的机器配置</span></span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">50</span> <span class="comment"># 权重</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span>.<span class="number">1.99</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="修改Nginx首页"><a href="#修改Nginx首页" class="headerlink" title="修改Nginx首页"></a>修改Nginx首页</h4><p>分别修改主机和备用机的Nginx运行成功的首页，文件路径为：/usr/share/nginx/html/index.html，在首页代码中添加虚拟机IP以方便辨认访问的是哪个虚拟机</p>
<h4 id="启动Keepalived"><a href="#启动Keepalived" class="headerlink" title="启动Keepalived"></a>启动Keepalived</h4><p>启动主机和备用机的Keepalived</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure>

<h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>浏览器地址栏输入：<a href="http://192.168.1.99/">http://192.168.1.99/</a>，此时访问的是主机的Nginx</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20134623.png"></p>
<p>然后停掉主机的Keepalived</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop keepalived.service</span><br></pre></td></tr></table></figure>

<p>刷新一下页面，此时访问的是备用机的Nginx</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-30%20134604.png"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>PotPlayer安装皮肤</title>
    <url>/327.html</url>
    <content><![CDATA[<h3 id="下载皮肤"><a href="#下载皮肤" class="headerlink" title="下载皮肤"></a>下载皮肤</h3><p>下载地址：<a href="http://www.potplayercn.com/skins/">PotPlayer皮肤 - PotPlayer中文网 (potplayercn.com)</a></p>
<h3 id="安装皮肤"><a href="#安装皮肤" class="headerlink" title="安装皮肤"></a>安装皮肤</h3><h4 id="下载后解压"><a href="#下载后解压" class="headerlink" title="下载后解压"></a>下载后解压</h4><p>解压时选择提取到xxxxx文件夹，xxxxx就是下载好的压缩包名称</p>
<h4 id="找到皮肤文件夹"><a href="#找到皮肤文件夹" class="headerlink" title="找到皮肤文件夹"></a>找到皮肤文件夹</h4><p>打开PotPlayer后，在界面上右键点击，选择皮肤–&gt;&gt;皮肤设置</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-31%20132543.png"></p>
<p>打开皮肤文件夹，找到PotPlayer的皮肤安装目录</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-31%20132618.png"></p>
<h4 id="使用皮肤"><a href="#使用皮肤" class="headerlink" title="使用皮肤"></a>使用皮肤</h4><p>然后把上面解压后的文件夹复制到皮肤文件夹中，再重启PotPlayer，在界面上右键点击，选择皮肤再选择对应的皮肤即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-08-31%20133438.jpg"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7使用Crontab定时任务</title>
    <url>/328.html</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start crond</span><br></pre></td></tr></table></figure>

<p>停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop crond</span><br></pre></td></tr></table></figure>

<p>重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure>

<p>查看状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status crond</span><br></pre></td></tr></table></figure>

<h3 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h3><p>Crontab定时任务是没有权限执行shell脚本的，要先赋予脚本777权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 脚本名称（不在当前目录要加上路径）</span><br></pre></td></tr></table></figure>

<h3 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h3><h4 id="脚本放在目录"><a href="#脚本放在目录" class="headerlink" title="脚本放在目录"></a>脚本放在目录</h4><p>把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次</p>
<h4 id="编写crontab命令"><a href="#编写crontab命令" class="headerlink" title="编写crontab命令"></a>编写crontab命令</h4><p>进入当前用户的工作表编辑，是常见的vim界面，每行是一条命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>crontab的命令构成为 时间+动作，下面的* * * * *是时间，shell脚本路径为动作</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-01%20123513.png"></p>
<p>时间有分、时、日、月、周五种，操作符有：</p>
<p><font color="#dd0000">*****</font> ：取值范围内的所有数字</p>
<p><font color="#dd0000"><strong>/</strong></font> ：每过多少个数字</p>
<p><font color="#dd0000"><strong>-</strong></font> ：从X到Z</p>
<p><font color="#dd0000"><strong>,</strong></font> ：散列数字</p>
<p>一些实例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">实例<span class="number">1</span>：每<span class="number">1</span>分钟执行一次myCommand</span><br><span class="line">* * * * * myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">2</span>：每小时的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</span><br><span class="line"><span class="number">3</span>,<span class="number">15</span> * * * * myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">3</span>：在上午<span class="number">8</span>点到<span class="number">11</span>点的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</span><br><span class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span>-<span class="number">11</span> * * * myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">4</span>：每隔两天的上午<span class="number">8</span>点到<span class="number">11</span>点的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</span><br><span class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span>-<span class="number">11</span> */<span class="number">2</span>  *  * myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">5</span>：每周一上午<span class="number">8</span>点到<span class="number">11</span>点的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</span><br><span class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span>-<span class="number">11</span> * * <span class="number">1</span> myCommand</span><br><span class="line"></span><br><span class="line">实例<span class="number">6</span>：每晚的<span class="number">21</span>:<span class="number">30</span>重启smb</span><br><span class="line"><span class="number">30</span> <span class="number">21</span> * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">7</span>：每月<span class="number">1</span>、<span class="number">10</span>、<span class="number">22</span>日的<span class="number">4</span> : <span class="number">45</span>重启smb</span><br><span class="line"><span class="number">45</span> <span class="number">4</span> <span class="number">1</span>,<span class="number">10</span>,<span class="number">22</span> * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">8</span>：每周六、周日的<span class="number">1</span> : <span class="number">10</span>重启smb</span><br><span class="line"><span class="number">10</span> <span class="number">1</span> * * <span class="number">6</span>,<span class="number">0</span> /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">9</span>：每天<span class="number">18</span> : <span class="number">00</span>至<span class="number">23</span> : <span class="number">00</span>之间每隔<span class="number">30</span>分钟重启smb</span><br><span class="line"><span class="number">0</span>,<span class="number">30</span> <span class="number">18</span>-<span class="number">23</span> * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">10</span>：每星期六的晚上<span class="number">11</span> : <span class="number">00</span> pm重启smb</span><br><span class="line"><span class="number">0</span> <span class="number">23</span> * * <span class="number">6</span> /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">11</span>：每一小时重启smb</span><br><span class="line"><span class="number">0</span> */<span class="number">1</span> * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例<span class="number">12</span>：晚上<span class="number">11</span>点到早上<span class="number">7</span>点之间，每隔一小时重启smb</span><br><span class="line"><span class="number">0</span> <span class="number">23</span>-<span class="number">7</span>/<span class="number">1</span> * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>通过shell脚本优化Keepalived+Nginx高可用集群</title>
    <url>/329.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Keepalived不容易挂掉，容易挂掉的是Nginx，如果Nginx挂掉了依然可以通过Keepalived访问机器，但是访问不到Nginx服务。所以这里需要借助Keepalived的vrrp_script配置来调用自定义shell脚本，来检测Nginx是否挂掉，如果Nginx挂掉了，就启动它，打开失败就关闭Keepalived启用备用机</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h4><p>在 / 目录下新建shell目录存放shell脚本文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /shell</span><br></pre></td></tr></table></figure>

<p>新建 .sh文件，命名为：nginx_check.sh，内容如下：（该脚本的功能为通过 <font color="#dd0000">ps -ef|grep -w nginx|grep -v grep|wc -l</font>查看当前有多少个Nginx服务在运行，如果返回0说明Nginx服务没有运行，就启动Nginx，过2秒再查看是否启动成功，启动失败就停止Keepalived启用备用机）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &#x27;check Nginx&#x27;</span><br><span class="line"></span><br><span class="line">count_nginx=`ps -ef|grep -w nginx|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">echo $count_nginx</span><br><span class="line"></span><br><span class="line">if [ $count_nginx -eq 0 ];then</span><br><span class="line"></span><br><span class="line">    systemctl start nginx</span><br><span class="line">    echo &#x27;start Nginx&#x27;</span><br><span class="line">    sleep 2</span><br><span class="line"></span><br><span class="line">    if [ `ps -ef|grep -w nginx|grep -v grep|wc -l` -eq 0 ];then</span><br><span class="line">        echo &#x27;stop keepalived&#x27;</span><br><span class="line">        systemctl stop keepalived</span><br><span class="line">    fi  </span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h4 id="修改Keepalived配置"><a href="#修改Keepalived配置" class="headerlink" title="修改Keepalived配置"></a>修改Keepalived配置</h4><p>配置文件路径为：/etc/keepalived/keepalived.conf</p>
<p>添加节点：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">	script <span class="string">&quot;/shell/nginx_check.sh&quot;</span></span><br><span class="line">	nterval <span class="number">2</span></span><br><span class="line">	weight -<span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在vrrp_instance VI_1节点添加：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">track_script &#123;</span><br><span class="line">	check_nginx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整keepalived.conf如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">! Configuration <span class="keyword">File</span> for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server <span class="number">192.168</span>.<span class="number">200.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id KEEPALIVED_NGINX_MASTER</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   <span class="comment"># vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">	script <span class="string">&quot;/shell/nginx_check.sh&quot;</span></span><br><span class="line">	nterval <span class="number">2</span></span><br><span class="line">	weight -<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">	    check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span>.<span class="number">1.99</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重启Keepalived服务"><a href="#重启Keepalived服务" class="headerlink" title="重启Keepalived服务"></a>重启Keepalived服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart keepalived</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>关闭Nginx服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop nginx</span><br></pre></td></tr></table></figure>

<p>等2秒查看Nginx服务状态：Nginx服务正在运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-01%20132949.png"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>我在测试时keepalived vrrp_script始终不起作用，通过网上的解决方案也没有解决，所以我就不使用vrrp_script了，转而使用Linux的Crontab定时任务定时执行检测脚本，如何使用Crontab查看博客：<a href="https://blog.zoutl.cn/328.html">CentOS7使用Crontab定时任务 </a></p>
<p>如果你解决了keepalived vrrp_script不起作用，请在评论区留言一下，谢谢(～￣▽￣)～</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Keepalived</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>基本数据类型</title>
    <url>/33.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在Java中一共有八种基本数据类型，他们分别是 byte、short、int、long、float、double、char、boolean</p>
<h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>其中byte、short、int、long都是表示整数的，只不过他们的取值范围不一样</p>
<p>byte的取值范围为-128~127，占用1个字节（-2的7次方到2的7次方-1）</p>
<p>short的取值范围为-32768~32767，占用2个字节（-2的15次方到2的15次方-1）</p>
<p>int的取值范围为（-2147483648~2147483647），占用4个字节（-2的31次方到2的31次方-1）</p>
<p>long的取值范围为（-9223372036854774808~9223372036854774807），占用8个字节（-2的63次方到2的63次方-1）</p>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>float和double是表示浮点型的数据类型，他们之间的区别在于他们的精确度不同</p>
<p>float 3.402823e+38 ~ 1.401298e-45（e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方）占用4个字节</p>
<p>double 1.797693e+308~ 4.9000000e-324 占用8个字节</p>
<p>double型比float型存储范围更大，精度更高，所以通常的浮点型的数据在不声明的情况下都是double型的，如果要表示一个数据是float型的，可以在数据后面加上F。</p>
<p>浮点型的数据是不能完全精确的，所以有的时候在计算的时候可能会在小数点最后几位出现浮动，这是正常的。</p>
<h3 id="boolean型（布尔型）"><a href="#boolean型（布尔型）" class="headerlink" title="boolean型（布尔型）"></a>boolean型（布尔型）</h3><p>这个类型只有两个值，true和false（真和非真）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> t = <span class="keyword">true</span>；</span><br><span class="line"><span class="keyword">boolean</span> f = <span class="keyword">false</span>；</span><br></pre></td></tr></table></figure>

<h3 id="char型（文本型）"><a href="#char型（文本型）" class="headerlink" title="char型（文本型）"></a>char型（文本型）</h3><p>用于存放字符的数据类型，占用2个字节，采用unicode编码，它的前128字节编码与ASCII兼容</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201020142626.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived+Nginx+Tomcat负载均衡</title>
    <url>/330.html</url>
    <content><![CDATA[<h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><p>主机和备用机分别使用Docker启动一个Tomcat，版本号最好不同，启动成功后有可能通过外部浏览器无法访问，解决方法查看博客：<a href="https://blog.zoutl.cn/294.html">Docker启动Tomcat成功后外部却无法访问</a></p>
<h3 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h3><p>修改主机和备用机的Nginx配置，修改内容一样</p>
<p>修改nginx.conf配置文件（在/etc/nginx目录下），在include /etc/nginx/conf.d/*.conf上方加上：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">	 server <span class="number">192.168</span>.<span class="number">0.106</span>:<span class="number">8080</span> weight=<span class="number">5</span>;</span><br><span class="line">	 server <span class="number">192.168</span>.<span class="number">0.107</span>:<span class="number">8080</span> weight=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改default.conf配置文件（在/etc/nginx/conf.d目录下），在location /节点加上：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">proxy_pass  http://www.<span class="number">123</span>.com;</span><br></pre></td></tr></table></figure>

<p>server_name可以修改成 <a href="http://www.123.com/">www.123.com</a> ，也可以不修改</p>
<h3 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址输入：<a href="http://192.168.0.106/">http://192.168.0.106/</a>或者<a href="http://192.168.0.107/">http://192.168.0.107/</a></p>
<p>不断刷新页面，访问了主机和备用机的Tomcat，此时Nginx+Tomcat负载均衡完成</p>
<p>如果出现错误：502 Bad Gateway，这是因为Nginx 主机的 SELinux 服务限制了其（即 Nginx）使用 http 访问权限引起的，输入以下命令即可解决此问题，如果不生效再重启Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect 1    <span class="comment"># “1”为开启，“0”为关闭</span></span><br></pre></td></tr></table></figure>

<p>打开Keepalived服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>

<p>浏览器地址输入Keepalived配置的virtual_ipaddress，该配置文件在/etc/keepalived目录下，此时已经完成了Keepalived+Nginx+Tomcat负载均衡</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Nginx</tag>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Redis</title>
    <url>/331.html</url>
    <content><![CDATA[<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:5</span><br></pre></td></tr></table></figure>

<h3 id="创建并运行容器"><a href="#创建并运行容器" class="headerlink" title="创建并运行容器"></a>创建并运行容器</h3><p>只运行不进入，要创建并运行就把 -d 改为 -it ，或者使用下面的进入Redis容器命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 6379:6379 Redis镜像id</span><br></pre></td></tr></table></figure>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>进入容器命令行界面后就可以愉快地玩耍了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it Redis容器id redis-cli</span><br></pre></td></tr></table></figure>

<h3 id="Redis可视化工具"><a href="#Redis可视化工具" class="headerlink" title="Redis可视化工具"></a>Redis可视化工具</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>我使用的是AnotherRedisDesktopManager，下载地址：<a href="https://gitee.com/qishibo/AnotherRedisDesktopManager/releases">AnotherRedisDesktopManager 发行版 - Gitee.com</a>，Windows下载第一个，像一般软件那般安装接口</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20090145.jpg"></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>点击新建连接，地址填Linux服务器IP地址，端口一般都是6379，连接名称根据自己的需求填</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20090427.jpg"></p>
<p>连接成功后，就可以管理Redis了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20090733.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot实现Redis存储session</title>
    <url>/332.html</url>
    <content><![CDATA[<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>创建一个Spring Boot项目，引入Spring Boot DevTools、Spring Web、Thymeleaf依赖，这里是创建项目时引入，下面是创建后引入，可以创建时引入就尽量创建时引入，比较方便</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20102041.jpg"></p>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20102341.jpg"></p>
<h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在pom文件中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.lettuce/lettuce-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>RedisSessionDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>RedisSessionDemo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.lettuce/lettuce-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">redis</span> <span class="comment">#指定redis实现spring session</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">PT1H</span> <span class="comment"># Session 过期时间， PT开头  ‘D’ – 天   ‘H’ – 小时  ‘M’ – 分钟 ‘S’ – 秒</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">flush-mode:</span> <span class="string">on_save</span> <span class="comment"># Sessions 刷新模式  on_save http response为committed才提交 immediate 立即提交</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">ledao</span> <span class="comment"># session 存储命名空间</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.106</span> <span class="comment">#Linux服务器IP地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment">#Redis端口号,一般默认为6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span> <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">      <span class="attr">shutdown-timeout:</span> <span class="number">100</span>  <span class="comment"># 连接超时时间（毫秒）</span></span><br></pre></td></tr></table></figure>

<h3 id="启动类添加注解"><a href="#启动类添加注解" class="headerlink" title="启动类添加注解"></a>启动类添加注解</h3><p>添加注解<code>@EnableRedisHttpSession</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSessionDemoApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(RedisSessionDemoApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RedisSessionDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><h4 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h4><p>要实现Serializable序列化，不然会Redis会报错：org.springframework.data.redis.serializer.SerializationException: Cannot serialize</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-02 9:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IndexController-java"><a href="#IndexController-java" class="headerlink" title="IndexController.java"></a>IndexController.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-02 9:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-02 9:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">login</span><span class="params">(HttpSession session, User user)</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        String password = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (password.equals(user.getPassword())) &#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;currentUser&quot;</span>, user);</span><br><span class="line">            mav.setViewName(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mav.addObject(<span class="string">&quot;errorInfo&quot;</span>, <span class="string">&quot;用户名或者密码错误！&quot;</span>);</span><br><span class="line">            mav.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h3><h4 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  用户名:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line">  密码:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="main-html"><a href="#main-html" class="headerlink" title="main.html"></a>main.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span>当前用户:<span class="tag">&lt;<span class="name">sapn</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.currentUser.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sapn</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="info-html"><a href="#info-html" class="headerlink" title="info.html"></a>info.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">当前用户信息:</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;&#x27;用户名:&#x27;+session.currentUser.userName+&#x27;,密码:&#x27;+session.currentUser.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li><p>浏览器地址栏输入：<a href="http://localhost:8888/">http://localhost:8888/</a> ，进入登录页面login.html</p>
</li>
<li><p>输入用户名和密码，只要密码是123就可以登录成功，然后进入主页面main.html</p>
</li>
<li><p>浏览器地址栏输入：<a href="http://localhost:8888/getInfo">http://localhost:8888/getInfo</a>，进入显示当前登录用户信息页面info.html</p>
</li>
<li><p>在Redis可视化工具可以看到有一个用户session</p>
</li>
<li><p>打开另一个浏览器，重复①②③步骤，然后Redis可视化工具可以看到多了一个用户session</p>
</li>
</ol>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>GitHub地址：<a href="https://github.com/a6678696/RedisSessionDemo">a6678696/RedisSessionDemo: Redis存储session例子 (github.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx+Redis+Tomcat实现负载均衡共享session</title>
    <url>/333.html</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Nginx、Tomcat和Redis都是Docker创建的容器</p>
<h3 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>将项目拉到idea上，GitHub地址为：<a href="https://github.com/a6678696/RedisSessionDemo">a6678696/RedisSessionDemo: Redis存储session例子 (github.com)</a>，，这个项目实现了Redis存储session，实现Redis存储session的博客地址为：<a href="https://blog.zoutl.cn/332.html">Spring Boot 实现 Redis 存储 session | LeDao 的博客 (zoutl.cn)</a></p>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>根据Docker的Tomcat容器端口号修改一下application.yml、info.html、login.html、main.html的端口号，方便测试时辨认出访问的是哪个Tomcat的项目</p>
<p>将application.yml的spring.redis.host修改为Docker给Redis分配的IP地址，查看IP地址命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect Redis容器id</span><br></pre></td></tr></table></figure>

<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>将项目打包成war包，具体步骤查看：<a href="https://blog.zoutl.cn/21.html">idea将Spring Boot项目打包成war包</a> ，打包时会报错，跳过Maven打包项目时测试步骤就行了（点击Maven工具栏的取消测试按钮，如下图划红线的按钮）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20145909.jpg"></p>
<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>使用Docker创建两个Tomcat容器，并运行打包好的项目，具体步骤查看博客：<a href="https://blog.zoutl.cn/301.html">Docker安装和配置Tomcat容器并部署Java项目</a></p>
<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><h4 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改nginx.conf</h4><p>在 <font color="#dd0000">include /etc/nginx/conf.d/*.conf;</font> 上面添加：（IP地址和端口根据自己的实际情况填写，IP地址是Docker给Tomcat分配的，并不是虚拟机的IP）</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">upstream www.<span class="number">123</span>.com&#123;</span><br><span class="line">	 server <span class="number">172.17</span>.<span class="number">0.4</span>:<span class="number">8888</span>;</span><br><span class="line">	 server <span class="number">172.17</span>.<span class="number">0.5</span>:<span class="number">9999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改default-conf"><a href="#修改default-conf" class="headerlink" title="修改default.conf"></a>修改default.conf</h4><p>可以用以下内容覆盖掉原来的</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name  www.<span class="number">123</span>.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    </span><br><span class="line">        proxy_pass   http://www.<span class="number">123</span>.com;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加本机域名"><a href="#添加本机域名" class="headerlink" title="添加本机域名"></a>添加本机域名</h3><p>找到 C:\Windows\System32\drivers\etc 打开hosts，底部加配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">虚拟机IP www.<span class="number">123</span>.com</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址栏输入：<a href="http://www.123.com/">http://www.123.com/</a> ，测试时可以发现：交替访问两个Tomcat运行的项目，这时候实现了负载均衡。由于这两个项目都是使用Redis的同一个session，也就是共享</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20152135.gif"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Redis</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>SELECT语句的ORDER BY子句</title>
    <url>/334.html</url>
    <content><![CDATA[<h3 id="学生表数据"><a href="#学生表数据" class="headerlink" title="学生表数据"></a>学生表数据</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-02%20234928.png"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h4><p>默认就是升序排序，即可以不加ASC关键字</p>
<p>按年龄升序排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

<h4 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h4><p>使用DESC关键字</p>
<p>按年龄降序排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h4 id="多个列排序"><a href="#多个列排序" class="headerlink" title="多个列排序"></a>多个列排序</h4><p>先根据年龄升序排序，如果有年龄相同的学生，再根据班级id升序排序这些年龄相同的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,classId;</span><br></pre></td></tr></table></figure>

<h4 id="取最大值"><a href="#取最大值" class="headerlink" title="取最大值"></a>取最大值</h4><p>使用ORDER BY和LIMIT的组合，能够找出一个列中最高或最低的值</p>
<p>选出年龄最大的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SELECT语句的WHERE子句</title>
    <url>/335.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在SELECT语句中，数据根据WHERE子句中指定的搜索条件进行过滤，WHERE子句在表名（FROM子句）之后给出</p>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><table>
<thead>
<tr>
<th align="center">操 作 符</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">等于</td>
</tr>
<tr>
<td align="center">&lt;&gt;</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
</tr>
<tr>
<td align="center">BETWEEN</td>
<td align="center">在指定的两个值之间</td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id=""><a href="#" class="headerlink" title="="></a>=</h4><p>选出 年龄为10岁 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;&gt;"></a>&lt;&gt;</h4><p>选出 年龄不是10岁 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&lt;&gt;</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="-1"><a href="#-1" class="headerlink" title="!="></a>!=</h4><p>选出 年龄不是10岁 的学生</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t_student WHERE age!=10;</span><br></pre></td></tr></table></figure>

<h4 id="lt"><a href="#lt" class="headerlink" title="&lt;"></a>&lt;</h4><p>选出 年龄小于10岁 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&lt;</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="lt-1"><a href="#lt-1" class="headerlink" title="&lt;="></a>&lt;=</h4><p>选出 年龄小于等于10岁 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&lt;=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="gt"><a href="#gt" class="headerlink" title="&gt;"></a>&gt;</h4><p>选出 年龄大于10岁 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="gt-1"><a href="#gt-1" class="headerlink" title="&gt;="></a>&gt;=</h4><p>选出 年龄大于等于10岁 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&gt;=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h4><p>选出 年龄为10~12岁 的学生，包括10岁和12岁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">AND</span> <span class="number">12</span>;</span><br></pre></td></tr></table></figure>

<h4 id="空值检查"><a href="#空值检查" class="headerlink" title="空值检查"></a>空值检查</h4><p>选出 年龄为空 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h4 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h4><p>选出 年龄为12岁且班级id为1 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">12</span> <span class="keyword">AND</span> classId<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h4 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h4><p>选出 年龄为11岁或者12岁 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">11</span> <span class="keyword">OR</span> age<span class="operator">=</span><span class="number">12</span>;</span><br></pre></td></tr></table></figure>

<h4 id="AND和OR搭配"><a href="#AND和OR搭配" class="headerlink" title="AND和OR搭配"></a>AND和OR搭配</h4><p>SQL（像多数语言一样）在处理OR操作符前，优先处理AND操作符，不想优先处理就给OR加括号</p>
<p>年龄为11岁的学生 + 年龄为12岁且班级id为2的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">11</span> <span class="keyword">OR</span> age<span class="operator">=</span><span class="number">12</span> <span class="keyword">AND</span> classId<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>选出年龄为11岁或12岁的学生，再从这些学生中选出班级id为2的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> (age<span class="operator">=</span><span class="number">11</span> <span class="keyword">OR</span> age<span class="operator">=</span><span class="number">12</span>) <span class="keyword">AND</span> classId<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h4 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h4><p>选出 年龄为11岁或者12岁 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age <span class="keyword">IN</span> (<span class="number">11</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<h4 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h4><p>选出 年龄不是11岁或者12岁 的学生</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t_student WHERE age NOT IN (11,12);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL使用通配符过滤数据</title>
    <url>/336.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MySQL通配符有百分号（%）通配符和 下划线（_）通配符，在搜索子句中使用通配符，必须使用LIKE操作符。</p>
<h3 id="百分号通配符"><a href="#百分号通配符" class="headerlink" title="百分号通配符"></a>百分号通配符</h3><p>最常使用的通配符是百分号（%），在搜索串中，%表示任何字符出现任意次数，不出现也可以。</p>
<h4 id="单个"><a href="#单个" class="headerlink" title="单个%"></a>单个%</h4><p>%在开头</p>
<p>选出学生姓名以 “赵六” 结尾的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> &quot;%赵六&quot;;</span><br></pre></td></tr></table></figure>

<p>%在结尾</p>
<p>选出学生姓名以 “赵六” 开头的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> &quot;赵六%&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="两个"><a href="#两个" class="headerlink" title="两个%"></a>两个%</h4><p>一个在开头，一个在结尾，可用于模糊搜索</p>
<p>选出学生姓名中包含 “赵六” 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> &quot;%赵六%&quot;;</span><br></pre></td></tr></table></figure>

<h3 id="下划线通配符"><a href="#下划线通配符" class="headerlink" title="下划线通配符"></a>下划线通配符</h3><p>下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符，匹配多少个字符就要多少个下划线，下面例子都只匹配了1个字符</p>
<h4 id="单个-1"><a href="#单个-1" class="headerlink" title="单个_"></a>单个_</h4><p>_在开头</p>
<p>选出学生姓名以 “赵六” 结尾且前面有一个字符的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> &quot;_赵六&quot;;</span><br></pre></td></tr></table></figure>

<p>_在结尾</p>
<p>选出学生姓名以 “赵六” 开头且后面有一个字符的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> &quot;赵六_&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="多个"><a href="#多个" class="headerlink" title="多个_"></a>多个_</h4><p>一个在开头，一个在结尾</p>
<p>选出学生姓名包含 “赵六” 开头且前面和后面各有一个字符的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> &quot;_赵六_&quot;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL使用正则表达式</title>
    <url>/337.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>正则表达式的作用是匹配文本，将一个模式（正则表达式）与一个文本串进行比较，在搜索子句中使用正则表达式，必须使用REGEXP操作符</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="基本字符匹配"><a href="#基本字符匹配" class="headerlink" title="基本字符匹配"></a>基本字符匹配</h4><p>选出学生姓名中包含“赵六”的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP &quot;赵六&quot;;</span><br></pre></td></tr></table></figure>

<p>选出学生姓名以一个字符+“赵六”开头的学生，一个.匹配一个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="string">&#x27;.赵六&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h4><p>正则表达式默认是不区分大小写的，要区分大小写就使用BINARY关键字</p>
<p>选出学生姓名中包含“a”的学生，如果不使用BINARY关键字就选出学生姓名中包含“a”或“A”的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="type">BINARY</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="OR匹配"><a href="#OR匹配" class="headerlink" title="OR匹配"></a>OR匹配</h4><p>|为正则表达式的OR操作符，它表示匹配其中之一</p>
<p>选出学生姓名中包含“张三”或“赵六”的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="string">&#x27;张三|赵六&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="匹配几个字符之一"><a href="#匹配几个字符之一" class="headerlink" title="匹配几个字符之一"></a>匹配几个字符之一</h4><p>只想匹配特定的字符，可通过指定一组用[]括起来的字符来完成</p>
<p>选出学生姓名中包含“1赵六”或“2赵六”的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="string">&#x27;[12]赵六&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="匹配范围"><a href="#匹配范围" class="headerlink" title="匹配范围"></a>匹配范围</h4><p>[0123456789]可以用[0-9]替换</p>
<p>[abc…xyz]可以用[a-z]替换，MySQL的正则表达式是不区分大小写的，要区分大小写就使用BINARY关键字</p>
<p>选出学生姓名中包含“1赵六”或者“2赵六”或者…或者“9赵六”的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="string">&#x27;[0-9]赵六&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="匹配特殊字符"><a href="#匹配特殊字符" class="headerlink" title="匹配特殊字符"></a>匹配特殊字符</h4><p>正则表达式语言由具有特定含义的特殊字符构成，常见的正则表达式特殊字符有：<font color="#dd0000">.</font>、<font color="#dd0000">[]</font>、<font color="#dd0000">|</font>和<font color="#dd0000">-</font>等，还有一些其它特殊字符，如果需要匹配这些字符，那么就要在这些特殊字符前加<font color="#dd0000">\\</font></p>
<p>选出学生姓名中包含“-”的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="string">&#x27;\\-&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>选出学生姓名中包含“\”的学生，匹配反斜杠\则需要四个反斜杠</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="string">&#x27;\\\\&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="匹配字符类"><a href="#匹配字符类" class="headerlink" title="匹配字符类"></a>匹配字符类</h4><table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[:alnum:]</td>
<td align="center">任意字母和数字（同[a-zA-Z0-9]）</td>
</tr>
<tr>
<td align="center">[:alpha:]</td>
<td align="center">任意字符（同[a-zA-Z]）</td>
</tr>
<tr>
<td align="center">[:blank:]</td>
<td align="center">空格和制表（同[\t]）</td>
</tr>
<tr>
<td align="center">[:cntrl:]</td>
<td align="center">ASCII控制字符（ASCII 0到31和127）</td>
</tr>
<tr>
<td align="center">[:digit:]</td>
<td align="center">任意数字（同[0-9]）</td>
</tr>
<tr>
<td align="center">[:graph:]</td>
<td align="center">与[:print:]相同，但不包括空格</td>
</tr>
<tr>
<td align="center">[:lower:]</td>
<td align="center">任意小写字母（同[a-z]）</td>
</tr>
<tr>
<td align="center">[:print:]</td>
<td align="center">任意可打印字符</td>
</tr>
<tr>
<td align="center">[:punct:]</td>
<td align="center">既不在[:alnum:]又不在[:cntrl:]中的任意字符</td>
</tr>
<tr>
<td align="center">[:space:]</td>
<td align="center">包括空格在内的任意空白字符（同[\f\n\r\t\v]）</td>
</tr>
<tr>
<td align="center">[:upper:]</td>
<td align="center">任意大写字母（同[A-Z]）</td>
</tr>
<tr>
<td align="center">[:xdigit:]</td>
<td align="center">任意十六进制数字（同[a-fA-F0-9]）</td>
</tr>
</tbody></table>
<p>选出学生姓名中包含两个连续数字的学生，[[:digit:]]表示任意数字，{2}表示连续两个</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="string">&#x27;[[:digit:]]&#123;2&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><p><font color="#dd0000">^ </font> ：文本的开始</p>
<p>选出学生姓名中以“32”开头的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="string">&#x27;^32&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><font color="#dd0000">$</font> ：文本的结尾</p>
<p>选出学生姓名中以“12”结尾的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name REGEXP <span class="string">&#x27;12$&#x27;</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL创建计算字段</title>
    <url>/338.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>如果存储在表中的数据都不是应用程序所需要的，那么我们需要直接从数据库中检索出转换、计算或格式化过的数据，而不是检索出数据，然后再在客户机应用程序或报告程序中重新格式化。</p>
<h3 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>所谓拼接，就是将值联结到一起构成单个值，即把两个列拼接起来</p>
<p>在MySQL的SELECT语句中，可使用Concat()函数来拼接两个列</p>
<h4 id="普通拼接"><a href="#普通拼接" class="headerlink" title="普通拼接"></a>普通拼接</h4><p>拼接姓名和年龄</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>,student_name,<span class="string">&#x27;，年龄：&#x27;</span>,age) <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-03%20225538.png"></p>
<h4 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h4><p>拼接姓名和年龄，并且设置别名为student_message，第一行数据的上方就是别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>,student_name,<span class="string">&#x27;，年龄：&#x27;</span>,age) <span class="keyword">AS</span> student_message <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-03%20230456.png"></p>
<h4 id="去除空格"><a href="#去除空格" class="headerlink" title="去除空格"></a>去除空格</h4><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TRIM()</td>
<td align="center">去除两端的空格</td>
</tr>
<tr>
<td align="center">LTRIM()</td>
<td align="center">去除左侧的空格</td>
</tr>
<tr>
<td align="center">RTRIM()</td>
<td align="center">去除右侧的空格</td>
</tr>
</tbody></table>
<p>去除学生姓名两端的空格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>,<span class="built_in">TRIM</span>(student_name),<span class="string">&#x27;，年龄：&#x27;</span>,age) <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<h3 id="算数计算"><a href="#算数计算" class="headerlink" title="算数计算"></a>算数计算</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>对检索出的数据进行算术计算</p>
<h4 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20003940.png"></p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>计算学生的总分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student_id,chinese_score<span class="operator">+</span>math_score<span class="operator">+</span>english_score <span class="keyword">AS</span> score_total <span class="keyword">FROM</span> t_score2;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ简介和使用场景</title>
    <url>/339.html</url>
    <content><![CDATA[<blockquote>
<p>转载于：<a href="https://www.cnblogs.com/haixiang/p/10199754.html">RabbitMQ 简介以及使用场景 - 海向 - 博客园 (cnblogs.com)</a></p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MQ全称为Message Queue, <a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/4751675">消息队列</a>（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过 队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求</p>
<p>RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由(包括点对点和发布/订阅)、可靠性、 安全。AMQP协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>使用场景有：解耦、异步提升效率、流量削峰</p>
<h4 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h4><p>为面向服务的架构（SOA）提供基本的最终一致性实现</p>
<p>场景说明：用户下单后，订单系统需要通知库存系统</p>
<p>传统的做法是，订单系统调用库存系统的接口</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20093247.png"></p>
<p>传统模式的缺点：①假如库存系统无法访问，则订单减库存将失败，从而导致订单失败②订单系统与库存系统耦合</p>
<p>引入消息队列</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20093306.png"></p>
<ul>
<li>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功</li>
<li>库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作</li>
<li>假如：在下单时库存系统不能正常使用，也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了，实现了订单系统与库存系统的应用解耦</li>
<li>为了保证库存肯定有，可以将队列大小设置成库存数量，或者采用其他方式解决</li>
</ul>
<p>基于消息的模型，关心的是“通知”，而非“处理”</p>
<p>短信、邮件通知、缓存刷新等操作使用消息队列进行通知</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20093314.png"></p>
<p>消息队列和RPC的区别与比较：</p>
<p>RPC: 异步调用，及时获得调用结果，具有强一致性结果，关心业务调用处理结果</p>
<p>消息队列：两次异步RPC调用，将调用内容在队列中进行转储，并选择合适的时机进行投递（错峰流控）</p>
<h4 id="异步提升效率"><a href="#异步提升效率" class="headerlink" title="异步提升效率"></a>异步提升效率</h4><p>场景说明：用户注册后，需要发注册邮件和注册短信</p>
<p>传统的做法有两种：1.串行的方式；2.并行方式</p>
<p>（1）串行方式：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20093321.png"></p>
<p>（2）并行方式：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20093327.png"></p>
<p>引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20093345.png"></p>
<h4 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h4><p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛</p>
<p>应用场景：系统其他时间A系统每秒请求量就100个，系统可以稳定运行。系统每天晚间八点有秒杀活动，每秒并发请求量增至1万条，但是系统最大的处理能力只能每秒处理1000个请求，于是系统崩溃，服务器宕机</p>
<p>之前架构：大量用户（100万用户）通过浏览器在晚上八点高峰期同时参与秒杀活动。大量的请求涌入我们的系统中，高峰期达到每秒钟5000个请求，大量的请求打到MySQL上，每秒钟预计执行3000条SQL。但是一般的MySQL每秒钟扛住2000个请求就不错了，如果达到3000个请求的话可能MySQL直接就瘫痪了，从而系统无法被使用。但是高峰期过了之后，就成了低峰期，可能也就1万用户访问系统，每秒的请求数量也就50个左右，整个系统几乎没有任何压力</p>
<p>引入MQ：100万用户在高峰期的时候，每秒请求有5000个请求左右，将这5000请求写入MQ里面，系统A每秒最多只能处理2000请求，因为MySQL每秒只能处理2000个请求。系统A从MQ中慢慢拉取请求，每秒就拉取2000个请求，不要超过自己每秒能处理的请求数量即可。MQ，每秒5000个请求进来，结果只有2000个请求出去，所以在秒杀期间（将近一小时）可能会有几十万或者几百万的请求积压在MQ中。这个短暂的高峰期积压是没问题的，因为高峰期过了之后，每秒就只有50个请求进入MQ了，但是系统还是按照每秒2000个请求的速度在处理，所以说，只要高峰期一过，系统就会快速将积压的消息消费掉。我们在此计算一下，每秒在MQ积压3000条消息，1分钟会积压18万，1小时积压1000万条消息，高峰期过后，1个多小时就可以将积压的1000万消息消费掉</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20093403.png"></p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>优点就是以上的那些场景应用，就是在特殊场景下有其对应的好处，<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong></p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>系统的可用性降低<br>系统引入的外部依赖越多，系统越容易挂掉，本来只是A系统调用BCD三个系统接口就好，ABCD四个系统不报错整个系统会正常运行。引入了MQ之后，虽然ABCD系统没出错，但MQ挂了以后，整个系统也会崩溃</li>
<li>系统的复杂性提高<br>引入了MQ之后，需要考虑的问题也变得多了，如何保证消息没有重复消费？如何保证消息不丢失？怎么保证消息传递的顺序？</li>
<li>一致性问题<br>A系统发送完消息直接返回成功，但是BCD系统之中若有系统写库失败，则会产生数据不一致的问题</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以总结来说，消息队列是一种十分复杂的架构，引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避。引入MQ系统复杂度提升了一个数量级，但是在有些场景下，就是复杂十倍百倍，还是需要使用MQ</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基本数据类型之间的转换（显式转换和隐式转换）</title>
    <url>/34.html</url>
    <content><![CDATA[<h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><p>从表示范围大的类型转换为表示范围小的类型，需要强制转换，称为显式转换。强制类型转换的语法格式就是加一个括号，然后给出想要转换的目标类型。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int类型300转换成2进制为00000000 00000000 00000001 00101100</span></span><br><span class="line">        <span class="comment">//转换成byte去掉前3个8位：00101100</span></span><br><span class="line">        <span class="comment">//32+8+4=44</span></span><br><span class="line">        <span class="keyword">byte</span> b1=(<span class="keyword">byte</span>)<span class="number">300</span>;</span><br><span class="line">        <span class="comment">//控制台输出44</span></span><br><span class="line">        System.out.println(b1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>从表示范围小的类型转换为表示范围大的类型，可以直接转换，称为隐式转换。隐式类型转换又可以称为自动类型转换，就是由系统自动完成的类型转换</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数据类型转换之隐式转换（小的赋值给大的）</span></span><br><span class="line">        <span class="comment">//4个字节，占4个8位，int类型转换成byte时，去掉前3个8位（3个字节）</span></span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">3</span>;</span><br><span class="line">        <span class="comment">//1个字节，占1个8位，byte类型转换成int时，在前面添加3个8位（3个字节）</span></span><br><span class="line">        <span class="keyword">byte</span> b=<span class="number">4</span>;</span><br><span class="line">        <span class="comment">/*小的数据类型和大的数据类型转换时，会将小的数据类型转换成大的数据类型，</span></span><br><span class="line"><span class="comment">        然后再进行运算，本程序中将byte类型转换成int类型,最终结果是int类型*/</span></span><br><span class="line">        x=x+b;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//控制台输出7</span></span><br><span class="line">        System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>自动类型转换规则：<a href="https://blog.zoutl.cn/84.html">二元运算符连接两个值 | LeDao的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装RabbitMQ</title>
    <url>/340.html</url>
    <content><![CDATA[<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<h3 id="创建运行容器"><a href="#创建运行容器" class="headerlink" title="创建运行容器"></a>创建运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin  -p 5672:5672 -p 15672:15672 RabbitMQ镜像id</span><br></pre></td></tr></table></figure>

<p>RABBITMQ_DEFAULT_USER设置登录RabbitMQ管理系统的用户名</p>
<p>RABBITMQ_DEFAULT_PASS设置登录RabbitMQ管理系统的密码</p>
<p>5672是RabbitMQ默认TCP监听端口</p>
<p>15672是RabbitMQ的Web管理界面端口</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在浏览器地址栏输入：http://虚拟机IP:15672/ ，输入用户名和密码，用户名和密码都是admin</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20103847.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建RabbitMQ基本环境</title>
    <url>/341.html</url>
    <content><![CDATA[<h3 id="创建父项目"><a href="#创建父项目" class="headerlink" title="创建父项目"></a>创建父项目</h3><p>新建一个Maven项目,命名为：rabbitmqtest</p>
<p>完整pom.xml文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmqtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>rabbitmq-producer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>rabbitmq-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>rabbitmq-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springboot.version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">springboot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建子项目"><a href="#创建子项目" class="headerlink" title="创建子项目"></a>创建子项目</h3><p>创建三个子项目，分别命名为：rabbitmq-common、rabbitmq-producer、rabbitmq-consumer</p>
<h4 id="rabbitmq-common"><a href="#rabbitmq-common" class="headerlink" title="rabbitmq-common"></a>rabbitmq-common</h4><p>rabbitmq-common为公共项目，作用：存放一些其他项目公用的东西，比如依赖、实体类，工具类等</p>
<p>完整pom.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmqtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="rabbitmq-producer"><a href="#rabbitmq-producer" class="headerlink" title="rabbitmq-producer"></a>rabbitmq-producer</h4><p>rabbitmq-producer为消息提供者项目，作用：发送消息到RabbitMQ中</p>
<p>完整pom.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmqtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建启动类，命名为：ProducerApplication，完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供者启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 12:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rabbitmq-consumer"><a href="#rabbitmq-consumer" class="headerlink" title="rabbitmq-consumer"></a>rabbitmq-consumer</h4><p>rabbitmq-consumer为消息消费者项目，作用：消费RabbitMQ的消息</p>
<p>完整pom.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmqtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建启动类，命名为：ConsumerApplication，完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 12:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.ledao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现生产者发送消息</title>
    <url>/342.html</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>已经搭建好RabbitMQ基本环境，搭建步骤查看博客：<a href="https://blog.zoutl.cn/341.html">搭建RabbitMQ基本环境</a></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20211819.jpg" style="zoom: 67%;" />

<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><p>添加一个application.yml配置文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.145</span> <span class="comment">#虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment">#RabbitMQ默认TCP监听端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span> <span class="comment">#登录RabbitMQ管理系统的用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span> <span class="comment">#登录RabbitMQ管理系统的密码</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment">#默认就是/,可不加</span></span><br></pre></td></tr></table></figure>

<h4 id="发送消息页面"><a href="#发送消息页面" class="headerlink" title="发送消息页面"></a>发送消息页面</h4><p>命名为：sendInformationPage.html，内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/sendInformation&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    消息:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;information&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="RabbitMQ配置类"><a href="#RabbitMQ配置类" class="headerlink" title="RabbitMQ配置类"></a>RabbitMQ配置类</h4><p>在rabbitmq-common模块下新建，命名为：RabbitMQConfig，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 13:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * direct交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_EXCHANGE = <span class="string">&quot;directExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * direct队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_QUEUE = <span class="string">&quot;directQueue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * direct路由key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_ROUTINGKEY = <span class="string">&quot;directRoutingKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个direct交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(DIRECT_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个direct队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(DIRECT_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个队列和交换机的绑定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">directBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(DIRECT_ROUTINGKEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生产者Service接口"><a href="#生产者Service接口" class="headerlink" title="生产者Service接口"></a>生产者Service接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.producer.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQService生产者接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 13:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RabbitMQProducerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> information</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendInformation</span><span class="params">(String information)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service接口实现类"><a href="#Service接口实现类" class="headerlink" title="Service接口实现类"></a>Service接口实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.producer.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.common.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.ledao.producer.service.RabbitMQProducerService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQService生产者接口实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 13:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;rabbitMQProducerService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQProducerServiceImpl</span> <span class="keyword">implements</span> <span class="title">RabbitMQProducerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInformation</span><span class="params">(String information)</span> </span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(RabbitMQConfig.DIRECT_EXCHANGE, RabbitMQConfig.DIRECT_ROUTINGKEY, information);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IndexController-java"><a href="#IndexController-java" class="headerlink" title="IndexController.java"></a>IndexController.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.producer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.producer.service.RabbitMQProducerService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 13:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitMQProducerService rabbitMQProducerService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toSendInformationPage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">sendInformation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;sendInformationPage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> information</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/sendInformation&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendInformation</span><span class="params">(String information)</span> </span>&#123;</span><br><span class="line">        rabbitMQProducerService.sendInformation(information);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送消息到RabbitMQ成功&lt;a href=&#x27;/toSendInformationPage&#x27;&gt;&lt;button&gt;继续发送&lt;/button&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>先启动rabbitmq-consumer模块再启动rabbitmq-producer模块，在浏览器地址栏输入：<a href="http://localhost/toSendInformationPage">http://localhost/toSendInformationPage</a>，输入消息后发送即可</p>
<p>查看消息步骤：</p>
<ol>
<li><p>在浏览器地址栏输入：<font color="#dd0000">http://虚拟机IP:15672</font>，输入用户名和密码后进入RabbitMQ管理系统</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20150137.png"></p>
</li>
<li><p>点击Queues选项查看所有队列，点击directQueue进入队列内部去查看消息</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20145731.jpg"></p>
</li>
<li><p>打开Get messages选项，在Messages文本框中输入查看消息的条数，点击Get Message(s)按钮即可查看消息</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-04%20145943.jpg"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现监听队列接收消息</title>
    <url>/344.html</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>在博客 <a href="/343.html">RabbitMQ实现消费者接收消息</a> 的基础上修改，接收消息的基本配置查看前面的博客即可</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="修改消费者Service类"><a href="#修改消费者Service类" class="headerlink" title="修改消费者Service类"></a>修改消费者Service类</h4><p>添加接口方法receiveMessage2()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveMessage2</span><span class="params">(String message)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="修改消费者Service实现类"><a href="#修改消费者Service实现类" class="headerlink" title="修改消费者Service实现类"></a>修改消费者Service实现类</h4><p>实现RabbitMQConsumerService类的接口方法receiveMessage2()，添加注解@RabbitListener实现监听，可以监听多个队列，在{}中用 , 隔开多个队列名称即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.DIRECT_QUEUE&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage2</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到的消息:&quot;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>去rabbitmq-consumer模块启动的控制台查看结果，每成功发送消息一次控制台就打印一次，如果原来就有多个消息就会逐个打印完</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20002710.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现消费者接收消息</title>
    <url>/343.html</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>已经搭建好RabbitMQ基本环境，搭建步骤查看博客：<a href="https://blog.zoutl.cn/341.html">搭建RabbitMQ基本环境</a></p>
<p>配置好RabbitMQ的交换机、队列、队列绑定交换机，具体步骤查看博客：<a href="https://blog.zoutl.cn/342.html">RabbitMQ实现生产者发送消息</a> ，rabbitmq-common模块的RabbitMQConfig.java就是配置类</p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20022425.jpg" style="zoom:67%;" />

<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><p>添加一个application.yml配置文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.145</span> <span class="comment">#虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment">#RabbitMQ默认TCP监听端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span> <span class="comment">#登录RabbitMQ管理系统的用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span> <span class="comment">#登录RabbitMQ管理系统的密码</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment">#默认就是/,可不加</span></span><br></pre></td></tr></table></figure>

<h4 id="接收消息页面"><a href="#接收消息页面" class="headerlink" title="接收消息页面"></a>接收消息页面</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>接收消息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&quot;/receiveMessage&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#messageReceive&quot;</span>).html(result.message);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    接收的消息:<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">id</span>=<span class="string">&quot;messageReceive&quot;</span>&gt;</span>看这里<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:receiveMessage()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>接收<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="消费者Service接口"><a href="#消费者Service接口" class="headerlink" title="消费者Service接口"></a>消费者Service接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQService消费者接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 20:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RabbitMQConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">receiveMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service接口实现类"><a href="#Service接口实现类" class="headerlink" title="Service接口实现类"></a>Service接口实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.consumer.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.common.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.ledao.consumer.service.RabbitMQConsumerService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQService消费者接口实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 21:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;rabbitMQConsumerService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConsumerServiceImpl</span> <span class="keyword">implements</span> <span class="title">RabbitMQConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receiveMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) amqpTemplate.receiveAndConvert(RabbitMQConfig.DIRECT_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IndexController-java"><a href="#IndexController-java" class="headerlink" title="IndexController.java"></a>IndexController.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.consumer.service.RabbitMQConsumerService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitMQConsumerService rabbitMQConsumerService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到接收消息页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toReceiveMessagePage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">toReceiveMessagePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;receiveMessagePage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息队列的一条消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/receiveMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">receiveMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        String message = rabbitMQConsumerService.receiveMessage();</span><br><span class="line">        resultMap.put(<span class="string">&quot;message&quot;</span>, message != <span class="keyword">null</span> ? message : <span class="string">&quot;消息队列为空!!&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址栏输入：<a href="http://localhost:81/toReceiveMessagePage">http://localhost:81/toReceiveMessagePage</a> 打开接收消息页面，然后点击接收按钮即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20000709.gif"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>本博客只是实现了手动接收队列消息，监听队列接收消息查看博客：<a href="https://blog.zoutl.cn/344.html">RabbitMQ实现监听队列接收消息</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现工作模式Work queues</title>
    <url>/345.html</url>
    <content><![CDATA[<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>已经实现了监听队列接收消息,具体步骤查看：<a href="/344.html">RabbitMQ实现监听队列接收消息</a></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>工作模式是一个或者多个消费者共同消费一个队列中的消息，队列中的每一个消息只可能被其中一个消费者消费，比如：多个人抢一个蛋糕，只有一个人可以抢到</p>
<p>应用场景：对于消息任务很多的情况，可以使用工作队列提高任务处理的速度</p>
<p>原理：集群处理大量的消息</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20021051.png"></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="批量发送消息"><a href="#批量发送消息" class="headerlink" title="批量发送消息"></a>批量发送消息</h4><p>为了方便测试，在rabbitmq-producer模块下添加一个批量发送消息功能，可以自定义批量发送的消息数量</p>
<p>首先在sendInformationPage.html中添加一个form标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/sendInformationBatch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>批量发送<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    数量:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;informationCount&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;批量发送&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在IndexController类添加一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量发送消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> informationCount</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sendInformationBatch&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendInformationBatch</span><span class="params">(Integer informationCount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Integer i = <span class="number">1</span>; i &lt; informationCount + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        rabbitMQProducerService.sendInformation(<span class="string">&quot;消息&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;批量发送消息到RabbitMQ成功&lt;a href=&#x27;/toSendInformationPage&#x27;&gt;&lt;button&gt;继续发送&lt;/button&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h4><p>在rabbitmq-consumer模块下修改</p>
<p>先在RabbitMQConsumerService类添加一个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveMessage3</span><span class="params">(String message)</span></span>;</span><br></pre></td></tr></table></figure>

<p>然后在RabbitMQConsumerServiceImpl类中实现上面的接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.DIRECT_QUEUE&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage3</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2---接收到的消息:&quot;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动rabbitmq-producer模块和rabbitmq-consumer模块，然后在浏览器地址栏输入：<a href="http://localhost/toSendInformationPage">http://localhost/toSendInformationPage</a> 进入发送消息页面，根据自己的需要填入批量发送的消息数量，然后点击发送，最后去rabbitmq-consumer模块启动控制台查看结果</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20022248.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Mycat</title>
    <url>/346.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>安装方式有两种：</p>
<ol>
<li>pull命令</li>
<li>Dockerfile命令</li>
</ol>
<h3 id="pull命令"><a href="#pull命令" class="headerlink" title="pull命令"></a>pull命令</h3><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull manondidi/mycat</span><br></pre></td></tr></table></figure>

<h4 id="创建配置目录"><a href="#创建配置目录" class="headerlink" title="创建配置目录"></a>创建配置目录</h4><p>创建一个目录，路径为：/home/mycat/conf，这个目录用于存放Mycat相关配置文件以及目录挂载</p>
<h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>创建容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8066:8066 -d --name mycat Mycat镜像id</span><br></pre></td></tr></table></figure>

<p>复制容器的rule.xml  schema.xml  server.xml到 /home/mycat/conf 目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp mycat:/usr/<span class="built_in">local</span>/mycat/conf/rule.xml /home/mycat/conf</span><br><span class="line">docker cp mycat:/usr/<span class="built_in">local</span>/mycat/conf/server.xml /home/mycat/conf</span><br><span class="line">docker cp mycat:/usr/<span class="built_in">local</span>/mycat/conf/schema.xml /home/mycat/conf</span><br></pre></td></tr></table></figure>

<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p>把之前用于复制文件的Mycat容器删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止</span></span><br><span class="line">docker stop Mycat容器id</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">docker rm Mycat容器id</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者直接强制删除</span></span><br><span class="line">docker rm -f Mycat容器id</span><br></pre></td></tr></table></figure>

<h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8066:8066 -d --name mycat -v /home/mycat/conf/rule.xml:/usr/<span class="built_in">local</span>/mycat/conf/rule.xml -v /home/mycat/conf/schema.xml:/usr/<span class="built_in">local</span>/mycat/conf/schema.xml -v /home/mycat/conf/server.xml:/usr/<span class="built_in">local</span>/mycat/conf/server.xml --privileged=<span class="literal">true</span> Mycat镜像id</span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile命令"><a href="#Dockerfile命令" class="headerlink" title="Dockerfile命令"></a>Dockerfile命令</h3><h4 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h4><p>命令为：mycatdockerfile，内容如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER LeDao&lt;f1203007469@gmail.com&gt;</span><br><span class="line"> </span><br><span class="line">LABEL name=<span class="string">&quot;LeDao myCat Image&quot;</span> \</span><br><span class="line">    build-date=<span class="string">&quot;2021-09-05 03:55:07&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">ADD server-jre-<span class="number">8</span>u151-linux-x64.tar.gz /home/</span><br><span class="line">ADD Mycat-server-<span class="number">1.6</span>.<span class="number">7.4</span>-release-<span class="number">20200105164103</span>-linux.tar.gz /home/</span><br><span class="line"> </span><br><span class="line">ENV WORKPATH /home/mycat/</span><br><span class="line">WORKDIR $WORKPATH</span><br><span class="line"> </span><br><span class="line">ENV JAVA_HOME /home/jdk1.<span class="number">8.0</span>_151</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">EXPOSE <span class="number">8066</span></span><br><span class="line">CMD /home/mycat/bin/mycat console</span><br></pre></td></tr></table></figure>

<h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>上传文件 mycatdockerfile、Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz、server-jre-8u151-linux-x64.tar.gz 到 /home/data 目录下</p>
<p>文件百度网盘地址如下：</p>
<p>链接：<a href="https://pan.baidu.com/s/17wuUK5Kqu9fJnqaV_VOXHw">https://pan.baidu.com/s/17wuUK5Kqu9fJnqaV_VOXHw</a><br>提取码：<code>iw7w</code></p>
<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>记得要先进入 /home/data 目录下，再执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f mycatdockerfile -t ledao/mycat:1.0 .</span><br></pre></td></tr></table></figure>

<h4 id="创建配置目录-1"><a href="#创建配置目录-1" class="headerlink" title="创建配置目录"></a>创建配置目录</h4><p>创建一个目录，路径为：/home/mycat/conf，这个目录用于存放Mycat相关配置文件以及目录挂载</p>
<h4 id="复制文件-1"><a href="#复制文件-1" class="headerlink" title="复制文件"></a>复制文件</h4><p>创建容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8066:8066 -it 镜像id</span><br></pre></td></tr></table></figure>

<p>复制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp Mycat容器id:/home/mycat/conf/ /home/docker/mycat/</span><br><span class="line">docker cp Mycat容器id:/home/mycat/logs/ /home/docker/mycat/</span><br></pre></td></tr></table></figure>

<h4 id="删除容器-1"><a href="#删除容器-1" class="headerlink" title="删除容器"></a>删除容器</h4><p>把之前用于复制文件的Mycat容器删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止</span></span><br><span class="line">docker stop Mycat容器id</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">docker rm Mycat容器id</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者直接强制删除</span></span><br><span class="line">docker rm -f Mycat容器id</span><br></pre></td></tr></table></figure>

<h4 id="创建容器-1"><a href="#创建容器-1" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8066:8066 -it  -v /home/docker/mycat/conf/:/home/mycat/conf/ -v /home/docker/mycat/logs/:/home/mycat/logs/ Mycat镜像id</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ报错：reply-code=404, reply-text=NOT_FOUND - no的解决办法</title>
    <url>/347.html</url>
    <content><![CDATA[<h3 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h3><h4 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h4><p>reply-code=404, reply-text=NOT_FOUND - no exchange</p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>只启动Provider，然后发送消息到队列，如果没有创建交换机（RabbitMQ中原来没有对应交换机），就会报错</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>有两种解决办法：</p>
<p>①先启动Consumer，会自动创建RabbitMQ配置类中的交换机和队列，然后启动Provider发送消息到队列即可</p>
<p>②先启动了Provider，但是先不要发送消息，启动Consumer后再发送消息到队列</p>
<h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h3><h4 id="报错信息-1"><a href="#报错信息-1" class="headerlink" title="报错信息"></a>报错信息</h4><p>reply-code=404, reply-text=NOT_FOUND - no queue</p>
<h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>RabbitMQ配置类没有生效</p>
<h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>在Consumer启动类添加注解@ComponentScan，我的配置类在 com.ledao.common.config 目录下，扫描的范围如下：（下面两种方式都行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扫描到上三级目录，范围更大</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com&quot;)</span></span><br><span class="line"><span class="comment">//扫描到上两级目录</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.ledao&quot;)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20103232.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现订阅模式Publish/Subscribe</title>
    <url>/348.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20105048.png"></p>
<p>生产者生产的消息，所有订阅过的消费者都能够接收到消息</p>
<p>Exchange采用Fanout类型，即广播方式</p>
<p>Fanout类型的交换机会把消息发送到所有绑定到该交换机的队列</p>
<p>适合场景：将同一条消息通过手机短信，APP，邮件等方式推送给用户</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="批量发送订阅消息"><a href="#批量发送订阅消息" class="headerlink" title="批量发送订阅消息"></a>批量发送订阅消息</h4><p>为了方便测试，在rabbitmq-producer模块下添加一个批量发送消息功能，可以自定义批量发送的消息数量</p>
<p>首先在sendInformationPage.html中添加一个form标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/sendFanoutMessageBatch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>批量发送订阅消息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    数量:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;messageCount&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;批量发送&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在rabbitmq-common模块的RabbitMQConfig类添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fanout交换机名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_EXCHANGE = <span class="string">&quot;fanoutExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fanout订阅队列1名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUB_QUEUE1 = <span class="string">&quot;subQueue1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fanout订阅队列2名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUB_QUEUE2 = <span class="string">&quot;subQueue2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个fanout交换机,所有订阅了这个交换机的消息队列都会接收到消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(FANOUT_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个fanout订阅队列1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">subQueue1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(SUB_QUEUE1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个fanout订阅队列2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">subQueue2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(SUB_QUEUE2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个fanout订阅队列1和fanout交换机的绑定</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBinding1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(subQueue1()).to(fanoutExchange());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个fanout订阅队列2和fanout交换机的绑定</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBinding2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(subQueue2()).to(fanoutExchange());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在RabbitMQProducerService类添加一个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送fanout消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendFanoutMessage</span><span class="params">(String message)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在RabbitMQProducerServiceImpl类中实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFanoutMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    amqpTemplate.convertAndSend(RabbitMQConfig.FANOUT_EXCHANGE, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在IndexController类添加一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量发送订阅消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageCount</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sendFanoutMessageBatch&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendFanoutMessageBatch</span><span class="params">(<span class="keyword">int</span> messageCount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; messageCount + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        rabbitMQProducerService.sendFanoutMessage(<span class="string">&quot;订阅消息&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;批量发送消息到fanout交换机成功&lt;a href=&#x27;/toSendInformationPage&#x27;&gt;&lt;button&gt;继续发送&lt;/button&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h4><p>在rabbitmq-consumer模块的RabbitMQConsumerService中添加以下接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收订阅消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveSubMessage1</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收订阅消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveSubMessage2</span><span class="params">(String message)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在rabbitmq-consumer模块的RabbitMQConsumerServiceImpl中实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.SUB_QUEUE1&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveSubMessage1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;订阅者1---接收到的消息:&quot;</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.SUB_QUEUE2&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveSubMessage2</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;订阅者2---接收到的消息:&quot;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动rabbitmq-consumer模块再启动rabbitmq-producer模块，，然后在浏览器地址栏输入：<a href="http://localhost/toSendInformationPage">http://localhost/toSendInformationPage</a> 进入发送消息页面，根据自己的需要填入批量发送的消息数量，然后点击发送订阅信息，最后去rabbitmq-consumer模块启动控制台查看结果，可以看到两个订阅者都收到了同一条消息</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20120229.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现路由模式Routing</title>
    <url>/349.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20124523.png"></p>
<p>跟订阅模式类似，只不过在订阅模式的基础上加上了类型，订阅模式是分发到所有绑定到交换机的队列，路由模式只分发到绑定在交换机上面指定路由键的队列。</p>
<p>使用场景：只将一些错误log存到文件中，把所有的log都打印到控制台里</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="发送指定类型消息"><a href="#发送指定类型消息" class="headerlink" title="发送指定类型消息"></a>发送指定类型消息</h4><p>为了方便测试，在rabbitmq-producer模块下添加一个发送指定类型消息功能，消息类型有info、error、warning</p>
<p>首先在sendInformationPage.html中添加一个form标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/sendRoutingMessage&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>发送指定类型的消息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    消息:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    类型:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;routingKey&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span>&gt;</span>info<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在rabbitmq-common模块的RabbitMQConfig类添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * direct路由模式交换机名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_ROUTING_EXCHANGE = <span class="string">&quot;directRoutingExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * direct路由模式队列1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_ROUTING_QUEUE1 = <span class="string">&quot;directRoutingQueue1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * direct路由模式队列2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_ROUTING_QUEUE2 = <span class="string">&quot;directRoutingQueue2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个direct路由模式交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directRoutingExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(DIRECT_ROUTING_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个路由模式队列1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">routingQueue1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(DIRECT_ROUTING_QUEUE1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个路由模式队列2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">routingQueue2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(DIRECT_ROUTING_QUEUE2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由模式队列1绑定路由模式交换机,routingKey为error</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingRouting1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(routingQueue1()).to(directRoutingExchange()).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由模式队列2绑定路由模式交换机,routingKey为error</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingRouting2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(routingQueue2()).to(directRoutingExchange()).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由模式队列2绑定路由模式交换机,routingKey为info</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingRouting3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(routingQueue2()).to(directRoutingExchange()).with(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由模式队列2绑定路由模式交换机,routingKey为warning</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingRouting4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(routingQueue2()).to(directRoutingExchange()).with(<span class="string">&quot;warning&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在RabbitMQProducerService类添加一个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送路由模式消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> routingKey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRoutingMessage</span><span class="params">(String message, String routingKey)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在RabbitMQProducerServiceImpl类中实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRoutingMessage</span><span class="params">(String message, String routingKey)</span> </span>&#123;</span><br><span class="line">    amqpTemplate.convertAndSend(RabbitMQConfig.DIRECT_ROUTING_EXCHANGE,routingKey,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在IndexController类添加一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送路由模式消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> routingKey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sendRoutingMessage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendRoutingMessage</span><span class="params">(String message, String routingKey)</span> </span>&#123;</span><br><span class="line">    rabbitMQProducerService.sendRoutingMessage(message+<span class="string">&quot;(&quot;</span>+routingKey+<span class="string">&quot;)&quot;</span>, routingKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;发送路由模式消息成功&lt;a href=&#x27;/toSendInformationPage&#x27;&gt;&lt;button&gt;继续发送&lt;/button&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h4><p>在rabbitmq-consumer模块的RabbitMQConsumerService中添加以下接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收路由模式消息1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveRoutingMessage1</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收路由模式消息2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveRoutingMessage2</span><span class="params">(String message)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在rabbitmq-consumer模块的RabbitMQConsumerServiceImpl中实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.DIRECT_ROUTING_QUEUE1&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveRoutingMessage1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1---接收到的消息:&quot;</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.DIRECT_ROUTING_QUEUE2&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveRoutingMessage2</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2---接收到的消息:&quot;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动rabbitmq-consumer模块再启动rabbitmq-producer模块，，然后在浏览器地址栏输入：<a href="http://localhost/toSendInformationPage">http://localhost/toSendInformationPage</a> 进入发送消息页面，分别发送info、error、warning类型的路由模式消息，然后去rabbitmq-consumer模块启动控制台查看结果，可以看到：①消费者1只消费了error类型的消息②消费者2消费了info、error、warning类型的消息</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-05%20134908.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>短路与&amp;&amp;和逻辑与&amp;、短路或||和逻辑或|的区别</title>
    <url>/35.html</url>
    <content><![CDATA[<h3 id="短路-amp-amp-和逻辑-amp"><a href="#短路-amp-amp-和逻辑-amp" class="headerlink" title="短路&amp;&amp;和逻辑&amp;"></a>短路&amp;&amp;和逻辑&amp;</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><p>有假则为假，全真则为真（有假必假，全真为真）</p>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>逻辑与&amp;的判断方式是：从左到右依次判断，直到结尾（逻辑全程运算）</p>
<p>短路与&amp;&amp;的判断方式是：从左到右依次判断，直到出现false为止将不再判断，直接得到结果为false（短路遇false就停）</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote>
<p>逻辑与&amp;</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201020162940.jpg" alt="img"></p>
<blockquote>
<p>短路与&amp;&amp;</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201020163050.jpg" alt="img"></p>
<h3 id="短路-和逻辑"><a href="#短路-和逻辑" class="headerlink" title="短路||和逻辑|"></a>短路||和逻辑|</h3><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h4><p>有真则为真，全假则为假（有真必真，全假为假）</p>
<h4 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h4><p>逻辑或|的判断方式是：从左到右依次判断，直到结尾</p>
<p>短路或||的判断方式是：从左到右依次判断，直到出现true为止将不再判断，直接得到结果为true（短路遇true就停止）</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><blockquote>
<p>逻辑或|</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201020165415.jpg" alt="img"></p>
<blockquote>
<p>短路或||</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201020165551.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>开发的时候用短路与&amp;&amp;和短路或||，可以减少程序运行时间</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现主题模式Topic</title>
    <url>/350.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://image.zoutl.cn/hexo-blog/2021-09-05%20223923.png"></p>
<p>主题模式和路由模式很像，但是路由模式是精确匹配，主题模式是模糊匹配，更加灵活，更加强大</p>
<p>主题模式使用的是topic类型的交换机，使用通配符方式实现模糊匹配，匹配符有：*和#</p>
<table>
<thead>
<tr>
<th align="center">通配符</th>
<th align="center">匹配方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">匹配一个单词</td>
</tr>
<tr>
<td align="center">#</td>
<td align="center">匹配零个或者多个单词</td>
</tr>
</tbody></table>
<p>对上图的3中路由key进行解释：</p>
<p><font color="#dd0000">*.orange.*</font> ：orange前后各有一个单词，例如：lazy.orange.rabbit、quick.orange.dog等情况</p>
<p><font color="#dd0000">*.*.rabbit</font> ：rabbit前面后两个单词，例如：lazy.green.rabbit、quick.orange.rabbit等情况</p>
<p><font color="#dd0000">lazy.# </font> ：lazy后面有0个或无数个单词，例如：lazy，lazy.rabbit、lazy.red.rabbit、lazy.red.old.rabbit等情况</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="发送topic消息"><a href="#发送topic消息" class="headerlink" title="发送topic消息"></a>发送topic消息</h4><p>为了方便测试，在rabbitmq-producer模块下添加一个发送指定类型消息功能，首先在sendInformationPage.html中添加一个form标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/sendTopicMessage&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>发送topic消息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    消息:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在rabbitmq-common模块的RabbitMQConfig类添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topic交换机名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_EXCHANGE = <span class="string">&quot;topicExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topic队列1名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE1 = <span class="string">&quot;topicQueue1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topic队列2名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE2 = <span class="string">&quot;topicQueue2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个topic交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(TOPIC_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个topic队列1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Queue(TOPIC_QUEUE1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个topic队列2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Queue(TOPIC_QUEUE2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topic队列1绑定topic交换机,routingKey为 *.orange.*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class="string">&quot;*.orange.*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topic队列1绑定topic交换机,routingKey为 *.*.rabbit</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="string">&quot;*.*.rabbit&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topic队列1绑定topic交换机,routingKey为 lazy.#</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="string">&quot;lazy.#&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在RabbitMQProducerService类添加一个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送topic消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> routingKey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendTopicMessage</span><span class="params">(String message, String routingKey)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在RabbitMQProducerServiceImpl类中实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTopicMessage</span><span class="params">(String message,String routingKey)</span> </span>&#123;</span><br><span class="line">    amqpTemplate.convertAndSend(RabbitMQConfig.TOPIC_EXCHANGE, routingKey, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在IndexController类添加一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送topic消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sendTopicMessage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendTopicMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    rabbitMQProducerService.sendTopicMessage(message, message);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;发送topic消息成功&lt;a href=&#x27;/toSendInformationPage&#x27;&gt;&lt;button&gt;继续发送&lt;/button&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h4><p>在rabbitmq-consumer模块的RabbitMQConsumerService中添加以下接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收topic消息1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveTopicMessage1</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收topic消息2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveTopicMessage2</span><span class="params">(String message)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在rabbitmq-consumer模块的RabbitMQConsumerServiceImpl中实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.TOPIC_QUEUE1&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopicMessage1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1---接收到的消息:&quot;</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.TOPIC_QUEUE2&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopicMessage2</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2---接收到的消息:&quot;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动rabbitmq-consumer模块再启动rabbitmq-producer模块，消费者1消费的是topicQueue1队列的消息，消费者2消费的是topicQueue2队列的消息，交换机和队列绑定情况如下：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/2021-09-05%20231702.png"></p>
<p>然后在浏览器地址栏输入：<a href="http://localhost/toSendInformationPage">http://localhost/toSendInformationPage</a> 进入发送消息页面，分别发送topic消息：lazy.orange.rabbit、lazy.red.old.rabbit、lazy.rabbit、orange.rabbit、quick.orange.dog，然后去rabbitmq-consumer模块启动控制台查看结果</p>
<p><img src="https://image.zoutl.cn/hexo-blog/2021-09-05%20231343.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ消息可靠性投递</title>
    <url>/351.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在使用RabbitMQ的时候，消息生产者发送消息不希望出现消息丢失或者投递失败的现象，RabbitMQ在消息投递可靠性方面给我们提供了两种模式：①confirm确认模式 ②return退回模式</p>
<h3 id="confirm确认模式"><a href="#confirm确认模式" class="headerlink" title="confirm确认模式"></a>confirm确认模式</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>作用于生产者发送到交换机过程，发送成功与否都会调用</p>
<p>消息确认，是指生产者消息投递后，如果Broker收到消息，则会给生产者一个应答生产者进行接收应答，用来确定这条消息是否正常的发送到Broker，这种方式也是消息的可靠性投递的核心保障</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>rabbitmq-producer模块的application.yml文件添加以下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.publisher-confirm-type</span>=<span class="string">correlated</span></span><br></pre></td></tr></table></figure>

<p>RabbitMQProducerServiceImpl类实现RabbitTemplate.ConfirmCallback接口，再实现confirm方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> correlationData 消息唯一标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b               交换机是否成功收到消息 true成功  false失败</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s               失败原因</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> b, String s)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;confirm方法被执行了...&quot;</span> + correlationData);</span><br><span class="line">    <span class="keyword">if</span> (b) &#123;</span><br><span class="line">        <span class="comment">//发送成功失败原因为null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消息成功发送到交换机&quot;</span> + s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送失败&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RabbitMQProducerServiceImpl类注入RabbitTemplate模版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br></pre></td></tr></table></figure>

<p>RabbitMQProducerServiceImpl类初始化设置，放在所有模板注入的后面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RabbitMQProducerService类添加一个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息并返回发送情况</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendMessageConfirm</span><span class="params">(String message)</span></span>;</span><br></pre></td></tr></table></figure>

<p>RabbitMQProducerServiceImpl类实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageConfirm</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    CorrelationData correlationData = <span class="keyword">new</span> CorrelationData();</span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitMQConfig.DIRECT_EXCHANGE, RabbitMQConfig.DIRECT_ROUTINGKEY, message,correlationData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现一个调用Confirm方法的发送消息功能</p>
<p>在sendInformationPage.html下添加一个form标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/sendMessageConfirm&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>发送消息调用Confirm方法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    消息:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>IndexController类下添加一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息调用Confirm方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sendMessageConfirm&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendMessageConfirm</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    rabbitMQProducerService.sendMessageConfirm(message);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;发送消息成功&lt;a href=&#x27;/toSendInformationPage&#x27;&gt;&lt;button&gt;继续发送&lt;/button&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动rabbitmq-producer模块,然后在浏览器地址栏输入：<a href="http://localhost/toSendInformationPage">http://localhost/toSendInformationPage</a> 进入发送消息页面，发送一条消息</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-06%20213101.png"></p>
<p>然后去rabbitmq-producer模块启动控制台查看结果</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-06%20213320.jpg"></p>
<h3 id="return退回模式"><a href="#return退回模式" class="headerlink" title="return退回模式"></a>return退回模式</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>作用于交换机发送到队列过程，发送失败才调用</p>
<p>Return Listener用于处理一些不可路由的消息</p>
<p>我们的消息生产者，通过制定一个Exchange和RoutingKey，把消息送达到某一个队列中去，然后我们消费者监听队列，进行消费处理。但是在某些情况下，如果我们在发送消息的时候，当前的exchange不存在或指定的路由key路由不到，这个时候我们需要监听这种不可达的消息</p>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>rabbitmq-producer模块的application.yml文件添加以下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.publisher-returns-type</span>=<span class="string">correlated</span></span><br></pre></td></tr></table></figure>

<p>RabbitMQProducerServiceImpl类实现RabbitTemplate.ReturnCallback接口，再实现returnedMessage方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(ReturnedMessage returnedMessage)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;return方法执行...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;发送的消息内容:&quot;</span> + <span class="keyword">new</span> String(returnedMessage.getMessage().getBody()));</span><br><span class="line">    System.out.println(<span class="string">&quot;replyCode：&quot;</span> + returnedMessage.getReplyCode());</span><br><span class="line">    System.out.println(<span class="string">&quot;replyText：&quot;</span> + returnedMessage.getReplyText());</span><br><span class="line">    System.out.println(<span class="string">&quot;exchange：&quot;</span> + returnedMessage.getExchange());</span><br><span class="line">    System.out.println(<span class="string">&quot;routingKey：&quot;</span> + returnedMessage.getRoutingKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RabbitMQProducerServiceImpl类初始化设置中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitTemplate.setReturnsCallback(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>

<p>RabbitMQProducerServiceImpl类修改sendMessageConfirm方法，修改rabbitTemplate.convertAndSend()第二个参数，只要不和对应消息队列的routingKey一样就行（为了让交换器发送到队列失败）</p>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>和上面confirm确认模式那样测试即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-06%20222851.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ消费端手动ACK确认机制</title>
    <url>/352.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ack——acknowledge（vt. 承认；答谢；报偿；告知已收到；确认的意思），在RabbitMQ中指代的是消费者收到消息后确认的一种行为，关注点在于消费者能否实际接收到MQ发送的消息</p>
<p>当消息一旦被消费者接收到，会立刻自动向MQ确认接收，并将响应的message从RabbitMQ消息缓存中移除，但是在实际的业务处理中，会出现消息收到了，但是业务处理出现异常的情况，在自动确认的模式下，该条业务处理失败的message就相当于被丢弃了。如果设置了手动确认，则需要在业务处理完成之后，手动调用channel.basicAck()，手动的签收，如果业务处理失败，则手动调用channel.basicNack()方法拒收，并让MQ重新发送该消息。</p>
<p>RabbitMQ提供了三种确认方式：</p>
<ol>
<li><p>自动确认acknowledge=”none”：当消费者接收到消息的时候，就会自动给到RabbitMQ一个回执，告诉RabbitMQ我已经收到消息了，不在乎消费者接收到消息之后业务处理的成功与否，<font color="#dd0000">这是RabbitMQ默认的</font></p>
</li>
<li><p>手动确认acknowledge=”manual”：当消费者收到消息后，不会立刻告诉RabbitMQ已经收到消息了，而是等待业务处理成功后，通过调用代码的方式手动向RabbitMQ确认消息已经收到。当业务处理失败，就可以做一些重试机制，甚至让RabbitMQ重新向消费者发送消息都是可以的，<font color="#dd0000">一般使用这种方式</font></p>
</li>
<li><p>根据异常情况确认acknowledge=”auto”：该方式是通过抛出异常的类型，来做响应的处理（如重发、确认等）,这种方式比较麻烦，<font color="#dd0000">一般不使用</font></p>
</li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>rabbitmq-consumer消费端application.yml添加以下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment">#ack手动确认</span></span><br></pre></td></tr></table></figure>

<p>rabbitmq-consumer消费端的RabbitMQConsumerService类添加一个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动确认消息的接收</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deliveryTag</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveMessageAck</span><span class="params">(String message, Channel channel, <span class="keyword">long</span> deliveryTag)</span></span>;</span><br></pre></td></tr></table></figure>

<p>rabbitmq-consumer消费端的RabbitMQConsumerServiceImpl类实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动确认消息的接收</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message     接收的消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> channel     队列和消费端的连接管道</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deliveryTag 消息接收tag</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.DIRECT_QUEUE&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessageAck</span><span class="params">(String message, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="keyword">long</span> deliveryTag)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到的消息:&quot;</span> + message);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//如果没有异常就接收消息,第一个参数为消息接收tag,第二个参数为是否批量确认</span></span><br><span class="line">        channel.basicAck(deliveryTag, t);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//让消息重新入列,第一个参数为消息接收tag,第二个参数为是否批量确认,第三个参数为被拒绝的消息是否重新入列(如果设置为false将会删除被拒绝的消息)</span></span><br><span class="line">            channel.basicNack(deliveryTag, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">            ioException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把rabbitmq-consumer消费端的RabbitMQConsumerServiceImpl类监听RabbitMQConfig.DIRECT_QUEUE队列的消息的@RabbitListener注解删除，这是为了只能让receiveMessageAck()方法消费RabbitMQConfig.DIRECT_QUEUE队列的消息</p>
<blockquote>
<p>Channel.basicAck(long deliveryTag, boolean multiple)方法</p>
</blockquote>
<p>功能：确认消费</p>
<p>参数说明：</p>
<p>第一个参数deliveryTag：消息ID，从1开始</p>
<p>第二个参数multiple：是否批量，将一次性ack所有小于deliveryTag的消息</p>
<blockquote>
<p>Channel.basicNack(long deliveryTag, boolean multiple, boolean requeue)方法</p>
</blockquote>
<p>功能：反馈消息消费失败</p>
<p>参数说明：</p>
<p>第一个参数deliveryTag：消息ID，从1开始</p>
<p>第二个参数multiple：是否批量，将一次性拒绝所有小于deliveryTag的消息</p>
<p>第三个参数requeue：被拒绝的消息是否重新入列</p>
<blockquote>
<p>Channel.basicReject(long deliveryTag, boolean requeue)</p>
</blockquote>
<p>功能：反馈消息消费失败</p>
<p>参数说明：</p>
<p>第一个参数deliveryTag：消息ID，从1开始</p>
<p>第二个参数requeue：被拒绝的消息是否重新入列</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ消费端并发和限流设置</title>
    <url>/353.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>并发：有时候，我们需要加快消息的处理速度，这时候，我们可以通过提高消息处理程序的并发量，来提高消息的处理能力，本质就是多个消费者消费同一个队列的消息</p>
<p>限流：有些场景，消费者端处理并发太大的时候，会影响消息处理端的性能，这时候需要限流</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>在要并发的监听队列的方法的@RabbitListener注解中配置concurency=“min-max”，min是最小并发数，max是最大并发数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.DIRECT_QUEUE&#125;,concurrency = &quot;5-8&quot;)</span></span><br></pre></td></tr></table></figure>

<h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><p>在要限流的监听队列的方法所在类RabbitMQConsumerServiceImpl.java中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> CachingConnectionFactory cachingConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = &quot;limitContainerFactory&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title">simpleRabbitListenerContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">    factory.setConnectionFactory(cachingConnectionFactory);</span><br><span class="line">    <span class="comment">//设置每次处理消息数量为5</span></span><br><span class="line">    factory.setPrefetchCount(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在@RabbitListener注解中配置containerFactory = “limitContainerFactory”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.DIRECT_QUEUE&#125;, concurrency = &quot;5-8&quot;,containerFactory = &quot;limitContainerFactory&quot;)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现TTL(Time-To-Live 过期时间)</title>
    <url>/354.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="消息过期时间"><a href="#消息过期时间" class="headerlink" title="消息过期时间"></a>消息过期时间</h4><p>在指定的过期时间内，如果消息没有被消费，这个消息就会过期从队列中移除</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ol>
<li>给消息设置过期时间 </li>
<li>给队列设置过期时间，交换器分发到这个队列的消息都会有相同的过期时间，<font color="#dd0000">推荐使用这种方式</font></li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果队列设置了消息过期时间并且消息也设置了过期时间，那么数值小的过期时间生效，例如：</p>
<ol>
<li>一个消息的过期时间为10秒，队列的消息过期时间为20秒，那么该消息的过期时间为10秒 </li>
<li>一个消息的过期时间为20秒，队列的消息过期时间为10秒，那么该消息的过期时间为10秒。<font color="#dd0000">同一个队列的消息过期时间最好一样</font>，千万不能让队列里的消息延时时间乱七八糟多久的都有，这样的话先入队的消息如果延时时间过长会堵着后入队延时时间小的消息，导致后面的消息到时也无法变成死信转发出去</li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="给消息设置"><a href="#给消息设置" class="headerlink" title="给消息设置"></a>给消息设置</h4><blockquote>
<p>创建交换机、队列，交换机绑定队列</p>
</blockquote>
<p>在RabbitMQConfig类中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ttl交换机名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TTL_DIRECT_EXCHANGE = <span class="string">&quot;ttlDirectExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ttl队列名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TTL_QUEUE = <span class="string">&quot;ttlQueue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ttl路由key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TTL_ROUTING_KEY = <span class="string">&quot;ttlRoutingKey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个ttl交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">ttlDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(TTL_DIRECT_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个ttl队列绑定ttl交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">ttlQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(TTL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ttl队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">ttlBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(ttlQueue()).to(ttlDirectExchange()).with(TTL_ROUTING_KEY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现发送ttl消息</p>
</blockquote>
<p>在rabbitmq-producer模块的RabbitMQProducerService类中添加一个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送ttl消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendMessageTll</span><span class="params">(String message)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在rabbitmq-producer模块的RabbitMQProducerServiceImpl类中实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageTll</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    MessageProperties messageProperties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">    <span class="comment">//设置过期时间为10秒</span></span><br><span class="line">    messageProperties.setExpiration(<span class="string">&quot;10000&quot;</span>);</span><br><span class="line">    Message msg = <span class="keyword">new</span> Message(message.getBytes(), messageProperties);</span><br><span class="line">    rabbitTemplate.send(RabbitMQConfig.TTL_DIRECT_EXCHANGE, RabbitMQConfig.TTL_ROUTING_KEY, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在sendInformationPage.html中添加一个form标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/sendTllMessage&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>发送tll消息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    消息:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在rabbitmq-producer模块的IndexController类添加sendTllMessage方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送tll消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sendTllMessage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendTllMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    rabbitMQProducerService.sendMessageTll(message);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;发送消息成功&lt;a href=&#x27;/toSendInformationPage&#x27;&gt;&lt;button&gt;继续发送&lt;/button&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<p>先启动消费者模块再启动生产者模块，浏览器地址栏输入 <a href="http://localhost/toSendInformationPage">http://localhost/toSendInformationPage</a> ，发送ttl消息，然后去RabbitMQ管理系统中查看队列的消息，刚刚发送的消息过了10秒（从发送成功开始计算时间）后会自动从队列中删除</p>
<h4 id="给队列设置"><a href="#给队列设置" class="headerlink" title="给队列设置"></a>给队列设置</h4><blockquote>
<p>直接修改RabbitMQConfig类的ttlQueue()方法</p>
</blockquote>
<p>修改前：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个ttl队列绑定ttl交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">ttlQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(TTL_QUEUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个ttl队列绑定ttl交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">ttlQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">8000</span>);</span><br><span class="line">    <span class="comment">//参数一为队列名称,参数二为是否持久化,参数三是否独享、排外的,参数四为是否自动删除,参数五为队列的其他属性参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(TTL_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="hl-label blue">队列参数说明</mark> 

<ol>
<li><p>name: 队列的名称</p>
</li>
<li><p>actualName: 队列的真实名称，默认用name参数，如果name为空，则根据规则生成一个</p>
</li>
<li><p>durable: 是否持久化</p>
</li>
<li><p>exclusive: 是否独享、排外的</p>
</li>
<li><p>autoDelete: 是否自动删除</p>
</li>
<li><p>arguments：队列的其他属性参数，有如下可选项，可参看图2的arguments</p>
</li>
</ol>
<p>   （1）x-message-ttl：消息的过期时间，单位：毫秒</p>
<p>   （2）x-expires：队列过期时间，队列在多长时间未被访问将被删除，单位：毫秒</p>
<p>   （3）x-max-length：队列最大长度，超过该最大值，则将从队列头部开始删除消息</p>
<p>   （4）x-max-length-bytes：队列消息内容占用最大空间，受限于内存大小，超过该阈值则从队列头部开始删除消息</p>
<p>   （5）x-overflow：设置队列溢出行为。这决定了当达到队列的最大长度时消息会发生什么。有效值是drop-head、reject-publish或reject-publish-dlx。仲裁队列类型仅支持drop-head</p>
<p>   （6）x-dead-letter-exchange：死信交换器名称，过期或被删除（因队列长度超长或因空间超出阈值）的消息可指定发送到该交换器中</p>
<p>   （7）x-dead-letter-routing-key：死信消息路由键，在消息发送到死信交换器时会使用该路由键，如果不设置，则使用消息的原来的路由键值</p>
<p>   （8）x-single-active-consumer：表示队列是否是单一活动消费者，true时，注册的消费组内只有一个消费者消费消息，其他被忽略，false时消息循环分发给所有消费者(默认false)</p>
<p>   （9）x-max-priority：队列要支持的最大优先级数;如果未设置，队列将不支持消息优先级</p>
<p>   （10）x-queue-mode（Lazy mode）：将队列设置为延迟模式，在磁盘上保留尽可能多的消息，以减少RAM的使用;如果未设置，队列将保留内存缓存以尽可能快地传递消息</p>
<p>   （11）x-queue-master-locator：在集群模式下设置镜像队列的主节点信息</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>先删除之前创建好的队列ttlQueue，启动消费者模块再启动生产者模块，浏览器地址栏输入 <a href="http://localhost/toSendInformationPage">http://localhost/toSendInformationPage</a> ，发送ttl消息，然后去RabbitMQ管理系统中查看队列的消息，刚刚发送的消息过了8秒（从发送成功开始计算时间）后会自动从队列中删除<font color="#dd0000">（消息的过期时间为10秒，消息所在队列的过期时间为8秒，所以消息的实际过期时间为8秒）</font></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现延时队列</title>
    <url>/356.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>延时队列，首先，它是一种队列，队列意味着内部的元素是有序的，元素出队和入队是有方向性的，元素从一端进入，从另一端取出。</p>
<p>其次，延时队列，最重要的特性就体现在它的延时属性上，跟普通的队列不一样的是，普通队列中的元素总是等着希望被早点取出处理，而延时队列中的元素则是希望被在指定时间得到取出和处理，所以延时队列中的元素是都是带时间属性的，通常来说是需要被处理的消息或者任务。</p>
<p>简单来说，延时队列就是用来存放需要在指定时间被处理的元素的队列，<font color="#dd0000">延时时间到了消息才会进入队列中等待着被消费</font></p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>那么什么时候需要用延时队列呢？考虑一下以下场景：</p>
<p>订单在十分钟之内未支付则自动取消</p>
<p>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒</p>
<p>账单在一周内未支付，则自动结算</p>
<p>用户注册成功后，如果三天内没有登陆则进行短信提醒</p>
<p>用户发起退款，如果三天内没有得到处理则通知相关运营人员</p>
<p>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>实现方式有两种：</p>
<ol>
<li>使用TTL+死信队列 </li>
<li>利用RabbitMQ插件，<font color="#dd0000">推荐使用此方式</font></li>
</ol>
<h4 id="TTL-死信队列"><a href="#TTL-死信队列" class="headerlink" title="TTL+死信队列"></a>TTL+死信队列</h4><p>生产者生产一条消息发送到TTL交换机，然后分发到TTL队列，消息在队列中待到过期后才会发送到死信交换机，然后分发到死信队列供消费者消费</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-10%20114743.png"></p>
<p>这种方式的弊端，无法做到通用性，每搞一个新的延迟任务，都要去实现一个实现的TTL+死信队列，比较麻烦，所以<font color="#dd0000">不推荐使用</font></p>
<h4 id="利用RabbitMQ插件"><a href="#利用RabbitMQ插件" class="headerlink" title="利用RabbitMQ插件"></a>利用RabbitMQ插件</h4><p>生产者生产一条消息发送到延时交换机，延时时间结束消息才会进入队列供消费者消费</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-10%20115501.png"></p>
<blockquote>
<p>下载插件</p>
</blockquote>
<p>RabbitMQ插件地址：<a href="https://www.rabbitmq.com/community-plugins.html">Community Plugins — RabbitMQ</a> ，进入GitHub下载页面插件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-09%20114906.jpg"></p>
<p>下载最新版本，直接点击链接即可下载</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-09%20115645.jpg"></p>
<blockquote>
<p>安装插件</p>
</blockquote>
<p>先将插件上传到虚拟机的 /home/data 目录下，然后将插件复制到RabbitMQ容器的 /plugins 目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp /home/data/rabbitmq_delayed_message_exchange-3.9.0.ez RabbitMQ容器id或名称:/plugins</span><br></pre></td></tr></table></figure>

<p>进入RabbitMQ容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it RabbitMQ容器id或名称 /bin/bash</span><br></pre></td></tr></table></figure>

<p>安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure>

<p>重启Rabbit容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart RabbitMQ容器id或名称</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现过程</p>
</blockquote>
<p>rabbitmq-common模块的RabbitMQConfig添加以下配置创建delayed交换机、队列，以及队列和交换机绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delayed交换机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_EXCHANGE = <span class="string">&quot;delayedExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delayed队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_QUEUE = <span class="string">&quot;delayedQueue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delayed路由key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_ROUTING_KEY = <span class="string">&quot;delayedRoutingKey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义delayed交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomExchange <span class="title">delayedExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">	map.put(<span class="string">&quot;x-delayed-type&quot;</span>, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DELAYED_EXCHANGE, <span class="string">&quot;x-delayed-message&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义delayed队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">delayedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Queue(DELAYED_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delayed队列绑定delayed交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">delayedBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayedExchange()).with(DELAYED_ROUTING_KEY).noargs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rabbitmq-producer模块的RabbitMQProducerService类添加一个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送延时消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 消息内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delayTime 延时时间,单位为毫秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendMessageDelayed</span><span class="params">(String message, Integer delayTime)</span></span>;</span><br></pre></td></tr></table></figure>

<p>rabbitmq-producer模块的RabbitMQProducerServiceImpl类实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageDelayed</span><span class="params">(String message, Integer delayTime)</span> </span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitMQConfig.DELAYED_EXCHANGE,RabbitMQConfig.DELAYED_ROUTING_KEY,message,a-&gt;&#123;</span><br><span class="line">        a.getMessageProperties().setDelay(delayTime);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改rabbitmq-producer模块的启动类，实现启动就发送两条延时消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.producer.service.RabbitMQProducerService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供者启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 12:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = SpringApplication.run(ProducerApplication.class, args);</span><br><span class="line">        RabbitMQProducerService rabbitMQProducerService = (RabbitMQProducerService) ac.getBean(<span class="string">&quot;rabbitMQProducerService&quot;</span>);</span><br><span class="line">        rabbitMQProducerService.sendMessageDelayed(<span class="string">&quot;延时消息1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">        rabbitMQProducerService.sendMessageDelayed(<span class="string">&quot;延时消息2&quot;</span>,<span class="number">20000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rabbitmq-consumer模块的RabbitMQConsumerService类添加一个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收delayed消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveMessageDelayed</span><span class="params">(String message)</span></span>;</span><br></pre></td></tr></table></figure>

<p>rabbitmq-consumer模块的RabbitMQConsumerServiceImpl类实现上面的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.DELAYED_QUEUE&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessageDelayed</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到的延时消息:&quot;</span>+message+<span class="string">&quot; , 当前时间:&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改rabbitmq-consumer模块application.yml配置文件，主要是将监听策略改为自动确认，方便测试</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">none</span> <span class="comment">#自动确认</span></span><br></pre></td></tr></table></figure>

<p>到此实现了监听队列接收delayed消息的功能</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>启动rabbitmq-consumer模块再启动rabbitmq-producer模块，然后去rabbitmq-consumer模块的启动控制台窗口结果，两次消费消息的间隔时间为10秒</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现死信队列</title>
    <url>/355.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>当消息成为Dead Message后，可以重新被发送到另一个交换机，这个交换机就是死信交换机DLX（死信交换机），然后这个Dead Message会发送到与之绑定的死信队列。</p>
<p>消息成为Dead Message的三种情况： </p>
<ol>
<li>消息由于消息有效期(per-message TTL)过期，队列的有效期并不会导致其中的消息过期 </li>
<li>消息由于队列超过其长度限制而被丢弃 </li>
<li>消息被消费者使用basic.reject或basic.nack方法并且requeue参数值设置为false的方式进行消息确认(negatively acknowledged)</li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h4><p>消息由于消息有效期(per-message TTL)过期</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-10%20114743.png"></p>
<blockquote>
<p>rabbitmq-common模块的RabbitMQConfig类添加配置：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dlx交换机名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DLX_DIRECT_EXCHANGE = <span class="string">&quot;dlxExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dlx队列名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DLX_QUEUE = <span class="string">&quot;dlxQueue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dlx路由key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DLX_ROUTING_KEY = <span class="string">&quot;dlxRoutingKey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个dlx交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">dlxExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(DLX_DIRECT_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个dlx队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">dlxQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Queue(DLX_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dlx队列绑定dlx交换机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">dlxBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(dlxQueue()).to(dlxExchange()).with(DLX_ROUTING_KEY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改rabbitmq-common模块的RabbitMQConfig类的ttlQueue方法，主要实现TTL队列和死信交换机的绑定</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个ttl队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">ttlQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">//设置队列的消息过期时间为4秒</span></span><br><span class="line">    map.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">4000</span>);</span><br><span class="line">    <span class="comment">//绑定死信交换机,过期的消息会进入死信交换机然后进入死信队列</span></span><br><span class="line">    map.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DLX_DIRECT_EXCHANGE);</span><br><span class="line">    <span class="comment">//绑定死信交换机的路由</span></span><br><span class="line">    map.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, DLX_ROUTING_KEY);</span><br><span class="line">    <span class="comment">//参数一为队列名称,参数二为是否持久化,参数三是否独享、排外的,参数四为是否自动删除,参数五为队列的其他属性参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(TTL_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<p>首先删除ttlQueue不然该队列的新配置不会生效，向ttlQueue队列发送一个TTL消息后，如果过了消息的有效期，该消息就会变成死信Dead Message，进入死信交换机，最后进入与之绑定的死信队列</p>
<h4 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h4><p>消息由于队列超过其长度限制而被丢弃，比如：队列可容纳的最大消息数为10，但是我们一下子向里面发送20条消息，后面的10条消息会变成死信Dead Message，进入死信交换机，最后进入与之绑定的死信队列</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-10%20125405.png"></p>
<blockquote>
<p>rabbitmq-common模块的RabbitMQConfig类的ttlQueue添加配置x-max-length</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个ttl队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">ttlQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">//设置队列的消息过期时间为4秒</span></span><br><span class="line">    map.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">    <span class="comment">//绑定死信交换机,过期的消息会进入死信交换机然后进入死信队列</span></span><br><span class="line">    map.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DLX_DIRECT_EXCHANGE);</span><br><span class="line">    <span class="comment">//绑定死信交换机的路由</span></span><br><span class="line">    map.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, DLX_ROUTING_KEY);</span><br><span class="line">    <span class="comment">//设置队列的最大长度</span></span><br><span class="line">    map.put(<span class="string">&quot;x-max-length&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//参数一为队列名称,参数二为是否持久化,参数三是否独享、排外的,参数四为是否自动删除,参数五为队列的其他属性参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(TTL_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>直接修改rabbitmq-producer模块的启动类，实现批量发送20条ttl消息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.producer.service.RabbitMQProducerService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供者启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-04 12:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = SpringApplication.run(ProducerApplication.class, args);</span><br><span class="line">        RabbitMQProducerService rabbitMQProducerService = (RabbitMQProducerService) ac.getBean(<span class="string">&quot;rabbitMQProducerService&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            rabbitMQProducerService.sendMessageTll(<span class="string">&quot;消息&quot;</span> + i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<p>首先删除ttlQueue不然该队列的新配置不会生效，批量向ttlQueue队列发送20条TTL消息后，后面进入的10条消息就会变成死信Dead Message，进入死信交换机，最后进入与之绑定的死信队列，过了消息的有效期，ttlQueue队列的10条消息最后也会变成死信</p>
<h4 id="情况三"><a href="#情况三" class="headerlink" title="情况三"></a>情况三</h4><p>消息被消费者使用basic.reject或basic.nack方法并且requeue参数值设置为false的方式进行消息确认(negatively acknowledged)</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-10%20123023.png"></p>
<blockquote>
<p>rabbitmq-consumer模块的RabbitMQConsumerService类添加一个接口方法：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听队列接收ttl消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deliveryTag</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveMessageTtl</span><span class="params">(String message, Channel channel, <span class="keyword">long</span> deliveryTag)</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>rabbitmq-consumer模块的RabbitMQConsumerServiceImpl类实现上面的接口方法：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;RabbitMQConfig.TTL_QUEUE&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessageTtl</span><span class="params">(String message, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="keyword">long</span> deliveryTag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到的消息:&quot;</span> + message);</span><br><span class="line">        <span class="comment">//模拟异常，进入catch方法</span></span><br><span class="line">        System.out.println(<span class="number">1</span> / <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//拒绝的消息不重新入列，会进入死信队列</span></span><br><span class="line">            channel.basicNack(deliveryTag, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">            ioException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<p>先启动rabbitmq-producer模块发送20条ttl消息，会有10条消息直接变成死信，然后启动rabbitmq-consumer模块消费消息，10条消息都会消费失败变成死信而不会等到消息有效期过期才变成死信</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建RabbitMQ集群</title>
    <url>/357.html</url>
    <content><![CDATA[<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>拉取RabbitMQ镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq</span><br></pre></td></tr></table></figure>

<h3 id="创建Docker网卡"><a href="#创建Docker网卡" class="headerlink" title="创建Docker网卡"></a>创建Docker网卡</h3><p>创建一个RabbitMQ的Docker网卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create rabbitmqnet</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-11%20010644.png"></p>
<h3 id="创建RabbitMQ容器"><a href="#创建RabbitMQ容器" class="headerlink" title="创建RabbitMQ容器"></a>创建RabbitMQ容器</h3><p>分别执行下面3条命令创建3个RabbitMQ容器：</p>
<p>创建RabbitMQ容器1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=rabbitmq1 -p 5673:5672 -p 15673:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -e RABBITMQ_NODENAME=rabbitmq1 -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;YZSDHWMFSMKEMBDHSGGZ&#x27;</span> -h rabbitmq1 --net=rabbitmqnet RabbitMQ镜像id</span><br></pre></td></tr></table></figure>

<p>创建RabbitMQ容器2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=rabbitmq2 -p 5674:5672 -p 15674:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -e RABBITMQ_NODENAME=rabbitmq2 -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;YZSDHWMFSMKEMBDHSGGZ&#x27;</span> -h rabbitmq2 --net=rabbitmqnet RabbitMQ镜像id</span><br></pre></td></tr></table></figure>

<p>创建RabbitMQ容器3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=rabbitmq3 -p 5675:5672 -p 15675:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -e RABBITMQ_NODENAME=rabbitmq3 -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;YZSDHWMFSMKEMBDHSGGZ&#x27;</span> -h rabbitmq3 --net=rabbitmqnet RabbitMQ镜像id</span><br></pre></td></tr></table></figure>

<h3 id="实现集群"><a href="#实现集群" class="headerlink" title="实现集群"></a>实现集群</h3><p>分别进入RabbitMQ容器2、RabbitMQ容器3，进入容器命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it RabbitMQ容器id或名称 /bin/bash</span><br></pre></td></tr></table></figure>

<p>在两个容器内部都执行下面的4条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbitmq1@rabbitmq1</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure>

<p>退出RabbitMQ容器快捷键：CTRL+P+Q，只退出不停止容器</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器地址栏输入：http://虚拟机IP:15672/ ，并输入用户名admin和密码admin，进入RabbitMQ图形管理页面</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-11%20012256.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro认证</title>
    <url>/359.html</url>
    <content><![CDATA[<h3 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-14%20184019.png"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="引入Shiro依赖"><a href="#引入Shiro依赖" class="headerlink" title="引入Shiro依赖"></a>引入Shiro依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.SimpleAccountRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-14 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleAccountRealm simpleAccountRealm = <span class="keyword">new</span> SimpleAccountRealm();</span><br><span class="line">        <span class="comment">//添加一个用户,参数为正确的用户名和密码</span></span><br><span class="line">        simpleAccountRealm.addAccount(<span class="string">&quot;ledao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//构建SecurityManager环境</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//将用户信息放入SecurityManager环境</span></span><br><span class="line">        defaultSecurityManager.setRealm(simpleAccountRealm);</span><br><span class="line">        <span class="comment">//主体提交认证请求</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        <span class="comment">//获取构建SecurityManager环境的当前用户</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//设置一个token用于登录,参数分别为用户登录的用户名和密码</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;ledao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//当前状态为未登录,所以输出false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前登录状态为:&quot;</span> + subject.isAuthenticated());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//登录</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="comment">//当前状态为登录成功,所以输出true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;当前登录状态为:&quot;</span> + subject.isAuthenticated());</span><br><span class="line">            <span class="comment">//注销登录</span></span><br><span class="line">            subject.logout();</span><br><span class="line">            System.out.println(<span class="string">&quot;当前登录状态为:&quot;</span> + subject.isAuthenticated());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li><p>当token的两个参数和正确的用户名密码一致时，登录成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-14%20185038.jpg"></p>
</li>
<li><p>不一致时，登录失败</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-14%20185108.jpg"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内部类</title>
    <url>/358.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在Java中，可以将一个类的定义放在另外一个类的定义内部，这就是内部类。内部类本身就是类的一个属性，与其他属性定义方式一致</p>
<p>内部类可以分为四种：静态内部类、成员内部类、局部内部类和匿名内部类</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>一个内部类对象可以访问创建它的外部类对象的内容，包括私有数据</li>
<li>内部类不为同一包的其他类所见，具有很好的封装性</li>
<li>内部类有效实现了“多重继承”，优化 java 单继承的缺陷</li>
<li>匿名内部类可以很方便的定义回调</li>
</ol>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li><p>一些多算法场合</p>
</li>
<li><p>解决一些非面向对象的语句块</p>
</li>
<li><p>适当使用内部类，使得代码更加灵活和富有扩展性</p>
</li>
<li><p>当某个类除了它的外部类，不再被其他的类使用时</p>
</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><blockquote>
<p>概念</p>
</blockquote>
<p>定义在类内部的静态类，就是静态内部类</p>
<p>静态内部类可以访问外部类所有的静态变量，而不可访问外部类的非静态变量，静态内部类的创建方式：<code>new 外部类.静态内部类()</code></p>
<blockquote>
<p>代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-13 9:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> A = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(A);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.StaticInner inner = <span class="keyword">new</span> Outer.StaticInner();</span><br><span class="line">        inner.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><blockquote>
<p>概念</p>
</blockquote>
<p>定义在类内部，成员位置上的非静态类，就是成员内部类</p>
<p>成员内部类可以访问外部类所有的变量和方法，包括静态和非静态，私有和公有。成员内部类依赖于外部类的实例，它的创建方式：<code>外部类实例.new 内部类()</code></p>
<blockquote>
<p>代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 成员内部类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-13 9:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> B = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            System.out.println(B);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        Outer.Inner inner = outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><blockquote>
<p>概念</p>
</blockquote>
<p>定义在方法中的内部类，就是局部内部类</p>
<p>定义在实例方法中的局部类可以访问外部类的所有变量和方法，定义在静态方法中的局部类只能访问外部类的静态变量和方法，局部内部类的创建方式：在对应方法内，<code>new 内部类()</code></p>
<blockquote>
<p>代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 局部内部类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-13 9:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> out_a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_B = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> inner_c = <span class="number">3</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(out_a);</span><br><span class="line">                System.out.println(STATIC_B);</span><br><span class="line">                System.out.println(inner_c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.fun();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        outer.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><blockquote>
<p>概念</p>
</blockquote>
<p>匿名内部类就是没有名字的内部类，日常开发中使用的比较多</p>
<p>除了没有名字，匿名内部类还有以下特点：</p>
<ol>
<li>匿名内部类必须继承一个抽象类或者实现一个接口</li>
<li>匿名内部类不能定义任何静态成员和静态方法</li>
<li>当所在的方法的形参需要被匿名内部类使用时，必须声明为 final</li>
<li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法</li>
</ol>
<blockquote>
<p>代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匿名内部类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-13 9:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//测试方法1</span></span><br><span class="line">        <span class="keyword">new</span> Service() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类测试1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method();</span><br><span class="line">        <span class="comment">//测试方法2</span></span><br><span class="line">        Service service = <span class="keyword">new</span> Service() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类测试2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        service.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试接口1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro授权</title>
    <url>/360.html</url>
    <content><![CDATA[<h3 id="授权过程"><a href="#授权过程" class="headerlink" title="授权过程"></a>授权过程</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-15%20193514.png"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.SimpleAccountRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-14 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleAccountRealm simpleAccountRealm = <span class="keyword">new</span> SimpleAccountRealm();</span><br><span class="line">        <span class="comment">//添加一个用户,该用户的角色有admin和teacher</span></span><br><span class="line">        simpleAccountRealm.addAccount(<span class="string">&quot;ledao&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;teacher&quot;</span>);</span><br><span class="line">        <span class="comment">//构建securityManager环境</span></span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//将上面的用户交给securityManager管理</span></span><br><span class="line">        securityManager.setRealm(simpleAccountRealm);</span><br><span class="line">        <span class="comment">//提交认证请求</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//获取当前securityManager环境的subject主体</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        subject.checkRoles(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;teacher1&quot;</span>);</span><br><span class="line">        <span class="comment">//设置登录用户的token</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;ledao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//登录</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="comment">//查看是否登录成功</span></span><br><span class="line">            System.out.println(subject.isAuthenticated() ? <span class="string">&quot;登录成功&quot;</span> : <span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//检查成功登录的用户是否有admin和teacher1两个角色</span></span><br><span class="line">                subject.checkRoles(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;teacher1&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthorizationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(<span class="string">&quot;登录的用户与检查的角色不相符!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>如果subject.checkRoles(“admin”, “teacher1”)，那么程序会报错，提示没有teacher1这个角色；如果subject.checkRoles(“admin”, “teacher”)，那么程序不会报错</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法</title>
    <url>/36.html</url>
    <content><![CDATA[<h3 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h3><p>十种常见排序算法可以分为两大类：</p>
<p>比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序</p>
<p>非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022022724.jpg" alt="img"></p>
<h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022022943.jpg" alt="img"></p>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面</p>
<p>时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律</p>
<p>空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>博客搬运地址：<a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro自定义Realm实现认证和授权</title>
    <url>/361.html</url>
    <content><![CDATA[<h3 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h3><p>新建一个MyRealm类，继承Shiro框架的AuthorizingRealm类，并实现默认的两个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Realm实现认证和授权</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-15 19:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        String userName = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//获取角色</span></span><br><span class="line">        Set&lt;String&gt; roles = getRolesByUserName(userName);</span><br><span class="line">        <span class="comment">//获取权限</span></span><br><span class="line">        Set&lt;String&gt; permissions = getPermissionsByUserName(userName);</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        simpleAuthorizationInfo.setRoles(roles);</span><br><span class="line">        simpleAuthorizationInfo.setStringPermissions(permissions);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken 从主体传过来的认证信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//从主体传过来的认证信息中获得用户名</span></span><br><span class="line">        String userName = (String) authenticationToken.getPrincipal();</span><br><span class="line">        <span class="comment">//根据用户名获取密码</span></span><br><span class="line">        String password = getPasswordByUserName(userName);</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(userName, password, <span class="string">&quot;myRealm&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储用户的用户名和密码,用于模拟数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String, String&gt; userMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//加入一个用户名为ledao,密码为123456的用户</span></span><br><span class="line">        userMap.put(<span class="string">&quot;ledao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//设置自定义Realm的名称,取什么无所谓</span></span><br><span class="line">        <span class="keyword">super</span>.setName(<span class="string">&quot;myRealm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟从数据库根据用户名获取密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPasswordByUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMap.get(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟从数据库中根据用户名获取角色数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getRolesByUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        roles.add(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        roles.add(<span class="string">&quot;teacher&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拟从数据库中根据用户名获取权限数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getPermissionsByUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; permissions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        permissions.add(<span class="string">&quot;添加学生&quot;</span>);</span><br><span class="line">        permissions.add(<span class="string">&quot;添加教师&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> permissions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.realm.MyRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-14 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRealm myRealm = <span class="keyword">new</span> MyRealm();</span><br><span class="line">        <span class="comment">//构建securityManager环境</span></span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//securityManager环境添加自定义Realm</span></span><br><span class="line">        securityManager.setRealm(myRealm);</span><br><span class="line">        <span class="comment">//提交认证请求</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//获取当前securityManager环境的subject主体</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//设置登录用户的token</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;ledao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//登录</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(subject.isAuthenticated() ? <span class="string">&quot;登录成功&quot;</span> : <span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//检查成功登录的用户是否有admin和teacher两个角色</span></span><br><span class="line">                subject.checkRoles(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;teacher&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//检查成功登录的用户是否有admin和teacher1两个角色</span></span><br><span class="line">                    subject.checkPermissions(<span class="string">&quot;添加学生&quot;</span>, <span class="string">&quot;添加教师&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (AuthorizationException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">&quot;登录的用户与检查的权限不相符!!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthorizationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(<span class="string">&quot;登录的用户与检查的角色不相符!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro加密</title>
    <url>/362.html</url>
    <content><![CDATA[<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.SecureRandomNumberGenerator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-14 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//原始密码</span></span><br><span class="line">        String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="comment">//随机盐值</span></span><br><span class="line">        String salt = <span class="keyword">new</span> SecureRandomNumberGenerator().nextBytes().toString();</span><br><span class="line">        <span class="comment">//加密次数</span></span><br><span class="line">        <span class="keyword">int</span> times = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//加密算法</span></span><br><span class="line">        String encryptName = <span class="string">&quot;md5&quot;</span>;</span><br><span class="line">        <span class="comment">//加密后的密码</span></span><br><span class="line">        String encodePassword = <span class="keyword">new</span> SimpleHash(encryptName, password, salt, times).toString();</span><br><span class="line">        System.out.println(encodePassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>每次的加密结果都不同，因为每次的盐值都不同</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据处理函数</title>
    <url>/364.html</url>
    <content><![CDATA[<h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Left()</td>
<td align="center">返回串左边的字符</td>
</tr>
<tr>
<td align="center">Length()</td>
<td align="center">返回串的长度</td>
</tr>
<tr>
<td align="center">Locate()</td>
<td align="center">找出串的一个子串</td>
</tr>
<tr>
<td align="center">Lower()</td>
<td align="center">将串转换为小写</td>
</tr>
<tr>
<td align="center">LTrim()</td>
<td align="center">去掉串左边的空格</td>
</tr>
<tr>
<td align="center">Right()</td>
<td align="center">返回串右边的字符</td>
</tr>
<tr>
<td align="center">RTrim()</td>
<td align="center">去掉串右边的空格</td>
</tr>
<tr>
<td align="center">Soundex()</td>
<td align="center">返回串的SOUNDEX值</td>
</tr>
<tr>
<td align="center">SubString()</td>
<td align="center">返回子串的字符</td>
</tr>
<tr>
<td align="center">Upper()</td>
<td align="center">将串转换为大写</td>
</tr>
</tbody></table>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="Left"><a href="#Left" class="headerlink" title="Left()"></a>Left()</h5><p>从左边开始，截取前两位字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(&quot;123456&quot;,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Right"><a href="#Right" class="headerlink" title="Right()"></a>Right()</h5><p>从右边开始，截取后两位字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(&quot;123456&quot;,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Length"><a href="#Length" class="headerlink" title="Length()"></a>Length()</h5><p>返回字符串”1234”的长度，长度为4</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LENGTH(&quot;1234&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Locate"><a href="#Locate" class="headerlink" title="Locate()"></a>Locate()</h5><p>查看子串”12”在字符串”33312345612”中第一次出现的位置，结果为4</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LOCATE(&quot;12&quot;,&quot;33312345612&quot;);</span><br></pre></td></tr></table></figure>

<p>从第6位开始查找，查看子串”12”在字符串”33312345612”中第一次出现的位置，结果为10</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LOCATE(&quot;12&quot;,&quot;33312345612&quot;,<span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Lower"><a href="#Lower" class="headerlink" title="Lower()"></a>Lower()</h5><p>将字符串的所有大写字母转化为小写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(&quot;aBcDe&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Upper"><a href="#Upper" class="headerlink" title="Upper()"></a>Upper()</h5><p>将字符串的所有小写字母转化为大写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(&quot;aBcDe&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="LTrim"><a href="#LTrim" class="headerlink" title="LTrim()"></a>LTrim()</h5><p>去掉字符串左边的空格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LTRIM(&quot;   abc   &quot;);</span><br></pre></td></tr></table></figure>

<h5 id="RTrim"><a href="#RTrim" class="headerlink" title="RTrim()"></a>RTrim()</h5><p>去掉字符串右边的空格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> RTRIM(&quot;   abc   &quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Trim"><a href="#Trim" class="headerlink" title="Trim()"></a>Trim()</h5><p>去掉字符串前后的空格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(&quot;  abcd  &quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Soundex"><a href="#Soundex" class="headerlink" title="Soundex()"></a>Soundex()</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20101813.jpg"></p>
<h5 id="SubString"><a href="#SubString" class="headerlink" title="SubString()"></a>SubString()</h5><p>截取从第三位开始的及后面的字符串,下面两个sql语句的结果是一样的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(&quot;123456&quot;,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(&quot;123456&quot; <span class="keyword">FROM</span> <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>截取从第二位开始的及后面的字符串，且截取的字符串长度为2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(&quot;123456&quot;,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(&quot;123456&quot; <span class="keyword">FROM</span> <span class="number">2</span> <span class="keyword">FOR</span> <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h4><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AddDate()</td>
<td align="center">增加一个日期（天、周等）</td>
</tr>
<tr>
<td align="center">AddTime()</td>
<td align="center">增加一个时间（时、分等）</td>
</tr>
<tr>
<td align="center">CurDate()</td>
<td align="center">返回当前日期</td>
</tr>
<tr>
<td align="center">CurTime()</td>
<td align="center">返回当前时间</td>
</tr>
<tr>
<td align="center">Date()</td>
<td align="center">返回日期时间的日期部分</td>
</tr>
<tr>
<td align="center">DateDiff()</td>
<td align="center">计算两个日期之差</td>
</tr>
<tr>
<td align="center">Date_Add()</td>
<td align="center">高度灵活的日期运算函数</td>
</tr>
<tr>
<td align="center">Date_Format()</td>
<td align="center">返回一个格式化的日期或时间串</td>
</tr>
<tr>
<td align="center">Day()</td>
<td align="center">返回一个日期的天数部分</td>
</tr>
<tr>
<td align="center">DayOfWeek()</td>
<td align="center">对于一个日期，返回对应的星期几</td>
</tr>
<tr>
<td align="center">Hour()</td>
<td align="center">返回一个时间的小时部分</td>
</tr>
<tr>
<td align="center">Minute()</td>
<td align="center">返回一个时间的分钟部分</td>
</tr>
<tr>
<td align="center">Month()</td>
<td align="center">返回一个日期的月份部分</td>
</tr>
<tr>
<td align="center">Now()</td>
<td align="center">返回当前日期和时间</td>
</tr>
<tr>
<td align="center">Second()</td>
<td align="center">返回一个时间的秒部分</td>
</tr>
<tr>
<td align="center">Time()</td>
<td align="center">返回一个日期时间的时间部分</td>
</tr>
<tr>
<td align="center">Year()</td>
<td align="center">返回一个日期的年份部分</td>
</tr>
</tbody></table>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><h5 id="AddDate"><a href="#AddDate" class="headerlink" title="AddDate()"></a>AddDate()</h5><p>给日期加两天</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ADDDATE(&quot;2021-09-17 10:34:11&quot;,<span class="number">2</span>); </span><br></pre></td></tr></table></figure>

<p>给日期加一天或周或月或年</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#加一天</span><br><span class="line"><span class="keyword">SELECT</span> ADDDATE(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br><span class="line">#加一周</span><br><span class="line"><span class="keyword">SELECT</span> ADDDATE(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> WEEK);</span><br><span class="line">#加一月</span><br><span class="line"><span class="keyword">SELECT</span> ADDDATE(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>);</span><br><span class="line">#加一年</span><br><span class="line"><span class="keyword">SELECT</span> ADDDATE(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>);</span><br></pre></td></tr></table></figure>

<h5 id="AddTime"><a href="#AddTime" class="headerlink" title="AddTime()"></a>AddTime()</h5><p>给日期加1天1小时1分1秒</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ADDTIME(&quot;2021-09-17 10:34:11&quot;,&quot;1 1:1:1&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="CurDate"><a href="#CurDate" class="headerlink" title="CurDate()"></a>CurDate()</h5><p>返回当前日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURDATE();</span><br></pre></td></tr></table></figure>

<h5 id="CurTime"><a href="#CurTime" class="headerlink" title="CurTime()"></a>CurTime()</h5><p>返回当前时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURTIME();</span><br></pre></td></tr></table></figure>

<h5 id="Date"><a href="#Date" class="headerlink" title="Date()"></a>Date()</h5><p>返回日期时间的日期部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span>(&quot;2021-09-17 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="DateDiff"><a href="#DateDiff" class="headerlink" title="DateDiff()"></a>DateDiff()</h5><p>返回两个日期之差（结果为天数）,前面的日期减去后面的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATEDIFF(&quot;2022-09-19 11:34:11&quot;,&quot;2021-09-18 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Date-Add"><a href="#Date-Add" class="headerlink" title="Date_Add()"></a>Date_Add()</h5><p>高度灵活的日期运算函数，给一个时间添加秒、分、小时、天、月、年</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#加<span class="number">1</span>天</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br><span class="line">#加<span class="number">1</span>周</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> WEEK);</span><br><span class="line">#加<span class="number">1</span>月</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>);</span><br><span class="line">#加<span class="number">1</span>年</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>);</span><br><span class="line">#加<span class="number">1</span>秒</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">SECOND</span>);</span><br><span class="line">#加<span class="number">1</span>分</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MINUTE</span>);</span><br><span class="line">#加<span class="number">1</span>小时</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(&quot;2021-09-17 10:34:11&quot;,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">HOUR</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Date-Format"><a href="#Date-Format" class="headerlink" title="Date_Format()"></a>Date_Format()</h5><p>格式化时间，第一个参数为要格式化的时间，第二个参数为格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(&quot;2021-09-17 10:34:11&quot;,&quot;%Y年%m月%d日 %H时%i分%s秒&quot;);</span><br></pre></td></tr></table></figure>

<p>以下是可用于构建日期格式字符串的说明符及其含义</p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20113511.png" style="zoom:150%;" />

<p>以下是一些常用的日期格式字符串</p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20113848.png" style="zoom:150%;" />

<h5 id="Day"><a href="#Day" class="headerlink" title="Day()"></a>Day()</h5><p>返回一个日期的天数部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(&quot;2021-09-17 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="DayOfWeek"><a href="#DayOfWeek" class="headerlink" title="DayOfWeek()"></a>DayOfWeek()</h5><p>对于一个日期，返回对应的星期几</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DAYOFWEEK(&quot;2021-09-17 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Hour"><a href="#Hour" class="headerlink" title="Hour()"></a>Hour()</h5><p>返回一个时间的小时部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(&quot;2021-09-17 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Minute"><a href="#Minute" class="headerlink" title="Minute()"></a>Minute()</h5><p>返回一个时间的分钟部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(&quot;2021-09-17 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Month"><a href="#Month" class="headerlink" title="Month()"></a>Month()</h5><p>返回一个日期的月份部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(&quot;2021-09-17 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Now"><a href="#Now" class="headerlink" title="Now()"></a>Now()</h5><p>返回当前日期和时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();</span><br></pre></td></tr></table></figure>

<h5 id="Second"><a href="#Second" class="headerlink" title="Second()"></a>Second()</h5><p>返回一个时间的秒部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(&quot;2021-09-17 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Time"><a href="#Time" class="headerlink" title="Time()"></a>Time()</h5><p>返回一个日期时间的时间部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span>(&quot;2021-09-17 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Year"><a href="#Year" class="headerlink" title="Year()"></a>Year()</h5><p>返回一个日期的年份部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(&quot;2021-09-17 10:34:11&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><h4 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h4><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Abs()</td>
<td align="center">返回一个数的绝对值</td>
</tr>
<tr>
<td align="center">Cos()</td>
<td align="center">返回一个角度的余弦</td>
</tr>
<tr>
<td align="center">Exp()</td>
<td align="center">返回一个数的指数值</td>
</tr>
<tr>
<td align="center">Mod()</td>
<td align="center">返回除操作的余数</td>
</tr>
<tr>
<td align="center">Pi()</td>
<td align="center">返回圆周率</td>
</tr>
<tr>
<td align="center">Rand()</td>
<td align="center">返回一个随机数</td>
</tr>
<tr>
<td align="center">Sin()</td>
<td align="center">返回一个角度的正弦</td>
</tr>
<tr>
<td align="center">Sqrt()</td>
<td align="center">返回一个数的平方根</td>
</tr>
<tr>
<td align="center">Tan()</td>
<td align="center">返回一个角度的正切</td>
</tr>
</tbody></table>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><h5 id="Abs"><a href="#Abs" class="headerlink" title="Abs()"></a>Abs()</h5><p>返回一个数的绝对值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Cos"><a href="#Cos" class="headerlink" title="Cos()"></a>Cos()</h5><p>返回一个角度的余弦</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COS</span>(<span class="number">45</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Exp"><a href="#Exp" class="headerlink" title="Exp()"></a>Exp()</h5><p>返回一个数的指数值，即：e的多少次方，e约等于2.718281828</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXP</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Mod"><a href="#Mod" class="headerlink" title="Mod()"></a>Mod()</h5><p>返回除操作的余数，前面参数除以后面的参数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">10</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Pi"><a href="#Pi" class="headerlink" title="Pi()"></a>Pi()</h5><p>返回圆周率</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PI();</span><br></pre></td></tr></table></figure>

<h5 id="Rand"><a href="#Rand" class="headerlink" title="Rand()"></a>Rand()</h5><p>返回一个随机数，产生一个在 0 和 1 之间的随机数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT RAND();</span><br></pre></td></tr></table></figure>

<h5 id="Sin"><a href="#Sin" class="headerlink" title="Sin()"></a>Sin()</h5><p>返回一个角度的正弦</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SIN</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Sqrt"><a href="#Sqrt" class="headerlink" title="Sqrt()"></a>Sqrt()</h5><p>返回一个数的平方根</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SQRT</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Tan"><a href="#Tan" class="headerlink" title="Tan()"></a>Tan()</h5><p>返回一个角度的正切</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TAN</span>(<span class="number">45</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL汇总数据</title>
    <url>/365.html</url>
    <content><![CDATA[<h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AVG()</td>
<td align="center">返回某列的平均值</td>
</tr>
<tr>
<td align="center">COUNT()</td>
<td align="center">返回某列的行数</td>
</tr>
<tr>
<td align="center">MAX()</td>
<td align="center">返回某列的最大值</td>
</tr>
<tr>
<td align="center">MIN()</td>
<td align="center">返回某列的最小值</td>
</tr>
<tr>
<td align="center">SUM()</td>
<td align="center">返回某列值之和</td>
</tr>
</tbody></table>
<h4 id="AVG"><a href="#AVG" class="headerlink" title="AVG()"></a>AVG()</h4><p>获取全部学生的平均年龄</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(age) <span class="keyword">AS</span> avg_age <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<h4 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h4><p>获取学生总数量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> student_count <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<h4 id="MAX"><a href="#MAX" class="headerlink" title="MAX()"></a>MAX()</h4><p>获取学生年龄的最大值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(age) <span class="keyword">AS</span> max_age <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<h4 id="MIN"><a href="#MIN" class="headerlink" title="MIN()"></a>MIN()</h4><p>获取学生年龄的最小值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(age) <span class="keyword">AS</span> min_age <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<h4 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h4><p>获取学生年龄的总和</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(age) <span class="keyword">AS</span> sum_age <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<h3 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h3><p>使用DISTINCT参数，只包含不同的值；DISTINCT参数的反义是ALL参数，包含所有的值，ALL参数是默认的</p>
<p>查询所有不同的学生年龄的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> age <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<h3 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h3><p>查询学生数量、平均年龄、年龄最大值、年龄最小值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>	<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> student_count,<span class="built_in">AVG</span>(age) <span class="keyword">AS</span> avg_age,<span class="built_in">MAX</span>(age) <span class="keyword">AS</span> max_age,<span class="built_in">MIN</span>(age) <span class="keyword">AS</span> min_age <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL分组数据</title>
    <url>/366.html</url>
    <content><![CDATA[<h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>数据分组使用GROUP BY子句，并且会根据分组的字段进行ASC排序</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>将学生按照年龄进行分组，并且统计每个年龄的学生人数，结果的排序为：年龄的升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> age_count <span class="keyword">FROM</span> t_student <span class="keyword">GROUP</span> <span class="keyword">BY</span> age;</span><br></pre></td></tr></table></figure>

<h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>分组的数据可以使用HAVING子句进行过滤，在GROUP BY后使用，HAVING后接一个条件，然后就可以筛选出满足条件的数据</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>将学生按照年龄进行分组且学生年龄大于11岁，并且统计每个年龄的学生人数，结果的排序为：年龄的升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> age_count <span class="keyword">FROM</span> t_student <span class="keyword">GROUP</span> <span class="keyword">BY</span> age <span class="keyword">HAVING</span> age<span class="operator">&gt;</span><span class="number">11</span>;</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>一般在使用GROUP BY子句时，应该也给出ORDER BY子句。这是保证数据正确排序的唯一方法，千万不要仅依赖GROUP BY排序数据</p>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>将学生按照年龄进行分组且学生年龄大于11岁，并且统计每个年龄的学生人数，结果的排序为：该年龄人数的升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> age_count <span class="keyword">FROM</span> t_student <span class="keyword">GROUP</span> <span class="keyword">BY</span> age <span class="keyword">HAVING</span> age<span class="operator">&gt;</span><span class="number">11</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age_count;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL使用子查询</title>
    <url>/367.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>所谓子查询，就是嵌套在其他查询中的查询</p>
<h4 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h4><p>要使用子查询，必须使用MySQL 4.1或更高级的版本</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol>
<li>过滤数据</li>
<li>作为计算字段使用</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h4><p>查询 t_class 班级表的id小于3的班级的所有学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> class_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t_class <span class="keyword">WHERE</span> id<span class="operator">&lt;</span><span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h4 id="作为计算字段使用"><a href="#作为计算字段使用" class="headerlink" title="作为计算字段使用"></a>作为计算字段使用</h4><p>查询各个班号下的学生人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_num,(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> t_student.`class_id`<span class="operator">=</span>t_class.`id`) <span class="keyword">AS</span> student_num <span class="keyword">FROM</span> t_class;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL组合查询</title>
    <url>/369.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>所谓组合查询，就是执行多个查询（多条SELECT语句），并将结果作为单个查询结果集返回</p>
<p>使用组合查询的两种情况：</p>
<ol>
<li>在单个查询中从不同的表返回类似结构的数据</li>
<li>对单个表执行多个查询，按单个查询返回数据</li>
</ol>
<p>多个SELECT语句之间使用<font color="#dd0000">UNION</font>关键字连接，返回的是多条SELECT语句返回结果的并集（即去掉重复的结果，这是默认的），如果不想去掉重复的结果，就在UNION关键字后加上ALL</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="单个SELECT语句"><a href="#单个SELECT语句" class="headerlink" title="单个SELECT语句"></a>单个SELECT语句</h4><p>查询姓名中包含“赵”字的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;%赵%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>查询年龄大于10岁的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="使用UNION"><a href="#使用UNION" class="headerlink" title="使用UNION"></a>使用UNION</h4><p>返回两条SELECT语句结果的并集，去掉了重复的结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;%赵%&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="使用UNION-ALL"><a href="#使用UNION-ALL" class="headerlink" title="使用UNION ALL"></a>使用UNION ALL</h4><p>不去掉重复的结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;%赵%&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="进行排序"><a href="#进行排序" class="headerlink" title="进行排序"></a>进行排序</h4><p>在SQL语句的最后加上ORDER BY即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;%赵%&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">10</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL使用联结</title>
    <url>/368.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用联结可以用一条SELECT语句检索出多个表的数据，使用联结的前提是表之间存在关联（一个表的除主键外的某一列，即：外键，是另一个表的主键），例如下图：（t_student的class_id是外键，表示班级和学生是一对多的关系，即一个班级有0个或多个学生）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-03%20185232.png"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="使用where"><a href="#使用where" class="headerlink" title="使用where"></a>使用where</h4><p>查询学生的班号、姓名、年龄</p>
<p>其中班号在表t_class、姓名和年龄在表t_student</p>
<p>表t_student的class_Id字段是外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_num,student_name,age <span class="keyword">FROM</span> t_class,t_student <span class="keyword">WHERE</span> t_class.`id`<span class="operator">=</span>t_student.`class_id`;</span><br></pre></td></tr></table></figure>

<h4 id="使用inner-join"><a href="#使用inner-join" class="headerlink" title="使用inner join"></a>使用inner join</h4><p>下面的SQL语句的作用和上一条语句的作用是一样的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_num,student_name,age <span class="keyword">FROM</span> t_class <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t_student <span class="keyword">ON</span> t_class.`id`<span class="operator">=</span>t_student.`class_id`;</span><br></pre></td></tr></table></figure>

<h4 id="联结多个表"><a href="#联结多个表" class="headerlink" title="联结多个表"></a>联结多个表</h4><ol>
<li><p>使用where</p>
<p>查询学生的班号、姓名、语文成绩、数学成绩、英语成绩</p>
<p>其中班号在表t_class，姓名和年龄在表t_student，语文成绩、数学成绩和英语成绩在表t_score2</p>
<p>外键：表t_student的class_id字段，表t_score2的student_id字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_num,student_name,chinese_score,math_score,english_score <span class="keyword">FROM</span> t_class,t_student,t_score2 <span class="keyword">WHERE</span> t_class.`id`<span class="operator">=</span>t_student.`class_id` <span class="keyword">AND</span> t_student.`id`<span class="operator">=</span>t_score2.`student_id`;</span><br></pre></td></tr></table></figure></li>
<li><p>使用inner join</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_num,student_name,chinese_score,math_score,english_score <span class="keyword">FROM</span> t_class <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t_student <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t_score2 <span class="keyword">ON</span> t_class.`id`<span class="operator">=</span>t_student.`class_Id` <span class="keyword">AND</span> t_student.`id`<span class="operator">=</span>t_score2.`student_id`;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之冒泡排序</title>
    <url>/37.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><ol>
<li><p>比较相邻的元素。如果第一个比第二个大，就交换它们两个</p>
</li>
<li><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数</p>
</li>
<li><p>针对所有的元素重复以上的步骤，除了最后一个</p>
</li>
<li><p>重复步骤1~3，直到排序完成</p>
</li>
</ol>
<h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022115015.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">11</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        BubbleSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//临时变量,用于交换两个数</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022120719.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL使用视图</title>
    <url>/370.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>视图是虚拟的表，与包含数据的表不一样，视图只包含使用时动态检索数据的查询，在视图创建之后，可以用与表基本相同的方式利用它们。可以对视图执行SELECT操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li>重用SQL语句</li>
<li>简化复杂的SQL操作，在编写查询后，可以方便地重用它而不必知道它的基本查询细节</li>
<li>使用表的组成部分而不是整个表</li>
<li>保护数据，可以给用户授予表的特定部分的访问权限而不是整个表的访问权限</li>
<li>更改数据格式和表示，视图可返回与底层表的表示和格式不同的数据</li>
</ol>
<h3 id="规则和限制"><a href="#规则和限制" class="headerlink" title="规则和限制"></a>规则和限制</h3><ol>
<li>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）</li>
<li>对于可以创建的视图数目没有限制</li>
<li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予</li>
<li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图</li>
<li>ORDER BY可以用在视图中，但如果从该视图检索数据SELECT中也含有ORDER BY，那么该视图中的ORDER BY将被覆盖</li>
<li>视图不能索引，也不能有关联的触发器或默认值</li>
<li>视图可以和表一起使用。例如，编写一条联结表和视图的SELECT语句</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><p>创建一个视图，该视图的作用为查询年龄大于10的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> more_than_ten_ages <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h4><p>查询年龄大于10并且班级id等于2的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> more_than_ten_ages <span class="keyword">WHERE</span> class_id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot使用Swagger3</title>
    <url>/371.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h3><p>在启动类添加@EnableOpenApi</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SwaggerTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Controller类上添加@Api(tags = “该Controller类的用途”)，参数tags主要是描述该Controller类的用途，在Controller类的方法上添加@ApiOperation(value = “该方法的用途”)，参数value主要是描述该方法的用途</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首页Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 17:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;首页Controller&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;跳转到首页&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;a href=&#x27;http://localhost:8080/student/delete?id=2&#x27;&gt;删除学生&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>浏览器地址栏输入：<a href="http://localhost:8080/swagger-ui/">http://localhost:8080/swagger-ui/</a></p>
<p>可以看到项目中拥有的Controller类以及该类的方法</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-05%20195321.jpg"></p>
<p>点击具体方法可以看到该方法返回的类型以及参数等</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-05%20195743.png"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>Swagger3常用注解查看博客：<a href="https://blog.zoutl.cn/372.html">Swagger3常用注解 | LeDao的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Swagger3</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger3常用注解</title>
    <url>/372.html</url>
    <content><![CDATA[<h3 id="EnableOpenApi"><a href="#EnableOpenApi" class="headerlink" title="@EnableOpenApi"></a>@EnableOpenApi</h3><p>该注解添加在<code>Spring Boot</code>项目的启动类上，然后在整个项目上使用<code>Swagger3</code>了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SwaggerTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3><p>添加在<code>Controller</code>类上，有两个参数：</p>
<ol>
<li><code>tags</code>：说明该类的作用，可以在<code>UI</code>界面上看到的注解</li>
<li><code>value</code>：该参数没什么意义，在<code>UI</code>界面上也看到，所以不需要配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首页Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 17:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;首页Controller&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><p>添加在在<code>Controller</code>类的方法上，有两个参数：</p>
<ol>
<li><code>value</code>：说明方法的用途、作用</li>
<li><code>notes</code>：方法的备注说明</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;跳转到首页&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;a href=&#x27;http://localhost:8080/student/delete?id=2&#x27;&gt;删除学生&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ApiImplicitParams"><a href="#ApiImplicitParams" class="headerlink" title="@ApiImplicitParams"></a>@ApiImplicitParams</h3><p>用在请求的方法上，表示一组参数说明，结合注解<code>@ApiImplicitParam</code>一起使用</p>
<h3 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a>@ApiImplicitParam</h3><p>该注解用在<code>@ApiImplicitParams</code>内，该注解的参数如下：</p>
<ol>
<li><p><code>name</code>：参数名</p>
</li>
<li><p><code>value</code>：参数的汉字说明、解释</p>
</li>
<li><p><code>required</code>：参数是否必须传</p>
</li>
<li><p><code>paramType</code>：参数放在哪个地方</p>
<p><code>.header</code>   请求参数的获取：<code>@RequestHeader</code></p>
<p><code>.query</code>   请求参数的获取：<code>@RequestParam</code> </p>
<p><code>.path</code>   用于<code>restful</code>接口，请求参数的获取：@PathVariable</p>
<p><code>.div</code>   <font color="#dd0000">不常用</font></p>
<p><code>.form</code>   <font color="#dd0000">不常用</font></p>
</li>
<li><p><code>dataType</code>：参数类型，默认<code>String</code>，其它值<code>dataType=&quot;Integer&quot;</code> </p>
</li>
<li><p><code>defaultValue</code>：参数的默认值</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加学生</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;添加学生&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;编号&quot;, required = true),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;姓名&quot;, required = true),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;age&quot;, value = &quot;年龄&quot;, required = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">add</span><span class="params">(Integer id, String name, Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Student(id, name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ApiResponses"><a href="#ApiResponses" class="headerlink" title="@ApiResponses"></a>@ApiResponses</h3><p>用在请求的方法上，表示一组响应码，结合注解<code>@ApiResponse</code>一起使用</p>
<h3 id="ApiResponse"><a href="#ApiResponse" class="headerlink" title="@ApiResponse"></a>@ApiResponse</h3><p>用在<code>@ApiResponses</code>中，一般用于表达一个错误的响应信息，参数如下：</p>
<ol>
<li><code>code</code>：数字，例如400</li>
<li><code>message</code>：信息，例如”请求参数没填好“</li>
<li><code>response</code>：抛出异常的类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加学生</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;添加学生&quot;)</span></span><br><span class="line"><span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">        @ApiResponse(code = 408, message = &quot;指定业务得报错信息，返回客户端&quot;),</span></span><br><span class="line"><span class="meta">        @ApiResponse(code = 400, message = &quot;请求参数没填好&quot;),</span></span><br><span class="line"><span class="meta">        @ApiResponse(code = 404, message = &quot;请求路径没有或页面跳转路径不对&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">add</span><span class="params">(Integer id, String name, Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Student(id, name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ApiModel"><a href="#ApiModel" class="headerlink" title="@ApiModel"></a>@ApiModel</h3><p>用于实体类上，表示一个返回响应数据的信息，参数<code>value</code>填该实体类的作用</p>
<p>这种一般用在<code>post</code>创建的时候，使用<code>@RequestBody</code>这样的场景，请求参数无法使用<code>@ApiImplicitParam</code>注解进行描述的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 16:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;学生实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ApiModelProperty"><a href="#ApiModelProperty" class="headerlink" title="@ApiModelProperty"></a>@ApiModelProperty</h3><p>该注解添加在实体类的属性上，描述实体类的属性，参数<code>value</code>填参数的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 16:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;学生实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;年龄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Swagger3</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger3的API信息配置</title>
    <url>/373.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通过修改API信息配置，可以让前端开发人员更方便地知道API文档是谁编写的，以方便联系</p>
<h3 id="配置类代码"><a href="#配置类代码" class="headerlink" title="配置类代码"></a>配置类代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置swagger的Docket bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                .apiInfo(createApiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">createApiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">&quot;LeDao Swagger3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;LeDao Api文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;3.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://blog.zoutl.cn&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Contact(<span class="string">&quot;LeDao&quot;</span>, <span class="string">&quot;https://blog.zoutl.cn&quot;</span>, <span class="string">&quot;f110@gmail.com&quot;</span>),</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-05%20224413.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Swagger3</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger3的Docket开关&amp;过滤&amp;分组配置</title>
    <url>/374.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通过设置Docket，还可以配置很多功能，比如是否开启swagger，过滤，分组等</p>
<h3 id="开启和关闭swagger"><a href="#开启和关闭swagger" class="headerlink" title="开启和关闭swagger"></a>开启和关闭swagger</h3><p>开发环境开启swagger，生产环境就关闭swagger</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置swagger的Docket bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                <span class="comment">//true为开启swagger,false为关闭swagger</span></span><br><span class="line">                .enable(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-05%20225826.png"></p>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>过滤方式有两种：①根据包路径过滤 ②根据请求路径过滤，这两种过滤方式可以单独使用，也可以结合使用</p>
<h4 id="根据包路径"><a href="#根据包路径" class="headerlink" title="根据包路径"></a>根据包路径</h4><p>先调用select方法，然后调用apis方法，最后调用build方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置swagger的Docket bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                <span class="comment">//true为开启,false为关闭</span></span><br><span class="line">                .enable(<span class="keyword">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//根据包路径过滤</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.ledao.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="根据请求路径"><a href="#根据请求路径" class="headerlink" title="根据请求路径"></a>根据请求路径</h4><p>先调用select方法，然后调用apis方法，最后调用build方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置swagger的Docket bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                <span class="comment">//true为开启,false为关闭</span></span><br><span class="line">                .enable(<span class="keyword">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//根据请求路径过滤</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/student/**&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结合使用"><a href="#结合使用" class="headerlink" title="结合使用"></a>结合使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置swagger的Docket bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                <span class="comment">//true为开启,false为关闭</span></span><br><span class="line">                .enable(<span class="keyword">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//根据包路径过滤</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.ledao.controller&quot;</span>))</span><br><span class="line">                <span class="comment">//根据请求路径过滤</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/student/**&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>在实际项目开发中，把复杂项目划分多模块给多个小组或者多个人负责开发，所以每个小组或者个人要实现自己的分组，方便查找到API接口开发负责人，沟通和处理问题</p>
<p>通过.groupName设置分组名称，有多少个分组就搞几份配置，下面代码设置了两个分组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-05 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置swagger的Docket bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                .groupName(<span class="string">&quot;开发组001&quot;</span>)</span><br><span class="line">                <span class="comment">//true为开启,false为关闭</span></span><br><span class="line">                .enable(<span class="keyword">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//根据包路径过滤</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.ledao.controller&quot;</span>))</span><br><span class="line">                <span class="comment">//根据请求路径过滤</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/student/**&quot;</span>))</span><br><span class="line">                .build()</span><br><span class="line">                .apiInfo(createApiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">createApiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">&quot;LeDao Swagger3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;LeDao Api文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;3.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://blog.zoutl.cn&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Contact(<span class="string">&quot;LeDao&quot;</span>, <span class="string">&quot;https://blog.zoutl.cn&quot;</span>, <span class="string">&quot;f110@gmail.com&quot;</span>),</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置swagger的Docket bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                .groupName(<span class="string">&quot;开发组002&quot;</span>)</span><br><span class="line">                <span class="comment">//true为开启,false为关闭</span></span><br><span class="line">                .enable(<span class="keyword">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//根据包路径过滤</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.ledao.test&quot;</span>))</span><br><span class="line">                <span class="comment">//根据请求路径过滤</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/teacher/**&quot;</span>))</span><br><span class="line">                .build()</span><br><span class="line">                .apiInfo(createApiInfo2());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">createApiInfo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">&quot;乐道 Swagger3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;乐道 Api文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;3.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://blog.zoutl.cn&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Contact(<span class="string">&quot;乐道&quot;</span>, <span class="string">&quot;https://blog.zoutl.cn&quot;</span>, <span class="string">&quot;f119@gmail.com&quot;</span>),</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Swagger3</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL使用存储过程</title>
    <url>/375.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。可将其视为批文件，虽然它们的作用不仅限于批处理。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>通过把处理封装在容易使用的单元中，简化复杂的操作。</li>
<li>由于不要求反复建立一系列处理步骤，这保证了数据的完整性。如果所有开发人员和应用程序都使用同一（试验和测试）存储过程，则所使用的代码都是相同的。 这一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性。</li>
<li>简化对变动的管理。如果表名、列名或业务逻辑（或别的内容）有变化，只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。这一点的延伸就是安全性。通过存储过程限制对基础数据的访问减少了数据讹误（无意识的或别的原因所导致的数据讹误）的机会。</li>
<li>提高性能。因为使用存储过程比使用单独的SQL语句要快。</li>
<li>存在一些只能用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码。</li>
</ol>
<p><font color="#dd0000">换句话说，使用存储过程有3个主要的好处，即简单、安全、高性能。</font></p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>一般来说，存储过程的编写比基本SQL语句复杂，编写存储过程需要更高的技能，更丰富的经验。</li>
<li>可能没有创建存储过程的安全访问权限。许多数据库管理员限制存储过程的创建权限，允许用户使用存储过程，但不允许他们创建存储过程</li>
</ol>
<p><font color="#dd0000">尽管有这些缺陷，存储过程还是非常有用的，并且应该尽可能地使用</font></p>
<h3 id="创建和使用"><a href="#创建和使用" class="headerlink" title="创建和使用"></a>创建和使用</h3><h4 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h4><p>获取全部学生的人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> student_num_all()</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> t_student;</span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> DELIMITER;</span><br></pre></td></tr></table></figure>

<p>SQL语句详解如下：</p>
<ol>
<li>DELIMITER //告诉命令行程序使用//作为新的语句结束分隔符，//也可以用其它的符号代替，例如：将//替换成&amp;&amp;</li>
<li>CREATE PROCEDURE student_num_all()定义了一个名为student_num_all的存储过程</li>
<li>BEGIN和END语句用来限定存储过程体</li>
</ol>
<p>使用存储过程的SQL语句如下：</p>
<p>使用一个名称为student_num_all的存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> student_num_all;</span><br></pre></td></tr></table></figure>

<h4 id="有参数"><a href="#有参数" class="headerlink" title="有参数"></a>有参数</h4><p>根据班级id获取学生数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> student_num_by_classId(<span class="keyword">IN</span> classId <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> class_id<span class="operator">=</span>classId;</span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> DELIMITER;</span><br></pre></td></tr></table></figure>

<p>使用一个名称为student_num_by_classId的存储过程，传入的参数为classId</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> student_num_by_classId(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h4 id="调用产生的结果"><a href="#调用产生的结果" class="headerlink" title="调用产生的结果"></a>调用产生的结果</h4><p>上面的两个例子调用存储过程时都是直接显示结果并且只返回一个结果，如果存储过程中含有多条SQL语句且返回多个结果，那么就需要使用 OUT 和 INTO 关键词</p>
<p>返回对应班级id的学生人数、学生年龄的最大值、学生年龄的最小值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> student_num_by_classId2(<span class="keyword">IN</span> classId <span class="type">INT</span>,<span class="keyword">OUT</span> stu_num <span class="type">INT</span>,<span class="keyword">OUT</span> max1 <span class="type">INT</span>,<span class="keyword">OUT</span> min1 <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> stu_num <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> class_id<span class="operator">=</span>classId;</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(age) <span class="keyword">INTO</span> max1 <span class="keyword">FROM</span> t_student;</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(age) <span class="keyword">INTO</span> min1 <span class="keyword">FROM</span> t_student;</span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> DELIMITER;</span><br></pre></td></tr></table></figure>

<p>使用一个名为student_num_by_classId2的存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> student_num_by_classId(<span class="number">2</span>,<span class="variable">@total</span>,<span class="variable">@max1</span>,<span class="variable">@min1</span>);</span><br></pre></td></tr></table></figure>

<p>使用产生的结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span> <span class="keyword">AS</span> total,<span class="variable">@max1</span> <span class="keyword">AS</span> max_age,<span class="variable">@min1</span> <span class="keyword">AS</span> min_age;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除一个名为student_num_all的存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> student_num_all;</span><br></pre></td></tr></table></figure>

<h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>为显示用来创建一个存储过程的CREATE语句，使用SHOW CREATE PROCEDURE语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> student_num_all;</span><br></pre></td></tr></table></figure>

<p>列出所有存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS;</span><br></pre></td></tr></table></figure>

<p>如果要限制输出，则使用 LIKE 关键词过滤结果，后面需要接一个完整的存储过程名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;student_num_by_classId&#x27;</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现写数据到Excel</title>
    <url>/376.html</url>
    <content><![CDATA[<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="一般数据插入"><a href="#一般数据插入" class="headerlink" title="一般数据插入"></a>一般数据插入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.style.column.LongestMatchColumnWidthStyleStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//生成的excel表名</span></span><br><span class="line">        String fileName = <span class="string">&quot;E:\\测试.xlsx&quot;</span>;</span><br><span class="line">        <span class="comment">//插入列名</span></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; head = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; head0 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        head0.add(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        List&lt;String&gt; head1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        head1.add(<span class="string">&quot;年龄&quot;</span>);</span><br><span class="line">        List&lt;String&gt; head2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        head2.add(<span class="string">&quot;生日&quot;</span>);</span><br><span class="line">        head.add(head0);</span><br><span class="line">        head.add(head1);</span><br><span class="line">        head.add(head2);</span><br><span class="line">        <span class="comment">//插入数据</span></span><br><span class="line">        List&lt;List&lt;Object&gt;&gt; datalist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            List&lt;Object&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            data.add(<span class="string">&quot;张三&quot;</span> + i);</span><br><span class="line">            data.add(<span class="number">11</span>);</span><br><span class="line">            data.add(<span class="keyword">new</span> Date());</span><br><span class="line">            datalist.add(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始生成excel表</span></span><br><span class="line">        EasyExcel.write(fileName).head(head).registerWriteHandler(<span class="keyword">new</span> LongestMatchColumnWidthStyleStrategy()).sheet().doWrite(datalist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h3><h4 id="自定义列名"><a href="#自定义列名" class="headerlink" title="自定义列名"></a>自定义列名</h4><p>实体类的字段上使用 @ExcelProperty 注解，例如：<font color="#dd0000">@ExcelProperty(value = “编号”)</font></p>
<blockquote>
<p>Link实体类代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelIgnore;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-20 8:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;链接名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String linkName;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;链接地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String linkUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLinkName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkName</span><span class="params">(String linkName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.linkName = linkName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLinkUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkUrl</span><span class="params">(String linkUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.linkUrl = linkUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试类代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.style.column.LongestMatchColumnWidthStyleStrategy;</span><br><span class="line"><span class="keyword">import</span> entity.Link;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String fileName = <span class="string">&quot;E:\\测试.xlsx&quot;</span>;</span><br><span class="line">        List&lt;Link&gt; linkList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Link link = <span class="keyword">new</span> Link();</span><br><span class="line">            link.setId(i);</span><br><span class="line">            link.setLinkName(<span class="string">&quot;LeDao的博客&quot;</span>+i);</span><br><span class="line">            link.setLinkUrl(<span class="string">&quot;https://blog.zoutl.cn&quot;</span>);</span><br><span class="line">            linkList.add(link);</span><br><span class="line">        &#125;</span><br><span class="line">        EasyExcel.write(fileName, Link.class).registerWriteHandler(<span class="keyword">new</span> LongestMatchColumnWidthStyleStrategy()).sheet().doWrite(linkList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="忽略字段"><a href="#忽略字段" class="headerlink" title="忽略字段"></a>忽略字段</h4><p>实体类的字段上使用 @ExcelIgnore 注解即可，下面代码中的 id 已被忽略，不会写到 Excel 表中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelIgnore;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-20 8:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;链接名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String linkName;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;链接地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String linkUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLinkName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkName</span><span class="params">(String linkName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.linkName = linkName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLinkUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkUrl</span><span class="params">(String linkUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.linkUrl = linkUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="写入指定的列"><a href="#写入指定的列" class="headerlink" title="写入指定的列"></a>写入指定的列</h4><p>在实体类的字段上使用 @ExcelProperty 注解，并使用 index 参数，第一列为 0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelIgnore;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-20 8:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;编号&quot;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;链接名称&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String linkName;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;链接地址&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String linkUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLinkName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkName</span><span class="params">(String linkName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.linkName = linkName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLinkUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkUrl</span><span class="params">(String linkUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.linkUrl = linkUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在模板后追加数据"><a href="#在模板后追加数据" class="headerlink" title="在模板后追加数据"></a>在模板后追加数据</h4><p>下面的代码是直接在 <font color="#dd0000">测试.xlsx</font> 的基础上追加数据，然后生成了<font color="#00dd00"> 测试2.xlsx </font>，不要在 EasyExcel.write() 方法中传入对象，不然又会生成新的表头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> entity.Link;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String templateName = <span class="string">&quot;E:\\测试.xlsx&quot;</span>;</span><br><span class="line">        String fileName = <span class="string">&quot;E:\\测试2.xlsx&quot;</span>;</span><br><span class="line">        List&lt;Link&gt; linkList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Link link = <span class="keyword">new</span> Link();</span><br><span class="line">            link.setId(i);</span><br><span class="line">            link.setLinkName(<span class="string">&quot;LeDao的博客&quot;</span> + i);</span><br><span class="line">            link.setLinkUrl(<span class="string">&quot;https://blog.zoutl.cn&quot;</span>);</span><br><span class="line">            linkList.add(link);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只传文件路径，不传对象，如果传了对象又会生成新的表头</span></span><br><span class="line">        EasyExcel.write(fileName).withTemplate(templateName).sheet().doWrite(linkList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现列名和内容居中"><a href="#实现列名和内容居中" class="headerlink" title="实现列名和内容居中"></a>实现列名和内容居中</h4><p>在实体上加上两个注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HeadStyle(horizontalAlignment = HorizontalAlignment.CENTER)</span></span><br><span class="line"><span class="meta">@ContentStyle(horizontalAlignment = HorizontalAlignment.CENTER)</span></span><br></pre></td></tr></table></figure>

<p>居中、左侧对齐、右侧对齐的设置如下：</p>
<p><code>HorizontalAlignment.CENTER</code>表示居中</p>
<p><code>HorizontalAlignment.LEFT</code>表示左侧对齐</p>
<p><code>HorizontalAlignment.RIGHT</code>表示右侧对齐</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现从Excel读取数据</title>
    <url>/377.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="定义监听器"><a href="#定义监听器" class="headerlink" title="定义监听器"></a>定义监听器</h4><p>定义一个监听器继承 AnalysisEventListener 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义用于暂时存储data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;JSONObject&gt; dataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; importHeads = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Object data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        String headStr = JSON.toJSONString(data);</span><br><span class="line">        dataList.add(JSONObject.parseObject(headStr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里会一行行的返回头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer key : headMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (importHeads.containsKey(headMap.get(key))) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            importHeads.put(headMap.get(key), key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取Excel的文件位置</span></span><br><span class="line">        String fileName = <span class="string">&quot;E:\\测试.xlsx&quot;</span>;</span><br><span class="line">        ExcelListener excelListener = <span class="keyword">new</span> ExcelListener();</span><br><span class="line">        EasyExcel.read(fileName, excelListener).sheet().doRead();</span><br><span class="line">        <span class="comment">//表格头数据</span></span><br><span class="line">        Map&lt;String, Integer&gt; heads = excelListener.getImportHeads();</span><br><span class="line">        System.out.println(heads);</span><br><span class="line">        <span class="comment">//每一行数据</span></span><br><span class="line">        List&lt;JSONObject&gt; dataList = excelListener.getDataList();</span><br><span class="line">        <span class="keyword">for</span> (JSONObject jsonObject : dataList) &#123;</span><br><span class="line">            System.out.println(jsonObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><h5 id="表格数据"><a href="#表格数据" class="headerlink" title="表格数据"></a>表格数据</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-26%20193249.png"></p>
<h5 id="读取的结果"><a href="#读取的结果" class="headerlink" title="读取的结果"></a>读取的结果</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-26%20193318.jpg"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>上面是直接读取电脑磁盘上的 Excel 表，也可以读取前端上传的 Excel 表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   ExcelListener excelListener = <span class="keyword">new</span> ExcelListener();</span><br><span class="line">   EasyExcel.read(file.getInputStream(), excelListener).sheet().doRead();</span><br><span class="line">   <span class="comment">//表格头数据</span></span><br><span class="line">   Map&lt;String, Integer&gt; heads = excelListener.getImportHeads();</span><br><span class="line">   <span class="comment">//每一行数据</span></span><br><span class="line">   List&lt;JSONObject&gt; dataList = excelListener.getDataList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java继承的super和this关键字</title>
    <url>/378.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在<code>Java</code>继承中，<code>super</code>关键字用于调用父类的属性和方法，而<code>this</code>则用于调用子类自身的属性和方法，<code>this</code>也可以省略不写</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.eatTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name = <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name = <span class="string">&quot;Dog&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用父类的eat()方法</span></span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">        <span class="comment">//调用自己的eat()方法,this也可以省略</span></span><br><span class="line">        <span class="keyword">this</span>.eat();</span><br><span class="line">        <span class="comment">//调用父类的name</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">        <span class="comment">//调用自己的name</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-29%20110527.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>在IntelliJ IDEA中使用Git命令</title>
    <url>/379.html</url>
    <content><![CDATA[<h3 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h3><p>打开<code>idea</code>的设置界面，找到<code>Tools -&gt; Terminal</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-31%20213806.jpg"></p>
<h3 id="设置本地Git"><a href="#设置本地Git" class="headerlink" title="设置本地Git"></a>设置本地Git</h3><p>在上图的<code>Shell path</code>中选择本地<code>Git</code>的<code>bash.exe</code>安装路径</p>
<h3 id="使用Git命令"><a href="#使用Git命令" class="headerlink" title="使用Git命令"></a>使用Git命令</h3><p>点击<code>idea</code>最下面的<code>Terminal</code>，即可打开<code>Git</code>命令行界面，然后就可以使用<code>Git</code>命令了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-10-31%20214941.jpg"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之选择排序</title>
    <url>/38.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小(大)元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小(大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
<ol>
<li><p>初始状态：无序区为R[1..n]，有序区为空</p>
</li>
<li><p>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区</p>
</li>
<li><p>n-1趟结束，数组有序化了</p>
</li>
</ol>
<h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022124602.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;交换之前：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 做第i趟排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = i;</span><br><span class="line">            <span class="comment">// 选最小的记录</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = k + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[k]) &#123;</span><br><span class="line">                    <span class="comment">//记下目前找到的最小值所在的位置</span></span><br><span class="line">                    k = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//在内层循环结束，也就是找到本轮循环的最小的数以后，再进行交换</span></span><br><span class="line">            <span class="comment">//交换a[i]和a[k]</span></span><br><span class="line">            <span class="keyword">if</span> (i != k) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[k];</span><br><span class="line">                arr[k] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022125440.jpg" alt="img"></p>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7在线安装Node.js</title>
    <url>/380.html</url>
    <content><![CDATA[<h3 id="查看旧版Node-js"><a href="#查看旧版Node-js" class="headerlink" title="查看旧版Node.js"></a>查看旧版Node.js</h3><p>查看是否已经安装了旧的Node.js，如果安装过Node.js就把它卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove nodejs</span><br></pre></td></tr></table></figure>

<h3 id="获取Node-js资源"><a href="#获取Node-js资源" class="headerlink" title="获取Node.js资源"></a>获取Node.js资源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -</span><br></pre></td></tr></table></figure>

<p>可以安装的Node.js版本如下图所示，分别为：12、14、16三个版本</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-01%20190800.png"></p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure>

<h3 id="安装淘宝镜像cnpm"><a href="#安装淘宝镜像cnpm" class="headerlink" title="安装淘宝镜像cnpm"></a>安装淘宝镜像cnpm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="查看安装版本"><a href="#查看安装版本" class="headerlink" title="查看安装版本"></a>查看安装版本</h3><p>输入以下3条命令都可以看到安装的版本号说明安装已经成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-01%20191325.png"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>用安装包安装Node.js查看博客：<a href="https://blog.zoutl.cn/399.html">CentOS7 使用安装包安装 Node.js | LeDao 的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Listary搜索技巧</title>
    <url>/381.html</url>
    <content><![CDATA[<h3 id="在指定文件夹内搜索"><a href="#在指定文件夹内搜索" class="headerlink" title="在指定文件夹内搜索"></a>在指定文件夹内搜索</h3><p>有两种方法：</p>
<ol>
<li>在 Listary 搜索框中输入<code>文件夹名称\搜索关键词</code></li>
<li>直接打开该文件夹，然后直接输入搜索关键词</li>
</ol>
<h3 id="在指定盘符内搜索"><a href="#在指定盘符内搜索" class="headerlink" title="在指定盘符内搜索"></a>在指定盘符内搜索</h3><p>以 D 盘为例，有两种方法：</p>
<ol>
<li>在 Listary 搜索框中输入 <code>d:\</code>（大写也可以），然后后面接搜索关键词即可</li>
<li>可以直接打开 D 盘，然后直接输入搜索关键词</li>
</ol>
<h3 id="搜索指定类型文件"><a href="#搜索指定类型文件" class="headerlink" title="搜索指定类型文件"></a>搜索指定类型文件</h3><p>这里以搜索 PDF 文件为例，首先去 Listary 选项中设置，点击+号添加 PDF 文件的过滤器，名称直接填 PDF ，关键词填 pdf（大写也行），搜索选项选择文件，扩展名填pdf（多个扩展名用英语的分号隔开），然后即可通过<code>pdf:搜索关键词</code>搜索pdf文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-02%20104526.png"></p>
<h3 id="在指定网站搜索"><a href="#在指定网站搜索" class="headerlink" title="在指定网站搜索"></a>在指定网站搜索</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>这里以谷歌搜索为例，一般情况要使用谷歌搜索，我们需要先启动浏览器，然后打开谷歌搜索的网址，然后输入搜索关键词进行搜索</p>
<p>如果使用 Listary，可以直接输入搜索关键词即可，而无需启动浏览器和输入谷歌搜索的网址</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>如下图，关键字和 URL 为重要选项，关键词可以根据自己的习惯填（我的是 gg ），URL 则是每个网址都是固定的，谷歌的是<code>http://www.google.com/search?q=&#123;query&#125;</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-02%20105929.png"></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在Listary搜索框输入<code>gg +搜索关键词</code>，gg 后有空格，然后按下回车键即可，如果输入 gg 后直接回车会启动系统默认的浏览器，并且打开谷歌搜索网页</p>
<h4 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h4><p>下面列出一些搜索网址的搜索 URL：</p>
<p>百度搜索：<code>http://www.baidu.com/s?wd=&#123;query&#125;</code></p>
<p>必应搜索：<code>http://www.bing.com/search?q=&#123;query&#125;</code></p>
<p>优酷搜索：<code>https://so.youku.com/search_video/q_&#123;query&#125;</code></p>
<p>如何自定义其它网址搜索呢？这其实很简单，这里以百度搜索为例，直接在百度中搜索<code>java</code>，然后复制搜索后的链接，然后可以得到<code>https://www.baidu.com/s?wd=java&amp;rsv_spt=1&amp;rsv_iqid=0xb78f2ec700110b36&amp;issp=1&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=&amp;tn=baiduhome_pg&amp;ch=</code>，<code>https://www.baidu.com/s?</code>后面接搜索条件，观察后可以发现<code>wd=java</code>就是搜索关键词匹配的条件，所以<code>https://www.baidu.com/s?wd=java</code>也可以在百度中搜索 java 关键词，然后将 java 替换成 <code>&#123;query&#125;</code> 即可，即完整的 Listary 百度搜索URL为<code>http://www.baidu.com/s?wd=&#123;query&#125;</code></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Listary</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot快速搭建XXL-JOB分布式任务调度平台</title>
    <url>/382.html</url>
    <content><![CDATA[<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="拉取源码"><a href="#拉取源码" class="headerlink" title="拉取源码"></a>拉取源码</h4><p>使用Git命令从GitHub或Gitee拉取XXL-JOB项目</p>
<p>GitHub项目地址为：<a href="https://github.com/xuxueli/xxl-job/">https://github.com/xuxueli/xxl-job/</a></p>
<p>Gitee项目地址为：<a href="https://gitee.com/xuxueli0323/xxl-job">https://gitee.com/xuxueli0323/xxl-job</a></p>
<p>拉取源码命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从GitHub拉取</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/xuxueli/xxl-job.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#从Gitee拉取</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/xuxueli0323/xxl-job.git</span><br></pre></td></tr></table></figure>

<h4 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h4><p>数据库文件在 xxl-job\doc\db 目录下，数据库新建一个名为 xxl_job 的数据库，并导入该数据库文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-03%20095048.png"></p>
<h4 id="idea导入项目"><a href="#idea导入项目" class="headerlink" title="idea导入项目"></a>idea导入项目</h4><p>导入 idea 后，配置 JDK ，然后修改 xxl-job-admin 模块下的配置文件 application.properties ，找到数据库配置并修改成自己的数据库配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### xxl-job, datasource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><p>可以直接在 idea 上运行，也可以打包成 jar 包后运行</p>
<blockquote>
<p>直接运行</p>
</blockquote>
<p>直接启动 xxl-job-admin 模块的 XxlJobAdminApplication.java 文件即可，浏览器地址栏输入：<a href="http://localhost:8080/xxl-job-admin/">http://localhost:8080/xxl-job-admin/</a>，用户名为：admin，密码为：123456</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-03%20093711.jpg"></p>
<blockquote>
<p>打包成 jar 包</p>
</blockquote>
<p>直接点击 Maven 工具栏的 xxl-job 模块的 package 按钮即可打包成 jar 包</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-03%20094134.jpg"></p>
<p>打包好的文件在 xxl-job-admin 模块的 target 文件夹中，名称为：xxl-job-admin-2.3.0.jar ，如果看不到 target 文件夹，就点击 Project 栏右上角的设置按钮并且选择 <font color="#dd0000">Show Excluded Files</font> ，打勾代表已启用</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-03%20094607.jpg"></p>
<p>使用 CMD 命令进入 jar 包所在文件夹，使用下面命令启动项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar xxl-job-admin-2.3.0.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-03%20095506.png"></p>
<h3 id="在项目中使用"><a href="#在项目中使用" class="headerlink" title="在项目中使用"></a>在项目中使用</h3><p>新建一个 Spring Boot 项目，命名为：xxlJobDemo，新建项目时直接选择 Spring Web 依赖</p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.xuxueli/xxl-job-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="新建logback-xml"><a href="#新建logback-xml" class="headerlink" title="新建logback.xml"></a>新建logback.xml</h4><p>在 resources 目录下，添加 logback.xml 文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;1 seconds&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;E:/data/applogs/xxl-job/xxl-job-executor-sample-springboot.log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;.%d&#123;yyyy-MM-dd&#125;.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;36&#125; [%file : %line] %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改application-properties"><a href="#修改application-properties" class="headerlink" title="修改application.properties"></a>修改application.properties</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># web port</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="comment"># log config</span></span><br><span class="line"><span class="meta">logging.config</span>=<span class="string">classpath:logback.xml</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">xxlJobDemo</span></span><br><span class="line"><span class="comment">### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；</span></span><br><span class="line"><span class="meta">xxl.job.admin.addresses</span>=<span class="string">http://127.0.0.1:8080/xxl-job-admin</span></span><br><span class="line"><span class="comment">### 执行器通讯TOKEN [选填]：非空时启用；</span></span><br><span class="line"><span class="meta">xxl.job.accessToken</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span><br><span class="line"><span class="meta">xxl.job.executor.appname</span>=<span class="string">xxlJobDemo</span></span><br><span class="line"><span class="comment">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span><br><span class="line"><span class="meta">xxl.job.executor.address</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；</span></span><br><span class="line"><span class="meta">xxl.job.executor.ip</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span></span><br><span class="line"><span class="meta">xxl.job.executor.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="comment">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logpath</span>=<span class="string">E:/data/applogs/xxl-job/jobhandler</span></span><br><span class="line"><span class="comment">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logretentiondays</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>

<h4 id="新建XXL-JOB配置类"><a href="#新建XXL-JOB配置类" class="headerlink" title="新建XXL-JOB配置类"></a>新建XXL-JOB配置类</h4><p>新建一个 XXL-JOB 配置类，命名为：XxlJobConfig.java，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldeao.xxljobdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.executor.impl.XxlJobSpringExecutor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XXL-JOB配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-03 10:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxlJobConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(XxlJobConfig.class);</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String adminAddresses;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.accessToken&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appname;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.ip&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logpath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String logPath;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logretentiondays&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> logRetentionDays;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XxlJobSpringExecutor <span class="title">xxlJobExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);</span><br><span class="line">        XxlJobSpringExecutor xxlJobSpringExecutor = <span class="keyword">new</span> XxlJobSpringExecutor();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">        xxlJobSpringExecutor.setAddress(address);</span><br><span class="line">        xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">        xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line">        <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="新建任务类"><a href="#新建任务类" class="headerlink" title="新建任务类"></a>新建任务类</h4><p>新建一个定时任务类，命名为：Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldeao.xxljobdemo.xxljobhandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.biz.model.ReturnT;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.annotation.XxlJob;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.log.XxlJobLogger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Handler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-03 10:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bean模式，一个方法为一个任务</span></span><br><span class="line"><span class="comment">     * 1、在Spring Bean实例中，开发Job方法，方式格式要求为 &quot;public ReturnT&lt;String&gt; execute(String param)&quot;</span></span><br><span class="line"><span class="comment">     * 2、为Job方法添加注解 &quot;<span class="doctag">@XxlJob</span>(value=&quot;自定义jobhandler名称&quot;, init = &quot;JobHandler初始化方法&quot;, destroy = &quot;JobHandler销毁方法&quot;)&quot;，注解value值对应的是调度中心新建任务的JobHandler属性的值。</span></span><br><span class="line"><span class="comment">     * 3、执行日志：需要通过 &quot;XxlJobLogger.log&quot; 打印执行日志；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@XxlJob(&quot;demoJobHandler1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReturnT&lt;String&gt; <span class="title">demoJobHandler1</span><span class="params">(String param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;java, Hello World~~~&quot;</span>);</span><br><span class="line">        XxlJobLogger.log(<span class="string">&quot;java, Hello World~~~&quot;</span>);</span><br><span class="line">        XxlJobLogger.log(<span class="string">&quot;param:&quot;</span> + param);</span><br><span class="line">        <span class="keyword">return</span> ReturnT.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p>按 Spring Boot 方式启动即可，点击 idea 的启动按钮或者直接运行 XxlJobDemoApplication.java 这个类</p>
<h4 id="将定时任务添加到XXL-JOB"><a href="#将定时任务添加到XXL-JOB" class="headerlink" title="将定时任务添加到XXL-JOB"></a>将定时任务添加到XXL-JOB</h4><blockquote>
<p>添加执行器</p>
</blockquote>
<p>在执行器管理界面添加一个执行器，表单填写要求如下：</p>
<ol>
<li>AppName 填 xxlJobDemo ，要与 application.properties 配置的一致</li>
<li>名称可以根据自己的情况填写，填项目名称即可</li>
<li>注册方式选自动注册时不要填机器地址，选手动录入则需要填写机器地址，所以<font color="#dd0000">直接选自动注册</font>即可</li>
</ol>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-03%20102808.png"></p>
<blockquote>
<p>添加任务</p>
</blockquote>
<p>在任务管理界面添加一个任务，表单填写要求如下：</p>
<ol>
<li>执行器选刚刚创建的 xxlJobDemo</li>
<li>任务描述和负责人根据实际情况填写</li>
<li>调度类型选 CRON ，Cron 点击编辑选择即可</li>
<li>运行模式选择 BEAN，JobHandler 填定时任务类的对应方法（要和Bean的名称一致）</li>
<li>其它的默认就行</li>
</ol>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-03%20105214.png"></p>
<h4 id="启动任务"><a href="#启动任务" class="headerlink" title="启动任务"></a>启动任务</h4><p>在任务管理中找到指定任务，然后启动它即可，可以执行一次，然后去 idea 控制台查看结果</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-03%20105943.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>XXL-JOB</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows11的右键菜单恢复成Windows10</title>
    <url>/383.html</url>
    <content><![CDATA[<h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><p>下载地址：<a href="https://www.sordum.org/14479/windows-11-classic-context-menu-v1-0/">Windows 11 Classic Context Menu v1.0 (sordum.org)</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-04%20120412.png"></p>
<h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><p>按钮1为恢复成 Windows10 右键菜单，按钮2为恢复成 Windows11 右键菜单</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-04%20120902.png"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>实现图片居中显示</title>
    <url>/384.html</url>
    <content><![CDATA[<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>将 img 标签放在 p 标签内，然后 p 标签使用样式<code>text-align: center</code></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;height: 66px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://image.zoutl.cn/hexo/images/logo.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-06%20163102.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云CentOS7系统手动修复漏洞</title>
    <url>/385.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>阿里云后台自动修复漏洞是需要收费的，然而手动修复漏洞只需要3个步骤：</p>
<ol>
<li>清理缓存信息</li>
<li>安装所有软件和系统更新</li>
<li>安全重启系统</li>
</ol>
<h3 id="修复过程"><a href="#修复过程" class="headerlink" title="修复过程"></a>修复过程</h3><p>依次输入以下三条命令即可</p>
<h4 id="清理缓存信息"><a href="#清理缓存信息" class="headerlink" title="清理缓存信息"></a>清理缓存信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure>

<h4 id="安装所有软件和系统更新"><a href="#安装所有软件和系统更新" class="headerlink" title="安装所有软件和系统更新"></a>安装所有软件和系统更新</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>

<h4 id="安全重启系统"><a href="#安全重启系统" class="headerlink" title="安全重启系统"></a>安全重启系统</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus实体类注解</title>
    <url>/386.html</url>
    <content><![CDATA[<h3 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h3><p>表名注解，在类名上面使用，通过value属性的值可以让MyBatis-Plus知道当前实体类对应的是数据库的哪一个表</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-11-22%20004654.jpg"></p>
<p>该注解的属性如下表所示：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必须指定</th>
<th align="center">默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">表名</td>
</tr>
<tr>
<td align="center">schema</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">schema</td>
</tr>
<tr>
<td align="center">keepGlobalPrefix</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">false</td>
<td align="center">是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)</td>
</tr>
<tr>
<td align="center">resultMap</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">xml 中 resultMap 的 id</td>
</tr>
<tr>
<td align="center">autoResultMap</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">false</td>
<td align="center">是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)</td>
</tr>
<tr>
<td align="center">excludeProperty</td>
<td align="center">String[]</td>
<td align="center">否</td>
<td align="center">{}</td>
<td align="center">需要排除的属性名(@since 3.3.1)</td>
</tr>
</tbody></table>
<h3 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h3><p>主键注解，在id字段上使用，value属性值填数据库中主键id的名称，type属性值填主键的规则</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必须指定</th>
<th align="center">默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">主键字段名</td>
</tr>
<tr>
<td align="center">type</td>
<td align="center">Enum</td>
<td align="center">否</td>
<td align="center">IdType.NONE</td>
<td align="center">主键类型</td>
</tr>
</tbody></table>
<p>主键的规则type的值如下：</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IdType.AUTO</td>
<td align="center">数据库ID自增</td>
</tr>
<tr>
<td align="center">IdType.NONE</td>
<td align="center">无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td>
</tr>
<tr>
<td align="center">IdType.INPUT</td>
<td align="center">insert前自行set主键值</td>
</tr>
<tr>
<td align="center">IdType.ASSIGN_ID</td>
<td align="center">分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td>
</tr>
<tr>
<td align="center">IdType.ASSIGN_UUID</td>
<td align="center">分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td>
</tr>
</tbody></table>
<p>除了通过type属性值来配置主键的规则外，还可以通过application.yml文件来配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment">#主键规则为自增</span></span><br></pre></td></tr></table></figure>

<h3 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h3><p>字段注解（非主键），在实体类字段上使用，value属性值填数据库对应的字段名，exist属性值则填true（true则代表是数据库中的字段）或false（false则代表不是数据库中的字段），更多属性如下：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必须指定</th>
<th align="center">默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">数据库字段名</td>
</tr>
<tr>
<td align="center">el</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">映射为原生 <code>#&#123; ... &#125;</code> 逻辑,相当于写在 xml 里的 <code>#&#123; ... &#125;</code> 部分</td>
</tr>
<tr>
<td align="center">exist</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">true</td>
<td align="center">是否为数据库表字段</td>
</tr>
<tr>
<td align="center">condition</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">字段 <code>where</code> 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 <code>%s=#&#123;%s&#125;</code>,<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java">参考(opens new window)</a></td>
</tr>
<tr>
<td align="center">update</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">字段 <code>update set</code> 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 <code>el</code> 属性)</td>
</tr>
<tr>
<td align="center">insertStrategy</td>
<td align="center">Enum</td>
<td align="center">N</td>
<td align="center">DEFAULT</td>
<td align="center">举例：NOT_NULL: <code>insert into table_a(&lt;if test=&quot;columnProperty != null&quot;&gt;column&lt;/if&gt;) values (&lt;if test=&quot;columnProperty != null&quot;&gt;#&#123;columnProperty&#125;&lt;/if&gt;)</code></td>
</tr>
<tr>
<td align="center">updateStrategy</td>
<td align="center">Enum</td>
<td align="center">N</td>
<td align="center">DEFAULT</td>
<td align="center">举例：IGNORED: <code>update table_a set column=#&#123;columnProperty&#125;</code></td>
</tr>
<tr>
<td align="center">whereStrategy</td>
<td align="center">Enum</td>
<td align="center">N</td>
<td align="center">DEFAULT</td>
<td align="center">举例：NOT_EMPTY: <code>where &lt;if test=&quot;columnProperty != null and columnProperty!=&#39;&#39;&quot;&gt;column=#&#123;columnProperty&#125;&lt;/if&gt;</code></td>
</tr>
<tr>
<td align="center">fill</td>
<td align="center">Enum</td>
<td align="center">否</td>
<td align="center">FieldFill.DEFAULT</td>
<td align="center">字段自动填充策略</td>
</tr>
<tr>
<td align="center">select</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">true</td>
<td align="center">是否进行 select 查询</td>
</tr>
<tr>
<td align="center">keepGlobalFormat</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">false</td>
<td align="center">是否保持使用全局的 format 进行处理</td>
</tr>
<tr>
<td align="center">jdbcType</td>
<td align="center">JdbcType</td>
<td align="center">否</td>
<td align="center">JdbcType.UNDEFINED</td>
<td align="center">JDBC类型 (该默认值不代表会按照该值生效)</td>
</tr>
<tr>
<td align="center">typeHandler</td>
<td align="center">Class&lt;? extends TypeHandler&gt;</td>
<td align="center">否</td>
<td align="center">UnknownTypeHandler.class</td>
<td align="center">类型处理器 (该默认值不代表会按照该值生效)</td>
</tr>
<tr>
<td align="center">numericScale</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">指定小数点后保留的位数</td>
</tr>
</tbody></table>
<h3 id="Version"><a href="#Version" class="headerlink" title="@Version"></a>@Version</h3><p>乐观锁注解、标记 <code>@Verison</code> 在字段上</p>
<h3 id="EnumValue"><a href="#EnumValue" class="headerlink" title="@EnumValue"></a>@EnumValue</h3><p>通枚举类注解（注解在枚举字段上）</p>
<h3 id="TableLogic"><a href="#TableLogic" class="headerlink" title="@TableLogic"></a>@TableLogic</h3><p>表字段逻辑处理注解（逻辑删除）</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必须指定</th>
<th align="center">默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">逻辑未删除值</td>
</tr>
<tr>
<td align="center">delval</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">逻辑删除值</td>
</tr>
</tbody></table>
<h3 id="KeySequence"><a href="#KeySequence" class="headerlink" title="@KeySequence"></a>@KeySequence</h3><p>序列主键策略 <code>oracle</code></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必须指定</th>
<th align="center">默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">序列名</td>
</tr>
<tr>
<td align="center">clazz</td>
<td align="center">Class</td>
<td align="center">否</td>
<td align="center">Long.class</td>
<td align="center">id的类型, 可以指定String.class，这样返回的Sequence值是字符串”1”</td>
</tr>
</tbody></table>
<h3 id="InterceptorIgnore"><a href="#InterceptorIgnore" class="headerlink" title="@InterceptorIgnore"></a>@InterceptorIgnore</h3><p><a href="https://baomidou.com/guide/interceptor.html#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-%E4%BB%A5%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E4%B8%BE%E4%BE%8B">插件主体(必看!)(since 3.4.0) | MyBatis-Plus (baomidou.com)</a></p>
<h3 id="OrderBy"><a href="#OrderBy" class="headerlink" title="@OrderBy"></a>@OrderBy</h3><p>内置 SQL 默认指定排序，优先级低于 wrapper 条件查询</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必须指定</th>
<th align="center">默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">isDesc</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">是</td>
<td align="center">是否倒序查询</td>
</tr>
<tr>
<td align="center">sort</td>
<td align="center">short</td>
<td align="center">否</td>
<td align="center">Short.MAX_VALUE</td>
<td align="center">数字越小越靠前</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>List一般集合排序</title>
    <url>/387.html</url>
    <content><![CDATA[<h3 id="Collections-sort"><a href="#Collections-sort" class="headerlink" title="Collections.sort"></a>Collections.sort</h3><h4 id="只有一个参数"><a href="#只有一个参数" class="headerlink" title="只有一个参数"></a>只有一个参数</h4><p>参数为要排序的集合，将集合升序排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        Collections.sort(integerList);</span><br><span class="line">        integerList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Character&gt; characterList = Arrays.asList(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        Collections.sort(characterList);</span><br><span class="line">        characterList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;fcd&quot;</span>, <span class="string">&quot;bfd&quot;</span>);</span><br><span class="line">        Collections.sort(stringList);</span><br><span class="line">        stringList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; longList = Arrays.asList(<span class="number">111L</span>,<span class="number">332L</span>,<span class="number">22L</span>);</span><br><span class="line">        Collections.sort(longList);</span><br><span class="line">        longList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="有两个参数"><a href="#有两个参数" class="headerlink" title="有两个参数"></a>有两个参数</h4><p>第一个参数是要排序的集合，第二个参数是比较器，排序结果由比较器确定（比较器内第一个参数在前面就是升序，在后面就是降序）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        Collections.sort(integerList, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//第一个参数在前,升序</span></span><br><span class="line">                <span class="comment">//return o1-o2;</span></span><br><span class="line">                <span class="comment">//第一个参数在后,降序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        integerList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Character&gt; characterList = Arrays.asList(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        Collections.sort(characterList, <span class="keyword">new</span> Comparator&lt;Character&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Character o1, Character o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//第一个参数在后,降序</span></span><br><span class="line">                <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        characterList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;fcd&quot;</span>, <span class="string">&quot;bfd&quot;</span>,<span class="string">&quot;Abd&quot;</span>);</span><br><span class="line">        Collections.sort(stringList, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//return o2.compareTo(o1);</span></span><br><span class="line">                <span class="comment">//第一个参数在后,降序,忽略大小写</span></span><br><span class="line">                <span class="keyword">return</span> o2.compareToIgnoreCase(o1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        stringList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; longList = Arrays.asList(<span class="number">111L</span>,<span class="number">332L</span>,<span class="number">22L</span>);</span><br><span class="line">        Collections.sort(longList, <span class="keyword">new</span> Comparator&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Long o1, Long o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        longList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List-sort"><a href="#List-sort" class="headerlink" title="List.sort"></a>List.sort</h3><p>只有一个参数，参数为比较器，一般推荐用这种方法排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        integerList.sort(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        integerList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Character&gt; characterList = Arrays.asList(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        characterList.sort(<span class="keyword">new</span> Comparator&lt;Character&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Character o1, Character o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        characterList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;fcd&quot;</span>, <span class="string">&quot;bfd&quot;</span>,<span class="string">&quot;Abd&quot;</span>);</span><br><span class="line">        stringList.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        stringList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; longList = Arrays.asList(<span class="number">111L</span>,<span class="number">332L</span>,<span class="number">22L</span>);</span><br><span class="line">        longList.sort(<span class="keyword">new</span> Comparator&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Long o1, Long o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        longList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Stream流操作"><a href="#Stream流操作" class="headerlink" title="Stream流操作"></a>Stream流操作</h3><p>通过Stream流操作会返回一个新的并且经过排序的List集合，具体步骤为：①创建要排序集合的流 ②进行排序 ③生成新集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Integer&gt; resultList = integerList</span><br><span class="line">                .stream()<span class="comment">//创建流</span></span><br><span class="line">                .sorted(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> o2 - o1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)<span class="comment">//排序,降序</span></span><br><span class="line">                .collect(Collectors.toList()); <span class="comment">//生成一个新的 List</span></span><br><span class="line">        resultList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>List对象集合排序</title>
    <url>/388.html</url>
    <content><![CDATA[<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-21 23:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="Collections-sort"><a href="#Collections-sort" class="headerlink" title="Collections.sort"></a>Collections.sort</h4><p>该方法有两个参数，参数一为要排序的对象集合，参数二为比较器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">&quot;atn&quot;</span>, <span class="number">14</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">&quot;bob&quot;</span>, <span class="number">11</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">5</span>, <span class="string">&quot;alex&quot;</span>, <span class="number">13</span>));</span><br><span class="line">        Collections.sort(studentList, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">            System.out.println(student.getId()+<span class="string">&quot;,&quot;</span>+student.getName()+<span class="string">&quot;,&quot;</span>+student.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="List-sort"><a href="#List-sort" class="headerlink" title="List.sort"></a>List.sort</h4><p>方法参数为比较器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">&quot;atn&quot;</span>, <span class="number">14</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">&quot;bob&quot;</span>, <span class="number">11</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">5</span>, <span class="string">&quot;alex&quot;</span>, <span class="number">13</span>));</span><br><span class="line">        studentList.sort(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">            System.out.println(student.getId()+<span class="string">&quot;,&quot;</span>+student.getName()+<span class="string">&quot;,&quot;</span>+student.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Stream流操作"><a href="#Stream流操作" class="headerlink" title="Stream流操作"></a>Stream流操作</h4><p>通过Stream流操作会返回一个新的并且经过排序的List集合，具体步骤为：①创建要排序集合的流 ②进行排序 ③生成新集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">&quot;atn&quot;</span>, <span class="number">14</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">&quot;bob&quot;</span>, <span class="number">11</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">5</span>, <span class="string">&quot;alex&quot;</span>, <span class="number">13</span>));</span><br><span class="line">        List&lt;Student&gt; resultList=studentList.stream().sorted(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getId()-o2.getId();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (Student student : resultList) &#123;</span><br><span class="line">            System.out.println(student.getId()+<span class="string">&quot;,&quot;</span>+student.getName()+<span class="string">&quot;,&quot;</span>+student.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实体类实现Comparable接口"><a href="#实体类实现Comparable接口" class="headerlink" title="实体类实现Comparable接口"></a>实体类实现Comparable接口</h4><p>实体类实现Comparable接口的compareTo方法，然后再使用Collections.sort方法（参数只有一个：要排序的集合）</p>
<blockquote>
<p>实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-21 23:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o.getId()-<span class="keyword">this</span>.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">&quot;atn&quot;</span>, <span class="number">14</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">&quot;bob&quot;</span>, <span class="number">11</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">5</span>, <span class="string">&quot;alex&quot;</span>, <span class="number">13</span>));</span><br><span class="line">        Collections.sort(studentList);</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">            System.out.println(student.getId()+<span class="string">&quot;,&quot;</span>+student.getName()+<span class="string">&quot;,&quot;</span>+student.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合Stream流操作常用方法</title>
    <url>/389.html</url>
    <content><![CDATA[<h3 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h3><p>要创建一个集合的流很简单，只需要在该集合的后面接上<code>.stream()</code>即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;atn&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&quot;leo&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stringStream = stringList.stream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="filter过滤"><a href="#filter过滤" class="headerlink" title="filter过滤"></a>filter过滤</h3><p>通过filter方法可以选出符合条件的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;atn&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&quot;leo&quot;</span>);</span><br><span class="line">        <span class="comment">//选出以&quot;al&quot;开头的元素</span></span><br><span class="line">        stringList.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;al&quot;</span>)).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="map处理元素"><a href="#map处理元素" class="headerlink" title="map处理元素"></a>map处理元素</h3><p>通过map方法可以对元素进行一些处理，下面的代码将所有字符串都转换成大写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;atn&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&quot;leo&quot;</span>);</span><br><span class="line">        <span class="comment">//将集合的所有字符串元素转换成大写</span></span><br><span class="line">        stringList.stream().map((Function&lt;String, Object&gt;) String::toUpperCase).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取指定数量元素"><a href="#获取指定数量元素" class="headerlink" title="获取指定数量元素"></a>获取指定数量元素</h3><p>通过limit方法可以获取指定数量的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;atn&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&quot;leo&quot;</span>);</span><br><span class="line">        <span class="comment">//只取前3个元素</span></span><br><span class="line">        stringList.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跳过指定下标前元素"><a href="#跳过指定下标前元素" class="headerlink" title="跳过指定下标前元素"></a>跳过指定下标前元素</h3><p>通过skip方法可以跳过指定下标前面的元素，即：将指定下标前面的元素删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;atn&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&quot;leo&quot;</span>);</span><br><span class="line">        <span class="comment">//跳过下标2前的元素,也就是下标0,1两个元素</span></span><br><span class="line">        stringList.stream().skip(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="计算元素个数"><a href="#计算元素个数" class="headerlink" title="计算元素个数"></a>计算元素个数</h3><p>使用count方法计算元素的个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;atn&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&quot;leo&quot;</span>);</span><br><span class="line">        <span class="comment">//选出以&quot;al&quot;开头的元素并计算元素的个数</span></span><br><span class="line">        Long count=stringList.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;al&quot;</span>)).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>通过sorted方法可以对集合进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;atn&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&quot;leo&quot;</span>);</span><br><span class="line">        <span class="comment">//将所有元素升序排序</span></span><br><span class="line">        stringList.stream().sorted(String::compareTo).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成新集合"><a href="#生成新集合" class="headerlink" title="生成新集合"></a>生成新集合</h3><p>通过collect方法可以生成一个新的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;atn&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&quot;leo&quot;</span>);</span><br><span class="line">        <span class="comment">//将所有元素升序排序后生成一个新的集合</span></span><br><span class="line">        List&lt;String&gt; resultList = stringList.stream().sorted(String::compareTo).collect(Collectors.toList());</span><br><span class="line">        resultList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成Object数组"><a href="#生成Object数组" class="headerlink" title="生成Object数组"></a>生成Object数组</h3><p>通过toArray方法生成Object数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-11-22 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;atn&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&quot;leo&quot;</span>);</span><br><span class="line">        <span class="comment">//将所有元素升序排序后生成数组</span></span><br><span class="line">        Object[] strings = stringList.stream().sorted(String::compareTo).toArray();</span><br><span class="line">        System.out.println(Arrays.toString(strings));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之插入排序</title>
    <url>/39.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ol>
<h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022132343.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] number = &#123;<span class="number">11</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    System.out.println(<span class="string">&quot;排序前：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : number) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp, j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; number.length; i++) &#123;</span><br><span class="line">        temp = number[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; number[j] &gt; temp; j--) &#123;</span><br><span class="line">            number[j + <span class="number">1</span>] = number[j];</span><br><span class="line">        &#125;</span><br><span class="line">        number[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;\n排序后：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : number) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022132757.jpg" alt="img"></p>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx绑定二级域名到指定端口</title>
    <url>/391.html</url>
    <content><![CDATA[<p>我的Nginx版本号为：1.20.2，配置文件路径为：/etc/nginx，在conf.d文件夹的conf.d文件中添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">blog</span> &#123;</span><br><span class="line">  <span class="comment">#绑定8080端口</span></span><br><span class="line">  <span class="string">server</span> <span class="string">localhost:8080;</span></span><br><span class="line">  <span class="comment">#集群</span></span><br><span class="line">  <span class="comment">#server localhost:8081;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span> </span><br><span class="line">    <span class="string">server_name</span>  <span class="string">www.zoutl.cn;</span> <span class="comment">#要绑定二级域名</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">        <span class="comment">#root   html;</span></span><br><span class="line">        <span class="comment">#index  index.html index.htm;</span></span><br><span class="line">      <span class="string">proxy_pass</span> <span class="string">http://blog;</span> <span class="comment">#要和指定的upstream相对应</span></span><br><span class="line">      <span class="string">proxy_connect_timeout</span> <span class="number">30</span><span class="string">;</span> <span class="comment">#连接超时 默认为60秒</span></span><br><span class="line">      <span class="string">proxy_read_timeout</span> <span class="number">30</span><span class="string">;</span> <span class="comment">#读取超时 默认为60秒</span></span><br><span class="line">      <span class="string">proxy_send_timeout</span> <span class="number">30</span><span class="string">;</span> <span class="comment">#发送超时 默认为60秒</span></span><br><span class="line">      <span class="string">access_log</span> <span class="string">off;</span></span><br><span class="line">      <span class="string">break;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="string">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  <span class="string">/50x.html;</span></span><br><span class="line">    <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> &#123;</span><br><span class="line">        <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将上面代码复制过来后，要修改的地方有三处：</p>
<ol>
<li>upstream的名称，以及upstream里的端口号</li>
<li>server下的server_name，server_name的值为二级域名</li>
<li>server下的location /的proxy_pass填<code>http://upstream的名称</code></li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA修改新建项目时Maven默认本地仓库地址</title>
    <url>/390.html</url>
    <content><![CDATA[<blockquote>
<p>打开idea的新建项目默认配置设置</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-07%20215724.jpg"></p>
<blockquote>
<p>修改默认的本地仓库地址，记得勾上Override</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-07%20220331.jpg"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置SSL证书</title>
    <url>/392.html</url>
    <content><![CDATA[<h3 id="添加访问规则"><a href="#添加访问规则" class="headerlink" title="添加访问规则"></a>添加访问规则</h3><p>在云服务器的安全组中的入方向添加访问规则，端口范围为：443/443，Nginx配置SSL证书需要监听这个端口</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-13%20233112.jpg"></p>
<h3 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h3><p>下载Nginx类型的SSL证书</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-13%20231016.jpg"></p>
<h3 id="解压证书"><a href="#解压证书" class="headerlink" title="解压证书"></a>解压证书</h3><p>解压后有两个文件，文件后缀名分别为：<code>.pem</code>和<code>.key</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-13%20231431.png"></p>
<h3 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h3><p>在Linux服务器的/etc/nginx/conf.d下创建cert目录，上传证书到刚刚创建的cert目录，记住文件路径</p>
<h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><p>在/etc/nginx/conf.d的default.conf配置文件添加以下代码：（upstream为反向代理的端口号，第一个server为反向代理配置，第二个server为SSl证书配置）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">blog</span> &#123;</span><br><span class="line">  <span class="string">server</span> <span class="string">localhost:8080;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span>  <span class="string">www.zoutl.cn;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">      <span class="string">proxy_pass</span> <span class="string">http://blog;</span></span><br><span class="line">      <span class="string">proxy_connect_timeout</span> <span class="number">30</span><span class="string">;</span> <span class="comment">#连接超时 默认为60秒</span></span><br><span class="line">      <span class="string">proxy_read_timeout</span> <span class="number">30</span><span class="string">;</span> <span class="comment">#读取超时 默认为60秒</span></span><br><span class="line">      <span class="string">proxy_send_timeout</span> <span class="number">30</span><span class="string">;</span> <span class="comment">#发送超时 默认为60秒</span></span><br><span class="line">      <span class="string">access_log</span> <span class="string">off;</span></span><br><span class="line">      <span class="string">break;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="string">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  <span class="string">/50x.html;</span></span><br><span class="line">    <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> &#123;</span><br><span class="line">        <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span> <span class="number">443</span> <span class="string">ssl;</span></span><br><span class="line">    <span class="string">server_name</span>  <span class="string">www.zoutl.cn;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">ssl_certificate</span> <span class="string">/etc/nginx/conf.d/cert/5564023_www.zoutl.cn.pem;</span>  <span class="comment">#需要将cert-file-name.pem替换成已上传的证书文件的名称。</span></span><br><span class="line">    <span class="string">ssl_certificate_key</span> <span class="string">/etc/nginx/conf.d/cert/5564023_www.zoutl.cn.key;</span> <span class="comment">#需要将cert-file-name.key替换成已上传的证书私钥文件的名称。</span></span><br><span class="line">    <span class="string">ssl_session_timeout</span> <span class="string">5m;</span></span><br><span class="line">    <span class="string">ssl_ciphers</span> <span class="string">ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span></span><br><span class="line">    <span class="comment">#表示使用的加密套件的类型。</span></span><br><span class="line">    <span class="string">ssl_protocols</span> <span class="string">TLSv1.1</span> <span class="string">TLSv1.2</span> <span class="string">TLSv1.3;</span> <span class="comment">#表示使用的TLS协议的类型。</span></span><br><span class="line">    <span class="string">ssl_prefer_server_ciphers</span> <span class="string">on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">      <span class="string">proxy_pass</span> <span class="string">http://www.zoutl.cn;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="string">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  <span class="string">/50x.html;</span></span><br><span class="line">    <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> &#123;</span><br><span class="line">        <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="验证证书"><a href="#验证证书" class="headerlink" title="验证证书"></a>验证证书</h3><p>在域名前加上<code>https://</code>，然后在浏览器地址栏输入即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-13%20232225.png"></p>
<h3 id="强制跳转https"><a href="#强制跳转https" class="headerlink" title="强制跳转https"></a>强制跳转https</h3><p>在反向代理配置中加上以下代码：（在server_name下添加即可）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">rewrite</span> <span class="string">^(.*)$</span> <span class="string">https://$host$1;</span> <span class="comment">#将所有HTTP请求通过rewrite指令重定向到HTTPS。</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>SSL证书</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx获取真实用户IP</title>
    <url>/393.html</url>
    <content><![CDATA[<h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>通过Nginx反向代理后，HttpServletRequest.getRemoteAddr()方法无法获取到用户的真实IP，只能获取到本机IP<code>127.0.0.1</code>，这是因为传入Java后端的是Nginx本机的IP</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>将用户的IP存储到Nginx的消息头，Java后端直接通过消息头获取用户真实的IP</p>
<h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><h4 id="Nginx将真实IP存储到消息头"><a href="#Nginx将真实IP存储到消息头" class="headerlink" title="Nginx将真实IP存储到消息头"></a>Nginx将真实IP存储到消息头</h4><p>在Nginx配置文件的http{}中加入以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面三行为重点，添加后就可以获取到客户端真实IP</span></span><br><span class="line"><span class="string">set_real_ip_from</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0;</span></span><br><span class="line"><span class="string">real_ip_header</span>  <span class="string">X-Forwarded-For;</span></span><br><span class="line"><span class="string">real_ip_recursive</span> <span class="string">on;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 下面三行为常见反向代理传递真实客户端IP的配置，配置在http&#123;&#125;中，则全局应用在下面的所有server中</span></span><br><span class="line"><span class="string">proxy_set_header</span> <span class="string">Host</span>      <span class="string">$host;</span></span><br><span class="line"><span class="string">proxy_set_header</span> <span class="string">X-Real-IP</span> <span class="string">$remote_addr;</span></span><br><span class="line"><span class="string">proxy_set_header</span> <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java获取真实IP"><a href="#Java获取真实IP" class="headerlink" title="Java获取真实IP"></a>Java获取真实IP</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-14 12:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddr</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String fromSource = <span class="string">&quot;X-Real-IP&quot;</span>;</span><br><span class="line">        String ip = request.getHeader(fromSource);</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装Elasticsearch5.5.2</title>
    <url>/394.html</url>
    <content><![CDATA[<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>下载地址为：<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-5-5-2">Elasticsearch 5.5.2 | Elastic</a>，下载tar版本的安装包</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-14%20215949.png"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装jre1-8"><a href="#安装jre1-8" class="headerlink" title="安装jre1.8"></a>安装jre1.8</h4><p>运行Elasticsearch5.5.2需要jre1.8及以上，安装jre过程查看博客：<a href="https://blog.zoutl.cn/154.html">CentOS7 安装和配置 jre1.8 | LeDao 的博客 (zoutl.cn)</a></p>
<h4 id="上传到Linux服务器"><a href="#上传到Linux服务器" class="headerlink" title="上传到Linux服务器"></a>上传到Linux服务器</h4><p>在/home目录下创建一个名称为es的目录，然后将下载好的文件上传到这个目录</p>
<h4 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h4><p>通过以下命令解压完成后，就已经安装完成了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf elasticsearch-5.5.2.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="新建用户并赋予权限"><a href="#新建用户并赋予权限" class="headerlink" title="新建用户并赋予权限"></a>新建用户并赋予权限</h4><p>新建一个用户<code>elastic</code>专门运行Elasticsearch，因为root用户一般不用来运行Elasticsearch的，输入以下三条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新建一个名为elastic的用户</span></span><br><span class="line">useradd elastic</span><br><span class="line"></span><br><span class="line"><span class="comment">#把目录权限赋予给elastic</span></span><br><span class="line">chown -R elastic:elastic /home/es/elasticsearch-5.5.2/</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换当前身份为elastic</span></span><br><span class="line">su elastic</span><br></pre></td></tr></table></figure>

<h4 id="第一次运行"><a href="#第一次运行" class="headerlink" title="第一次运行"></a>第一次运行</h4><p>输入以下命令运行Elasticsearch：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh /home/es/elasticsearch-5.5.2/bin/elasticsearch</span><br></pre></td></tr></table></figure>

<h4 id="可能出现的报错"><a href="#可能出现的报错" class="headerlink" title="可能出现的报错"></a>可能出现的报错</h4><blockquote>
<p>报错1</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-14%20222917.png"></p>
<p>之所以会报错，是因为Elasticsearch需要的运行内存过大（Elasticsearch默认需要的运行内存为2G，而我的虚拟机的运行内存也是2G，所以这个虚拟机是运行不了Elasticsearch的），解决办法：修改Elasticsearch默认需要的运行内存，该配置文件在<code>/home/es/elasticsearch-5.5.2/config</code>目录下，文件名称为<code>jvm.options</code>,我修改为128M（内存过小Elasticsearch会自动挂掉，所以还是将虚拟机内存修改为4G比较好）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-14%20221944.png"></p>
<blockquote>
<p>报错2</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-14%20235306.png"></p>
<p>关于<code>[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</code>的解决办法如下：（每个进程最大同时打开文件数太小）</p>
<p>切换到root用户</p>
<p>修改/etc/security/limits.conf文件，添加或修改如下行：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">*</span>               <span class="string">hard    nofile            65536</span></span><br><span class="line"><span class="meta">*</span>               <span class="string">soft    nofile            65536</span></span><br></pre></td></tr></table></figure>

<p>然后再切换到elastic用户，一定要切换，不然上面的配置不会立即生效，查看当前每个进程最大同时打开文件数的两个命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -Hn</span><br><span class="line"><span class="built_in">ulimit</span> -Sn</span><br></pre></td></tr></table></figure>

<p>关于<code>[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code>的解决办法如下：</p>
<p>切换root用户</p>
<ol>
<li><p>方法一：输入命令，<font color="#dd0000">不推荐使用此方法</font>，此方法只是临时有效，系统重启后就会失效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl -w vm.max_map_count=2621441</span><br></pre></td></tr></table></figure></li>
<li><p>方法二：修改/etc/sysctl.conf文件，增加配置<code>vm.max_map_count=262144</code>，保存后要执行下面一条命令让配置生效，<font color="#dd0000">推荐使用此方法</font>，系统重启后也有效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl -p /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-15%20024158.png"></p>
</li>
</ol>
<h4 id="再次运行"><a href="#再次运行" class="headerlink" title="再次运行"></a>再次运行</h4><p>切换到elastic用户，再次输入以下命令运行Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh /home/es/elasticsearch-5.5.2/bin/elasticsearch</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-14%20222158.png"></p>
<p>上面的命令是在前台运行Elasticsearch，一般都是在后台运行以方便进行其它操作，停止Elasticsearch使用快捷键<code>CTRL+C</code>，后台运行的命令如下：（也就是在之前的命令后面加上<code>-d</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh /home/es/elasticsearch-5.5.2/bin/elasticsearch -d</span><br></pre></td></tr></table></figure>

<p>使用以下命令查看Elasticsearch是否启动成功，出现下图的信息说明启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep elasticsearch</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-14%20223100.png"></p>
<h4 id="验证服务是否正常"><a href="#验证服务是否正常" class="headerlink" title="验证服务是否正常"></a>验证服务是否正常</h4><p>验证服务是否正常运行，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9200</span><br></pre></td></tr></table></figure>

<p>如果正常就会出现下图的信息</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-15%20001252.png"></p>
<h4 id="允许外网连接"><a href="#允许外网连接" class="headerlink" title="允许外网连接"></a>允许外网连接</h4><blockquote>
<p>修改配置</p>
</blockquote>
<p>在/home/es/elasticsearch-5.5.2/config/elasticsearch.yml中找到并修改下图的配置</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-15%20001818.png"></p>
<blockquote>
<p>重启Elasticsearch服务</p>
</blockquote>
<ol>
<li><p>查看Elasticsearch服务的进程号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep elasticsearch</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-15%20002636.png"></p>
</li>
<li><p>关闭进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 2328</span><br></pre></td></tr></table></figure></li>
<li><p>再次启动Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh /home/es/elasticsearch-5.5.2/bin/elasticsearch -d</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>关闭防火墙</p>
</blockquote>
<p>通过以下两条命令关闭防火墙并且设置开机不要启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁止开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在电脑上的浏览器输入<code>虚拟机IP:9200</code>，出现下图的结果说明外网连接成功</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-15%20002258.png"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果修改了配置不生效，那就切换一下当前身份：在root身份修改了配置后，再将当前身份切换到elastic身份</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现与Elasticsearch的连接</title>
    <url>/395.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>引入的依赖版本必须和正在运行的Elasticsearch版本一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-15 2:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String host = <span class="string">&quot;192.168.0.116&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9300</span>;</span><br><span class="line">        TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(host), port));</span><br><span class="line">        System.out.println(client);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>出现划红线的信息说明与Elasticsearch连接成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-15%20031243.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Java操作Elasticsearch</title>
    <url>/396.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>引入的依赖版本必须和正在运行的Elasticsearch版本一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><blockquote>
<p>连接Elasticsearch</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-15 2:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String host = <span class="string">&quot;192.168.0.116&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port = <span class="number">9300</span>;</span><br><span class="line">    <span class="keyword">private</span> TransportClient client = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作q获取连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClient</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        client = <span class="keyword">new</span> PreBuiltTransportClient(Settings.EMPTY)</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(host), port));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作索引关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>增加索引并且在这个索引下添加文档</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JsonObject jsonObject = <span class="keyword">new</span> JsonObject();</span><br><span class="line">    jsonObject.addProperty(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Java编程思想&quot;</span>);</span><br><span class="line">    jsonObject.addProperty(<span class="string">&quot;publishDate&quot;</span>, <span class="string">&quot;2012-11-23&quot;</span>);</span><br><span class="line">    jsonObject.addProperty(<span class="string">&quot;price&quot;</span>, <span class="number">88</span>);</span><br><span class="line">    IndexResponse indexResponse = client</span><br><span class="line">            .prepareIndex(<span class="string">&quot;book&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            .setSource(jsonObject.toString(), XContentType.JSON)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;索引名称:&quot;</span> + indexResponse.getIndex());</span><br><span class="line">    System.out.println(<span class="string">&quot;索引类型:&quot;</span> + indexResponse.getType());</span><br><span class="line">    System.out.println(<span class="string">&quot;文档id:&quot;</span> + indexResponse.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前状态:&quot;</span> + indexResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除索引</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DeleteResponse deleteResponse = client</span><br><span class="line">            .prepareDelete(<span class="string">&quot;book&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;索引名称:&quot;</span> + deleteResponse.getIndex());</span><br><span class="line">    System.out.println(<span class="string">&quot;索引类型:&quot;</span> + deleteResponse.getType());</span><br><span class="line">    System.out.println(<span class="string">&quot;文档id:&quot;</span> + deleteResponse.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前状态:&quot;</span> + deleteResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改索引的文档</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JsonObject jsonObject = <span class="keyword">new</span> JsonObject();</span><br><span class="line">    jsonObject.addProperty(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Java编程思想2&quot;</span>);</span><br><span class="line">    jsonObject.addProperty(<span class="string">&quot;publishDate&quot;</span>, <span class="string">&quot;2012-11-22&quot;</span>);</span><br><span class="line">    jsonObject.addProperty(<span class="string">&quot;price&quot;</span>, <span class="number">77</span>);</span><br><span class="line"></span><br><span class="line">    UpdateResponse updateResponse = client</span><br><span class="line">            .prepareUpdate(<span class="string">&quot;book&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            .setDoc(jsonObject.toString(), XContentType.JSON).get();</span><br><span class="line">    System.out.println(<span class="string">&quot;索引名称:&quot;</span> + updateResponse.getIndex());</span><br><span class="line">    System.out.println(<span class="string">&quot;索引类型:&quot;</span> + updateResponse.getType());</span><br><span class="line">    System.out.println(<span class="string">&quot;文档id:&quot;</span> + updateResponse.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前状态:&quot;</span> + updateResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查询索引文档</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    GetResponse getResponse = client.prepareGet(<span class="string">&quot;book&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;1&quot;</span>).get();</span><br><span class="line">    System.out.println(getResponse.getSourceAsString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装Git的最新版本</title>
    <url>/397.html</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>输入下面命令即可完成安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure>

<h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装Elasticsearch的head插件</title>
    <url>/398.html</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>安装Node.js，查看博客：<a href="https://blog.zoutl.cn/380.html">CentOS7 在线安装 Node.js | LeDao 的博客 (zoutl.cn)</a></li>
<li>安装Git，查看博客：<a href="https://blog.zoutl.cn/397.html">CentOS7 安装 Git 的最新版本 | LeDao 的博客 (zoutl.cn)</a></li>
</ol>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>输入以下命令即可完成克隆、安装、启动（<font color="#dd0000">安装使用cnpm命令而不是使用npm命令，不然可能会报错</font>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#克隆</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/mobz/elasticsearch-head.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入插件目录</span></span><br><span class="line"><span class="built_in">cd</span> elasticsearch-head</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">cnpm install</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动，用cnpm命令也可以</span></span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<h3 id="配置Elasticsearch"><a href="#配置Elasticsearch" class="headerlink" title="配置Elasticsearch"></a>配置Elasticsearch</h3><p>需要配置一下，才允许head插件访问Elasticsearch，打开Elasticsearch的conf目录的elasticsearch.yml，然后在最下面加上以下代码：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">http.cors.enabled</span>: <span class="string">true</span></span><br><span class="line"><span class="meta">http.cors.allow-origin</span>: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>重启Elasticsearch，再启动head插件，在浏览器地址栏输入：<code>http://虚拟机IP:9100</code>，而插件连接的地址为：<code>http://虚拟机IP:9200</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-15%20060901.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7使用安装包安装Node.js</title>
    <url>/399.html</url>
    <content><![CDATA[<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>有两种方式：</p>
<ol>
<li>下载到本地后再上传到虚拟机</li>
<li>复制下载链接后，虚拟机使用wget命令直接下载到虚拟机</li>
</ol>
<h4 id="下载后上传"><a href="#下载后上传" class="headerlink" title="下载后上传"></a>下载后上传</h4><p>下载地址：<a href="https://nodejs.org/en/download/">Download | Node.js (nodejs.org)</a>，直接点击下图的画红圈链接即可下载，然后上传到虚拟机</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-15%20051957.png"></p>
<h4 id="直接下载"><a href="#直接下载" class="headerlink" title="直接下载"></a>直接下载</h4><ol>
<li><p>复制安装包的链接</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-15%20051147.jpg"></p>
</li>
<li><p>使用Linux命令下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v16.13.1/node-v16.13.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xJf node-v16.13.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>打开/etc/profile，然后在最后加上以下代码：（路径要自己的，不要直接用我的）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Node.js环境</span></span><br><span class="line"><span class="attr">export</span> <span class="string">NODE_HOME=/home/data/node-v16.13.1-linux-x64</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$NODE_HOME/bin:$PATH</span></span><br></pre></td></tr></table></figure>

<p>执行下面一条命令让环境变量生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="安装淘宝镜像cnpm"><a href="#安装淘宝镜像cnpm" class="headerlink" title="安装淘宝镜像cnpm"></a>安装淘宝镜像cnpm</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>输入以下两条命令分别验证Node.js、npm和cnpm，有版本号说明安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#验证Node.js</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证npm</span></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证cnpm</span></span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>在线安装Node.js更方便，查看博客：<a href="https://blog.zoutl.cn/380.html">CentOS7 在线安装 Node.js | LeDao 的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之希尔排序</title>
    <url>/40.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ol>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1</li>
<li>按增量序列个数k，对序列进行k 趟排序</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度</li>
</ol>
<h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022204438.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">11</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        shellSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> step = arr.length / <span class="number">2</span>; step &gt; <span class="number">0</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                <span class="keyword">while</span> (j - step &gt;= <span class="number">0</span> &amp;&amp; arr[j - step] &gt; temp) &#123;</span><br><span class="line">                    arr[j] = arr[j - step];</span><br><span class="line">                    j = j - step;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022205809.jpg" alt="img"></p>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>常用cron表达式</title>
    <url>/4.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>*/5 * * * * ?</strong></td>
<td align="center">表示每5秒触发</td>
</tr>
<tr>
<td align="center"><strong>0 */1 * * * ?</strong></td>
<td align="center">表示每隔1分钟执行一次</td>
</tr>
<tr>
<td align="center"><strong>0 0 23 * * ?</strong></td>
<td align="center">表示每天23点执行一次</td>
</tr>
<tr>
<td align="center"><strong>0 0 2 1 * ? *</strong></td>
<td align="center">表示在每月的1日的凌晨2点调整任务</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 ? * MON-FRI</strong></td>
<td align="center">表示周一到周五每天上午10:15执行作业</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 ? 6L 2002-2006</strong></td>
<td align="center">表示2002-2006年的每个月的最后一个星期五上午10:15执行</td>
</tr>
<tr>
<td align="center"><strong>0 0 10,14,16 * * ?</strong></td>
<td align="center">每天上午10点，下午2点，4点</td>
</tr>
<tr>
<td align="center"><strong>0 0/30 9-17 * * ?</strong></td>
<td align="center">朝九晚五工作时间内每半小时</td>
</tr>
<tr>
<td align="center"><strong>0 0 12 ? * WED</strong></td>
<td align="center">表示每个星期三中午12点</td>
</tr>
<tr>
<td align="center"><strong>0 0 12 * * ?</strong></td>
<td align="center">每天中午12点触发</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 ? * *</strong></td>
<td align="center">每天上午10:15触发</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 * * ? 2005</strong></td>
<td align="center">2005年的每天上午10:15触发</td>
</tr>
<tr>
<td align="center"><strong>0 * 14 * * ?</strong></td>
<td align="center">在每天下午2点到下午2:59期间的每1分钟触发</td>
</tr>
<tr>
<td align="center"><strong>0 0/5 14 * * ?</strong></td>
<td align="center">在每天下午2点到下午2:55期间的每5分钟触发</td>
</tr>
<tr>
<td align="center"><strong>0 0/5 14,18 * * ?</strong></td>
<td align="center">在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</td>
</tr>
<tr>
<td align="center"><strong>0 0-5 14 * * ?</strong></td>
<td align="center">在每天下午2点到下午2:05期间的每1分钟触发</td>
</tr>
<tr>
<td align="center"><strong>0 10,44 14 ? 3 WED</strong></td>
<td align="center">每年三月的星期三的下午2:10和2:44触发</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 ? * MON-FRI</strong></td>
<td align="center">周一至周五的上午10:15触发</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 15 * ?</strong></td>
<td align="center">每月15日上午10:15触发</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 L * ?</strong></td>
<td align="center">每月最后一日的上午10:15触发</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 ? * 6L</strong></td>
<td align="center">每月的最后一个星期五上午10:15触发</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 ? * 6L 2002-2005</strong></td>
<td align="center">2002年至2005年的每月的最后一个星期五上午10:15触发</td>
</tr>
<tr>
<td align="center"><strong>0 15 10 ? * 6#3</strong></td>
<td align="center">每月的第三个星期五上午10:15触发</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch的head插件基本操作</title>
    <url>/401.html</url>
    <content><![CDATA[<h3 id="增加索引"><a href="#增加索引" class="headerlink" title="增加索引"></a>增加索引</h3><h4 id="在复合查询页添加"><a href="#在复合查询页添加" class="headerlink" title="在复合查询页添加"></a>在复合查询页添加</h4><p>查询链接填：<code>http://192.168.0.116:9200/student/</code>，192.168.0.116是虚拟机的IP地址，9200是Elasticsearch对外开放的端口，student是索引的名称</p>
<p>提交方式选择：<code>PUT</code></p>
<p>最后点击<code>提交请求</code>按钮即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-17%20152531.png"></p>
<h4 id="在索引页添加"><a href="#在索引页添加" class="headerlink" title="在索引页添加"></a>在索引页添加</h4><p>在索引页点击新建索引按钮，在弹出框输入索引名称、分片数、副本数，然后点击OK键即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-17%20154357.png"></p>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>在概览页的指定索引的动作中选中删除，然后在弹出框输入<code>删除</code>，然后确定即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-17%20163251.png"></p>
<h3 id="关闭索引"><a href="#关闭索引" class="headerlink" title="关闭索引"></a>关闭索引</h3><p>在概览页的指定索引的动作中选中关闭</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-18%20230838.png"></p>
<h3 id="给索引添加和修改文档"><a href="#给索引添加和修改文档" class="headerlink" title="给索引添加和修改文档"></a>给索引添加和修改文档</h3><p>在复合查询页的查询选项输入链接：<code>http://192.168.0.116:9200/book/java/3/</code>，提交方式选择POST，链接详解如下表：</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">192.168.0.116</td>
<td align="center">虚拟机IP</td>
</tr>
<tr>
<td align="center">9200</td>
<td align="center">Elasticsearch对外开放的端口号</td>
</tr>
<tr>
<td align="center">book</td>
<td align="center">索引名称</td>
</tr>
<tr>
<td align="center">java</td>
<td align="center">索引类型</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">文档的id</td>
</tr>
</tbody></table>
<p>如果文档id在Elasticsearch中不存在就添加文档，存在就是修改文档</p>
<p>添加或修改的文档内容应当使用JSON格式，如下：（输入JSON串后可以点击<code>验证JSON</code>按钮可以验证输入的JSON串是否正确）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;JVM实战&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publishDate&quot;</span>: <span class="string">&quot;2021-12-12&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">88</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询索引文档"><a href="#查询索引文档" class="headerlink" title="查询索引文档"></a>查询索引文档</h3><p>在复合查询页的查询选项输入链接：<code>http://192.168.0.116:9200/book/java/3/</code>，提交方式选择GET，查询条件不用填直接提交请求即可</p>
<h3 id="删除索引文档"><a href="#删除索引文档" class="headerlink" title="删除索引文档"></a>删除索引文档</h3><p>在复合查询页的查询选项输入链接：<code>http://192.168.0.116:9200/book/java/3/</code>，提交方式选择DELETE，查询条件不用填直接提交请求即可</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Java将Markdown转化为HTML</title>
    <url>/402.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.atlassian.commonmark/commonmark --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commonmark<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.commonmark.node.Node;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.parser.Parser;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.renderer.html.HtmlRenderer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-18 21:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownToHtmlUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">convert</span><span class="params">(String md)</span></span>&#123;</span><br><span class="line">        Parser parser=Parser.builder().build();</span><br><span class="line">        Node document = parser.parse(md);</span><br><span class="line">        HtmlRenderer htmlRenderer=HtmlRenderer.builder().build();</span><br><span class="line">        <span class="keyword">return</span> htmlRenderer.render(document);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(convert(<span class="string">&quot;### 111&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-18%20222611.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Typora自动上传图片到又拍云</title>
    <url>/403.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>我使用Typora写博客，使用的图床是又拍云云存储。博客用到的图片就需要先把图片上传至又拍云（打开又拍云上传的过程很繁琐），然后在博客中使用。如果可以在使用Typora写博客引用本地图片时，直接上传至又拍云就很方便了</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装和配置PicGo"><a href="#安装和配置PicGo" class="headerlink" title="安装和配置PicGo"></a>安装和配置PicGo</h4><blockquote>
<p>下载与安装</p>
</blockquote>
<p>下载地址为：<a href="https://molunerfinn.com/PicGo/">PicGo (molunerfinn.com)</a>，下载完成后，直接安装到指定位置即可</p>
<blockquote>
<p>PicGo配置又拍云存储路径</p>
</blockquote>
<ol>
<li><p>需要配置的PicGo参数如下图所示，前4个必须设置，最后一个为存储图片的路径（如果不设置就上传根目录），<font color="#dd0000">这些参数的获取步骤继续看下面的步骤</font></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-23%20002255.png"></p>
</li>
<li><p>创建自己的云存储服务，下图的服务名称就是设定存储空间名，本步骤可以获取<code>设定存储空间名</code>和<code>设定加速域名</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-23%20001717.png"></p>
</li>
<li><p>打开云存储服务的配置后，选择存储管理标签页，在页面的最下面添加云存储的操作员，操作员的权限只选择<code>可写入</code>即可，本步骤可以获取<code>操作员</code>以及<code>操作员密码</code></p>
<p>步骤一：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-23%20002907.png"></p>
<p>步骤二：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-23%20003718.png"></p>
</li>
<li><p>指定存储路径不填就上传到云存储服务的根目录，如果是根目录下的文件夹就填<code>文件夹名称/</code>，如果是根目录文件夹内的文件夹就填<code>文件夹名称/文件夹名称/</code>，以此类推，此步骤可以获取<code>指定存储路径</code></p>
</li>
<li><p>这个时候就可以在PicGo的上传区上传图片到又拍云了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-23%20005327.png"></p>
</li>
</ol>
<h4 id="Typora配置本地PicGo程序"><a href="#Typora配置本地PicGo程序" class="headerlink" title="Typora配置本地PicGo程序"></a>Typora配置本地PicGo程序</h4><p>打开Typora的偏好设置的图像设置，然后依次配置下图划红线的五处即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-23%20005629.png" alt="2021-12-23 005629"></p>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>Typora引用本地图片后，就会上传到又拍云，并且引用的路径也改为又拍云的</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>Typora上传图片时，一定要先运行PicGo程序；如果没有运行PicGo程序，Typora会自动启动PicGo程序，总之，图片上传失败一般都是因为PicGo程序（PicGo程序未启动、PicGo程序的图床配置不正确）</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>又拍云</tag>
      </tags>
  </entry>
  <entry>
    <title>Java压缩图片</title>
    <url>/405.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.coobird/thumbnailator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.coobird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thumbnailator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.coobird.thumbnailator.Thumbnails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-15 2:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;E://lucene/1.jpg&quot;</span>);</span><br><span class="line">        Thumbnails.of(file).scale(<span class="number">1f</span>).outputQuality(<span class="number">0.5f</span>).toFile(<span class="string">&quot;E://lucene/2.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p><code>of</code>的参数是原图的路径</p>
<p><code>scale</code>的参数是图片的大小，值在0到1之间，1f就是原图大小，0.5就是原图的一半大小，这里的大小是指图片的长宽</p>
<p><code>outputQuality</code>的参数是图片的质量，值也是在0到1，越接近于1质量越好，越接近于0质量越差</p>
<p><code>toFile</code>的参数是压缩后的图片路径</p>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>从下图可以看出，2.jpg的大小被压缩了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-23%20023358.png" alt="2021-12-23 023358"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java上传图片到又拍云</title>
    <url>/406.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.upyun/java-sdk --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.upyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="获取又拍云的配置信息"><a href="#获取又拍云的配置信息" class="headerlink" title="获取又拍云的配置信息"></a>获取又拍云的配置信息</h4><p>要获取云存储的服务名称、操作员的用户名、操作员的密码，获取方法查看博客：<a href="https://blog.zoutl.cn/403.html">实现 Typora 自动上传图片到又拍云 | LeDao 的博客 (zoutl.cn)</a></p>
<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.upyun.RestManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-15 2:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//本地图片</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;E://lucene/1.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//参数一为云存储的服务名称、参数二为操作员的用户名、参数三为操作员的密码</span></span><br><span class="line">        RestManager restManager = <span class="keyword">new</span> RestManager(<span class="string">&quot;ledao3&quot;</span>, <span class="string">&quot;java22&quot;</span>, <span class="string">&quot;hpX6eBSoBYUMs9KCxUim0h&quot;</span>);</span><br><span class="line">        <span class="comment">//第一个参数为上传的文件夹以及最终文件名（最终文件名的后缀名要和本地上传的一样），第二个参数为本地图片的路径，第三个参数为图片上传的参数</span></span><br><span class="line">        restManager.writeFile(<span class="string">&quot;/test/2.jpg&quot;</span>, file, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>去又拍云指定文件夹中查看，可以看到图片已经上传成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-23%20143520.png"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>更多文件或文件夹操作查看官方文档：<a href="http://docs.upyun.com/api/sdk/#java-sdk">又拍云文档中心 (upyun.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>又拍云</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数组排序</title>
    <url>/407.html</url>
    <content><![CDATA[<h3 id="升序排序"><a href="#升序排序" class="headerlink" title="升序排序"></a>升序排序</h3><blockquote>
<p>使用Arrays工具类的sort方法，只有一个参数，参数为要排序的数组</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-15 2:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="降序排序"><a href="#降序排序" class="headerlink" title="降序排序"></a>降序排序</h3><blockquote>
<p>使用Arrays工具类的sort方法，有两个参数，参数一为要排序的数组，参数二为比较器（Collections.reverseOrder()方法返回的比较器），<font color="#dd0000">注意数组的类型为Integer而不是int</font></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-15 2:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] nums = <span class="keyword">new</span> Integer[]&#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        Arrays.sort(nums, Collections.reverseOrder());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用Arrays工具类的sort方法，有两个参数，参数一为要排序的数组，参数二为比较器（搞一个Comparator的匿名内部类，且重写compare方法），<font color="#dd0000">注意数组的类型为Integer而不是int</font></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-15 2:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] nums = <span class="keyword">new</span> Integer[]&#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//o2在前就是降序排序</span></span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(nums, comparator);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java获取程序运行时间</title>
    <url>/408.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>有时候我们需要获取某段代码的运行时间，以便和修改后的代码对比，看看新代码的性能是否得到提升</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>具体解决方法为，在执行该段代码<font color="#dd0000">前</font>获取当前时间，执行完该段代码<font color="#dd0000">后</font>再次获取当前时间，后面的时间减去前面的时间即可得到程序运行的时间，时间单位越小越精确</p>
<p>获取当前时间一般有两种方式：</p>
<ol>
<li><p>以毫秒为单位</p>
<p>使用System.currentTimeMillis()</p>
</li>
<li><p>以纳秒为单位</p>
<p>使用System.nanoTime()</p>
</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="以毫秒为单位"><a href="#以毫秒为单位" class="headerlink" title="以毫秒为单位"></a>以毫秒为单位</h4><blockquote>
<p>Java代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-15 2:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;程序运行时间为:&quot;</span> + (endTime - startTime)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-26%20211552.jpg"></p>
<h4 id="以纳秒为单位"><a href="#以纳秒为单位" class="headerlink" title="以纳秒为单位"></a>以纳秒为单位</h4><blockquote>
<p>Java代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-12-15 2:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;程序运行时间为:&quot;</span> + (endTime - startTime) + <span class="string">&quot;纳秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-12-26%20211735.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA配置远程调试</title>
    <url>/409.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>所谓远程调试，是指将Java项目打包成war或者jar包并且部署后，在idea中进行调试</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="idea配置远程JVM调试"><a href="#idea配置远程JVM调试" class="headerlink" title="idea配置远程JVM调试"></a>idea配置远程JVM调试</h4><blockquote>
<p>打开添加配置界面</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-02%20153831.jpg"></p>
<blockquote>
<p>选择Remote JVM Debug</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-02%20150353.jpg"></p>
<blockquote>
<p>填写相关配置</p>
</blockquote>
<p>Name随意填写，Host填运行Java项目的服务器IP，Post填项目所在端口号，Use moudule classpath选择调试的项目模块，其它的配置和下图一样即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-02%20150737.jpg"></p>
<h4 id="配置远程调试接口"><a href="#配置远程调试接口" class="headerlink" title="配置远程调试接口"></a>配置远程调试接口</h4><p>Java项目打包有两种方式：①war包 ②jar包，所以配置方式也不同</p>
<blockquote>
<p>当项目打包成war包</p>
</blockquote>
<p>修改Tomcat的bin文件夹的catalina.sh，在下图的位置添加以下代码：（调试端口为5005，<font color="#dd0000">记得开放防火墙的5005端口，如果是云服务器还需要配置安全组规则</font>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-02%20155029.png"></p>
<blockquote>
<p>当项目打包成jar包，使用以下命令部署项目</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=5005 web.jar</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>运行好项目后，选择刚刚配置好的Debug服务，然后点击Debug按钮即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-02%20155502.jpg"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA提交代码到GitHub报错：Push to origin/master was rejected的解决办法</title>
    <url>/410.html</url>
    <content><![CDATA[<h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>远程仓库和本地仓库的内容不一致</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote>
<p>打开<code>Git Bash</code>命令，进入本地仓库对应的项目文件夹（即：<code>.git</code>文件夹所在目录，右击项目文件夹选择<code>Git Bash Here</code>）</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-03%20230839.jpg"></p>
<blockquote>
<p>输入以下命令：（可能会打开一个文件，输入<code>:q</code>并按回车键退出即可）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后重新push到GitHub即可</p>
</blockquote>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>这个错误是可以避免的，只要不直接修改远程库的文件即可。如果要修改就去修改本地仓库的文件，然后push到远程库</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之归并排序</title>
    <url>/41.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><ol>
<li><p>把长度为n的输入序列分成两个长度为n/2的子序列</p>
</li>
<li><p>对这两个子序列分别采用归并排序</p>
</li>
<li><p>将两个排序好的子序列合并成一个最终的排序序列</p>
</li>
</ol>
<h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022214845.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 归并排序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">44</span>,<span class="number">23</span>,<span class="number">67</span>,<span class="number">88</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">48</span>,<span class="number">9</span>,<span class="number">12</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//新建一个临时数组存放</span></span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        mergeSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>,tmp);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> mid,<span class="keyword">int</span> high,<span class="keyword">int</span>[] tmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//左边序列和右边序列起始索引</span></span><br><span class="line">        <span class="keyword">int</span> j = low,k = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= mid &amp;&amp; k &lt;= high)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[k])&#123;</span><br><span class="line">                tmp[i++] = arr[j++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tmp[i++] = arr[k++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若左边序列还有剩余，则将其全部拷贝进tmp[]中</span></span><br><span class="line">        <span class="keyword">while</span>(j &lt;= mid)&#123;</span><br><span class="line">            tmp[i++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(k &lt;= high)&#123;</span><br><span class="line">            tmp[i++] = arr[k++];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;i;t++)&#123;</span><br><span class="line">            arr[low+t] = tmp[t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">int</span>[] tmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//对左边序列进行归并排序</span></span><br><span class="line">            mergeSort(arr,low,mid,tmp);</span><br><span class="line">            <span class="comment">//对右边序列进行归并排序</span></span><br><span class="line">            mergeSort(arr,mid+<span class="number">1</span>,high,tmp);</span><br><span class="line">            <span class="comment">//合并两个有序序列</span></span><br><span class="line">            merge(arr,low,mid,high,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022215330.jpg" alt="img"></p>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>解决：GitHub将Java项目判断为JavaScript项目</title>
    <url>/411.html</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>GitHub判断项目类型，主要是通过分析什么类型的文件占比最高，例如：如果JavaScript文件占比最高则GitHub就会认定项目为JavaScript项目</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote>
<p>在本地仓库新建一个名称为<code>.gitattributes</code>的文件，文件内容如下：</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">*.js</span> <span class="string">linguist-language=java</span></span><br><span class="line"><span class="meta">*.css</span> <span class="string">linguist-language=java</span></span><br><span class="line"><span class="meta">*.html</span> <span class="string">linguist-language=java</span></span><br><span class="line"><span class="meta">*.jsp</span> <span class="string">linguist-language=java</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后push到GitHub即可</p>
</blockquote>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>不要直接在GitHub仓库新建这个文件，不然后期提交会造成：远程仓库和本地仓库的内容不一致（报错：Push to origin/master was rejected），这个报错的解决办法查看博客：<a href="https://blog.zoutl.cn/410.html">idea 提交代码到 GitHub 报错：Push to origin/master was rejected | LeDao 的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA执行Maven命令时报错：No valid Maven installation found. Either set the homedirectory in the configuration dialog or set the M2_HOME environment variable on your system.的解决办法</title>
    <url>/412.html</url>
    <content><![CDATA[<h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>idea配置的Maven安装路径和实际的不符</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>打开idea设置的Maven配置，修改<code>Maven home path</code>为本机的Maven安装路径即可（一定要是bin文件夹的上层目录）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-06%20221445.jpg" alt="2022-01-06 221445"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Ajax无法给请求方法外面的变量赋值</title>
    <url>/413.html</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>$.ajax默认是异步的， 异步回调在js主线程执行结束后才会被执行</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p> 如果确实需要获取ajax的结果赋值给请求方法外面的变量，那么可以ajax多加一个参数：<code>async=false</code>，就会同步执行</p>
<h3 id="Ajax完整请求代码"><a href="#Ajax完整请求代码" class="headerlink" title="Ajax完整请求代码"></a>Ajax完整请求代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkRegisterValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> imageCode;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/getRegisterCode&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (result.success) &#123;</span><br><span class="line">                imageCode = result.imageCode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus更新字段时无法设置为null值</title>
    <url>/414.html</url>
    <content><![CDATA[<h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>我们在更新某个用户信息时，如果要将该用户信息的某个字段更新为null值，直接设置用户实体的对应属性为null值是不行的，因为MyBatis-Plus默认看到null值就不更新该字段</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在实体类的对应属性上添加注解<code>@TableField(updateStrategy = FieldStrategy.IGNORED)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 留言实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-12 13:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_contact&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 留言内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 答复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(updateStrategy = FieldStrategy.IGNORED)</span></span><br><span class="line">    <span class="keyword">private</span> String reply;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 留言时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date time;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 留言用户id（普通用户）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;userId&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回复用户id（管理员）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;userIdReply&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userIdReply;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>改变Windows系统文件夹的样式及颜色</title>
    <url>/415.html</url>
    <content><![CDATA[<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><h4 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h4><p>百度网盘链接：<a href="https://pan.baidu.com/s/1wiMAMEtUgJ_lQyqo-izIMA">https://pan.baidu.com/s/1wiMAMEtUgJ_lQyqo-izIMA</a></p>
<p>提取码：<code>n0vf</code></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>解压后即可运行，解压后的文件夹有两个exe可执行文件：FolderPainter.exe和FolderPainter_x64.exe，64位系统使用FolderPainter_x64.exe，其它使用FolderPainter_x64.exe</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-15%20112414.png"></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="设置软件语言为中文"><a href="#设置软件语言为中文" class="headerlink" title="设置软件语言为中文"></a>设置软件语言为中文</h4><p>打开软件后，依次选择右下角的Menu、Languages、Chinese-Simplified即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-15%20112627.png" alt="2022-01-15 112627"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-15%20112558.png" alt="2022-01-15 112558"></p>
<h4 id="安装颜色、样式、图标"><a href="#安装颜色、样式、图标" class="headerlink" title="安装颜色、样式、图标"></a>安装颜色、样式、图标</h4><p>要安装哪个就在左侧的选择框中给哪个打勾（下图只安装了颜色），然后点击安装即可（卸载的方法也一样）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-15%20113019.png"></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>右键点击某个文件夹，然后选择<code>文件夹颜色</code>再选中自己喜欢的颜色即可，如果要恢复原状就选中<code>默认文件夹图标</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-15%20113447.png"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Thymeleaf在一个页面嵌入另一个页面</title>
    <url>/416.html</url>
    <content><![CDATA[<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>向一个页面嵌入其它页面的情况一般有两种：</p>
<ol>
<li><p>被嵌入页面的名称不确定</p>
<p>这种情况需要后端的介入，被嵌入页面的名称由后端传入，一般情况下使用Thymeleaf的项目都有一个主页面（要嵌入其它页面的页面，通常命名为index.html），我们可以在主页面上引入各种CSS、JS文件，被嵌入的页面也可以使用这些CSS、JS文件，这样做的好处是：统一管理CSS、JS文件</p>
</li>
<li><p>被嵌入页面的名称已确定</p>
<p>这种情况不需要后端，被嵌入页面的名称直接写在要嵌入页面的页面上，如果多个页面上都有一部分代码是相同的，那么我们就可以将相同的代码抽取出来放到一个新页面上（也就是被嵌入的页面），然后在要嵌入的页面上嵌入新页面即可，这样做的好处是：使用嵌入页面前如果需要修改就要修改多个地方，而使用嵌入页面后只需要修改一个地方即可</p>
</li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="名称不确定"><a href="#名称不确定" class="headerlink" title="名称不确定"></a>名称不确定</h4><blockquote>
<p>主页面index.html（要嵌入页面的页面）</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--suppress ALL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;title&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;short icon&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/images/favicon.ico&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/css/hint.css&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/popper.js/1.15.0/umd/popper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/my.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/ckeditor/ckeditor.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 92%;margin-left: 4%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;$&#123;mainPage&#125;::$&#123;mainPageKey&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>登录页面login.html（被嵌入的页面）</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--suppress ALL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>java代码</p>
</blockquote>
<p>mainPage为被嵌入页面路径及名称，mainPageKey为被嵌入页面的<code>&lt;div&gt;</code>标签的id，index为主页面index.html的名称（省略后缀名即可）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转到用户登录界面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toLoginPage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">toLoginPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mav.addObject(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;用户登录--LeDao校园二手交易平台&quot;</span>);</span><br><span class="line">    mav.addObject(<span class="string">&quot;mainPage&quot;</span>, <span class="string">&quot;page/login&quot;</span>);</span><br><span class="line">    mav.addObject(<span class="string">&quot;mainPageKey&quot;</span>, <span class="string">&quot;#b&quot;</span>);</span><br><span class="line">    mav.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="名称已确定"><a href="#名称已确定" class="headerlink" title="名称已确定"></a>名称已确定</h4><blockquote>
<p>要嵌入页面的页面（menuPersonalHubs为被嵌入页面的名称）</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--suppress ALL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 5px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;common/menuPersonalHubs::#m&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>menuPersonalHubs.html（被嵌入的页面）</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--suppress ALL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;m&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>被嵌入页面的<code>&lt;div&gt;</code>标签的id一定要和实际的对应哦，不然会出错</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Thymeleaf的项目搜索时回显搜索的条件</title>
    <url>/417.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>搜索后的新页面，一般情况下搜索条件的值都会被设置为空，但是如果想修改上一次搜索的条件再搜索，就需要获取到上一次的搜索条件</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><blockquote>
<p>HTML代码（只有搜索form标签的代码，显示数据的代码已删除）</p>
</blockquote>
<p><code>th:value</code>获取上一次搜索条件的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/toGoodsManagePage&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 3px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nameSearchGoods&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">th:value</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">placeholder</span>=<span class="string">&quot;请输入商品名称...&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;goodsTypeIdSearchGoods&quot;</span> <span class="attr">name</span>=<span class="string">&quot;goodsTypeId&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;goodsTypeId&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;width: 200px;margin-left: 2px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择商品类别...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;goodsType:$&#123;goodsTypeList&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;goodsType.name&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;goodsType.id&#125;&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;goodsTypeId==goodsType.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;stateSearchGoods&quot;</span> <span class="attr">name</span>=<span class="string">&quot;state&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;state&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;margin-left: 2px&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择商品状态...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;state==0&#125;&quot;</span>&gt;</span>未审核<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;state==1&#125;&quot;</span>&gt;</span>上架中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;state==2&#125;&quot;</span>&gt;</span>审核不通过<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;state==3&#125;&quot;</span>&gt;</span>已下架<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;state==4&#125;&quot;</span>&gt;</span>交易完成<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;isRecommendSearchGoods&quot;</span> <span class="attr">name</span>=<span class="string">&quot;isRecommend&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;recommend&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;margin-left: 2px&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>商品是否被推荐...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;recommend==0&#125;&quot;</span>&gt;</span>不推荐<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;recommend==1&#125;&quot;</span>&gt;</span>被推荐<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary status-icon hint--top&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 2px&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:resetSearchGoodsValue()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info status-icon hint--top&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;重置&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 2px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-rotate-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Java代码（只保留了向页面传值的代码，其它业务代码已删除）</p>
</blockquote>
<p><code>ModelAndView.addObject(String 参数一,String 参数二)</code>方法向页面传值，参数一为键，参数二为值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转到我的商品管理界面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toGoodsManagePage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">toGoodsManagePage</span><span class="params">(HttpSession session, Goods searchGoods)</span> </span>&#123;</span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="keyword">if</span> (searchGoods.getName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        goodsQueryWrapper.like(<span class="string">&quot;name&quot;</span>, searchGoods.getName());</span><br><span class="line">        mav.addObject(<span class="string">&quot;name&quot;</span>, searchGoods.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (searchGoods.getGoodsTypeId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        goodsQueryWrapper.eq(<span class="string">&quot;goodsTypeId&quot;</span>, searchGoods.getGoodsTypeId());</span><br><span class="line">        mav.addObject(<span class="string">&quot;goodsTypeId&quot;</span>, searchGoods.getGoodsTypeId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (searchGoods.getState() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        goodsQueryWrapper.eq(<span class="string">&quot;state&quot;</span>, searchGoods.getState());</span><br><span class="line">        mav.addObject(<span class="string">&quot;state&quot;</span>, searchGoods.getState());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (searchGoods.getIsRecommend() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        goodsQueryWrapper.eq(<span class="string">&quot;isRecommend&quot;</span>, searchGoods.getIsRecommend());</span><br><span class="line">        mav.addObject(<span class="string">&quot;recommend&quot;</span>, searchGoods.getIsRecommend());</span><br><span class="line">    &#125;</span><br><span class="line">    mav.addObject(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;我的商品管理--LeDao校园二手交易平台&quot;</span>);</span><br><span class="line">    mav.addObject(<span class="string">&quot;mainPage&quot;</span>, <span class="string">&quot;page/goodsManage&quot;</span>);</span><br><span class="line">    mav.addObject(<span class="string">&quot;mainPageKey&quot;</span>, <span class="string">&quot;#b&quot;</span>);</span><br><span class="line">    mav.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p> <script type="text/javascript">    CKEDITOR.replace("contentGoods", {height: '240px', width: '100%'});</script>javascript</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>CKEditor设置编辑器的宽度以及高度</title>
    <url>/418.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>设置CKEditor编辑器宽度和高度的方法有两种：</p>
<ol>
<li>设置textarea标签的宽度和高度</li>
<li>在CKEditor替换textarea的JavaScript代码中设置</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="设置textarea标签的宽度和高度"><a href="#设置textarea标签的宽度和高度" class="headerlink" title="设置textarea标签的宽度和高度"></a>设置textarea标签的宽度和高度</h4><p>rows属性是高度，cols属性是宽度，它们的值没有单位</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;30&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在CKEditor替换textarea的JavaScript代码中设置"><a href="#在CKEditor替换textarea的JavaScript代码中设置" class="headerlink" title="在CKEditor替换textarea的JavaScript代码中设置"></a>在CKEditor替换textarea的JavaScript代码中设置</h4><p><font color="#dd0000">如果上面的方法没有用，就使用此方法</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    CKEDITOR.replace(<span class="string">&quot;contentGoods&quot;</span>, &#123;<span class="attr">height</span>: <span class="string">&#x27;240px&#x27;</span>, <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CKEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之快速排序</title>
    <url>/42.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ol>
<li>从数列中挑出一个元素，称为 “基准”（pivot）</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序</li>
</ol>
<h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022220112.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">19</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,temp,t;</span><br><span class="line">        <span class="keyword">if</span>(low&gt;high)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i=low;</span><br><span class="line">        j=high;</span><br><span class="line">        <span class="comment">//temp就是基准位</span></span><br><span class="line">        temp = arr[low];</span><br><span class="line">        <span class="keyword">while</span> (i&lt;j) &#123;</span><br><span class="line">            <span class="comment">//先看右边，依次往左递减</span></span><br><span class="line">            <span class="keyword">while</span> (temp&lt;=arr[j]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//再看左边，依次往右递增</span></span><br><span class="line">            <span class="keyword">while</span> (temp&gt;=arr[i]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果满足条件则交换</span></span><br><span class="line">            <span class="keyword">if</span> (i&lt;j) &#123;</span><br><span class="line">                t = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后将基准为与i和j相等位置的数字交换</span></span><br><span class="line">        arr[low] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">        <span class="comment">//递归调用左半数组</span></span><br><span class="line">        quickSort(arr, low, j-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//递归调用右半数组</span></span><br><span class="line">        quickSort(arr, j+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022220552.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML取消页面的左右滚动条</title>
    <url>/419.html</url>
    <content><![CDATA[<p>要取消滚动条，只需要将<code>&lt;body&gt;</code>标签样式的overflow-x或overflow-y设置为hidden即可，其中overflow-x为左右滚动条，overflow-y为上下滚动条，代码示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;overflow-x: hidden&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>校园二手交易平台</title>
    <url>/420.html</url>
    <content><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>GitHub地址：<a href="https://github.com/a6678696/SecondHandTrade">a6678696/SecondHandTrade: 校园二手交易平台 (github.com)</a></p>
<h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><p>本项目核心技术采用Spring Boot+Mybatis-Plus；开发工具 idea；数据库MySQL5.6；模版引擎采用的是Thymeleaf；在线编辑器CKEditor；<a href="https://blog.zoutl.cn/64.html">基于JavaMail实现用QQ邮箱发送邮件</a>；前台界面采用了Bootstrap4框架；后台界面采用了jQuery EasyUI框架；Redis存储用户购物车信息；Gson处理JSON数据；Quartz定时任务；</p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h4><ol>
<li>添加商品到购物车、预订商品</li>
<li>前台登录、通过邮箱接受验证码注册和找回密码</li>
<li>查看和修改个人信息</li>
<li>发布商品和管理自己发布的商品（修改、删除、查询、上架、下架、完成交易、取消商品被预订）</li>
<li>管理自己的联系方式（添加、修改、删除、查询）</li>
<li>查看预订记录以及取消预订</li>
<li>查看自己的消息</li>
<li>给管理员留言以及管理自己的留言（查询、修改、删除）</li>
</ol>
<h4 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h4><ol>
<li>管理普通用户（添加、修改、删除、查询、封禁与取消封禁）</li>
<li>商品类别管理（添加、修改、删除、查询）</li>
<li>商品管理（查询、删除、审核商品、推荐商品）</li>
<li>管理用户联系方式（修改、删除、查询）</li>
<li>管理用户留言（答复用户的留言、删除、查询）</li>
<li>管理首页的轮播图（添加、修改、删除、查询）</li>
<li>管理公告（添加、修改、删除、查询）</li>
<li>管理预订记录（查询、删除）</li>
<li>管理用户消息（查询、删除）</li>
<li>安全退出后台</li>
</ol>
<h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><ol>
<li>每隔60分钟自动将推荐时间过期的商品的推荐状态设置为不推荐</li>
</ol>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><h5 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003408138.png" alt="image-20220119003408138"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003433066.png" alt="image-20220119003433066"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003452725.png" alt="image-20220119003452725"></p>
<h5 id="商品分类"><a href="#商品分类" class="headerlink" title="商品分类"></a>商品分类</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003529165.png" alt="image-20220119003529165"></p>
<h5 id="查看用户求购"><a href="#查看用户求购" class="headerlink" title="查看用户求购"></a>查看用户求购</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003557519.png" alt="image-20220119003557519"></p>
<h5 id="搜索商品"><a href="#搜索商品" class="headerlink" title="搜索商品"></a>搜索商品</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003624983.png" alt="image-20220119003624983"></p>
<h5 id="查看商品详情"><a href="#查看商品详情" class="headerlink" title="查看商品详情"></a>查看商品详情</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003653798.png" alt="image-20220119003653798"></p>
<h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003714458.png" alt="image-20220119003714458"></p>
<h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003733398.png" alt="image-20220119003733398"></p>
<h5 id="找回密码"><a href="#找回密码" class="headerlink" title="找回密码"></a>找回密码</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003801336.png" alt="image-20220119003801336"></p>
<h5 id="查看公告详情"><a href="#查看公告详情" class="headerlink" title="查看公告详情"></a>查看公告详情</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003832637.png" alt="image-20220119003832637"></p>
<h5 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003907012.png" alt="image-20220119003907012"></p>
<h5 id="查看个人信息"><a href="#查看个人信息" class="headerlink" title="查看个人信息"></a>查看个人信息</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003931967.png" alt="image-20220119003931967"></p>
<h5 id="修改个人信息"><a href="#修改个人信息" class="headerlink" title="修改个人信息"></a>修改个人信息</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119003950116.png" alt="image-20220119003950116"></p>
<h5 id="管理自己的联系方式"><a href="#管理自己的联系方式" class="headerlink" title="管理自己的联系方式"></a>管理自己的联系方式</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004014868.png" alt="image-20220119004014868"></p>
<h5 id="发布商品"><a href="#发布商品" class="headerlink" title="发布商品"></a>发布商品</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004034074.png" alt="image-20220119004034074"></p>
<h5 id="管理我的商品"><a href="#管理我的商品" class="headerlink" title="管理我的商品"></a>管理我的商品</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004059007.png" alt="image-20220119004059007"></p>
<h5 id="查看自己的消息"><a href="#查看自己的消息" class="headerlink" title="查看自己的消息"></a>查看自己的消息</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004125370.png" alt="image-20220119004125370"></p>
<h5 id="留言管理"><a href="#留言管理" class="headerlink" title="留言管理"></a>留言管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004145010.png" alt="image-20220119004145010"></p>
<h5 id="给管理员留言"><a href="#给管理员留言" class="headerlink" title="给管理员留言"></a>给管理员留言</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004204044.png" alt="image-20220119004204044"></p>
<h5 id="我的购物车"><a href="#我的购物车" class="headerlink" title="我的购物车"></a>我的购物车</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004254592.png" alt="image-20220119004254592"></p>
<h5 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004312028.png" alt="image-20220119004312028"></p>
<h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><h5 id="首页-1"><a href="#首页-1" class="headerlink" title="首页"></a>首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004452355.png" alt="image-20220119004452355"></p>
<h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004522381.png" alt="image-20220119004522381"></p>
<h5 id="商品类别管理"><a href="#商品类别管理" class="headerlink" title="商品类别管理"></a>商品类别管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004537017.png" alt="image-20220119004537017"></p>
<h5 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004553399.png" alt="image-20220119004553399"></p>
<h5 id="用户联系方式管理"><a href="#用户联系方式管理" class="headerlink" title="用户联系方式管理"></a>用户联系方式管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004631959.png" alt="image-20220119004631959"></p>
<h5 id="用户留言管理"><a href="#用户留言管理" class="headerlink" title="用户留言管理"></a>用户留言管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004656637.png" alt="image-20220119004656637"></p>
<h5 id="轮播图管理"><a href="#轮播图管理" class="headerlink" title="轮播图管理"></a>轮播图管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004715418.png" alt="image-20220119004715418"></p>
<h5 id="公告管理"><a href="#公告管理" class="headerlink" title="公告管理"></a>公告管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004735171.png" alt="image-20220119004735171"></p>
<h5 id="预订记录管理"><a href="#预订记录管理" class="headerlink" title="预订记录管理"></a>预订记录管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004754793.png" alt="image-20220119004754793"></p>
<h5 id="用户消息管理"><a href="#用户消息管理" class="headerlink" title="用户消息管理"></a>用户消息管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004815923.png" alt="image-20220119004815923"></p>
<h5 id="安全退出登录"><a href="#安全退出登录" class="headerlink" title="安全退出登录"></a>安全退出登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220119004835280.png" alt="image-20220119004835280"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyUI Combobox组合框从Java后端获取数据</title>
    <url>/421.html</url>
    <content><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h4><p><code>editable=&quot;true&quot;</code>代表该组合框可以编辑，<code>valueField:&#39;id&#39;</code>代表每个选项的值对应的是goodsType的id，<code>textField:&#39;name&#39;</code>代表我们看到的文本是goodsType的name</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;nbsp;</span>商品类型:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;easyui-combobox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;s_goodsTypeId&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 140px&quot;</span> <span class="attr">editable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-options</span>=<span class="string">&quot;panelHeight:&#x27;auto&#x27;,valueField:&#x27;id&#x27;,textField:&#x27;name&#x27;,url:&#x27;/admin/goodsType/comboList&#x27;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><p>下面只展示GoodsType实体类和组合框请求的方法comboList，GoodsTypeMapper、GoodsTypeService和GoodsTypeServiceImpl三个类就不展示了</p>
<h5 id="GoodsType实体类"><a href="#GoodsType实体类" class="headerlink" title="GoodsType实体类"></a>GoodsType实体类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品类别实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-15 21:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_goods_type&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;sortNum&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sortNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类下商品数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer goodsNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="请求的方法comboList"><a href="#请求的方法comboList" class="headerlink" title="请求的方法comboList"></a>请求的方法comboList</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Goods;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.GoodsType;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.GoodsService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.GoodsTypeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台商品类别Controller层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-15 21:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/goodsType&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsTypeAdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsTypeService goodsTypeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下拉框模糊查询商品类别</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> q</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/comboList&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;GoodsType&gt; <span class="title">comboList</span><span class="params">(String q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="keyword">null</span>) &#123;</span><br><span class="line">            q = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        QueryWrapper&lt;GoodsType&gt; goodsTypeQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        goodsTypeQueryWrapper.like(<span class="string">&quot;name&quot;</span>, q);</span><br><span class="line">        <span class="keyword">return</span> goodsTypeService.list(goodsTypeQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-19%20223648.gif"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果设置了组合框可以编辑且组合框的值为数字，那么就需要判断用户的输入是否正确（即：判断组合框获取到的值是否为数字），这是因为：如果组合框看到的文本在数据库中不存在时我们通过组合框获取到的值为<code>在组合框看到的文本</code>，这时向后端传入一个<code>不是数字的字符串</code>，而后端要接收的却是数字，那么后端就会报错</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>EasyUI</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML特殊字符编码对照表</title>
    <url>/422.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">特殊符号</th>
<th align="center">命名实体</th>
<th align="center">十进制编码</th>
<th align="center">特殊符号</th>
<th align="center">命名实体</th>
<th align="center">十进制编码</th>
<th align="center">特殊符号</th>
<th align="center">命名实体</th>
<th align="center">十进制编码</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>Α</code></td>
<td align="center">&amp;Alpha;</td>
<td align="center">&amp;#913;</td>
<td align="center"><code>Β</code></td>
<td align="center">&amp;Beta;</td>
<td align="center">&amp;#914;</td>
<td align="center"><code>Γ</code></td>
<td align="center">&amp;Gamma;</td>
<td align="center">&amp;#915;</td>
</tr>
<tr>
<td align="center"><code>Δ</code></td>
<td align="center">&amp;Delta;</td>
<td align="center">&amp;#916;</td>
<td align="center"><code>Ε</code></td>
<td align="center">&amp;Epsilon;</td>
<td align="center">&amp;Epsilon;</td>
<td align="center"><code>Ζ</code></td>
<td align="center">&amp;Zeta;</td>
<td align="center">&amp;#918;</td>
</tr>
<tr>
<td align="center"><code>Η</code></td>
<td align="center">&amp;Eta;</td>
<td align="center">&amp;#919;</td>
<td align="center"><code>Θ</code></td>
<td align="center">&amp;Theta;</td>
<td align="center">&amp;#920;</td>
<td align="center"><code>Ι</code></td>
<td align="center">&amp;Iota;</td>
<td align="center">&amp;#921;</td>
</tr>
<tr>
<td align="center"><code>Κ</code></td>
<td align="center">&amp;Kappa;</td>
<td align="center">&amp;#922;</td>
<td align="center"><code>Λ</code></td>
<td align="center">&amp;Lambda;</td>
<td align="center">&amp;#923;</td>
<td align="center"><code>Μ</code></td>
<td align="center">&amp;Mu;</td>
<td align="center">&amp;#924;</td>
</tr>
<tr>
<td align="center"><code>Ν</code></td>
<td align="center">&amp;Nu;</td>
<td align="center">&amp;#925;</td>
<td align="center"><code>Ξ</code></td>
<td align="center">&amp;Xi;</td>
<td align="center">&amp;#926;</td>
<td align="center"><code>Ο</code></td>
<td align="center">&amp;Omicron;</td>
<td align="center">&amp;#927;</td>
</tr>
<tr>
<td align="center"><code>Π</code></td>
<td align="center">&amp;Pi;</td>
<td align="center">&amp;#928;</td>
<td align="center"><code>Ρ</code></td>
<td align="center">&amp;Rho;</td>
<td align="center">&amp;#929;</td>
<td align="center"><code>Σ</code></td>
<td align="center">&amp;Sigma;</td>
<td align="center">&amp;#931;</td>
</tr>
<tr>
<td align="center"><code>Τ</code></td>
<td align="center">&amp;Tau;</td>
<td align="center">&amp;#932;</td>
<td align="center"><code>Υ</code></td>
<td align="center">&amp;Upsilon;</td>
<td align="center">&amp;#933;</td>
<td align="center"><code>Φ</code></td>
<td align="center">&amp;Phi;</td>
<td align="center">&amp;#934;</td>
</tr>
<tr>
<td align="center"><code>Χ</code></td>
<td align="center">&amp;Chi;</td>
<td align="center">&amp;#935;</td>
<td align="center"><code>Ψ</code></td>
<td align="center">&amp;Psi;</td>
<td align="center">&amp;#936;</td>
<td align="center"><code>Ω</code></td>
<td align="center">&amp;Omega;</td>
<td align="center">&amp;#937;</td>
</tr>
<tr>
<td align="center"><code>α</code></td>
<td align="center">&amp;alpha;</td>
<td align="center">&amp;#945;</td>
<td align="center"><code>β</code></td>
<td align="center">&amp;beta;</td>
<td align="center">&amp;#946;</td>
<td align="center"><code>γ</code></td>
<td align="center">&amp;gamma;</td>
<td align="center">&amp;#947;</td>
</tr>
<tr>
<td align="center"><code>δ</code></td>
<td align="center">&amp;delta;</td>
<td align="center">&amp;#948;</td>
<td align="center"><code>ε</code></td>
<td align="center">&amp;epsilon;</td>
<td align="center">&amp;#949;</td>
<td align="center"><code>ζ</code></td>
<td align="center">&amp;zeta;</td>
<td align="center">&amp;#950;</td>
</tr>
<tr>
<td align="center"><code>η</code></td>
<td align="center">&amp;eta;</td>
<td align="center">&amp;#951;</td>
<td align="center"><code>θ</code></td>
<td align="center">&amp;theta;</td>
<td align="center">&amp;#952;</td>
<td align="center"><code>ι</code></td>
<td align="center">&amp;iota;</td>
<td align="center">&amp;#953;</td>
</tr>
<tr>
<td align="center"><code>κ</code></td>
<td align="center">&amp;kappa;</td>
<td align="center">&amp;#954;</td>
<td align="center"><code>λ</code></td>
<td align="center">&amp;lambda;</td>
<td align="center">&amp;#955;</td>
<td align="center"><code>μ</code></td>
<td align="center">&amp;mu;</td>
<td align="center">&amp;#956;</td>
</tr>
<tr>
<td align="center"><code>ν</code></td>
<td align="center">&amp;nu;</td>
<td align="center">&amp;#957;</td>
<td align="center"><code>ξ</code></td>
<td align="center">&amp;xi;</td>
<td align="center">&amp;#958;</td>
<td align="center"><code>ο</code></td>
<td align="center">&amp;omicron;</td>
<td align="center">&amp;#959;</td>
</tr>
<tr>
<td align="center"><code>π</code></td>
<td align="center">&amp;pi;</td>
<td align="center">&amp;#960;</td>
<td align="center"><code>ρ</code></td>
<td align="center">&amp;rho;</td>
<td align="center">&amp;#961;</td>
<td align="center"><code>ς</code></td>
<td align="center">&amp;sigmaf;</td>
<td align="center">&amp;#962;</td>
</tr>
<tr>
<td align="center"><code>σ</code></td>
<td align="center">&amp;sigma;</td>
<td align="center">&amp;#963;</td>
<td align="center"><code>τ</code></td>
<td align="center">&amp;tau;</td>
<td align="center">&amp;#964;</td>
<td align="center"><code>υ</code></td>
<td align="center">&amp;upsilon;</td>
<td align="center">&amp;#965;</td>
</tr>
<tr>
<td align="center"><code>φ</code></td>
<td align="center">&amp;phi;</td>
<td align="center">&amp;#966;</td>
<td align="center"><code>χ</code></td>
<td align="center">&amp;chi;</td>
<td align="center">&amp;#967;</td>
<td align="center"><code>ψ</code></td>
<td align="center">&amp;psi;</td>
<td align="center">&amp;#968;</td>
</tr>
<tr>
<td align="center"><code>ω</code></td>
<td align="center">&amp;omega;</td>
<td align="center">&amp;#969;</td>
<td align="center"><code>ϑ</code></td>
<td align="center">&amp;thetasym;</td>
<td align="center">&amp;#977;</td>
<td align="center"><code>ϒ</code></td>
<td align="center">&amp;upsih;</td>
<td align="center">&amp;#978;</td>
</tr>
<tr>
<td align="center"><code>ϖ</code></td>
<td align="center">&amp;piv;</td>
<td align="center">&amp;#982;</td>
<td align="center"><code>•</code></td>
<td align="center">&amp;bull;</td>
<td align="center">&amp;#8226;</td>
<td align="center"><code>…</code></td>
<td align="center">&amp;hellip;</td>
<td align="center">&amp;#8230;</td>
</tr>
<tr>
<td align="center"><code>′</code></td>
<td align="center">&amp;prime;</td>
<td align="center">&amp;#8242;</td>
<td align="center"><code>″</code></td>
<td align="center">&amp;Prime;</td>
<td align="center">&amp;#8243;</td>
<td align="center"><code>‾</code></td>
<td align="center">&amp;oline;</td>
<td align="center">&amp;#8254;</td>
</tr>
<tr>
<td align="center"><code>⁄</code></td>
<td align="center">&amp;frasl;</td>
<td align="center">&amp;#8260;</td>
<td align="center"><code>℘</code></td>
<td align="center">&amp;weierp;</td>
<td align="center">&amp;#8472;</td>
<td align="center"><code>ℑ</code></td>
<td align="center">&amp;image;</td>
<td align="center">&amp;#8465;</td>
</tr>
<tr>
<td align="center"><code>ℜ</code></td>
<td align="center">&amp;real;</td>
<td align="center">&amp;#8476;</td>
<td align="center"><code>™</code></td>
<td align="center">&amp;trade;</td>
<td align="center">&amp;#8482;</td>
<td align="center"><code>ℵ</code></td>
<td align="center">&amp;alefsym;</td>
<td align="center">&amp;#8501;</td>
</tr>
<tr>
<td align="center"><code>←</code></td>
<td align="center">&amp;larr;</td>
<td align="center">&amp;#8592;</td>
<td align="center"><code>↑</code></td>
<td align="center">&amp;uarr;</td>
<td align="center">&amp;#8593;</td>
<td align="center"><code>→</code></td>
<td align="center">&amp;rarr;</td>
<td align="center">&amp;#8594;</td>
</tr>
<tr>
<td align="center"><code>↓</code></td>
<td align="center">&amp;darr;</td>
<td align="center">&amp;#8595;</td>
<td align="center"><code>↔</code></td>
<td align="center">&amp;harr;</td>
<td align="center">&amp;#8596;</td>
<td align="center"><code>↵</code></td>
<td align="center">&amp;crarr;</td>
<td align="center">&amp;#8629;</td>
</tr>
<tr>
<td align="center"><code>⇐</code></td>
<td align="center">&amp;lArr;</td>
<td align="center">&amp;#8656;</td>
<td align="center"><code>⇑</code></td>
<td align="center">&amp;uArr;</td>
<td align="center">&amp;#8657;</td>
<td align="center"><code>⇒</code></td>
<td align="center">&amp;rArr;</td>
<td align="center">&amp;#8658;</td>
</tr>
<tr>
<td align="center"><code>⇓</code></td>
<td align="center">&amp;dArr;</td>
<td align="center">&amp;#8659;</td>
<td align="center"><code>⇔</code></td>
<td align="center">&amp;hArr;</td>
<td align="center">&amp;#8660;</td>
<td align="center"><code>∀</code></td>
<td align="center">&amp;forall;</td>
<td align="center">&amp;#8704;</td>
</tr>
<tr>
<td align="center"><code>∂</code></td>
<td align="center">&amp;part;</td>
<td align="center">&amp;#8706;</td>
<td align="center"><code>∃</code></td>
<td align="center">&amp;exist;</td>
<td align="center">&amp;#8707;</td>
<td align="center"><code>∅</code></td>
<td align="center">&amp;empty;</td>
<td align="center">&amp;#8709;</td>
</tr>
<tr>
<td align="center"><code>∇</code></td>
<td align="center">&amp;nabla;</td>
<td align="center">&amp;#8711;</td>
<td align="center"><code>∈</code></td>
<td align="center">&amp;isin;</td>
<td align="center">&amp;#8712;</td>
<td align="center"><code>∉</code></td>
<td align="center">&amp;notin;</td>
<td align="center">&amp;#8713;</td>
</tr>
<tr>
<td align="center"><code>∋</code></td>
<td align="center">&amp;ni;</td>
<td align="center">&amp;#8715;</td>
<td align="center"><code>∏</code></td>
<td align="center">&amp;prod;</td>
<td align="center">&amp;#8719;</td>
<td align="center"><code>∑</code></td>
<td align="center">&amp;sum;</td>
<td align="center">&amp;#8722;</td>
</tr>
<tr>
<td align="center"><code>−</code></td>
<td align="center">&amp;minus;</td>
<td align="center">&amp;#8722;</td>
<td align="center"><code>∗</code></td>
<td align="center">&amp;lowast;</td>
<td align="center">&amp;#8727;</td>
<td align="center"><code>√</code></td>
<td align="center">&amp;radic;</td>
<td align="center">&amp;#8730;</td>
</tr>
<tr>
<td align="center"><code>∝</code></td>
<td align="center">&amp;prop;</td>
<td align="center">&amp;#8733;</td>
<td align="center"><code>∞</code></td>
<td align="center">&amp;infin;</td>
<td align="center">&amp;#8734;</td>
<td align="center"><code>∠</code></td>
<td align="center">&amp;ang;</td>
<td align="center">&amp;#8736;</td>
</tr>
<tr>
<td align="center"><code>∧</code></td>
<td align="center">&amp;and;</td>
<td align="center">&amp;#8869;</td>
<td align="center"><code>∨</code></td>
<td align="center">&amp;or;</td>
<td align="center">&amp;#8870;</td>
<td align="center"><code>∩</code></td>
<td align="center">&amp;cap;</td>
<td align="center">&amp;#8745;</td>
</tr>
<tr>
<td align="center"><code>∪</code></td>
<td align="center">&amp;cup;</td>
<td align="center">&amp;#8746;</td>
<td align="center"><code>∫</code></td>
<td align="center">&amp;int;</td>
<td align="center">&amp;#8747;</td>
<td align="center"><code>∴</code></td>
<td align="center">&amp;there4;</td>
<td align="center">&amp;#8756;</td>
</tr>
<tr>
<td align="center"><code>∼</code></td>
<td align="center">&amp;sim;</td>
<td align="center">&amp;#8764;</td>
<td align="center"><code>≅</code></td>
<td align="center">&amp;cong;</td>
<td align="center">&amp;#8773;</td>
<td align="center"><code>≈</code></td>
<td align="center">&amp;asymp;</td>
<td align="center">&amp;#8773;</td>
</tr>
<tr>
<td align="center"><code>≠</code></td>
<td align="center">&amp;ne;</td>
<td align="center">&amp;#8800;</td>
<td align="center"><code>≡</code></td>
<td align="center">&amp;equiv;</td>
<td align="center">&amp;#8801;</td>
<td align="center"><code>≤</code></td>
<td align="center">&amp;le;</td>
<td align="center">&amp;#8804;</td>
</tr>
<tr>
<td align="center"><code>≥</code></td>
<td align="center">&amp;ge;</td>
<td align="center">&amp;#8805;</td>
<td align="center"><code>⊂</code></td>
<td align="center">&amp;sub;</td>
<td align="center">&amp;#8834;</td>
<td align="center"><code>⊃</code></td>
<td align="center">&amp;sup;</td>
<td align="center">&amp;#8835;</td>
</tr>
<tr>
<td align="center"><code>⊄</code></td>
<td align="center">&amp;nsub;</td>
<td align="center">&amp;#8836;</td>
<td align="center"><code>⊆</code></td>
<td align="center">&amp;sube;</td>
<td align="center">&amp;#8838;</td>
<td align="center"><code>⊇</code></td>
<td align="center">&amp;supe;</td>
<td align="center">&amp;#8839;</td>
</tr>
<tr>
<td align="center"><code>⊕</code></td>
<td align="center">&amp;oplus;</td>
<td align="center">&amp;#8853;</td>
<td align="center"><code>⊗</code></td>
<td align="center">&amp;otimes;</td>
<td align="center">&amp;#8855;</td>
<td align="center"><code>⊥</code></td>
<td align="center">&amp;perp;</td>
<td align="center">&amp;#8869;</td>
</tr>
<tr>
<td align="center"><code>⋅</code></td>
<td align="center">&amp;sdot;</td>
<td align="center">&amp;#8901;</td>
<td align="center"><code>⌈</code></td>
<td align="center">&amp;lceil;</td>
<td align="center">&amp;#8968;</td>
<td align="center"><code>⌉</code></td>
<td align="center">&amp;rceil;</td>
<td align="center">&amp;#8969;</td>
</tr>
<tr>
<td align="center"><code>⌊</code></td>
<td align="center">&amp;lfloor;</td>
<td align="center">&amp;#8970;</td>
<td align="center"><code>⌋</code></td>
<td align="center">&amp;rfloor;</td>
<td align="center">&amp;#8971;</td>
<td align="center"><code>◊</code></td>
<td align="center">&amp;loz;</td>
<td align="center">&amp;#9674;</td>
</tr>
<tr>
<td align="center"><code>♠</code></td>
<td align="center">&amp;spades;</td>
<td align="center">&amp;#9824;</td>
<td align="center"><code>♣</code></td>
<td align="center">&amp;clubs;</td>
<td align="center">&amp;#9827;</td>
<td align="center"><code>♥</code></td>
<td align="center">&amp;hearts;</td>
<td align="center">&amp;#9829;</td>
</tr>
<tr>
<td align="center"><code>♦</code></td>
<td align="center">&amp;diams;</td>
<td align="center">&amp;#9830;</td>
<td align="center"></td>
<td align="center">&amp;nbsp;</td>
<td align="center">&amp;#160;</td>
<td align="center"><code>¡</code></td>
<td align="center">&amp;iexcl;</td>
<td align="center">&amp;#161;</td>
</tr>
<tr>
<td align="center"><code>¢</code></td>
<td align="center">&amp;cent;</td>
<td align="center">&amp;#162;</td>
<td align="center"><code>£</code></td>
<td align="center">&amp;pound;</td>
<td align="center">&amp;#163;</td>
<td align="center"><code>¤</code></td>
<td align="center">&amp;curren;</td>
<td align="center">&amp;#164;</td>
</tr>
<tr>
<td align="center"><code>¥</code></td>
<td align="center">&amp;yen;</td>
<td align="center">&amp;#165;</td>
<td align="center"><code>¦</code></td>
<td align="center">&amp;brvbar;</td>
<td align="center">&amp;#166;</td>
<td align="center"><code>§</code></td>
<td align="center">&amp;sect;</td>
<td align="center">&amp;#167;</td>
</tr>
<tr>
<td align="center"><code>¨</code></td>
<td align="center">&amp;uml;</td>
<td align="center">&amp;#168;</td>
<td align="center"><code>©</code></td>
<td align="center">&amp;copy;</td>
<td align="center">&amp;#169;</td>
<td align="center"><code>ª</code></td>
<td align="center">&amp;ordf;</td>
<td align="center">&amp;#170;</td>
</tr>
<tr>
<td align="center"><code>«</code></td>
<td align="center">&amp;laquo;</td>
<td align="center">&amp;#171;</td>
<td align="center"><code>¬</code></td>
<td align="center">&amp;not;</td>
<td align="center">&amp;#172;</td>
<td align="center">­</td>
<td align="center">&amp;shy;</td>
<td align="center">&amp;#173;</td>
</tr>
<tr>
<td align="center"><code>®</code></td>
<td align="center">&amp;reg;</td>
<td align="center">&amp;#174;</td>
<td align="center"><code>¯</code></td>
<td align="center">&amp;macr;</td>
<td align="center">&amp;#175;</td>
<td align="center"><code>°</code></td>
<td align="center">&amp;deg;</td>
<td align="center">&amp;#176;</td>
</tr>
<tr>
<td align="center"><code>±</code></td>
<td align="center">&amp;plusmn;</td>
<td align="center">&amp;#177;</td>
<td align="center"><code>²</code></td>
<td align="center">&amp;sup2;</td>
<td align="center">&amp;#178;</td>
<td align="center"><code>³</code></td>
<td align="center">&amp;sup3;</td>
<td align="center">&amp;#179;</td>
</tr>
<tr>
<td align="center"><code>´</code></td>
<td align="center">&amp;acute;</td>
<td align="center">&amp;#180;</td>
<td align="center"><code>µ</code></td>
<td align="center">&amp;micro;</td>
<td align="center">&amp;#181</td>
<td align="center"><code>&quot;</code></td>
<td align="center">&amp;quot;</td>
<td align="center">&amp;#34;</td>
</tr>
<tr>
<td align="center"><code>&lt;</code></td>
<td align="center">&amp;lt;</td>
<td align="center">&amp;#60;</td>
<td align="center"><code>&gt;</code></td>
<td align="center">&amp;gt;</td>
<td align="center">&amp;#62;</td>
<td align="center"><code>&#39;</code></td>
<td align="center"></td>
<td align="center">&amp;#39;</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA插件EditStarters报错：Request failure! Your spring boot version may not be supported的解决办法</title>
    <url>/423.html</url>
    <content><![CDATA[<h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>插件不支持当前使用的Spring Boot版本</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>将Spring Boot的版本改为<code>2.6.2</code>即可，其它版本我没有试过，如果要使用其它版本的Spring Boot，请自行尝试</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot引入Spring Data JPA</title>
    <url>/424.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-student</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_bookmanagesystem?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">      <span class="attr">naming:</span></span><br><span class="line">        <span class="attr">physical-strategy:</span> <span class="string">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span> <span class="comment">#配置后可以通过@Column注解的name属性自定义数据库的字段名称</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>使用了lombok，如果不想使用就自行生成setter和getter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-21 16:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;userName&quot;, length = 100)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;nickName&quot;, length = 100)</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(length = 100)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户类型,1代表管理员,2代表普通用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户状态,1代表正常,2代表被封禁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否可借书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;isBorrow&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer isBorrow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Repository接口"><a href="#Repository接口" class="headerlink" title="Repository接口"></a>Repository接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户Repository接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-21 17:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.ledao.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookManageSystemApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user.setNickName(<span class="string">&quot;乐道&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user.setType(<span class="number">1</span>);</span><br><span class="line">        user.setState(<span class="number">1</span>);</span><br><span class="line">        user.setIsBorrow(<span class="number">1</span>);</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>如果数据库的t_user表中新增了一条记录，说明引入Spring Data JPA成功</p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>Spring Data JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Data JPA实体类常用注解</title>
    <url>/425.html</url>
    <content><![CDATA[<blockquote>
<p>下面展示的是我使用到的注解（可以满足基本的开发情况），其它注解等用到的时候再补充</p>
</blockquote>
<h3 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h3><p>标识实体类是JPA实体，告诉JPA在程序运行时生成实体类对应表</p>
<h3 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h3><p>使用属性<code>name</code>设置实体类在数据库所对应的表名</p>
<h3 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h3><p>标识类里所在变量为主键</p>
<h3 id="GeneratedValue"><a href="#GeneratedValue" class="headerlink" title="@GeneratedValue"></a>@GeneratedValue</h3><p>设置主键生成策略，此方式依赖于具体的数据库，<code>strategy=GenerationType.IDENTITY</code>时主键策略为自增</p>
<h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><p>表示属性所对应字段名进行个性化设置，name属性的值为在数据库的字段名称（使用这个属性时需要配置application.yml，不然无法生效，代码如下所示），length属性的值为字段的长度</p>
<h3 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h3><p>表示属性并非数据库表字段的映射,ORM框架将忽略该属性</p>
<h3 id="实体类代码示例"><a href="#实体类代码示例" class="headerlink" title="实体类代码示例"></a>实体类代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-21 16:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;userName&quot;, length = 100)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;nickName&quot;, length = 100)</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(length = 100)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户类型,1代表管理员,2代表普通用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户状态,1代表正常,2代表被封禁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否可借书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;isBorrow&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer isBorrow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Spring Data JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL报错：java.sql.SQLSyntax: You have an error in your SQL syntax的解决办法</title>
    <url>/426.html</url>
    <content><![CDATA[<h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>表的字段使用了MySQL的关键字</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>将对应的字段修改成非MySQL关键字，MySQL关键字如下表</p>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">关键字</th>
<th align="center">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ADD</td>
<td align="center">ALL</td>
<td align="center">ALTER</td>
</tr>
<tr>
<td align="center">ANALYZE</td>
<td align="center">AND</td>
<td align="center">AS</td>
</tr>
<tr>
<td align="center">ASC</td>
<td align="center">ASENSITIVE</td>
<td align="center">BEFORE</td>
</tr>
<tr>
<td align="center">BETWEEN</td>
<td align="center">BIGINT</td>
<td align="center">BINARY</td>
</tr>
<tr>
<td align="center">BLOB</td>
<td align="center">BOTH</td>
<td align="center">BY</td>
</tr>
<tr>
<td align="center">CALL</td>
<td align="center">CASCADE</td>
<td align="center">CASE</td>
</tr>
<tr>
<td align="center">CHANGE</td>
<td align="center">CHAR</td>
<td align="center">CHARACTER</td>
</tr>
<tr>
<td align="center">CHECK</td>
<td align="center">COLLATE</td>
<td align="center">COLUMN</td>
</tr>
<tr>
<td align="center">CONDITION</td>
<td align="center">CONNECTION</td>
<td align="center">CONSTRAINT</td>
</tr>
<tr>
<td align="center">CONTINUE</td>
<td align="center">CONVERT</td>
<td align="center">CREATE</td>
</tr>
<tr>
<td align="center">CROSS</td>
<td align="center">CURRENT_DATE</td>
<td align="center">CURRENT_TIME</td>
</tr>
<tr>
<td align="center">CURRENT_TIMESTAMP</td>
<td align="center">CURRENT_USER</td>
<td align="center">CURSOR</td>
</tr>
<tr>
<td align="center">DATABASE</td>
<td align="center">DATABASES</td>
<td align="center">DAY_HOUR</td>
</tr>
<tr>
<td align="center">DAY_MICROSECOND</td>
<td align="center">DAY_MINUTE</td>
<td align="center">DAY_SECOND</td>
</tr>
<tr>
<td align="center">DEC</td>
<td align="center">DECIMAL</td>
<td align="center">DECLARE</td>
</tr>
<tr>
<td align="center">DEFAULT</td>
<td align="center">DELAYED</td>
<td align="center">DELETE</td>
</tr>
<tr>
<td align="center">DESC</td>
<td align="center">DESCRIBE</td>
<td align="center">DETERMINISTIC</td>
</tr>
<tr>
<td align="center">DISTINCT</td>
<td align="center">DISTINCTROW</td>
<td align="center">DIV</td>
</tr>
<tr>
<td align="center">DOUBLE</td>
<td align="center">DROP</td>
<td align="center">DUAL</td>
</tr>
<tr>
<td align="center">EACH</td>
<td align="center">ELSE</td>
<td align="center">ELSEIF</td>
</tr>
<tr>
<td align="center">ENCLOSED</td>
<td align="center">ESCAPED</td>
<td align="center">EXISTS</td>
</tr>
<tr>
<td align="center">EXIT</td>
<td align="center">EXPLAIN</td>
<td align="center">FALSE</td>
</tr>
<tr>
<td align="center">FETCH</td>
<td align="center">FLOAT</td>
<td align="center">FLOAT4</td>
</tr>
<tr>
<td align="center">FLOAT8</td>
<td align="center">FOR</td>
<td align="center">FORCE</td>
</tr>
<tr>
<td align="center">FOREIGN</td>
<td align="center">FROM</td>
<td align="center">FULLTEXT</td>
</tr>
<tr>
<td align="center">GOTO</td>
<td align="center">GRANT</td>
<td align="center">GROUP</td>
</tr>
<tr>
<td align="center">HAVING</td>
<td align="center">HIGH_PRIORITY</td>
<td align="center">HOUR_MICROSECOND</td>
</tr>
<tr>
<td align="center">HOUR_MINUTE</td>
<td align="center">HOUR_SECOND</td>
<td align="center">IF</td>
</tr>
<tr>
<td align="center">IGNORE</td>
<td align="center">IN</td>
<td align="center">INDEX</td>
</tr>
<tr>
<td align="center">INFILE</td>
<td align="center">INNER</td>
<td align="center">INOUT</td>
</tr>
<tr>
<td align="center">INSENSITIVE</td>
<td align="center">INSERT</td>
<td align="center">INT</td>
</tr>
<tr>
<td align="center">INT1</td>
<td align="center">INT2</td>
<td align="center">INT3</td>
</tr>
<tr>
<td align="center">INT4</td>
<td align="center">INT8</td>
<td align="center">INTEGER</td>
</tr>
<tr>
<td align="center">INTERVAL</td>
<td align="center">INTO</td>
<td align="center">IS</td>
</tr>
<tr>
<td align="center">ITERATE</td>
<td align="center">JOIN</td>
<td align="center">KEY</td>
</tr>
<tr>
<td align="center">KEYS</td>
<td align="center">KILL</td>
<td align="center">LABEL</td>
</tr>
<tr>
<td align="center">LEADING</td>
<td align="center">LEAVE</td>
<td align="center">LEFT</td>
</tr>
<tr>
<td align="center">LIKE</td>
<td align="center">LIMIT</td>
<td align="center">LINEAR</td>
</tr>
<tr>
<td align="center">LINES</td>
<td align="center">LOAD</td>
<td align="center">LOCALTIME</td>
</tr>
<tr>
<td align="center">LOCALTIMESTAMP</td>
<td align="center">LOCK</td>
<td align="center">LONG</td>
</tr>
<tr>
<td align="center">LONGBLOB</td>
<td align="center">LONGTEXT</td>
<td align="center">LOOP</td>
</tr>
<tr>
<td align="center">LOW_PRIORITY</td>
<td align="center">MATCH</td>
<td align="center">MEDIUMBLOB</td>
</tr>
<tr>
<td align="center">MEDIUMINT</td>
<td align="center">MEDIUMTEXT</td>
<td align="center">MIDDLEINT</td>
</tr>
<tr>
<td align="center">MINUTE_MICROSECOND</td>
<td align="center">MINUTE_SECOND</td>
<td align="center">MOD</td>
</tr>
<tr>
<td align="center">MODIFIES</td>
<td align="center">NATURAL</td>
<td align="center">NOT</td>
</tr>
<tr>
<td align="center">NO_WRITE_TO_BINLOG</td>
<td align="center">NULL</td>
<td align="center">NUMERIC</td>
</tr>
<tr>
<td align="center">ON</td>
<td align="center">OPTIMIZE</td>
<td align="center">OPTION</td>
</tr>
<tr>
<td align="center">OPTIONALLY</td>
<td align="center">OR</td>
<td align="center">ORDER</td>
</tr>
<tr>
<td align="center">OUT</td>
<td align="center">OUTER</td>
<td align="center">OUTFILE</td>
</tr>
<tr>
<td align="center">PRECISION</td>
<td align="center">PRIMARY</td>
<td align="center">PROCEDURE</td>
</tr>
<tr>
<td align="center">PURGE</td>
<td align="center">RAID0</td>
<td align="center">RANGE</td>
</tr>
<tr>
<td align="center">READ</td>
<td align="center">READS</td>
<td align="center">REAL</td>
</tr>
<tr>
<td align="center">REFERENCES</td>
<td align="center">REGEXP</td>
<td align="center">RELEASE</td>
</tr>
<tr>
<td align="center">RENAME</td>
<td align="center">REPEAT</td>
<td align="center">REPLACE</td>
</tr>
<tr>
<td align="center">REQUIRE</td>
<td align="center">RESTRICT</td>
<td align="center">RETURN</td>
</tr>
<tr>
<td align="center">REVOKE</td>
<td align="center">RIGHT</td>
<td align="center">RLIKE</td>
</tr>
<tr>
<td align="center">SCHEMA</td>
<td align="center">SCHEMAS</td>
<td align="center">SECOND_MICROSECOND</td>
</tr>
<tr>
<td align="center">SELECT</td>
<td align="center">SENSITIVE</td>
<td align="center">SEPARATOR</td>
</tr>
<tr>
<td align="center">SET</td>
<td align="center">SHOW</td>
<td align="center">SMALLINT</td>
</tr>
<tr>
<td align="center">SPATIAL</td>
<td align="center">SPECIFIC</td>
<td align="center">SQL</td>
</tr>
<tr>
<td align="center">SQLEXCEPTION</td>
<td align="center">SQLSTATE</td>
<td align="center">SQLWARNING</td>
</tr>
<tr>
<td align="center">SQL_BIG_RESULT</td>
<td align="center">SQL_CALC_FOUND_ROWS</td>
<td align="center">SQL_SMALL_RESULT</td>
</tr>
<tr>
<td align="center">SSL</td>
<td align="center">STARTING</td>
<td align="center">STRAIGHT_JOIN</td>
</tr>
<tr>
<td align="center">TABLE</td>
<td align="center">TERMINATED</td>
<td align="center">THEN</td>
</tr>
<tr>
<td align="center">TINYBLOB</td>
<td align="center">TINYINT</td>
<td align="center">TINYTEXT</td>
</tr>
<tr>
<td align="center">TO</td>
<td align="center">TRAILING</td>
<td align="center">TRIGGER</td>
</tr>
<tr>
<td align="center">TRUE</td>
<td align="center">UNDO</td>
<td align="center">UNION</td>
</tr>
<tr>
<td align="center">UNIQUE</td>
<td align="center">UNLOCK</td>
<td align="center">UNSIGNED</td>
</tr>
<tr>
<td align="center">UPDATE</td>
<td align="center">USAGE</td>
<td align="center">USE</td>
</tr>
<tr>
<td align="center">USING</td>
<td align="center">UTC_DATE</td>
<td align="center">UTC_TIME</td>
</tr>
<tr>
<td align="center">UTC_TIMESTAMP</td>
<td align="center">VALUES</td>
<td align="center">VARBINARY</td>
</tr>
<tr>
<td align="center">VARCHAR</td>
<td align="center">VARCHARACTER</td>
<td align="center">VARYING</td>
</tr>
<tr>
<td align="center">WHEN</td>
<td align="center">WHERE</td>
<td align="center">WHILE</td>
</tr>
<tr>
<td align="center">WITH</td>
<td align="center">WRITE</td>
<td align="center">X509</td>
</tr>
<tr>
<td align="center">XOR</td>
<td align="center">YEAR_MONTH</td>
<td align="center">ZEROFILL</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客的标题包含特殊字符</title>
    <url>/427.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>hexo博客的标题里是不能包含特殊字符的，不然会报错：<font color="#dd0000">err: YAMLException: unexpected end of the stream within a single quoted scalar</font></p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>用<code>英文的单引号&#39;&#39;</code>将标题包起来即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220124082017391.png" alt="image-20220124082017391"></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript格式化时间</title>
    <url>/428.html</url>
    <content><![CDATA[<h3 id="格式化方法"><a href="#格式化方法" class="headerlink" title="格式化方法"></a>格式化方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">fmt, date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret;</span><br><span class="line">    <span class="keyword">const</span> opt = &#123;</span><br><span class="line">        <span class="string">&quot;Y+&quot;</span>: date.getFullYear().toString(),        <span class="comment">// 年</span></span><br><span class="line">        <span class="string">&quot;m+&quot;</span>: (date.getMonth() + <span class="number">1</span>).toString(),     <span class="comment">// 月</span></span><br><span class="line">        <span class="string">&quot;d+&quot;</span>: date.getDate().toString(),            <span class="comment">// 日</span></span><br><span class="line">        <span class="string">&quot;H+&quot;</span>: date.getHours().toString(),           <span class="comment">// 时</span></span><br><span class="line">        <span class="string">&quot;M+&quot;</span>: date.getMinutes().toString(),         <span class="comment">// 分</span></span><br><span class="line">        <span class="string">&quot;S+&quot;</span>: date.getSeconds().toString()          <span class="comment">// 秒</span></span><br><span class="line">        <span class="comment">// 有其他格式化字符需求可以继续添加，必须转化成字符串</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> opt) &#123;</span><br><span class="line">        ret = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;)&quot;</span>).exec(fmt);</span><br><span class="line">        <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">            fmt = fmt.replace(ret[<span class="number">1</span>], (ret[<span class="number">1</span>].length == <span class="number">1</span>) ? (opt[k]) : (opt[k].padStart(ret[<span class="number">1</span>].length, <span class="string">&quot;0&quot;</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//格式化现在的时间</span></span><br><span class="line">dateFormat(<span class="string">&quot;YYYY-mm-dd HH:MM:SS&quot;</span>, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"><span class="comment">//格式化指定的时间</span></span><br><span class="line">dateFormat(<span class="string">&quot;YYYY-mm-dd HH:MM:SS&quot;</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2021-01-24T11:09:59.000+00:00&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.jianshu.com/p/49fb78bca621">js 日期时间的格式化 - 简书 (jianshu.com)</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java给日期加一天</title>
    <url>/429.html</url>
    <content><![CDATA[<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-24 23:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line">        calendar.add(Calendar.DAY_OF_YEAR, <span class="number">1</span>);</span><br><span class="line">        System.out.println(calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将代码抽取成方法"><a href="#将代码抽取成方法" class="headerlink" title="将代码抽取成方法"></a>将代码抽取成方法</h4><p>下面的方法有两个参数：参数一为<code>要加天数的时间</code>，参数二为<code>添加的天数</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给日期加天数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date 要加天数的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> days 添加的天数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">dateAddDays</span><span class="params">(Date date, <span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">    Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">    calendar.setTime(date);</span><br><span class="line">    calendar.add(Calendar.DAY_OF_YEAR, days);</span><br><span class="line">    <span class="keyword">return</span> calendar.getTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>可以看到第二个时间比第一个时间多了一天</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220124235727441.png" alt="image-20220124235727441"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之堆排序</title>
    <url>/43.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><ol>
<li><p>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区</p>
</li>
<li><p>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]</p>
</li>
<li><p>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完</p>
</li>
</ol>
<h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022222434.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">16</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        heapSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建堆</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 待排序列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (arr.length - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//从第一个非叶子结点从下至上，从右至左调整结构</span></span><br><span class="line">            adjustHeap(arr, i, arr.length);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//调整堆结构+交换堆顶元素与末尾元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//将堆顶元素与末尾元素进行交换</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = temp;</span><br><span class="line">            <span class="comment">//重新对堆进行调整</span></span><br><span class="line">            adjustHeap(arr, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调整堆</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr    待排序列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 待排序列尾元素索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> parent, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将temp作为父节点</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[parent];</span><br><span class="line">        <span class="comment">//左孩子</span></span><br><span class="line">        <span class="keyword">int</span> lChild = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lChild &lt; length) &#123;</span><br><span class="line">            <span class="comment">//右孩子</span></span><br><span class="line">            <span class="keyword">int</span> rChild = lChild + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 如果有右孩子结点，并且右孩子结点的值大于左孩子结点，则选取右孩子结点</span></span><br><span class="line">            <span class="keyword">if</span> (rChild &lt; length &amp;&amp; arr[lChild] &lt; arr[rChild]) &#123;</span><br><span class="line">                lChild++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果父结点的值已经大于孩子结点的值，则直接结束</span></span><br><span class="line">            <span class="keyword">if</span> (temp &gt;= arr[lChild]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把孩子结点的值赋给父结点</span></span><br><span class="line">            arr[parent] = arr[lChild];</span><br><span class="line">            <span class="comment">//选取孩子结点的左孩子结点,继续向下筛选</span></span><br><span class="line">            parent = lChild;</span><br><span class="line">            lChild = <span class="number">2</span> * lChild + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[parent] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022222839.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis实现in查询</title>
    <url>/430.html</url>
    <content><![CDATA[<h3 id="业务说明"><a href="#业务说明" class="headerlink" title="业务说明"></a>业务说明</h3><h4 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h4><p>t_book为图书表，t_borrow_record为借阅记录表，t_book的主键id是t_borrow_record的外键bookId</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220125000623293.png" alt="image-20220125000623293"></p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>通过图书名称查询借阅记录，因为t_borrow_record是没有图书名称字段的，所以先通过<code>模糊查询</code>查询t_book的图书名称获取id集合，然后通过t_borrow_record的bookId字段使用<code>in查询</code>即可查询到数据</p>
<h3 id="XML代码"><a href="#XML代码" class="headerlink" title="XML代码"></a>XML代码</h3><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p>当idList不为空时，才使用in查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;idList != null&quot;</span>&gt;</span></span><br><span class="line">    and bookId in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;idList&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>idList通过map传入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BorrowRecordResult&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from t_borrow_record</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and userName like #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userId != null&quot;</span>&gt;</span></span><br><span class="line">            and userId = #&#123;userId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;idList != null&quot;</span>&gt;</span></span><br><span class="line">            and bookId in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;idList&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                #&#123;item&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;start != null and size != null&quot;</span>&gt;</span></span><br><span class="line">        limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><p>下面代码主要是获取idList以及将idList传入map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">List&lt;Integer&gt; idList;</span><br><span class="line"><span class="keyword">if</span> (StringUtil.isNotEmpty(borrowRecord.getBookName())) &#123;</span><br><span class="line">    idList = bookService.selectIdByNameLike(StringUtil.formatLike(borrowRecord.getBookName()));</span><br><span class="line">    map.put(<span class="string">&quot;idList&quot;</span>, idList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>图书管理系统</title>
    <url>/432.html</url>
    <content><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>GitHub地址：<a href="https://github.com/a6678696/BookManageSystem">https://github.com/a6678696/BookManageSystem</a></p>
<h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><p>本项目核心技术采用Spring Boot+Mybatis；开发工具idea；数据库MySQL5.6；界面采用了jQuery EasyUI框架；Quartz定时任务；</p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h4><p>查找图书、借书、续借图书、归还图书、修改密码、安全退出系统</p>
<h4 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h4><p>用户管理（增删改查、封禁和解封用户、设置用户是否可借书）、图书类别管理（增删改查）、图书管理（增删改查）、查看用户的借阅记录、修改密码、安全退出系统</p>
<h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><p>每分钟自动检测用户正在借阅的书是否逾期，如果逾期就修改借阅记录的状态为逾期</p>
<p>每天23点自动删除无效的图片(没有被引用的图片，也就是说图片名称不在t_book表中的)</p>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127214927196.png" alt="image-20220127214927196"></p>
<h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><h5 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127214639384.png" alt="image-20220127214639384"></p>
<h5 id="借书"><a href="#借书" class="headerlink" title="借书"></a>借书</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220514004613602.png" alt="image-20220514004613602"></p>
<h5 id="借阅记录、续借和还书"><a href="#借阅记录、续借和还书" class="headerlink" title="借阅记录、续借和还书"></a>借阅记录、续借和还书</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220514004632978.png" alt="image-20220514004632978"></p>
<h5 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127214827927.png" alt="image-20220127214827927"></p>
<h5 id="安全退出系统"><a href="#安全退出系统" class="headerlink" title="安全退出系统"></a>安全退出系统</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127214902265.png" alt="image-20220127214902265"></p>
<h4 id="管理员-1"><a href="#管理员-1" class="headerlink" title="管理员"></a>管理员</h4><h5 id="首页-1"><a href="#首页-1" class="headerlink" title="首页"></a>首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127215007265.png" alt="image-20220127215007265"></p>
<h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127215038200.png" alt="image-20220127215038200"></p>
<h5 id="图书类别管理"><a href="#图书类别管理" class="headerlink" title="图书类别管理"></a>图书类别管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127215117115.png" alt="image-20220127215117115"></p>
<h5 id="图书管理"><a href="#图书管理" class="headerlink" title="图书管理"></a>图书管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220514004730482.png" alt="image-20220514004730482"></p>
<h5 id="查看用户的借阅记录"><a href="#查看用户的借阅记录" class="headerlink" title="查看用户的借阅记录"></a>查看用户的借阅记录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220514004809716.png" alt="image-20220514004809716"></p>
<h5 id="修改密码-1"><a href="#修改密码-1" class="headerlink" title="修改密码"></a>修改密码</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127215231226.png" alt="image-20220127215231226"></p>
<h5 id="安全退出系统-1"><a href="#安全退出系统-1" class="headerlink" title="安全退出系统"></a>安全退出系统</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127215256316.png" alt="image-20220127215256316"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
      </tags>
  </entry>
  <entry>
    <title>在GitHub的Overview页面添加统计模块</title>
    <url>/431.html</url>
    <content><![CDATA[<h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><ol>
<li><p>新建一个仓库，命名为自己的用户名（我的GitHub用户名为a6678696，所以我就要命名为a6678696），然后会看到下图的绿色部分</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-27%20184048.png"></p>
</li>
<li><p>将仓库设置为public，并且添加一个README.md文件（选中下图的<code>Public</code>和<code>Add a README file</code>），最后点击创建按钮即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-27%20184631.png"></p>
</li>
</ol>
<h3 id="编辑README-md"><a href="#编辑README-md" class="headerlink" title="编辑README.md"></a>编辑README.md</h3><p>在<code>--&gt;</code>下方加入以下代码：（username的值改为自己的用户名）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">a6678696&#x27;s github stats</span>](<span class="link">https://github-readme-stats.vercel.app/api?username=a6678696&amp;theme=github</span>)</span><br></pre></td></tr></table></figure>

<p>如果要隐藏指定统计信息，就需要在后面加上<code>&amp;hide=prs,contribs</code>，多个信息用英文的逗号隔开</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">a6678696&#x27;s github stats</span>](<span class="link">https://github-readme-stats.vercel.app/api?username=a6678696&amp;theme=github&amp;hide=prs,contribs</span>)</span><br></pre></td></tr></table></figure>

<h3 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h3><p>进入Overview页面，看到下图的统计信息说明配置成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220127191458282.png" alt="image-20220127191458282"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot引用application.yml配置文件的属性</title>
    <url>/433.html</url>
    <content><![CDATA[<h3 id="添加一个属性"><a href="#添加一个属性" class="headerlink" title="添加一个属性"></a>添加一个属性</h3><p>首先在application.yml配置文件中添加一个属性，并给它赋值</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220128133954699.png" alt="image-20220128133954699"></p>
<h3 id="直接在代码中引用"><a href="#直接在代码中引用" class="headerlink" title="直接在代码中引用"></a>直接在代码中引用</h3><p>通过@Value注解即可在当前类定义变量并获得属性的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;maxBorrowBookSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer maxBorrowBookSize;</span><br></pre></td></tr></table></figure>

<p>使用这个属性值就直接像一般变量那样使用即可，这个变量是当前类可用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (borrowRecordList2.size() == maxBorrowBookSize) &#123;</span><br><span class="line">    resultMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    resultMap.put(<span class="string">&quot;errorInfo&quot;</span>, <span class="string">&quot;借书失败，你同时借阅的图书过多，每次最多同时借阅&quot;</span> + maxBorrowBookSize + <span class="string">&quot;本图书！！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用配置文件属性实体类"><a href="#使用配置文件属性实体类" class="headerlink" title="使用配置文件属性实体类"></a>使用配置文件属性实体类</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>上面是直接在要使用属性的类中使用，这样不方便管理，如果多个类都需要使用到同一个属性，那么管理起来就很麻烦了，我们可以专门创建一个实体类用于调用这些属性，要修改某个属性就只需要在这个实体类修改即可</p>
<h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置文件属性实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-01 11:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;maxBorrowBookSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBorrowBookSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用@Resource注解在当前类注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> ConfigProperties configProperties;</span><br></pre></td></tr></table></figure>

<p>在对应的方法中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (borrowRecordList2.size() == configProperties.getMaxBorrowBookSize()) &#123;</span><br><span class="line">    resultMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    resultMap.put(<span class="string">&quot;errorInfo&quot;</span>, <span class="string">&quot;借书失败，你同时借阅的图书过多，每次最多同时借阅&quot;</span> + configProperties.getMaxBorrowBookSize() + <span class="string">&quot;本图书！！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果要在普通类的普通方法使用配置文件属性实体类，去查看博客：<a href="https://blog.zoutl.cn/460.html">Spring Boot 普通类使用 @Resource 或 @Autowired 注解 | LeDao 的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot使用jasypt加密数据库密码</title>
    <url>/434.html</url>
    <content><![CDATA[<h3 id="引入jasypt依赖"><a href="#引入jasypt依赖" class="headerlink" title="引入jasypt依赖"></a>引入jasypt依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置jasypt加密的盐值"><a href="#设置jasypt加密的盐值" class="headerlink" title="设置jasypt加密的盐值"></a>设置jasypt加密的盐值</h3><p>在application.yml配置文件中设置jasypt加密的盐值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ledao</span></span><br></pre></td></tr></table></figure>

<h3 id="获取加密后的数据库密码"><a href="#获取加密后的数据库密码" class="headerlink" title="获取加密后的数据库密码"></a>获取加密后的数据库密码</h3><p>在测试模块中使用下面代码获取加密后的数据库密码，我的数据库密码为123456，下面代码在控制台打印加密后的数据库密码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jasypt.encryption.StringEncryptor;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookManageSystemApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringEncryptor encryptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(encryptor.encrypt(<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改application-yml的数据库密码"><a href="#修改application-yml的数据库密码" class="headerlink" title="修改application.yml的数据库密码"></a>修改application.yml的数据库密码</h3><p>将上面得到的加密后的密码用<code>ENC()</code>包起来，完整代码如下：（把url和username也加密起来也是可以的）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-student</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_bookmanagesystem?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENC(69cbirQ6l+cOIL8x6nblXw==)</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>虽然jasypt每次加密的结果都不同，但是解密后的原密码是同一个</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>jasypt</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows11设置环境变量</title>
    <url>/435.html</url>
    <content><![CDATA[<h3 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h3><p>按下Windows键，点击设置的按钮</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220203140531079.png" alt="image-20220203140531079"></p>
<h3 id="打开高级系统设置"><a href="#打开高级系统设置" class="headerlink" title="打开高级系统设置"></a>打开高级系统设置</h3><p>打开设置界面后，左侧菜单选择系统，右侧选择关于</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-02-03%20140846.png"></p>
<p>然后点击高级系统设置</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-02-03%20141124.png"></p>
<h3 id="选择环境变量"><a href="#选择环境变量" class="headerlink" title="选择环境变量"></a>选择环境变量</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220203141756966.png" alt="image-20220203141756966"></p>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>点击第二个新建，第一个是当前用户的用户变量（只对当前用户有效），而环境变量对所有用户有效</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220203141835519.png" alt="image-20220203141835519"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IOC创建对象</title>
    <url>/436.html</url>
    <content><![CDATA[<h3 id="创建的方式"><a href="#创建的方式" class="headerlink" title="创建的方式"></a>创建的方式</h3><p>Spring IOC可以通过<code>无参构造方法</code>和<code>有参构造方法</code>来创建对象，默认是通过无参构造方法创建</p>
<h3 id="无参构造方法"><a href="#无参构造方法" class="headerlink" title="无参构造方法"></a>无参构造方法</h3><p>如果实体类不存在有参构造方法时可以省略，存在就需要自己写出来（不然就无法通过无参构造方法创建），<font color="#dd0000">也就是Set注入</font></p>
<h4 id="Student实体类"><a href="#Student实体类" class="headerlink" title="Student实体类"></a>Student实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-13 21:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造方法,如果不存在有参构造方法时可以省略,存在就需要自己写出来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="XML文件定义对象"><a href="#XML文件定义对象" class="headerlink" title="XML文件定义对象"></a>XML文件定义对象</h4><p>每一个bean标签为一个对象，id为对象名，class为所属对象</p>
<p>property标签为对象的属性名称以及值，name为属性名称，value为值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过无参构造方法创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;   </span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有参构造方法"><a href="#有参构造方法" class="headerlink" title="有参构造方法"></a>有参构造方法</h3><p>也称为构造器注入，通过有参构造方法来创建对象的方式有三种：（具体的有参构造方法看上面的<code>Student实体类</code>）</p>
<ol>
<li>通过参数下标赋值</li>
<li>通过参数类型赋值</li>
<li>通过参数名称赋值</li>
</ol>
<h4 id="通过参数下标赋值"><a href="#通过参数下标赋值" class="headerlink" title="通过参数下标赋值"></a>通过参数下标赋值</h4><p>在上面的构造方法中，id的下标为0，name的下标为1</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过有参构造方法创建对象(通过参数下标赋值)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过参数类型赋值"><a href="#通过参数类型赋值" class="headerlink" title="通过参数类型赋值"></a>通过参数类型赋值</h4><p><font color="#dd0000">不要使用这种方式，因为可能会存在参数类型相同的情况</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过有参构造方法创建对象(通过参数类型赋值)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过参数名称赋值"><a href="#通过参数名称赋值" class="headerlink" title="通过参数名称赋值"></a>通过参数名称赋值</h4><p><font color="#dd0000">使用这种方式最好</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过有参构造方法创建对象(通过参数名称赋值)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>Set注入和构造器注入的区别：构造器注入就是在<code>有参构造</code>的情况下，采用有参构造进行注入属性值，要注入<code>全部</code>参数；set注入就是只有<code>无参构造</code>的情况之下，采用set方法进行属性的注入，可以注入<code>部分</code>参数。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring配置</title>
    <url>/437.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Spring的配置有beans、bean、import、alias、description</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220214001056935.png" alt="image-20220214001056935"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h4 id="beans"><a href="#beans" class="headerlink" title="beans"></a>beans</h4><p>Spring配置文件的根元素，里面可以包含很多个bean标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h4><p>bean标签放在beans标签内部</p>
<p>每一个bean标签为一个对象，常用属性有：id为对象名，class为所属对象，name为别名（多个别名可以用<code>英文逗号,</code>隔开）</p>
<p>property标签为对象的属性名称以及值，name为属性名称，value为值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过无参构造方法创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s1,s2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>在当前配置文件导入其他的Spring配置文件的配置，resource属性为导入的XML文件名称</p>
<p>下面我在beans.xml导入bean1.xml的配置，相当于将bean1.xml的beans标签内部的所有配置都复制到beans.xml内</p>
<blockquote>
<p>beans.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过无参构造方法创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s1,s2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入bean1.xml的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean1.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>bean1.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过有参构造方法创建对象(通过下标赋值)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过有参构造方法创建对象(通过参数类型赋值)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过有参构造方法创建对象(通过参数名称赋值)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><p>别名，放在beans标签内部，name属性为对应bean的id，alias属性为别名的名称</p>
<p>和bean的name属性是一样的效果，<font color="#dd0000">一般不使用这种方式</font>，使用bean的name属性就可以了（可以直接在对应的bean上看到，方便管理）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过无参构造方法创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id为tom的bean的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;s3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="description"><a href="#description" class="headerlink" title="description"></a>description</h4><p>XML文件描述，一定放在beans标签内部的第一行（即放在所有bean、import、alias标签前面），不然会提示错误</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>我是描述<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过无参构造方法创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id为tom的bean的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;s3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入bean1.xml的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean1.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring通过注解创建对象</title>
    <url>/438.html</url>
    <content><![CDATA[<h3 id="使用到的注解"><a href="#使用到的注解" class="headerlink" title="使用到的注解"></a>使用到的注解</h3><p>使用到的注解有<code>@Configuration</code>和<code>@Bean</code></p>
<h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><p>标注在类上，相当于把该类作为Spring的XML配置文件中的beans标签</p>
<h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><p>标注在方法上(返回某个实例的方法)，等价于Spring的XML配置文件中的bean标签，用于注册bean对象，如果没有定义name属性那么bean的id为方法名，定义了name属性那么bean的id为name的属性值（这时候就不可以用方法名了）</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="Student实体类"><a href="#Student实体类" class="headerlink" title="Student实体类"></a>Student实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-13 21:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造方法,如果不存在有参构造方法时可以省略,存在就需要自己写出来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Spring配置类"><a href="#Spring配置类" class="headerlink" title="Spring配置类"></a>Spring配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-14 1:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;s1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">tom111</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(<span class="number">111</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;tom111&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> config.MyConfig;</span><br><span class="line"><span class="keyword">import</span> entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);</span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之计数排序</title>
    <url>/44.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><ol>
<li>找出待排序的数组中最大和最小的元素</li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项</li>
<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</li>
<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</li>
</ol>
<h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022223525.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计数排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] A=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] B=countSort(A, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : A) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : B) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countSort(<span class="keyword">int</span>[] array,<span class="keyword">int</span> k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造C数组</span></span><br><span class="line">        <span class="keyword">int</span>[] C=<span class="keyword">new</span> <span class="keyword">int</span>[k+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//获取A数组大小用于构造B数组</span></span><br><span class="line">        <span class="keyword">int</span> length=array.length,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//构造B数组</span></span><br><span class="line">        <span class="keyword">int</span>[] B=<span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将A中该元素放到排序后数组B中指定的位置</span></span><br><span class="line">            B[C[array[i]]-<span class="number">1</span>]=array[i];</span><br><span class="line">            <span class="comment">//将C中该元素-1，方便存放下一个同样大小的元素</span></span><br><span class="line">            C[array[i]]--;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将排序好的数组返回，完成排序</span></span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022224055.jpg" alt="img"></p>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring bean作用域</title>
    <url>/441.html</url>
    <content><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>XML配置文件定义Scope时，bean标签使用scope属性即可</p>
<table>
<thead>
<tr>
<th align="center">Scope</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">singleton</td>
<td align="center"><code>spring IoC</code>容器只存在一个<code>bean</code>对象实例。</td>
</tr>
<tr>
<td align="center">prototype</td>
<td align="center">与单例相反，每次请求<code>bean</code>时，它都会创建一个新实例。</td>
</tr>
<tr>
<td align="center">request</td>
<td align="center">在<code>HTTP</code>请求(<code>Request</code>) 的完整生命周期中，将创建并使用单个实例。 只适用于<code>web</code>环境中<code>Spring</code> <code>ApplicationContext</code>中有效。</td>
</tr>
<tr>
<td align="center">session</td>
<td align="center">在<code>HTTP</code>会话(<code>Session</code>) 的完整生命周期中，将创建并使用单个实例。 只适用于<code>web</code>环境中<code>Spring</code> <code>ApplicationContext</code>中有效。</td>
</tr>
<tr>
<td align="center">application</td>
<td align="center">将在<code>ServletContext</code>的完整生命周期中创建并使用单个实例。只适用于<code>web</code>环境中<code>Spring</code> <code>ApplicationContext</code>中有效。</td>
</tr>
<tr>
<td align="center">websocket</td>
<td align="center">在WebSocket的完整生命周期中，将创建并使用单个实例。 只适用于<code>web</code>环境中<code>Spring</code> <code>ApplicationContext</code>中有效。</td>
</tr>
</tbody></table>
<h2 id="singleton和prototype的区别"><a href="#singleton和prototype的区别" class="headerlink" title="singleton和prototype的区别"></a>singleton和prototype的区别</h2><h3 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h3><p>多次获取同一个bean时，获取到的是同一个对象，这是Spring默认的，可以不用说明（即bean标签可以省略scope属性）</p>
<h4 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> config.MyConfig;</span><br><span class="line"><span class="keyword">import</span> entity.Student;</span><br><span class="line"><span class="keyword">import</span> entity.StudentClass;</span><br><span class="line"><span class="keyword">import</span> entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        User user1 = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        User user2 = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user1==user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>控制台打印出<code>true</code></p>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>多次获取同一个bean时，获取到的是不同的对象，因为每一次获取都会生成一个新的对象</p>
<h4 id="beans-xml-1"><a href="#beans-xml-1" class="headerlink" title="beans.xml"></a>beans.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> config.MyConfig;</span><br><span class="line"><span class="keyword">import</span> entity.Student;</span><br><span class="line"><span class="keyword">import</span> entity.StudentClass;</span><br><span class="line"><span class="keyword">import</span> entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        User user1 = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        User user2 = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user1==user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><p>控制台打印出<code>false</code></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring依赖注入多种类型数据</title>
    <url>/439.html</url>
    <content><![CDATA[<h3 id="Student实体类"><a href="#Student实体类" class="headerlink" title="Student实体类"></a>Student实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-13 21:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StudentClass studentClass;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; cards;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentClass <span class="title">getStudentClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentClass</span><span class="params">(StudentClass studentClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentClass = studentClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(String[] books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getCards</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cards;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCards</span><span class="params">(Map&lt;String, String&gt; cards)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cards = cards;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getGames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGames</span><span class="params">(Set&lt;String&gt; games)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(Properties info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, studentClass=&quot;</span> + studentClass +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&quot;, cards=&quot;</span> + cards +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="StudentsClass实体类"><a href="#StudentsClass实体类" class="headerlink" title="StudentsClass实体类"></a>StudentsClass实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-14 14:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Class&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h3><p>下面展示的数据类型有：一般类型、对象、数组、List、Map、Set、空值、Properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentClass1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.StudentClass&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;软件工程3班&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentClass&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentClass1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java编程思想<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL必知必会<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>平凡的世界<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--List--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>跳<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>rap<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>打篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cards&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;校园卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;321&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DNF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> config.MyConfig;</span><br><span class="line"><span class="keyword">import</span> entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring的c和p命名空间</title>
    <url>/440.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring的c和p命名空间可以注入依赖，也就是拓展方式注入</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="StudentClass实体类"><a href="#StudentClass实体类" class="headerlink" title="StudentClass实体类"></a>StudentClass实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-14 14:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentClass</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Class&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="c命名空间"><a href="#c命名空间" class="headerlink" title="c命名空间"></a>c命名空间</h3><h4 id="在beans标签加上约束"><a href="#在beans标签加上约束" class="headerlink" title="在beans标签加上约束"></a>在beans标签加上约束</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure>

<h4 id="定义bean"><a href="#定义bean" class="headerlink" title="定义bean"></a>定义bean</h4><ol>
<li><p>通过构造器参数注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentClass1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.StudentClass&quot;</span> <span class="attr">c:id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;www&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过构造器下标注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentClass2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.StudentClass&quot;</span> <span class="attr">c:_0</span>=<span class="string">&quot;2&quot;</span> <span class="attr">c:_1</span>=<span class="string">&quot;www2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>实体类中<font color="#dd0000">一定要定义一个有参构造器</font>，不然使用c命名空间会报错</p>
<h3 id="p命名空间"><a href="#p命名空间" class="headerlink" title="p命名空间"></a>p命名空间</h3><h4 id="在beans标签加上约束-1"><a href="#在beans标签加上约束-1" class="headerlink" title="在beans标签加上约束"></a>在beans标签加上约束</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure>

<h4 id="定义bean-1"><a href="#定义bean-1" class="headerlink" title="定义bean"></a>定义bean</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentClass3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.StudentClass&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;www3&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>实体类中<font color="#dd0000">如果定义了一个有参构造器，就需要自己手动定义一个无参构造器</font>，不然使用p命名空间会报错</p>
<h3 id="完整beans-xml代码"><a href="#完整beans-xml代码" class="headerlink" title="完整beans.xml代码"></a>完整beans.xml代码</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentClass1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.StudentClass&quot;</span> <span class="attr">c:id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;www&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentClass2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.StudentClass&quot;</span> <span class="attr">c:_0</span>=<span class="string">&quot;2&quot;</span> <span class="attr">c:_1</span>=<span class="string">&quot;www2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentClass3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.StudentClass&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;www3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> config.MyConfig;</span><br><span class="line"><span class="keyword">import</span> entity.Student;</span><br><span class="line"><span class="keyword">import</span> entity.StudentClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        StudentClass studentClass = context.getBean(<span class="string">&quot;studentClass3&quot;</span>, StudentClass.class);</span><br><span class="line">        System.out.println(studentClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>控制打印出id为studentClass3的对象，该对象的id为3，name为www3</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220214153408511.png" alt="image-20220214153408511"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring自动装配</title>
    <url>/442.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>自动装配是Spring满足bean依赖一种方式，Spring会在上下文中自动寻找，并自动给bean装配属性</p>
<p>自动装配有两种方式：</p>
<ol>
<li><p>ByName</p>
<p>根据Setter方法名指定自动装配的bean的id，例如：Setter的方法名为<code>setDog1</code>，所以bean的id就必须为<code>dog1</code></p>
</li>
<li><p>ByType</p>
<p>需要保证所有bean的class唯一，即不可以存在相同类型的bean</p>
</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>一个People有Dog和Cat</p>
<h3 id="手动装配"><a href="#手动装配" class="headerlink" title="手动装配"></a>手动装配</h3><h4 id="People实体类"><a href="#People实体类" class="headerlink" title="People实体类"></a>People实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 18:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&quot;, cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dog实体类"><a href="#Dog实体类" class="headerlink" title="Dog实体类"></a>Dog实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 18:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Cat实体类"><a href="#Cat实体类" class="headerlink" title="Cat实体类"></a>Cat实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 18:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ApplicationContext-xml"><a href="#ApplicationContext-xml" class="headerlink" title="ApplicationContext.xml"></a>ApplicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Dog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Cat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小哈&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.People;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        People people = context.getBean(<span class="string">&quot;people&quot;</span>, People.class);</span><br><span class="line">        System.out.println(people);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220215192042401.png" alt="image-20220215192042401"></p>
<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><h4 id="ByName方式"><a href="#ByName方式" class="headerlink" title="ByName方式"></a>ByName方式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Dog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小哈1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Dog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小哈2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Cat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="ByType方式"><a href="#ByType方式" class="headerlink" title="ByType方式"></a>ByType方式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Dog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小哈1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Cat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>使用注解实现Spring自动装配</title>
    <url>/443.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>实现Spring自动装配的注解有两个：@Autowired和@Resource，两个注解的区别如下：</p>
<ol>
<li><p>@Autowired</p>
<ul>
<li>出处：这是Spring的注解</li>
<li>用法：可以放在属性上面（这时候可以省略setter方法），也可以放在setter方法上面，一般放在属性上面即可</li>
<li>实现方式：通过byType的方式实现，需要保证所有bean的class唯一，即不可以存在相同类型的bean</li>
<li>指定要装配的bean的id的方式：可以使用@Qualifier注解指定bean的id，这个注解使用value属性指定bean的id</li>
</ul>
</li>
<li><p>@Resource</p>
<ul>
<li>出处：这是JDK的注解</li>
<li>用法：放在属性上面</li>
<li>实现方式：默认通过byName的方式实现，如果找不到名字，则通过byType实现，需要保证所有bean的class唯一，即不可以存在相同类型的bean；如果两个都找不到的情况下，就报错</li>
<li>指定要装配的bean的id的方式：指定bean的id的方式有3种：①根据Setter方法名指定自动装配的bean的id，例如：Setter的方法名为<code>setDog1</code>，所以bean的id就必须为<code>dog1</code>②通过@Resource注解的name属性指定bean的id③可以使用@Qualifier注解指定bean的id，这个注解使用value属性指定bean的id。<font color="#dd0000">特别地，②和③一起用，②的方式有效</font></li>
</ul>
</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><h4 id="ApplicationContext-xml"><a href="#ApplicationContext-xml" class="headerlink" title="ApplicationContext.xml"></a>ApplicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Dog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小哈1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Dog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小哈2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.Cat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.entity.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Dog实体类"><a href="#Dog实体类" class="headerlink" title="Dog实体类"></a>Dog实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 18:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Cat实体类"><a href="#Cat实体类" class="headerlink" title="Cat实体类"></a>Cat实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 18:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="People实体类"><a href="#People实体类" class="headerlink" title="People实体类"></a>People实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 18:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;dog2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&quot;, cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.entity.People;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        People people = context.getBean(<span class="string">&quot;people&quot;</span>, People.class);</span><br><span class="line">        System.out.println(people);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220215185457615.png" alt="image-20220215185457615"></p>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>和@Autowired的代码对比，只改动了People实体类</p>
<h4 id="People实体类-1"><a href="#People实体类-1" class="headerlink" title="People实体类"></a>People实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 18:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;dog2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&quot;, cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring一些注解的说明以及用法</title>
    <url>/444.html</url>
    <content><![CDATA[<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>相当于把该类作为Spring的XML配置文件中的beans标签，说明这是一个配置类</p>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>将该注解放在类的上面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 20:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>等价于Spring的XML配置文件中的bean标签，用于注册bean对象</p>
<h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><p>标注在方法上(返回某个实例的方法)，如果没有定义name属性那么bean的id为方法名，定义了name属性那么bean的id为name的属性值（这时候就不可以用方法名了）；这个方法的名字相当于bean标签中id属性，这个方法的返回值相当于bean标签中的class属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 20:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>用于注册bean对象，相当于XML配置文件的bean标签</p>
<h4 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h4><p>将该注解放在类的上面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 20:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(value = &quot;tom&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h3><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><p>用于注册bean对象，相当于XML配置文件的bean标签，和@Component一样的效果，对应持久层（即dao接口的实现类），主要用于数据库相关操作</p>
<h4 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h4><p>在dao接口的实现类上使用这个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-16 21:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository(value = &quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据id查找用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><p>用于注册bean对象，相当于XML配置文件的bean标签，和@Component一样的效果，对应服务层（即Service接口的实现类），主要用于设计一些复杂的逻辑，需要用到dao层</p>
<h4 id="用法-4"><a href="#用法-4" class="headerlink" title="用法"></a>用法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-16 21:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.findById();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><p>用于注册bean对象，相当于XML配置文件的bean标签，和@Component一样的效果，对应Spring MVC控制层，主要用于接收用户请求并调用Service层返回数据给前端页面</p>
<h4 id="用法-5"><a href="#用法-5" class="headerlink" title="用法"></a>用法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.BookType;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.PageBean;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.BookService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.BookTypeService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.util.StringUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台图书类别Controller层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-21 23:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/bookType&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookTypeAdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BookTypeService bookTypeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查图书类别id是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookTypeId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/checkBookTypeId&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">checkBookTypeId</span><span class="params">(<span class="meta">@RequestParam(value = &quot;bookTypeId&quot;, required = false)</span> Integer bookTypeId)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        BookType bookType = bookTypeService.findById(bookTypeId);</span><br><span class="line">        <span class="keyword">if</span> (bookType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            resultMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            resultMap.put(<span class="string">&quot;errorInfo&quot;</span>, <span class="string">&quot;你选择的图书类别不存在,请重新选择!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resultMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><p>用来给变量注入值，详细说明和用法查看博客：<a href="https://blog.zoutl.cn/509.html">Spring框架@Value注解的使用</a></p>
<h3 id="Autowired和-Resource"><a href="#Autowired和-Resource" class="headerlink" title="@Autowired和@Resource"></a>@Autowired和@Resource</h3><p>这两个注解都是用于实现Spring的自动装配，详细说明和用法查看博客：<a href="https://blog.zoutl.cn/443.html">使用注解实现Spring自动装配</a></p>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p>定义配置类下的<code>某个使用了@bean注解的方法</code>的作用域</p>
<h4 id="用法-6"><a href="#用法-6" class="headerlink" title="用法"></a>用法</h4><p>Spring bean的默认作用域为singleton</p>
<p>在<code>某个使用了@bean注解的方法</code>的上面使用这个注解时定义该方法的作用域，只对该方法有效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 20:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(value = &quot;prototype&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><p>用于定义扫描的路径并从中找出标识了需要装配的类自动装配到spring的bean容器中（使用@Component注解的类）</p>
<h4 id="用法-7"><a href="#用法-7" class="headerlink" title="用法"></a>用法</h4><p>一般在配置类上使用，扫描指定包下的类，将所有需要装配的类都装配到spring的bean容器中；如果不使用这个注解的话，只会装配该配置类下使用了@bean的方法对应的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 20:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.ledao.entity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要扫描多个包，用法如下：（也可以使用@ComponentScans注解）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value = &#123;&quot;com.ledao.entity&quot;,&quot;com.ledao.service.impl&quot;&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="ComponentScans"><a href="#ComponentScans" class="headerlink" title="@ComponentScans"></a>@ComponentScans</h3><h4 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h4><p>和@ComponentScan一样的效果，用于扫描多个包</p>
<h4 id="用法-8"><a href="#用法-8" class="headerlink" title="用法"></a>用法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScans(value = &#123;@ComponentScan(value = &quot;com.ledao.entity&quot;), @ComponentScan(value = &quot;com.ledao.service.impl&quot;)&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><h4 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h4><p>用于导入其他配置类的配置</p>
<h4 id="用法-9"><a href="#用法-9" class="headerlink" title="用法"></a>用法</h4><p>在<code>要导入其他配置类</code>的配置类上使用，@Import()括号内填<code>要导入的配置类名称.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 20:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h3><h4 id="说明-9"><a href="#说明-9" class="headerlink" title="说明"></a>说明</h4><p>用于标注使用这个注解的类是一个切面</p>
<h4 id="用法-10"><a href="#用法-10" class="headerlink" title="用法"></a>用法</h4><p>查看博客：<a href="https://blog.zoutl.cn/448.html">Spring 使用注解实现 AOP | LeDao 的博客 (zoutl.cn)</a></p>
<h3 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h3><h4 id="说明-10"><a href="#说明-10" class="headerlink" title="说明"></a>说明</h4><p>执行业务代码前先执行这个方法</p>
<h4 id="用法-11"><a href="#用法-11" class="headerlink" title="用法"></a>用法</h4><p>查看博客：<a href="https://blog.zoutl.cn/448.html">Spring 使用注解实现 AOP | LeDao 的博客 (zoutl.cn)</a></p>
<h3 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h3><h4 id="说明-11"><a href="#说明-11" class="headerlink" title="说明"></a>说明</h4><p>执行业务代码后再执行这个方法</p>
<h4 id="用法-12"><a href="#用法-12" class="headerlink" title="用法"></a>用法</h4><p>查看博客：<a href="https://blog.zoutl.cn/448.html">Spring 使用注解实现 AOP | LeDao 的博客 (zoutl.cn)</a></p>
<h3 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h3><h4 id="说明-12"><a href="#说明-12" class="headerlink" title="说明"></a>说明</h4><p>环绕增强方法使用</p>
<h4 id="用法-13"><a href="#用法-13" class="headerlink" title="用法"></a>用法</h4><p>查看博客：<a href="https://blog.zoutl.cn/448.html">Spring 使用注解实现 AOP | LeDao 的博客 (zoutl.cn)</a></p>
<h3 id="EnableAspectJAutoProxy"><a href="#EnableAspectJAutoProxy" class="headerlink" title="@EnableAspectJAutoProxy"></a>@EnableAspectJAutoProxy</h3><h4 id="说明-13"><a href="#说明-13" class="headerlink" title="说明"></a>说明</h4><p>启动AspectJ自动代理</p>
<h4 id="用法-14"><a href="#用法-14" class="headerlink" title="用法"></a>用法</h4><p>查看博客：<a href="https://blog.zoutl.cn/448.html">Spring 使用注解实现 AOP | LeDao 的博客 (zoutl.cn)</a></p>
<h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><h4 id="说明-14"><a href="#说明-14" class="headerlink" title="说明"></a>说明</h4><p>用于实现事务</p>
<h4 id="用法-15"><a href="#用法-15" class="headerlink" title="用法"></a>用法</h4><p>查看博客：<a href="https://blog.zoutl.cn/457.html">Spring 使用 @Transactional 注解实现事务 | LeDao 的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>在字段上使用@Autowired注解时提示：Field injection is not recommended</title>
    <url>/445.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>之所以会出现这个提示，是因为Spring 4.0开始就不推荐使用属性注入，改为推荐<code>Setter注入</code>和<code>构造器注入</code></p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>想不出现这个提示，解决办法有4个：</p>
<ol>
<li>Setter注入</li>
<li>构造器注入</li>
<li>直接使用JDK的注解<code>@Resource</code></li>
<li>如果还是想继续在字段上使用@Autowired注解，又不想出现这个提示，那就修改idea的配置让它不提示</li>
</ol>
<h4 id="Setter注入（推荐）"><a href="#Setter注入（推荐）" class="headerlink" title="Setter注入（推荐）"></a>Setter注入（推荐）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><p>在UserServiceImpl.java注入UserDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类注册UserService的bean，使用构造器方式注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.ledao.dao.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 20:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">userDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-Resource（最简单）"><a href="#使用-Resource（最简单）" class="headerlink" title="使用@Resource（最简单）"></a>使用@Resource（最简单）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure>

<h4 id="修改idea配置（不推荐）"><a href="#修改idea配置（不推荐）" class="headerlink" title="修改idea配置（不推荐）"></a>修改idea配置（不推荐）</h4><p>让鼠标停留在@Autowired注解上，使用快捷键<code>ALT+回车键</code>，选择下图的第二个选项，改了之后想改回来就有点麻烦了，所以不推荐使用</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220217024409338.png" alt="image-20220217024409338"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Spring的API接口实现AOP</title>
    <url>/446.html</url>
    <content><![CDATA[<h3 id="引入AOP的依赖"><a href="#引入AOP的依赖" class="headerlink" title="引入AOP的依赖"></a>引入AOP的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 20:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Service接口实现类"><a href="#Service接口实现类" class="headerlink" title="Service接口实现类"></a>Service接口实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.service.StudentService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 20:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据id查找学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定义增强类"><a href="#定义增强类" class="headerlink" title="定义增强类"></a>定义增强类</h3><h4 id="Log前置增强类"><a href="#Log前置增强类" class="headerlink" title="Log前置增强类"></a>Log前置增强类</h4><p>执行业务代码前先执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 21:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeLog</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行业务代码前先执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args   参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[BeforeLog]&quot;</span> + target.getClass().getName() + <span class="string">&quot;下的&quot;</span> + method.getName() + <span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Log后置增强类"><a href="#Log后置增强类" class="headerlink" title="Log后置增强类"></a>Log后置增强类</h4><p>执行业务代码后再执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 21:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行业务代码后再执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue 返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args        参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target      目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AfterLog]执行了&quot;</span> + method.getName() + <span class="string">&quot;方法,返回结果为:&quot;</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置文件ApplicationContext-xml"><a href="#配置文件ApplicationContext-xml" class="headerlink" title="配置文件ApplicationContext.xml"></a>配置文件ApplicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.service.impl.StudentServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.log.BeforeLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点：expression：表达式，execution(要执行的位置！* * * * *)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.ledao.service.impl.StudentServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        StudentService studentService = context.getBean(<span class="string">&quot;studentService&quot;</span>, StudentService.class);</span><br><span class="line">        studentService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h3><p>添加学生的业务前后分别执行了BeforeLog和AfterLog</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-02-17%20214549.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义类实现AOP</title>
    <url>/447.html</url>
    <content><![CDATA[<h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 20:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Service接口实现类"><a href="#Service接口实现类" class="headerlink" title="Service接口实现类"></a>Service接口实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.service.StudentService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 20:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据id查找学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义切入类"><a href="#自定义切入类" class="headerlink" title="自定义切入类"></a>自定义切入类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.diy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 22:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------执行方法前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------执行方法后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置文件ApplicationContext-xml"><a href="#配置文件ApplicationContext-xml" class="headerlink" title="配置文件ApplicationContext.xml"></a>配置文件ApplicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.service.impl.StudentServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diyPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diyPointCut&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.ledao.service.impl.StudentServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        StudentService studentService = context.getBean(<span class="string">&quot;studentService&quot;</span>, StudentService.class);</span><br><span class="line">        studentService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220217222031941.png" alt="image-20220217222031941"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring使用注解实现AOP</title>
    <url>/448.html</url>
    <content><![CDATA[<h3 id="使用到的注解"><a href="#使用到的注解" class="headerlink" title="使用到的注解"></a>使用到的注解</h3><h4 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h4><p>用于标注使用这个注解的类是一个切面</p>
<h4 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h4><p>执行业务代码前先执行这个方法</p>
<h4 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h4><p>执行业务代码后再执行这个方法</p>
<h4 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h4><p>环绕增强方法使用</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 20:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service接口实现类"><a href="#Service接口实现类" class="headerlink" title="Service接口实现类"></a>Service接口实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.service.StudentService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 20:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据id查找学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AnnotationPointCut增强类"><a href="#AnnotationPointCut增强类" class="headerlink" title="AnnotationPointCut增强类"></a>AnnotationPointCut增强类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.diy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-17 22:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行方法前先执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.ledao.service.impl.StudentServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------执行方法前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行方法后再执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.ledao.service.impl.StudentServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------执行方法后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint 通过它调用目标方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.ledao.service.impl.StudentServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        <span class="comment">//获取执行的业务代码</span></span><br><span class="line">        Signature signature = proceedingJoinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行的业务方法为:&quot;</span> + signature);</span><br><span class="line">        <span class="comment">//执行业务代码</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置文件ApplicationContext-xml"><a href="#配置文件ApplicationContext-xml" class="headerlink" title="配置文件ApplicationContext.xml"></a>配置文件ApplicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.service.impl.StudentServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ledao.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ledao.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-12 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        StudentService studentService = context.getBean(<span class="string">&quot;studentService&quot;</span>, StudentService.class);</span><br><span class="line">        studentService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220217230117467.png" alt="image-20220217230117467"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果不想使用配置文件，则需要在配置类上使用<code>@EnableAspectJAutoProxy</code>注解，这个注解的作用是：启动AspectJ自动代理，配置类代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.ledao.dao.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.ledao.diy.AnnotationPointCut;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.impl.StudentServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-15 20:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentService <span class="title">studentService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnnotationPointCut <span class="title">annotationPointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnnotationPointCut();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA启动Tomcat时报错：Address localhost:1099 is already in use的解决办法</title>
    <url>/449.html</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>1099端口已经被其它程序占用</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>干掉占用该端口的程序，释放1099端口，具体步骤查看博客：<a href="https://blog.zoutl.cn/314.html">Windows10 释放被占用端口 | LeDao 的博客 (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之桶排序</title>
    <url>/45.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><ol>
<li>设置一个定量的数组当作空桶</li>
<li>遍历输入数据，并且把数据一个一个放到对应的桶里去</li>
<li>对每个不是空的桶进行排序</li>
<li>从不是空的桶里把排好序的数据拼接起来</li>
</ol>
<h3 id="图片演示"><a href="#图片演示" class="headerlink" title="图片演示"></a>图片演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022225009.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 桶排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输入元素均在 [0, 10) 这个区间内</span></span><br><span class="line">        <span class="keyword">float</span>[] arr = <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">0.12f</span>, <span class="number">2.2f</span>, <span class="number">8.8f</span>, <span class="number">7.6f</span>, <span class="number">7.2f</span>, <span class="number">6.3f</span>, <span class="number">9.0f</span>, <span class="number">1.6f</span>, <span class="number">5.6f</span>, <span class="number">2.4f</span>&#125;;</span><br><span class="line">        bucketSort(arr);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(<span class="keyword">float</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建一个桶的集合</span></span><br><span class="line">        ArrayList&lt;LinkedList&lt;Float&gt;&gt; buckets = <span class="keyword">new</span> ArrayList&lt;LinkedList&lt;Float&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 新建一个桶，并将其添加到桶的集合中去。</span></span><br><span class="line">            <span class="comment">// 由于桶内元素会频繁的插入，所以选择 LinkedList 作为桶的数据结构</span></span><br><span class="line">            buckets.add(<span class="keyword">new</span> LinkedList&lt;Float&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将输入数据全部放入桶中并完成排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">float</span> data : arr) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = getBucketIndex(data);</span><br><span class="line">            insertSort(buckets.get(index), data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将桶中元素全部取出来并放入 arr 中输出</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (LinkedList&lt;Float&gt; bucket : buckets) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Float data : bucket) &#123;</span><br><span class="line">                arr[index++] = data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算得到输入元素应该放到哪个桶内</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getBucketIndex</span><span class="params">(<span class="keyword">float</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里例子写的比较简单，仅使用浮点数的整数部分作为其桶的索引值</span></span><br><span class="line">        <span class="comment">// 实际开发中需要根据场景具体设计</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们选择插入排序作为桶内元素排序的方法 每当有一个新元素到来时，我们都调用该方法将其插入到恰当的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(List&lt;Float&gt; bucket, <span class="keyword">float</span> data)</span> </span>&#123;</span><br><span class="line">        ListIterator&lt;Float&gt; it = bucket.listIterator();</span><br><span class="line">        <span class="keyword">boolean</span> insertFlag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data &lt;= it.next()) &#123;</span><br><span class="line">                it.previous(); <span class="comment">// 把迭代器的位置偏移回上一个位置</span></span><br><span class="line">                it.add(data); <span class="comment">// 把数据插入到迭代器的当前位置</span></span><br><span class="line">                insertFlag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (insertFlag) &#123;</span><br><span class="line">            bucket.add(data); <span class="comment">// 否则把数据插入到链表末端</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">float</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022225259.jpg" alt="img"></p>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA使用Tomcat启动项目时控制台信息出现中文乱码的解决办法</title>
    <url>/450.html</url>
    <content><![CDATA[<h3 id="Tomcat信息出现中文乱码"><a href="#Tomcat信息出现中文乱码" class="headerlink" title="Tomcat信息出现中文乱码"></a>Tomcat信息出现中文乱码</h3><h4 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220218234420426.png" alt="image-20220218234420426"></p>
<h4 id="找到下图设置"><a href="#找到下图设置" class="headerlink" title="找到下图设置"></a>找到下图设置</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220218234516219.png" alt="image-20220218234516219"></p>
<h4 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h4><p>将上图中的Default Encoding修改为UTF-8</p>
<h3 id="输出语句乱码"><a href="#输出语句乱码" class="headerlink" title="输出语句乱码"></a>输出语句乱码</h3><p>也就是<code>System.out.println()</code>打印的信息出现乱码，下图的第三个UTF-8后打上勾</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220219050537976.png" alt="image-20220219050537976"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA报错：There is not enough memory to perform the requested operation的解决办法</title>
    <url>/451.html</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>当前idea占用的运行内存大于默认的最大运行内存</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="修改允许占用最大运行内存"><a href="#修改允许占用最大运行内存" class="headerlink" title="修改允许占用最大运行内存"></a>修改允许占用最大运行内存</h4><p>修改idea允许占用的最大运行内存，根据下图打开idea的内存配置文件，修改Xmx（根据自己的情况设置，一般<code>2048M</code>就可以了）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220219031756132.png" alt="image-20220219031756132"></p>
<p>我的idea内存配置文件内容如下：（主要修改Xmx，数值为内存的大小，单位为兆）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">-Xms512m</span></span><br><span class="line"><span class="attr">-Xmx2048m</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">ReservedCodeCacheSize=512m</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseG1GC</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">SoftRefLRUPolicyMSPerMB=50</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">CICompilerCount=2</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">-OmitStackTraceInFastThrow</span></span><br><span class="line"><span class="attr">-ea</span></span><br><span class="line"><span class="meta">-Dsun.io.useCanonCaches</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">-Djdk.http.auth.tunneling.disabledSchemes</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="meta">-Djdk.attach.allowAttachSelf</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">-Djdk.module.illegalAccess.silent</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">-Dkotlinx.coroutines.debug</span>=<span class="string">off</span></span><br></pre></td></tr></table></figure>

<h4 id="实时查看占用的运行内存"><a href="#实时查看占用的运行内存" class="headerlink" title="实时查看占用的运行内存"></a>实时查看占用的运行内存</h4><p>连续按两下SHIFT键，搜索<code>Show Memory Indicator</code>，出现下图划红线的选项后用鼠标点击一下就打开占用内存监控了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220219032528068.png" alt="image-20220219032528068"></p>
<p>然后在idea的右下角可以看到当前占用的运行内存以及idea允许占用的最大运行内存</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220219032504148.png" alt="image-20220219032504148"></p>
<h4 id="继续报错"><a href="#继续报错" class="headerlink" title="继续报错"></a>继续报错</h4><p>经过上面的改动后，只正常了一段时间，然后又报错了，那就根据下图修改</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220219041802281.png" alt="image-20220219041802281"></p>
<h4 id="又报错"><a href="#又报错" class="headerlink" title="又报错"></a>又报错</h4><p>改了之后，一段时间后还是报错，后来我在网上看到有可能是插件占用内存过高（特别是检查代码以及bug的插件），我卸载了下图两个插件中的<code>QAPlug - PMD</code>（有可能是由于两个插件重复了）以及一些不常用的插件后，idea又可以正常使用了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220219042524016.png" alt="image-20220219042524016"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA使用GsonFormatPlus插件根据JSON数据生成实体类</title>
    <url>/452.html</url>
    <content><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在设置中Plugins–&gt;Marketplace–&gt;搜索插件–&gt;安装</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220221195705316.png" alt="image-20220221195705316"></p>
<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><h4 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;苹果&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;num&quot;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="打开插件页面"><a href="#打开插件页面" class="headerlink" title="打开插件页面"></a>打开插件页面</h4><p>首先打开一个实体类，使用<code>ALT+INSERT</code>快捷键出现下面选项，选择GsonFormatPlus，也可以直接使用<code>ALT+S</code>快捷键（这两个快捷键只在类中生效，不在接口中生效）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220221200654176.png" alt="image-20220221200654176"></p>
<p>打开的插件页面如下图，在第一的输入框中输入包名以及生成的实体类名称，格式为：com.ledao.entity.Fruit，前面三个为包名，最后一个英文为实体类的名称；JSON处填JSON类型的数据</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220221200958327.png" alt="image-20220221200958327"></p>
<p>然后点击OK出现下面界面，可以对字段的数据类型、名称和注释进行修改以及添加，然后点击OK即可生成实体类</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220221201536232.png" alt="image-20220221201536232"></p>
<h4 id="生成的实体类"><a href="#生成的实体类" class="headerlink" title="生成的实体类"></a>生成的实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-02-21 20:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;num&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端分离项目在本地IDE部署步骤</title>
    <url>/453.html</url>
    <content><![CDATA[<h3 id="使用到的项目和IDE"><a href="#使用到的项目和IDE" class="headerlink" title="使用到的项目和IDE"></a>使用到的项目和IDE</h3><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><p>使用到的两个项目的GitHub链接为：</p>
<p>前端代码地址：<a href="https://github.com/a6678696/ExamSystem2">https://github.com/a6678696/ExamSystem2</a></p>
<p>后端代码地址：<a href="https://github.com/a6678696/ExamSystem">https://github.com/a6678696/ExamSystem</a></p>
<h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><p>我使用的是IntelliJ IDEA和WebStorm，本博客也是以这两个IDE为例部署项目</p>
<h3 id="给GitHub配置SSH-Key"><a href="#给GitHub配置SSH-Key" class="headerlink" title="给GitHub配置SSH Key"></a>给GitHub配置SSH Key</h3><p>具体步骤查看博客：<a href="https://blog.zoutl.cn/236.html">https://blog.zoutl.cn/236.html</a></p>
<h3 id="clone项目到本地"><a href="#clone项目到本地" class="headerlink" title="clone项目到本地"></a>clone项目到本地</h3><p>进入指定的文件夹，使用下面命令将项目clone到本地</p>
<h4 id="clone前端项目"><a href="#clone前端项目" class="headerlink" title="clone前端项目"></a>clone前端项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:a6678696/ExamSystem2.git</span><br></pre></td></tr></table></figure>

<h4 id="clone后端项目"><a href="#clone后端项目" class="headerlink" title="clone后端项目"></a>clone后端项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:a6678696/ExamSystem.git</span><br></pre></td></tr></table></figure>

<h3 id="部署前端项目"><a href="#部署前端项目" class="headerlink" title="部署前端项目"></a>部署前端项目</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>具体步骤查看博客：<a href="https://blog.zoutl.cn/200.html">https://blog.zoutl.cn/200.html</a></p>
<h4 id="打开Terminal窗口执行命令"><a href="#打开Terminal窗口执行命令" class="headerlink" title="打开Terminal窗口执行命令"></a>打开Terminal窗口执行命令</h4><p>使用WebStorm打开项目ExamSystem2后，使用快捷键<code>ALT+F12</code>打开Terminal窗口，然后执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p><font color="#dd0000">一定要等到上面的命令执行完再启动哦</font>，打开<code>package.json</code>文件，点击第9行左边的启动按钮，选择第一个选项启动即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226203527215.png" alt="image-20220226203527215"></p>
<h4 id="启动成功界面"><a href="#启动成功界面" class="headerlink" title="启动成功界面"></a>启动成功界面</h4><p>启动成功后会自动打开浏览器并可以看到下面界面，到此前端部署成功了，如果没有自动打开浏览器就再浏览器地址栏手动输入：<code>http://localhost:8888/</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226203804572.png" alt="image-20220226203804572"></p>
<p>如果需要再次启动，可以通过点击下图的按钮来启动了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226204012557.png" alt="image-20220226204012557"></p>
<h3 id="部署后端项目"><a href="#部署后端项目" class="headerlink" title="部署后端项目"></a>部署后端项目</h3><h4 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h4><p>使用IntelliJ IDEA打开项目ExamSystem后，打开项目配置，也可以使用下图显示的快捷键</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226204538159.png" alt="image-20220226204538159"></p>
<p>选择本地安装的JDK，我本地的是JKD1.8，项目开发时使用的也是JKD1.8</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226204811013.png" alt="image-20220226204811013"></p>
<h4 id="启动项目-1"><a href="#启动项目-1" class="headerlink" title="启动项目"></a>启动项目</h4><p>打开ExamSystemApplication.java这个类，运行main方法</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226205006125.png" alt="image-20220226205006125"></p>
<p>然后会报错：<code>Failed to load property source from location &#39;classpath:/application.yml&#39;</code></p>
<h4 id="报错的解决办法"><a href="#报错的解决办法" class="headerlink" title="报错的解决办法"></a>报错的解决办法</h4><p>打开设置，找到下图的设置并将画红线的3处都改为<code>UTF-8</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226205457181.png" alt="image-20220226205457181"></p>
<p>打开Maven工具栏clean一下</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226205836239.png" alt="image-20220226205836239"></p>
<h4 id="再次启动"><a href="#再次启动" class="headerlink" title="再次启动"></a>再次启动</h4><p>直接点击顶部工具栏的启动按钮即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226205936853.png" alt="image-20220226205936853"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>两个项目都要启动起来，然后在登录界面选择学生身份，用户名和密码都是<code>111</code>，更多用户自己去查看数据库，如果登录成功进入学生界面，说明前后端分离项目的部署已经成功了！</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226210252836.png" alt="image-20220226210252836"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Vue.js</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA报错：Failed to load property source from location classpath:/application.yml的解决办法</title>
    <url>/454.html</url>
    <content><![CDATA[<blockquote>
<p>打开设置，找到下图的设置并将画红线的3处都改为<code>UTF-8</code></p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226205457181.png" alt="image-20220226205457181"></p>
<blockquote>
<p>打开Maven工具栏clean一下</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220226205836239.png" alt="image-20220226205836239"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC使用@ResponseBody注解时返回中文出现乱码的解决办法</title>
    <url>/456.html</url>
    <content><![CDATA[<p>指定响应的字符集为utf-8，将@RequestMapping注解的produces属性的值设置为<code>&#123;&quot;text/plain;charset=utf-8&quot;, &quot;text/html;charset=utf-8&quot;&#125;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;, produces = &#123;&quot;text/plain;charset=utf-8&quot;, &quot;text/html;charset=utf-8&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setName(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">    student.setAge(<span class="number">10</span>);</span><br><span class="line">    studentService.add(student);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;添加成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>npm报错：A complete log of this run can be fund in的解决办法</title>
    <url>/455.html</url>
    <content><![CDATA[<p>WebStorm使用快捷键<code>ALT+F12</code>打开Terminal窗口，然后分别执行下面两条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#清理缓存</span></span><br><span class="line"> npm cache clean --force</span><br><span class="line"> <span class="comment">#安装依赖</span></span><br><span class="line"> npm install</span><br></pre></td></tr></table></figure>

<p>也可以使用CMD命令或Git命令进入项目根目录后执行上面命令</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring使用@Transactional注解实现事务</title>
    <url>/457.html</url>
    <content><![CDATA[<h3 id="注解概述"><a href="#注解概述" class="headerlink" title="注解概述"></a>注解概述</h3><p>是声明式事务管理编程中使用的注解</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">String</td>
<td align="center">可选的限定描述符，指定使用的事务管理器</td>
</tr>
<tr>
<td align="center">propagation</td>
<td align="center">enum: Propagation</td>
<td align="center">可选的事务传播行为设置</td>
</tr>
<tr>
<td align="center">isolation</td>
<td align="center">enum: Isolation</td>
<td align="center">可选的事务隔离级别设置</td>
</tr>
<tr>
<td align="center">readOnly</td>
<td align="center">boolean</td>
<td align="center">读写或只读事务，默认读写</td>
</tr>
<tr>
<td align="center">timeout</td>
<td align="center">int (in seconds granularity)</td>
<td align="center">事务超时时间设置</td>
</tr>
<tr>
<td align="center">rollbackFor</td>
<td align="center">Class对象数组，必须继承自Throwable</td>
<td align="center">导致事务回滚的异常类数组</td>
</tr>
<tr>
<td align="center">rollbackForClassName</td>
<td align="center">类名数组，必须继承自Throwable</td>
<td align="center">导致事务回滚的异常类名字数组</td>
</tr>
<tr>
<td align="center">noRollbackFor</td>
<td align="center">Class对象数组，必须继承自Throwable</td>
<td align="center">不会导致事务回滚的异常类数组</td>
</tr>
<tr>
<td align="center">noRollbackForClassName</td>
<td align="center">类名数组，必须继承自Throwable</td>
<td align="center">不会导致事务回滚的异常类名字数组</td>
</tr>
</tbody></table>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>一般在要配置事务的public方法上使用，不要在接口或者接口方法上使用该注解（这是Spring的建议）</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置Spring的事务处理"><a href="#配置Spring的事务处理" class="headerlink" title="配置Spring的事务处理"></a>配置Spring的事务处理</h4><p>在Spring的配置文件声明事务管理器和配置基于注解的声明式事务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置基于注解的声明式事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置事务的方法"><a href="#配置事务的方法" class="headerlink" title="配置事务的方法"></a>配置事务的方法</h4><p>下面方法的作用：添加学生信息，然后查找一个id为1000的学生，如果这个学生存在，添加学生就成功</p>
<p>出现事务回滚的情况：如果出现NullPointerException就会发生事务回滚，如果出现RuntimeException也会回滚</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = &#123;NullPointerException.class&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;, produces = &#123;&quot;text/plain;charset=utf-8&quot;, &quot;text/html;charset=utf-8&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    student.setAge(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//添加学生信息到数据库</span></span><br><span class="line">    studentService.add(student);</span><br><span class="line">    <span class="comment">//在数据库中查找id为1000的学生,如果这个学生存在,上面的添加操作就成功</span></span><br><span class="line">    Student student1 = studentService.findById(<span class="number">1000</span>);</span><br><span class="line">    System.out.println(student1.getId());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">测试条件</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">数据库中<code>不存在</code>id为1000的学生</td>
<td align="center">报错，且添加学生<code>不成功</code></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">数据库中<code>存在</code>id为1000的学生</td>
<td align="center">添加学生<code>成功</code></td>
</tr>
</tbody></table>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-02-28%20210956%20001346.gif"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis给key设置过期时间</title>
    <url>/458.html</url>
    <content><![CDATA[<h3 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h3><blockquote>
<p>说明</p>
</blockquote>
<p>给key设置过期时间，时间单位：<code>秒</code></p>
<blockquote>
<p>语法</p>
</blockquote>
<p>expire key time</p>
<blockquote>
<p>示例</p>
</blockquote>
<p><code>expire a 10</code>，给名为a的key设置10秒的过期时间</p>
<h3 id="pexpire"><a href="#pexpire" class="headerlink" title="pexpire"></a>pexpire</h3><blockquote>
<p>说明</p>
</blockquote>
<p>给key设置过期时间，时间单位：<code>毫秒</code></p>
<blockquote>
<p>语法</p>
</blockquote>
<p>pexpire key time</p>
<blockquote>
<p>示例</p>
</blockquote>
<p><code>pexpire a 2000</code>，给名为a的key设置2000毫秒的过期时间（2秒钟）</p>
<h3 id="ttl"><a href="#ttl" class="headerlink" title="ttl"></a>ttl</h3><blockquote>
<p>说明</p>
</blockquote>
<p>获取key的剩余过期时间：<code>（单位为秒）</code></p>
<ol>
<li>如果key存在过期时间，返回剩余生存时间</li>
<li>如果key是永久的，返回-1</li>
<li>如果key不存在或者已过期，返回-2</li>
</ol>
<blockquote>
<p>语法</p>
</blockquote>
<p>ttl key</p>
<blockquote>
<p>示例</p>
</blockquote>
<p><code>ttl a</code>，获取名为a的key的剩余过期时间</p>
<h3 id="pttl"><a href="#pttl" class="headerlink" title="pttl"></a>pttl</h3><blockquote>
<p>说明</p>
</blockquote>
<p>获取key的剩余过期时间：<code>（单位为毫秒）</code></p>
<ol>
<li>如果key存在过期时间，返回剩余生存时间</li>
<li>如果key是永久的，返回-1</li>
<li>如果key不存在或者已过期，返回-2</li>
</ol>
<blockquote>
<p>语法</p>
</blockquote>
<p>pttl key</p>
<blockquote>
<p>示例</p>
</blockquote>
<p><code>pttl a</code>，获取名为a的key的剩余过期时间</p>
<h3 id="persist"><a href="#persist" class="headerlink" title="persist"></a>persist</h3><blockquote>
<p>说明</p>
</blockquote>
<p>移除key的过期时间，将其转换为永久状态。如果返回1，代表转换成功。如果返回0，代表key不存在或者之前就已经是永久状态。</p>
<blockquote>
<p>语法</p>
</blockquote>
<p>persist key</p>
<blockquote>
<p>示例</p>
</blockquote>
<p><code>persist a</code>，移除名为a的key的剩余过期时间，将其转换为永久状态</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot监听Redis过期的key</title>
    <url>/459.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-yml配置Redis"><a href="#application-yml配置Redis" class="headerlink" title="application.yml配置Redis"></a>application.yml配置Redis</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.41</span><span class="number">.222</span><span class="number">.106</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">667866</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<h3 id="Redis监听配置类"><a href="#Redis监听配置类" class="headerlink" title="Redis监听配置类"></a>Redis监听配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.listener.KeyExpiredListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis监听过期的key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-02 2:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">redisMessageListenerContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisMessageListenerContainer redisMessageListenerContainer = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        redisMessageListenerContainer.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisMessageListenerContainer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyExpiredListener <span class="title">keyExpiredListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyExpiredListener(<span class="keyword">this</span>.redisMessageListenerContainer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="过期key监听类"><a href="#过期key监听类" class="headerlink" title="过期key监听类"></a>过期key监听类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.KeyExpirationEventMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期key监听类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-02 2:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyExpiredListener</span> <span class="keyword">extends</span> <span class="title">KeyExpirationEventMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KeyExpiredListener</span><span class="params">(RedisMessageListenerContainer listenerContainer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(listenerContainer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date() + <span class="string">&quot;: 过期的key为&quot;</span> + message.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Jedis工具类"><a href="#Jedis工具类" class="headerlink" title="Jedis工具类"></a>Jedis工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-17 1:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;121.41.222.106&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer PORT = <span class="number">6379</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTH_PASSWORD = <span class="string">&quot;667866&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Redis连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JedisPool <span class="title">getRedisLink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">100</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisPool(jedisPoolConfig, HOST, PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭Redis连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedisPool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeRedis</span><span class="params">(JedisPool jedisPool, Jedis jedis)</span> </span>&#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">        jedisPool.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Jedis</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedisPool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">(JedisPool jedisPool)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        jedis.auth(AUTH_PASSWORD);</span><br><span class="line">        <span class="keyword">return</span> jedis;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setKey</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        JedisPool jedisPool = getRedisLink();</span><br><span class="line">        Jedis jedis = getJedis(jedisPool);</span><br><span class="line">        String result = jedis.set(key, value);</span><br><span class="line">        closeRedis(jedisPool, jedis);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给指定key设置过期时间(秒)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setKeyTime</span><span class="params">(String key, <span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">        JedisPool jedisPool = getRedisLink();</span><br><span class="line">        Jedis jedis = getJedis(jedisPool);</span><br><span class="line">        jedis.expire(key, seconds);</span><br><span class="line">        closeRedis(jedisPool,jedis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="请求的方法"><a href="#请求的方法" class="headerlink" title="请求的方法"></a>请求的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setRedisKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">setRedisKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RedisUtil.setKey(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    RedisUtil.setKeyTime(<span class="string">&quot;a&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Date()+<span class="string">&quot;: &quot;</span>+<span class="string">&quot;设置了key,过期时间为&quot;</span>+<span class="number">10</span>+<span class="string">&quot;秒&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;设置成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器通过请求<code>http://localhost/setRedisKey</code>链接创建一个名为a的key，并给它设置10秒的过期时间</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-03-02%20025638.jpg" alt="2022-03-02 025638"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法之基数排序</title>
    <url>/46.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><ol>
<li>取得数组中的最大数，并取得位数</li>
<li>arr为原始数组，从最低位开始取每个位组成radix数组</li>
<li>对radix进行计数排序（利用计数排序适用于小范围数的特点）</li>
</ol>
<h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022233420.jpg" alt="img"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基数排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">63</span>, <span class="number">157</span>, <span class="number">189</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">47</span>, <span class="number">141</span>, <span class="number">121</span>, <span class="number">157</span>, <span class="number">156</span>,<span class="number">194</span>, <span class="number">117</span>, <span class="number">98</span>, <span class="number">139</span>, <span class="number">67</span>, <span class="number">133</span>, <span class="number">181</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">0</span>, <span class="number">109</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        radixSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高位优先法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 待排序列，必须为自然数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//待排序列最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//指数</span></span><br><span class="line">        <span class="keyword">int</span> exp;</span><br><span class="line">        <span class="comment">//计算最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> anArr : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (anArr &gt; max) &#123;</span><br><span class="line">                max = anArr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从个位开始，对数组进行排序</span></span><br><span class="line">        <span class="keyword">for</span> (exp = <span class="number">1</span>; max / exp &gt; <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">//存储待排元素的临时数组</span></span><br><span class="line">            <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">            <span class="comment">//分桶个数</span></span><br><span class="line">            <span class="keyword">int</span>[] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="comment">//将数据出现的次数存储在buckets中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">                <span class="comment">//(value / exp) % 10 :value的最底位(个位)</span></span><br><span class="line">                buckets[(value / exp) % <span class="number">10</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更改buckets[i]</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                buckets[i] += buckets[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将数据存储到临时数组temp中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                temp[buckets[(arr[i] / exp) % <span class="number">10</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">                buckets[(arr[i] / exp) % <span class="number">10</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将有序元素temp赋给arr</span></span><br><span class="line">            System.arraycopy(temp, <span class="number">0</span>, arr, <span class="number">0</span>, arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201022233844.jpg" alt="img"></p>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址: <a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示） - 一像素 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot普通类使用@Resource或@Autowired注解</title>
    <url>/460.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>有时候我们需要编写工具类，而这个工具类是普通类，需要使用到@Resource或@Autowired注解，但是普通类是无法使用这两个注解的，使用这两个注解需要进行一些处理</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>给普通类加上@Component注解，然后使用@PostConstruct注解标记工具类初始化bean</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>在下面这个RedisUtil类中，通过<code>redisUtil.configProperties.</code>进行调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.ConfigProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-17 1:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 维护一个本类的静态变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ConfigProperties configProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用<span class="doctag">@PostConstruct</span>注解标记工具类,初始化Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisUtil = <span class="keyword">this</span>;</span><br><span class="line">        redisUtil.configProperties = <span class="keyword">this</span>.configProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Redis连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JedisPool <span class="title">getRedisLink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">100</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisPool(jedisPoolConfig, redisUtil.configProperties.getHost(), redisUtil.configProperties.getPort());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭Redis连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedisPool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeRedis</span><span class="params">(JedisPool jedisPool, Jedis jedis)</span> </span>&#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">        jedisPool.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Jedis</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedisPool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">(JedisPool jedisPool)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        jedis.auth(redisUtil.configProperties.getPassword());</span><br><span class="line">        <span class="keyword">return</span> jedis;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setKey</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        JedisPool jedisPool = getRedisLink();</span><br><span class="line">        Jedis jedis = getJedis(jedisPool);</span><br><span class="line">        String result = jedis.set(key, value);</span><br><span class="line">        closeRedis(jedisPool, jedis);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven资源过滤设置</title>
    <url>/461.html</url>
    <content><![CDATA[<p>在pom.xml文件的project标签中加入下面代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>解决：Spring MVC接收前端数据出现中文乱码</title>
    <url>/462.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>从前端传过来的数据如果包含中文，中文会变成乱码</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在web.xml中添加以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring MVC的乱码过滤--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Element UI实现表单验证</title>
    <url>/463.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>所谓表单验证，就是检验用户的输入是否正确：</p>
<ol>
<li> 是否未输入</li>
<li>格式是否正确</li>
<li>还可以请求后端，和数据库的信息进行校验，例如：注册时，检验用户名是否已经存在于数据库中</li>
</ol>
<p>Element UI表单默认使用<code>async-validator</code>做验证，Element UI已经内置了async-validator，直接使用即可，表单验证分为两种情况：</p>
<ol>
<li>Element UI的规则，直接使用，进行一些配置即可</li>
<li>自定义规则，需要自己编写验证规则，更加灵活，可以通过Ajax请求后端</li>
</ol>
<h3 id="表单校验属性"><a href="#表单校验属性" class="headerlink" title="表单校验属性"></a>表单校验属性</h3><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>验证用户输入的数据类型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">string</td>
<td align="center">校验类型为Sting，type的默认值为string</td>
</tr>
<tr>
<td align="center">number</td>
<td align="center">校验类型为number</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">类型必须为boolean</td>
</tr>
<tr>
<td align="center">interger</td>
<td align="center">类型必须为number且为整数</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">类型必须为number且为浮点数</td>
</tr>
<tr>
<td align="center">array</td>
<td align="center">类型必须为数组</td>
</tr>
<tr>
<td align="center">enum</td>
<td align="center">值的类型必须存在于enum中</td>
</tr>
<tr>
<td align="center">url</td>
<td align="center">类型格式必须为url格式</td>
</tr>
<tr>
<td align="center">email</td>
<td align="center">格式类型必须为email格式</td>
</tr>
<tr>
<td align="center">method</td>
<td align="center">格式类型必须为function</td>
</tr>
<tr>
<td align="center">regexp</td>
<td align="center">必须是RegExp创建新时不会长生异常的实例或字符串RegExp</td>
</tr>
<tr>
<td align="center">object</td>
<td align="center">格式类型必须为object</td>
</tr>
<tr>
<td align="center">data</td>
<td align="center">格式类型必须为data</td>
</tr>
<tr>
<td align="center">hex</td>
<td align="center">格式类型必须为hex</td>
</tr>
<tr>
<td align="center">any</td>
<td align="center">格式类型可以为任何类型</td>
</tr>
</tbody></table>
<h4 id="required"><a href="#required" class="headerlink" title="required"></a>required</h4><p>值为true或false，该字段是否为必填</p>
<h4 id="pattern"><a href="#pattern" class="headerlink" title="pattern"></a>pattern</h4><p>该属性只是一个正则表达式的值必须匹配，才可以通过验证</p>
<h4 id="min"><a href="#min" class="headerlink" title="min"></a>min</h4><p>规定最小长度</p>
<h4 id="max"><a href="#max" class="headerlink" title="max"></a>max</h4><p>规定最大长度</p>
<h4 id="len"><a href="#len" class="headerlink" title="len"></a>len</h4><p>指定确切长度，如果该len属性与min和max范围属性结合使用，则len优先</p>
<h4 id="whitespace"><a href="#whitespace" class="headerlink" title="whitespace"></a>whitespace</h4><p>值为true或false，验证是否只有空格</p>
<h4 id="message"><a href="#message" class="headerlink" title="message"></a>message</h4><p>校验不通过提示</p>
<h4 id="asyncValidator"><a href="#asyncValidator" class="headerlink" title="asyncValidator"></a>asyncValidator</h4><p>可以为指定的字段自定义异步校验功能</p>
<h4 id="validator"><a href="#validator" class="headerlink" title="validator"></a>validator</h4><p>可以为只能字段自定义校验功能</p>
<h4 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h4><p>值为blur或change</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">blur</td>
<td align="center">失去焦点时触发，常用于输入框</td>
</tr>
<tr>
<td align="center">change</td>
<td align="center">手动改变时触发，常用于下拉框</td>
</tr>
</tbody></table>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="Element-UI的规则"><a href="#Element-UI的规则" class="headerlink" title="Element UI的规则"></a>Element UI的规则</h4><p>首先在<code>el-form</code>标签添加ref属性（和:model绑定的form的名称一样），添加<code>:rules=&quot;rules&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>el-form-item</code>标签添加prop属性（值为要验证的字段）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.userName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在JavaScript代码区的<code>return &#123;&#125;</code>内添加验证规则</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">  <span class="attr">userName</span>: [</span><br><span class="line">    &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入用户名&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在form提交的JavaScript代码内使用表单验证，<code>$refs[&quot;form&quot;]</code>的form为<code>:model</code>对应的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$refs[<span class="string">&quot;form&quot;</span>].validate(<span class="function">(<span class="params">valid, msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;<span class="comment">//全部验证都通过时</span></span><br><span class="line">    	ElementUI.Message.success(<span class="string">&quot;填写的信息全部正确！！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	ElementUI.Message.error(<span class="string">&quot;你填写的信息不正确！！&quot;</span>);</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>完整代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 40%;margin-left: 30%;margin-top: 6%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../assets/images/logo.png&quot;</span> <span class="attr">height</span>=<span class="string">&quot;55&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span>学生注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.userName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;确认密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;register&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">userName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">password2</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">userName</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入用户名&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>&#125;</span></span><br><span class="line"><span class="javascript">        ]</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">onSubmit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs[<span class="string">&quot;form&quot;</span>].validate(<span class="function">(<span class="params">valid, msg</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="javascript">          ElementUI.Message.success(<span class="string">&quot;填写的信息全部正确！！&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          ElementUI.Message.error(<span class="string">&quot;你填写的信息不正确！！&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h4><p>在JavaScript代码区内<code>data() &#123;&#125;</code>编写自己的验证规则</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检验密码和确认密码是否一样</span></span><br><span class="line"><span class="keyword">let</span> checkPassword2 = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (value !== <span class="built_in">this</span>.form.password) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;密码和确认密码不一致!&#x27;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在<code>rules: &#123;&#125;</code>内的要验证的字段中引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">password2: [</span><br><span class="line">  &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入确认密码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">validator</span>: checkPassword2, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 40%;margin-left: 30%;margin-top: 6%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../assets/images/logo.png&quot;</span> <span class="attr">height</span>=<span class="string">&quot;55&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span>学生注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.userName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;确认密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;register&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//检验用户名是否已经存在于数据库中</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> checkUserName = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> param = <span class="keyword">new</span> URLSearchParams();</span></span><br><span class="line"><span class="javascript">      param.append(<span class="string">&quot;userName&quot;</span>, value);</span></span><br><span class="line"><span class="javascript">      axios</span></span><br><span class="line"><span class="javascript">        .post(<span class="string">&#x27;http://localhost/user/findByUserName&#x27;</span>, param)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (response.data.success) &#123;</span></span><br><span class="line"><span class="javascript">            callback();</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;用户名已经存在,请重新输入!&#x27;</span>));</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          alert(error);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//检验密码和确认密码是否一样</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> checkPassword2 = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (value !== <span class="built_in">this</span>.form.password) &#123;</span></span><br><span class="line"><span class="javascript">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;密码和确认密码不一致!&#x27;</span>));</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        callback();</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">userName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">password2</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">userName</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入用户名&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">validator</span>: checkUserName, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">        ],</span></span><br><span class="line"><span class="javascript">        <span class="attr">password</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入密码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>&#125;</span></span><br><span class="line"><span class="javascript">        ],</span></span><br><span class="line"><span class="javascript">        <span class="attr">password2</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入确认密码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">validator</span>: checkPassword2, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">        ]</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">onSubmit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs[<span class="string">&quot;form&quot;</span>].validate(<span class="function">(<span class="params">valid, msg</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="javascript">          ElementUI.Message.success(<span class="string">&quot;填写的信息全部正确！！&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          ElementUI.Message.error(<span class="string">&quot;你填写的信息不正确！！&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Element UI</tag>
      </tags>
  </entry>
  <entry>
    <title>Git修改commit注释</title>
    <url>/464.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>有时候git commit的注释填写错误，需要进行修改，修改的情况有两种：</p>
<ol>
<li>最近一次</li>
<li>最近某次</li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="最近一次"><a href="#最近一次" class="headerlink" title="最近一次"></a>最近一次</h4><ol>
<li><p>查看最近一次的注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307233024132.png" alt="image-20220307233024132"></p>
</li>
<li><p>   使用下面命令进入修改最近一次注释界面，按<code>i</code>键进入编辑模式，修改第一行的注释，再输入<code>:wq</code>保存并退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220307233645240.png" alt="image-20220307233645240"></p>
</li>
<li><p>pull和push到GitHub，pull代码时输入<code>:wq</code>退出即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pull</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="comment">#push</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="最近某次"><a href="#最近某次" class="headerlink" title="最近某次"></a>最近某次</h4><p>查看博客：<a href="https://segmentfault.com/a/1190000022926064">Git修改已提交的commit注释 - SegmentFault 思否</a> 和 <a href="https://www.jianshu.com/p/098d85a58bf1">Git 修改已提交的commit注释 - 简书 (jianshu.com)</a></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java根据字符获取ASCII码值</title>
    <url>/466.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>根据一个字符获取它在ASCII表中对应的值，办法有两种：</p>
<ol>
<li>将字符强转为int类型</li>
<li>使用Integer.valueOf()方法</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="将字符强转为int类型"><a href="#将字符强转为int类型" class="headerlink" title="将字符强转为int类型"></a>将字符强转为int类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        System.out.println((<span class="keyword">int</span>) c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用Integer-valueOf-方法"><a href="#使用Integer-valueOf-方法" class="headerlink" title="使用Integer.valueOf()方法"></a>使用Integer.valueOf()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        System.out.println(Integer.valueOf(c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot自定义启动Banner</title>
    <url>/465.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Spring Boot的启动Banner就是项目启动时控制台打印的图案，这个图案是支持自定义修改的</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220309214149509.png" alt="image-20220309214149509"></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="生成Banner"><a href="#生成Banner" class="headerlink" title="生成Banner"></a>生成Banner</h4><p>生成Banner的网站链接为：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a>，该网站支持根据输入的文本生成Banner以及生成二维码Banner，还有一些别人设计好的Banner</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220309215932689.png" alt="image-20220309215932689"></p>
<h4 id="自定义Spring-Boot的Banner"><a href="#自定义Spring-Boot的Banner" class="headerlink" title="自定义Spring Boot的Banner"></a>自定义Spring Boot的Banner</h4><p>将banner.txt放在resources文件夹中</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220309220347359.png" alt="image-20220309220347359"></p>
<h4 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h4><p>如果不生效就使用Maven工具栏Lifecycle的clean命令清除一下缓存</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220309220524659.png" alt="image-20220309220524659"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>要禁用Banner，就在配置文件添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">banner-mode:</span> <span class="string">off</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap键排序和值排序</title>
    <url>/467.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>关于HashMap键排序，如果是升序排序可以直接使用TreeMap，降序排序则需要自己实现</p>
<p>关于HashMap值排序，无论是升序还是降序，都需要自己实现，和键降序排序实现方式大同小异</p>
<p>下面只实现键降序排序和值排序，不实现键升序排序，因为键的升序排序直接用TreeMap就可以了</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="键降序排序"><a href="#键降序排序" class="headerlink" title="键降序排序"></a>键降序排序</h4><blockquote>
<p>实现原理</p>
</blockquote>
<p>将HashMap中的EntrySet取出放入一个ArrayList中，来对ArrayList中的EntrySet进行排序，从而实现对HashMap的值进行排序的效果</p>
<blockquote>
<p>代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;e&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;v&#x27;</span>, <span class="number">6</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Map.Entry&lt;Character, Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(hashMap.entrySet());</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Character, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;Character, Integer&gt; o1, Map.Entry&lt;Character, Integer&gt; o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//o1在后面降序,反之升序</span></span><br><span class="line">                <span class="keyword">return</span> o2.getKey() - o1.getKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : list) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="值排序"><a href="#值排序" class="headerlink" title="值排序"></a>值排序</h4><blockquote>
<p>实现原理</p>
</blockquote>
<p>同上，区别如下图：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220312110006362.png" alt="image-20220312110006362"></p>
<blockquote>
<p>代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;e&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;v&#x27;</span>, <span class="number">6</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">        hashMap.put(<span class="string">&#x27;a&#x27;</span>, <span class="number">9</span>);</span><br><span class="line">        List&lt;Map.Entry&lt;Character, Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(hashMap.entrySet());</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Character, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;Character, Integer&gt; o1, Map.Entry&lt;Character, Integer&gt; o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//o1在后面降序,反之升序</span></span><br><span class="line">                <span class="keyword">return</span> o2.getValue() - o1.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : list) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IDM无法捕获以及下载APK文件</title>
    <url>/468.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当我们点击网页上某个APK文件下载链接时，无法通过IDM下载，而是直接通过浏览器下载了，这是因为IDM默认不捕获APK下载链接</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="配置捕获APK文件"><a href="#配置捕获APK文件" class="headerlink" title="配置捕获APK文件"></a>配置捕获APK文件</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220314131001181.png" alt="image-20220314131001181"></p>
<h4 id="设置保存路径"><a href="#设置保存路径" class="headerlink" title="设置保存路径"></a>设置保存路径</h4><p>上面已经实现了通过IDM下载APK文件，接下来设置将下载好的APK文件保存到指定路径</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220314131422077.png" alt="image-20220314131422077"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>IDM</tag>
      </tags>
  </entry>
  <entry>
    <title>项目启动时报错：ERROR org.springframework.boot.SpringApplication - Application run failed</title>
    <url>/469.html</url>
    <content><![CDATA[<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>我的报错截图如下，报错下方可以看到：<code>org.yaml.snakeyaml.error.YAMLException</code>，这说明是yml配置文件错误。出现该错误的原因是：yml配置文件使用了中文，且项目使用了GBK编码</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220316093858491.png" alt="image-20220316093858491"></p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改项目的编码为UTF-8</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220316095206141.png" alt="image-20220316095206141"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>==和equals的区别</title>
    <url>/47.html</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title="=="></a>==</h3><p>基本类型：比较的就是值是否相同</p>
<p>引用类型：比较的就是地址值是否相同</p>
<h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>引用类型：默认情况下，比较的是地址值，重写该方法后比较对象的成员变量值是否相同</p>
<p>本质上就是<code>==</code>，主要看它有没有被重写，没有被重写就和<code>==</code>一样</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a><strong>PS.</strong></h3><p>基本类型：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201025174931.jpg" alt="img"></p>
<p>引用类型：</p>
<p>除掉这四类八种基本类型，其它的都是对象，也就是引用类型，包括数组</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis插入数据时获取自增的id</title>
    <url>/470.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当表的id被设计为自增时，插入数据后想获得新插入数据的id</p>
<p>我曾经试过直接获取最新一条数据的id，虽然可以获取到id，但是这种方式不但麻烦而且也<font color="#dd0000">不推荐</font>，因为插入数据成功到获取到id的这段时间内如果又新增了一条数据，那么获取到的就不是我们希望得到的id了</p>
<p>Mybatis支持在插入数据后，返回这条数据的id，这种方式简单又不存在上面出现的问题，<font color="#00dd00">推荐</font>使用</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="XML代码"><a href="#XML代码" class="headerlink" title="XML代码"></a>XML代码</h4><blockquote>
<p>添加数据的XML代码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user (isBorrow, password, state, type, userName, nickName)</span><br><span class="line">    values (1, #&#123;password&#125;, 1, 2, #&#123;userName&#125;, #&#123;userName&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>属性说明</p>
</blockquote>
<ol>
<li><p>parameterType</p>
<p>传入的参数类型</p>
</li>
<li><p>useGeneratedKeys</p>
<p>是否返回插入数据的id</p>
</li>
<li><p>keyProperty</p>
<p>实体类对应的字段</p>
</li>
<li><p>keyColumn</p>
<p>数据库中表对应的字段</p>
</li>
</ol>
<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    user.setNickName(<span class="string">&quot;LeDao&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    userService.add(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;自增的id为: &quot;</span>+user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220316135314586.png"></p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>微信开发者工具创建小程序</title>
    <url>/471.html</url>
    <content><![CDATA[<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>注册地址为：<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a></p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录地址为：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p>
<h3 id="获取AppID"><a href="#获取AppID" class="headerlink" title="获取AppID"></a>获取AppID</h3><p>登录成功后会进入小程序后台，然后点击左侧菜单的开发管理，根据下图步骤即可获取到AppID</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220316230102902.png" alt="image-20220316230102902"></p>
<h3 id="下载和安装开发工具"><a href="#下载和安装开发工具" class="headerlink" title="下载和安装开发工具"></a>下载和安装开发工具</h3><p>下载地址为：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220316230630691.png" alt="image-20220316230630691"></p>
<h3 id="创建小程序"><a href="#创建小程序" class="headerlink" title="创建小程序"></a>创建小程序</h3><p>打开微信开发者工具后，新建项目，小程序项目选择<code>小程序</code>，其他选项参照下图，最后点击确定即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221125210424330.png" alt="image-20221125210424330"></p>
<h3 id="关闭热重载"><a href="#关闭热重载" class="headerlink" title="关闭热重载"></a>关闭热重载</h3><p>不关闭的话，可能会出现一些问题</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-04%20162602.gif"></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>创建好的项目结构如下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220317091014146.png" alt="image-20220317091014146"></p>
<h3 id="各文件夹以及文件的作用"><a href="#各文件夹以及文件的作用" class="headerlink" title="各文件夹以及文件的作用"></a>各文件夹以及文件的作用</h3><h4 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h4><p>存放小程序的页面文件，书写各个页面代码以及组件，pages下的每个文件夹都是一个页面，例如index文件夹就是一个名为index的页面，index文件夹下的文件都要命名为index，和页面文件夹一致，页面文件夹下的各文件的作用如下：</p>
<table>
<thead>
<tr>
<th align="center">文件名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">index.js</td>
<td align="center">页面逻辑文件，相当于JavaScript</td>
</tr>
<tr>
<td align="center">index.json</td>
<td align="center">页面配置文件，优先级比app.json高</td>
</tr>
<tr>
<td align="center">index.wxml</td>
<td align="center">页面布局文件，相当于HTML</td>
</tr>
<tr>
<td align="center">index.wxss</td>
<td align="center">页面样式文件，相当于CSS</td>
</tr>
</tbody></table>
<h4 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h4><p>存放全局的一些.js文件，公共用到的一些事件处理代码文件可以放到该文件夹下，用于全局调用</p>
<h4 id="eslintrc-js"><a href="#eslintrc-js" class="headerlink" title=".eslintrc.js"></a>.eslintrc.js</h4><p>这是ESlint代码风格规范的配置文件，使得不同的开发者写出风格统一的代码</p>
<h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><p>小程序入口文件，用于定义全局数据和函数的使用，可以指定微信小程序的生命周期函数</p>
<h4 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h4><p>对小程序进行配置，小程序的全局配置，小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等; 我们可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口及背景色，配置导航条样式，配置默认标题</p>
<h4 id="app-wxss"><a href="#app-wxss" class="headerlink" title="app.wxss"></a>app.wxss</h4><p>全局的样式文件</p>
<h4 id="project-config-json"><a href="#project-config-json" class="headerlink" title="project.config.json"></a>project.config.json</h4><p>保存开发工具配置项</p>
<h4 id="sitemap-json"><a href="#sitemap-json" class="headerlink" title="sitemap.json"></a>sitemap.json</h4><p> 网站地图，可以对小程序进行seo优化，让搜索排名靠前</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果有报错，报错信息为：<font color="#dd0000">routeDone with a webviewId 1 that is not the current page</font></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204152322370.png" alt="image-20221204152322370"></p>
<p>解决办法看下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204152513947.png" alt="image-20221204152513947"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统和CentOS7安装Nacos</title>
    <url>/472.html</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载地址：<a href="https://github.com/alibaba/nacos/releases/tag/1.4.3">Release 1.4.3 (Jan 27, 2022) · alibaba/nacos (github.com)</a>，下载后解压即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220317231221977.png" alt="image-20220317231221977"></p>
<h2 id="Windows系统安装"><a href="#Windows系统安装" class="headerlink" title="Windows系统安装"></a>Windows系统安装</h2><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>CMD命令进入解压后的文件夹内的bin文件夹，输入以下命令运行Nacos，standalone代表单机模式运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>

<p>在浏览器输入<code>http://localhost:8848/nacos</code>，然后进行登录，用户名和密码都是<code>nacos</code>，登录成功进入下面界面</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220317212844381.png" alt="image-20220317212844381"></p>
<h3 id="连接MySQL数据库"><a href="#连接MySQL数据库" class="headerlink" title="连接MySQL数据库"></a>连接MySQL数据库</h3><p>先关闭正在运行的Nacos程序，直接关闭cmd窗口即可</p>
<p>Nacos默认使用的数据是本地的，也可以配置成使用MySQL的数据</p>
<h4 id="导入数据库文件"><a href="#导入数据库文件" class="headerlink" title="导入数据库文件"></a>导入数据库文件</h4><p>Nacos的数据库文件在conf文件夹中，新建一个数据库然后导入Nacos的数据库文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220317213310581.png" alt="image-20220317213310581"></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>配置文件是上图的<code>application.properties</code>，把下图的黑色的代码的注释删除，然后把一些参数改为自己的</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220317214017802.png" alt="image-20220317214017802"></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>修改密码以测试是否成功连接数据库，如果直接在Nacos程序的界面修改密码会报错：<code>caused: user nacos,nacos not exist!;</code>，错误详情查看：<a href="https://github.com/alibaba/nacos/issues/7750">caused: user nacos,nacos not exist!; · Issue #7750 · alibaba/nacos (github.com)</a></p>
<p>最后登录时使用新密码验证，登录成功说明连接数据库成功</p>
<h2 id="在CentOS7中安装"><a href="#在CentOS7中安装" class="headerlink" title="在CentOS7中安装"></a>在CentOS7中安装</h2><p>将上面解压的文件夹上传到CentOS7系统中，步骤和上面基本相同，只是运行的命令不同，运行的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure>

<p>停止运行的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
        <tag>CentOS7</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌搜索屏蔽某个网站</title>
    <url>/473.html</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>无法使用谷歌搜索的就不要查看本博客了</p>
<h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h3><p>谷歌插件商店地址：<a href="https://chrome.google.com/webstore/detail/ublacklist/pncfbmialoiaghdehhbnbhkkgmjanfhe/related">uBlacklist - Chrome 网上应用店 (google.com)</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在谷歌搜索某个关键词后，对应的搜索结果上面会有<code>加入黑名单</code>这个选项，点击该选项即可屏蔽对应网站</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220318163936595.png" alt="image-20220318163936595"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot读取Nacos的配置文件</title>
    <url>/474.html</url>
    <content><![CDATA[<h2 id="毕业版本依赖关系"><a href="#毕业版本依赖关系" class="headerlink" title="毕业版本依赖关系"></a>毕业版本依赖关系</h2><p>链接：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">版本说明 · alibaba/spring-cloud-alibaba Wiki (github.com)</a></p>
<p>下表为按时间顺序发布的 Spring Cloud Alibaba 以及对应的适配 Spring Cloud 和 Spring Boot 版本关系（由于 Spring Cloud 版本命名有调整，所以对应的 Spring Cloud Alibaba 版本号也做了对应变化）</p>
<table>
<thead>
<tr>
<th align="center">Spring Cloud Alibaba Version</th>
<th align="center">Spring Cloud Version</th>
<th align="center">Spring Boot Version</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2021.0.1.0</td>
<td align="center">Spring Cloud 2021.0.1</td>
<td align="center">2.6.3</td>
</tr>
<tr>
<td align="center">2.2.7.RELEASE</td>
<td align="center">Spring Cloud Hoxton.SR12</td>
<td align="center">2.3.12.RELEASE</td>
</tr>
<tr>
<td align="center">2021.1</td>
<td align="center">Spring Cloud 2020.0.1</td>
<td align="center">2.4.2</td>
</tr>
<tr>
<td align="center">2.2.6.RELEASE</td>
<td align="center">Spring Cloud Hoxton.SR9</td>
<td align="center">2.3.2.RELEASE</td>
</tr>
<tr>
<td align="center">2.1.4.RELEASE</td>
<td align="center">Spring Cloud Greenwich.SR6</td>
<td align="center">2.1.13.RELEASE</td>
</tr>
<tr>
<td align="center">2.2.1.RELEASE</td>
<td align="center">Spring Cloud Hoxton.SR3</td>
<td align="center">2.2.5.RELEASE</td>
</tr>
<tr>
<td align="center">2.2.0.RELEASE</td>
<td align="center">Spring Cloud Hoxton.RELEASE</td>
<td align="center">2.2.X.RELEASE</td>
</tr>
<tr>
<td align="center">2.1.2.RELEASE</td>
<td align="center">Spring Cloud Greenwich</td>
<td align="center">2.1.X.RELEASE</td>
</tr>
<tr>
<td align="center">2.0.4.RELEASE(停止维护，建议升级)</td>
<td align="center">Spring Cloud Finchley</td>
<td align="center">2.0.X.RELEASE</td>
</tr>
<tr>
<td align="center">1.5.1.RELEASE(停止维护，建议升级)</td>
<td align="center">Spring Cloud Edgware</td>
<td align="center">1.5.X.RELEASE</td>
</tr>
</tbody></table>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="创建父项目"><a href="#创建父项目" class="headerlink" title="创建父项目"></a>创建父项目</h3><p>创建一个Maven项目，用于管理依赖，pom.xml文件内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>NacosDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>nacos_config_test<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springboot.version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">springboot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springcloudalibaba.version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">springcloudalibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springcloudalibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建子项目"><a href="#创建子项目" class="headerlink" title="创建子项目"></a>创建子项目</h3><p>在父项目下创建子项目，用于测试读取Nacos的配置文件</p>
<h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>NacosDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos_config_test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置中心 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>在resources下创建，bootstrap比application的优先级高</p>
<blockquote>
<p>application.yml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /</span><br></pre></td></tr></table></figure>

<blockquote>
<p>bootstrap.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">nacos_config_test</span></span><br><span class="line"><span class="comment">#Nacos的IP地址和端口号</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">121.41.111.106:8848</span></span><br><span class="line"><span class="comment">#Nacos配置文件所在组名</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="comment">#要读取的配置文件名称</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.name</span>=<span class="string">nacos_config.properties</span></span><br></pre></td></tr></table></figure>

<h4 id="新建Controller类"><a href="#新建Controller类" class="headerlink" title="新建Controller类"></a>新建Controller类</h4><p>新建一个controller包，并在里面新建一个Controller类，<code>@RefreshScope</code>注解的作用为：当Nacos的配置文件内容改变后，也能读取修改后的配置，如果不使用这个注解则只能读取修改前的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-19 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/nacos&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ledao.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ledao.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUserInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; : &quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="新建启动类"><a href="#新建启动类" class="headerlink" title="新建启动类"></a>新建启动类</h4><p>在上面新建的controller包外新建一个启动类，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-19 10:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Nacos新建配置文件"><a href="#Nacos新建配置文件" class="headerlink" title="Nacos新建配置文件"></a>Nacos新建配置文件</h3><blockquote>
<p>先选择配置管理下的配置列表，再点击添加按钮</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220319111616905.png" alt="image-20220319111616905"></p>
<blockquote>
<p>填写配置文件的配置内容，最后点击发布即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220319112054775.png" alt="image-20220319112054775"></p>
<blockquote>
<p>我新建的配置文件如下图</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220319112212373.png" alt="image-20220319112212373"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运行启动类，在浏览器地址栏输入：<code>localhost:8080/nacos/getUserInfo</code>，结果截图如下：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220319112325323.png" alt="image-20220319112325323"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos新建命名空间和读取命名空间内的配置文件</title>
    <url>/475.html</url>
    <content><![CDATA[<h3 id="新建命名空间"><a href="#新建命名空间" class="headerlink" title="新建命名空间"></a>新建命名空间</h3><p>创建成功后自动生成命名空间id，下面要用到</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220319115238136.png" alt="image-20220319115238136"></p>
<h3 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h3><p>在刚刚创建好的命名空间创建配置文件，创建步骤查看博客：<a href="https://blog.zoutl.cn/474.html">Spring Boot 读取 Nacos 的配置文件 </a>，配置文件位置为：命名空间&gt;&gt;分组&gt;&gt;配置文件，前面的包含后面的，不在同一个组的配置文件可以重名</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220319120244832.png" alt="image-20220319120244832"></p>
<h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>实现读取步骤查看博客：<a href="https://blog.zoutl.cn/474.html">Spring Boot 读取 Nacos 的配置文件 </a>，然后在<code>bootstrap.properties</code>中加上配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">cd6541df-8530-404f-8832-413a3cefa6</span></span><br></pre></td></tr></table></figure>

<p>完整配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">nacos_config_test</span></span><br><span class="line"><span class="comment">#Nacos的IP地址和端口号</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">121.41.211.106:8848</span></span><br><span class="line"><span class="comment">#Nacos配置文件所在命名空间id</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">cd6541df-8530-404f-8832-413a3c118efa6</span></span><br><span class="line"><span class="comment">#Nacos配置文件所在组名</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="comment">#要读取的配置文件名称</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.name</span>=<span class="string">nacos_config.properties</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>实现加载Nacos多个配置文件</title>
    <url>/476.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>多个微服务的配置之间有可能存在重复，重复的部分称为公共配置，我们可以把这些公共配置存储在Nacos中，各个微服务根据自己的需求加载对应的配置</p>
<p>这样做的好处是：方便管理，只需要修改公共配置即可实现修改多个服务的配置</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>加载的配置文件必须在同一个命名空间内</p>
<h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><p>我在命名为dev的命名空间内创建了三个配置文件：<code>mysql_dev.properties</code>、 <code>server_dev.properties</code>和 <code>nacos_config.properties</code>，内容如下：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220320205354950.png" alt="image-20220320205354950"></p>
<blockquote>
<p>mysql_dev.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/db_secondhandtrade?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>server_dev.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>nacos_config.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">ledao.name</span>=<span class="string">mary</span></span><br><span class="line"><span class="meta">ledao.age</span>=<span class="string">22</span></span><br></pre></td></tr></table></figure>

<h4 id="bootstrap-properties加载"><a href="#bootstrap-properties加载" class="headerlink" title="bootstrap.properties加载"></a>bootstrap.properties加载</h4><p>bootstrap比application配置文件的优先级高，如果存在一样的配置，以bootstrap的为准，加载多配置使用数组的形式，项目的配置文件只需要配置<code>Nacos的IP地址和端口号</code>、<code>命名空间id</code>，其它的配置从Nacos中加载</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#应用名称,可省略</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">nacos_config_test</span></span><br><span class="line"><span class="comment">#Nacos的IP地址和端口号</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">121.41.211.106:8848</span></span><br><span class="line"><span class="comment">#Nacos配置文件所在命名空间id</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">e4f40c45-6d6d-44dc-8bea-645f5d727824</span></span><br><span class="line"><span class="comment">#Nacos配置文件所在组名</span></span><br><span class="line"><span class="comment">#spring.cloud.nacos.config.group=DEFAULT_GROUP</span></span><br><span class="line"><span class="comment">#要读取的配置文件名称</span></span><br><span class="line"><span class="comment">#spring.cloud.nacos.config.name=nacos_config.properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#加载mysql_dev.properties的配置</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].dataId</span>=<span class="string">mysql_dev.properties</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#加载server_dev.properties的配置</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].dataId</span>=<span class="string">server_dev.properties</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#加载nacos_config.properties的配置</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].dataId</span>=<span class="string">nacos_config.properties</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h4 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-19 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/nacos&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ledao.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ledao.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUserInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; : &quot;</span> + age + <span class="string">&quot; , &quot;</span> + dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>浏览器地址栏输入：<a href="http://localhost:8888/nacos/getUserInfo">http://localhost:8888/nacos/getUserInfo</a> ，看到下图说明已经成功加载三个配置文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220320211748947.png" alt="image-20220320211748947"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的Butterfly主题使用iconfont图标</title>
    <url>/477.html</url>
    <content><![CDATA[<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>网址：<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a></p>
<h3 id="搜索图标"><a href="#搜索图标" class="headerlink" title="搜索图标"></a>搜索图标</h3><p>在搜索框输入图标名称</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322002436582.png" alt="image-20220322002436582"></p>
<h3 id="添加入库"><a href="#添加入库" class="headerlink" title="添加入库"></a>添加入库</h3><p>将鼠标移到要使用的图标上</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322002618238.png" alt="image-20220322002618238"></p>
<h3 id="添加到项目"><a href="#添加到项目" class="headerlink" title="添加到项目"></a>添加到项目</h3><p>打开项目选项，准备添加到项目</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322002730835.png" alt="image-20220322002730835"></p>
<p>添加到指定项目</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322003043564.png" alt="image-20220322003043564"></p>
<h3 id="生成Font-class"><a href="#生成Font-class" class="headerlink" title="生成Font class"></a>生成Font class</h3><p>生成Font class用于引入图标</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322003442415.png" alt="image-20220322003442415"></p>
<h3 id="复制链接和图标"><a href="#复制链接和图标" class="headerlink" title="复制链接和图标"></a>复制链接和图标</h3><p>复制引入图标的链接以及图标名称</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322003649511.png" alt="image-20220322003649511"></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改Butterfly主题的配置文件<code>_config.yml</code>，<font color="#dd0000">不是主配置文件</font>，主题配置文件在<code>\themes\butterfly</code>下</p>
<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>找到Inject配置，在head处引入</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322004010270.png" alt="image-20220322004010270"></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用格式为：<code>iconfont 上面复制的图标名称</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322004105492.png" alt="image-20220322004105492"></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>PotPlayer播放视频选择音频</title>
    <url>/478.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>IDM下载B站的视频时，下载的视频是没有声音的，必须要下载对应的音频文件，例如：下图中，2是音频，3是视频，下面我将演示PotPlayer播放视频导入音频</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322152156978.png" alt="image-20220322152156978"></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><blockquote>
<p>将音频文件的后缀名改为m4a</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322152546093.png" alt="image-20220322152546093"></p>
<blockquote>
<p>使用PotPlayer播放视频，并选择刚刚修改后缀名的音频，然后就可以愉快地玩耍了</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220322152929300.png" alt="image-20220322152929300"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>Java跳转语句</title>
    <url>/48.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java语言中，有三种跳转语句：break、continue和return</p>
<h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>用于终止循环的操作，break语句在for、while、do…while循环语句中用于强制退出当前循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//直接结束，后面的不执行</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201103124742.jpg" alt="img"></p>
<h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>continue也可以放在循环语句中，它与break语句具有相反的效果，它的作用是用于执行下依次循环（跳过满足条件的当次循环），而不是退出当前循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//跳出本次循环，后面的继续循环</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201103125230.jpg" alt="img"></p>
<h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><p>return语句可以从一个方法返回，并把控制权交给调用它的语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//结束方法（main方法）</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//该语句不执行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;111111111111&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201103125457.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的Butterfly主题使用Algolia搜索</title>
    <url>/479.html</url>
    <content><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在hexo博客的根目录打开<code>Git Bash</code>安装<code>hexo-algoliasearch</code>插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-algoliasearch --save</span><br></pre></td></tr></table></figure>

<p>然后查看根目录的<code>package.json</code>文件，查看是否安装成功，出现插件名称就说明安装插件成功</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220323200738339.png" alt="image-20220323200738339"></p>
<h3 id="注册Algolia账号"><a href="#注册Algolia账号" class="headerlink" title="注册Algolia账号"></a>注册Algolia账号</h3><p>网址：<a href="https://www.algolia.com/">Site Search &amp; Discovery powered by AI | Algolia</a></p>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><h4 id="打开创建页面"><a href="#打开创建页面" class="headerlink" title="打开创建页面"></a>打开创建页面</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220323201316692.png" alt="image-20220323201316692"></p>
<h4 id="填写应用信息"><a href="#填写应用信息" class="headerlink" title="填写应用信息"></a>填写应用信息</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220323201515572.png" alt="image-20220323201515572"></p>
<h4 id="选择相关节点"><a href="#选择相关节点" class="headerlink" title="选择相关节点"></a>选择相关节点</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220323201811493.png" alt="image-20220323201811493"></p>
<h4 id="勾选同意"><a href="#勾选同意" class="headerlink" title="勾选同意"></a>勾选同意</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220323201932407.png" alt="image-20220323201932407"></p>
<h3 id="获取API-Keys"><a href="#获取API-Keys" class="headerlink" title="获取API Keys"></a>获取API Keys</h3><p>在控制台主页，选择刚刚创建的应用，查看它的API Keys</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220323202146576.png" alt="image-20220323202146576"></p>
<p>获取下图的三个</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220323202335997.png" alt="image-20220323202335997"></p>
<h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p>在hexo根目录下的<code>_config.yml</code>配置文件添加以下代码，appId、apiKey、adminApiKey、indexName根据自己的情况填写</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">-</span> <span class="string">hexo-algoliasearch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">algolia</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&quot;0Z2Q111FG111&quot;</span></span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&quot;079e96e1d3e11111116bf59011&quot;</span></span><br><span class="line">  <span class="attr">adminApiKey</span>: <span class="string">&quot;9e2f194f9f28111111199ce53111&quot;</span></span><br><span class="line">  <span class="attr">chunkSize</span>: <span class="string">5000</span></span><br><span class="line">  <span class="attr">indexName</span>: <span class="string">&quot;hexo_blog&quot;</span></span><br><span class="line">  <span class="attr">fields</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">content:strip:truncate,0,200</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">tags</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">permalink</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">excerpt:strip</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">title</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">categories</span></span><br></pre></td></tr></table></figure>

<p>修改Butterfly主题的<code>_config.yml</code>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Algolia search</span></span><br><span class="line"><span class="attr">algolia_search</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">enable</span>: <span class="string">true</span></span><br><span class="line">  <span class="attr">hits</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">per_page</span>: <span class="string">6</span></span><br></pre></td></tr></table></figure>

<p>接下来需要将搜索方式设置为按回车键后才搜索，要不然每输入一个字符就实时搜索一次太浪费Algolia的搜索次数了，Algolia的免费次数每个月只有10000次，实时搜索很容易把次数用光，首先打开<code>algolia.js</code>文件，这个文件在<code>\themes\butterfly\source\js\search</code>目录下，在下图位置加入代码：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">searchOnEnterKeyPressOnly</span>: <span class="string">true,</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220324215731530.png" alt="image-20220324215731530"></p>
<p>接下来修改搜索框的提示信息，上图横线下的<code>placeholder:</code>后接提示信息，建议直接注释掉该行（使用<code>//</code>注释），直接重写，不建议去修改语言配置文件（在<code>\themes\butterfly\languages</code>目录下）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">placeholder</span>: <span class="string">&quot;输入关键词后，按下回车键即可搜索文章...&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="依次执行以下命令"><a href="#依次执行以下命令" class="headerlink" title="依次执行以下命令"></a>依次执行以下命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment">#生成Algolia索引</span></span><br><span class="line">hexo algolia</span><br><span class="line"><span class="comment">#部署网站，同时将网站的改动提交到GitHub仓库</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>执行启动服务器命令<code>hexo s</code>查看结果，访问网址为： <code>http://localhost:4000/</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220323203020481.png" alt="image-20220323203020481"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>执行命令的顺序如下：（不然可能会出现一些错误）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成algolia的搜索索引</span></span><br><span class="line">hexo algolia</span><br><span class="line"></span><br><span class="line"><span class="comment">#提交到GitHub</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>使用批处理脚本实现一键部署hexo博客以及一键上传代码到GitHub</title>
    <url>/480.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>如果需要执行多条命令才可以达到目的，都可以使用批处理脚本来提高工作效率，本博客主要实现：一键部署hexo博客以及一键上传代码到GitHub</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="一键部署hexo博客"><a href="#一键部署hexo博客" class="headerlink" title="一键部署hexo博客"></a>一键部署hexo博客</h4><p>新建一个<code>.bat</code>文件，命名为：<code>一键部署.bat</code>，内容如下：（我的博客使用了algolia搜索，如果没有使用就删除下面的<code>hexo algolia</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> E:\hexo-blog</span><br><span class="line">hexo g&amp;&amp;hexo algolia&amp;&amp;hexo d</span><br></pre></td></tr></table></figure>

<h4 id="一键上传代码到GitHub"><a href="#一键上传代码到GitHub" class="headerlink" title="一键上传代码到GitHub"></a>一键上传代码到GitHub</h4><p>先配置GitHub的SSH Key，配置步骤查看博客：<a href="https://blog.zoutl.cn/236.html">GitHub 配置 SSH Key | LeDao 的博客 (zoutl.cn)</a></p>
<p>新建一个<code>.bat</code>文件，命名为<code>一键上传到GitHub.bat</code>：，内容如下：（<code>chcp 65001</code>是为了解决输出中文乱码）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1.进入要上传的文件hexo-blog&quot;</span></span><br><span class="line"><span class="built_in">cd</span> E:\hexo-blog</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2.添加到本地仓库&quot;</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;3.设置提交信息&quot;</span></span><br><span class="line"><span class="built_in">set</span> now=%date% %time%</span><br><span class="line">git commit -m <span class="string">&quot;%now%&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;4.开始push&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Windows系统</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用AdBlock屏蔽掉GitHub上一些让人恶心的仓库</title>
    <url>/481.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>GitHub虽然好用，但是上面有不少境外黑恶势力恶意造谣抹黑中国的仓库，看到了就让人恶心</p>
<p>GitHub的屏蔽功能并没什么卵用，举报也没用，纯属浪费时间，但是我们可以通过<code>AdBlock</code>或<code>AdBlock Plus</code>插件进行屏蔽这些仓库的所有者</p>
<p>下面的方法只实现了屏蔽掉搜索结果中的仓库，但还是可以直接通过链接访问这些仓库，不过这已经可以实现这些仓库不会出现在我们眼前，污了我们的眼睛</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>下面有两个下载地址，根据自己的情况选择：</p>
<ol>
<li>谷歌插件商店地址：<a href="https://chrome.google.com/webstore/detail/adblock-%E2%80%94-best-ad-blocker/gighmmpiobklfepjocnamgkkbiglidom?hl=zh">AdBlock — 最佳广告拦截工具 - Chrome 网上应用店 (google.com)</a></li>
<li>扩展迷下载地址：<a href="https://www.extfans.com/productivity/gighmmpiobklfepjocnamgkkbiglidom/">https://www.extfans.com/productivity/gighmmpiobklfepjocnamgkkbiglidom/</a></li>
</ol>
<h4 id="添加拦截规则"><a href="#添加拦截规则" class="headerlink" title="添加拦截规则"></a>添加拦截规则</h4><p>点击工具栏的AdBlock的图标，打开选项</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220326002623430.png" alt="image-20220326002623430"></p>
<p>添加自定义规则（下面列举几个常见的，每一条规则的第二个括号内就是仓库所有者的用户名，根据实际情况填写，发现其它的继续添加即可），最后保存即可，这样就可以在搜索结果中屏蔽掉这些仓库的所有者了，舒服！！</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">github.com#?#li.repo-list-item.public.source</span>:<span class="string">-abp-has(a:-abp-contains(cirosantilli))</span></span><br><span class="line"><span class="meta">github.com#?#li.repo-list-item.public.source</span>:<span class="string">-abp-has(a:-abp-contains(cheezcharmer))</span></span><br><span class="line"><span class="meta">github.com#?#li.repo-list-item.public.source</span>:<span class="string">-abp-has(a:-abp-contains(zaohmeing))</span></span><br><span class="line"><span class="meta">github.com#?#li.repo-list-item.public.source</span>:<span class="string">-abp-has(a:-abp-contains(zhaohmng-outlook-com))</span></span><br><span class="line"><span class="meta">github.com#?#li.repo-list-item.public.source</span>:<span class="string">-abp-has(a:-abp-contains(coding-stuffs))</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220326002854346.png" alt="image-20220326002854346"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.zhihu.com/question/388634161">如果举报github上的这种情况？ - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>AdBlock</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7忘记MySQL密码后重置</title>
    <url>/482.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>MySQL是不能查看密码的，如果忘记了就只能重置了</p>
<h3 id="重置过程"><a href="#重置过程" class="headerlink" title="重置过程"></a>重置过程</h3><ol>
<li><p>先停止MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure></li>
<li><p>修改<code>my.cnf</code>，路径为<code>/ect/my.cnf</code>，在[mysqld]下面添加<code>skip-grant-tables</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328040522194.png" alt="image-20220328040522194"></p>
</li>
<li><p>启动MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure></li>
<li><p>使用下面命令进入MySQL命令行，提示要输入密码直接按回车键即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li>
<li><p>切换到mysql数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure></li>
<li><p>修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update user <span class="built_in">set</span> authentication_string=PASSWORD(<span class="string">&quot;这里填密码&quot;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>刷新授权列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
<li><p>退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改<code>my.cnf</code>，路径为<code>/ect/my.cnf</code>，删除[mysqld]下面之前添加的<code>skip-grant-tables</code>，或者在它前面加<code>#</code>符号注释掉</p>
</li>
<li><p>重启MySQL，新密码就生效了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>CentOS7操作MySQL命令的一些命令如下：</p>
<blockquote>
<p>查看MySQL运行状态</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<blockquote>
<p>停止MySQL</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动MySQL</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重启MySQL</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>注册服务到Nacos</title>
    <url>/483.html</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>已经配置好Nacos注册中心，配置步骤查看博客：<a href="https://blog.zoutl.cn/472.html">https://blog.zoutl.cn/472.html</a></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建一个Maven项目，这个项目就是一个服务，注册到Nacos</p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 服务注册/发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">121.41</span><span class="number">.111</span><span class="number">.222</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure>

<h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><p>@EnableDiscoveryClient这个注解能够让Nacos注册中心发现这个服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-28 19:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosOrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>运行启动类后，到Nacos注册中心界面查看结果，可以发现服务已经注册成功了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328200121379.png" alt="image-20220328200121379"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenFeign实现服务之间的调用（使用Nacos注册中心）</title>
    <url>/484.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>被调用的服务已经注册到Nacos，注册步骤查看博客：<a href="https://blog.zoutl.cn/483.html">https://blog.zoutl.cn/483.html</a></p>
<p>注册两个服务到Nacos，一个名为nacos-order（订单微服务），另一个名为nacos-stock（库存微服务），订单微服务调用库存微服务</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="库存微服务"><a href="#库存微服务" class="headerlink" title="库存微服务"></a>库存微服务</h4><blockquote>
<p>在库存微服务中添加一个被调用的方法（Controller类）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-28 20:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date() + <span class="string">&quot; : &quot;</span> + info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="订单微服务"><a href="#订单微服务" class="headerlink" title="订单微服务"></a>订单微服务</h4><blockquote>
<p>引入依赖，OpenFeign依赖是用来调用服务的</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- OpenFeign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建一个Service类调用服务，@FeignClient注解用来确定调用的是哪个微服务</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-28 20:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;nacos-stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StockFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用服务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/stock/test&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">test</span><span class="params">(<span class="meta">@RequestParam(&quot;info&quot;)</span> String info)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动类添加@EnableFeignClients注解，参数为调用服务的Service类所在的包（也就是使用了@FeignClient注解的类所在的包），这样才能调用服务</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-28 19:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.ledao.feign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosOrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试调用（使用Controller类）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.feign.StockFeignService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-28 20:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StockFeignService stockFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStockFeignService</span><span class="params">(StockFeignService stockFeignService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stockFeignService = stockFeignService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stockFeignService.test(<span class="string">&quot;调用库存微服务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>先启动库存微服务，再启动订单微服务，然后通过<a href="http://localhost:8081/order/test">localhost:8081/order/test</a>调用（具体端口看订单微服务的<code>application.yml</code>配置文件）</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
        <tag>OpenFeign</tag>
      </tags>
  </entry>
  <entry>
    <title>实现被调用的微服务集群以及调用时负载均衡</title>
    <url>/485.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在<a href="https://blog.zoutl.cn/483.html">https://blog.zoutl.cn/483.html</a>的基础上操作，前面的博客实现了调用库存微服务，现在再添加一个库存微服务实现库存微服务集群，在调用库存微服务时就自动实现了负载均衡，所以只需要实现库存微服务集群即可实现负载均衡</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>添加的库存微服务的代码和之前的基本相同，要修改的地方如下：</p>
<ol>
<li><p>修改微服务的端口，之前的是<code>8082</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-stock</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">121.41</span><span class="number">.111</span><span class="number">.222</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改启动类的名称，主要是方便辨认，不改也行，之前的名称是<code>NacosStockApplication</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-28 19:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosStockApplication2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosStockApplication2.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改被调用的方法，为了易于辨认调用的是哪个微服务，之前的没有<code>2</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-28 20:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;库存模块2收到的消息: &quot;</span> + info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote>
<p>启动先添加的库存微服务模块，去Nacos注册中心界面查看服务列表</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328214402070.png" alt="image-20220328214402070"></p>
<blockquote>
<p>通过<a href="http://localhost:8081/order/test">localhost:8081/order/test</a>调用，会发现交替调用两个库存微服务，此时已经实现了被调用的微服务集群以及调用时负载均衡</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-25%20001346.gif"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><h4 id="Nacos一些操作"><a href="#Nacos一些操作" class="headerlink" title="Nacos一些操作"></a>Nacos一些操作</h4><blockquote>
<p>点击服务列表的详情查看某个微服务的集群</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328214907798.png" alt="image-20220328214907798"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328214932977.png" alt="image-20220328214932977"></p>
<blockquote>
<p>修改微服务被调用的权重，点击上图的编辑，权重越大被调用的机会越大</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328215146401.png" alt="image-20220328215146401"></p>
<blockquote>
<p>下线微服务，点击下图的<code>下线</code>或在上图中关闭上线</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328215853636.png" alt="image-20220328215853636"></p>
<h4 id="指定命名空间以及名称"><a href="#指定命名空间以及名称" class="headerlink" title="指定命名空间以及名称"></a>指定命名空间以及名称</h4><p>我们可以将服务注册到指定命名空间以及自定义集群的名称，在集群的微服务的配置文件中设置即可（集群下的所有微服务的配置文件都需要设置，<font color="#dd0000">调用的订单微服务也要设置命名空间，不在同一个命名空间就无法调用</font>），看下面有注释的两个配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-stock</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">121.41</span><span class="number">.111</span><span class="number">.222</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e4f40c45-6d6d-44dc-8bea-64511127824</span> <span class="comment">#命名空间的id</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">LeDao</span> <span class="comment">#被调用微服务集群的名称,一定要相同,不然就不是一个集群了</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7实现Nacos注册中心集群</title>
    <url>/486.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在<a href="https://blog.zoutl.cn/472.html">https://blog.zoutl.cn/472.html</a>的基础上修改，之前是单机模式运行，在确保能单机运行后再看本教程</p>
<p>最好有一台云服务器，三个Nacos注册中心都连云服务器的MySQL数据库</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>下面是一台虚拟机的Nacos注册中心配置以及启动，其它两台虚拟机都是一样的操作</p>
<h4 id="修改启动脚本"><a href="#修改启动脚本" class="headerlink" title="修改启动脚本"></a>修改启动脚本</h4><p>如果之前把启动模式修改成了单机，就要修改成<code>cluster</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328234034846.png" alt="image-20220328234034846"></p>
<h4 id="配置集群的IP以及端口"><a href="#配置集群的IP以及端口" class="headerlink" title="配置集群的IP以及端口"></a>配置集群的IP以及端口</h4><p>进入<code>conf</code>目录，会有一个<code>cluster.conf.example</code>文件，把它重命名为<code>cluster.conf</code>，或者使用下面命令将它复制到现在的位置并命名为<code>cluster.conf</code>，<code>cluster.conf</code>是集群的各个IP地址以及端口的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp cluster.conf.example cluster.conf</span><br></pre></td></tr></table></figure>

<p>打开<code>cluster.conf</code>，添加以下内容：（IP以及端口根据实际情况填写）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">192.168.0.104</span>:<span class="string">8848</span></span><br><span class="line"><span class="meta">192.168.0.105</span>:<span class="string">8848</span></span><br><span class="line"><span class="meta">192.168.0.141</span>:<span class="string">8848</span></span><br></pre></td></tr></table></figure>

<h4 id="设置连接的数据库"><a href="#设置连接的数据库" class="headerlink" title="设置连接的数据库"></a>设置连接的数据库</h4><p>进入<code>conf</code>目录，会有一个<code>application.properties</code>文件，打开它找到下图的数据库配置并修改成云服务器的</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328235006267.png" alt="image-20220328235006267"></p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>进入<code>bin</code>目录，执行下面命令运行Nacos注册中心</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh startup.sh</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>进入Nacos界面查看注册中心的集群，看到节点状态都是<code>UP</code>，说明已经成功了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220328235926329.png" alt="image-20220328235926329"></p>
<h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><p>调用服务的以及被调用的服务都要设置</p>
<p> 在<code>server-addr</code>后接IP地址以及端口，用英文逗号隔开，这样服务就可以注册到集群的每个Nacos注册中心上了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">121.41</span><span class="number">.111</span><span class="number">.222</span><span class="string">:8848,175.111.222.21:8848</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>我有两台云服务器，一台的运行内存为2G，另一台为4G。弄集群时，2G的服务器的Nacos会崩掉，4G的可以正常运行，所以推荐云服务器的运行内存要4G起步</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot项目在新版IntelliJ IDEA配置热部署</title>
    <url>/487.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>我当前使用的idea版本为<code>2021.3.3</code>，热部署的配置和以前不一样了，比以前更麻烦</p>
<h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h4><p>使用<code>CTRL+ALT+S</code>快捷键打开设置，根据下面的图片设置</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220329172227485.png" alt="image-20220329172227485"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220329172344403.png" alt="image-20220329172344403"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>安装JMeter</title>
    <url>/488.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载地址：<a href="https://jmeter.apache.org/download_jmeter.cgi">Apache JMeter - Download Apache JMeter</a></p>
<p>下载zip压缩包的那个，解压后即可使用</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220402054208135.png" alt="image-20220402054208135"></p>
<h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><p>解压后，进入<code>bin</code>文件夹，双击<code>jmeter.bat</code>即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220402054503191.png" alt="image-20220402054503191"></p>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><h4 id="放大字体"><a href="#放大字体" class="headerlink" title="放大字体"></a>放大字体</h4><p>直接打开的话，可以看到界面的字体很小，我们需要将它放大一下</p>
<blockquote>
<p>打开<code>jmeter.properties</code>，修改<code>jsyntaxtextarea.font.size</code>的值，并把它前面的注释删除</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220402054738378.png" alt="image-20220402054738378"></p>
<blockquote>
<p>使用记事本工具打开<code>jmeter.bat</code>，在第一行下面加入以下代码：</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">set</span> <span class="string">JVM_ARGS=%JVM_ARGS% -Dswing.plaf.metal.controlFont=Dialog-25</span></span><br><span class="line"><span class="attr">set</span> <span class="string">JVM_ARGS=%JVM_ARGS% -Dswing.plaf.metal.systemFont=Dialog-25</span></span><br><span class="line"><span class="attr">set</span> <span class="string">JVM_ARGS=%JVM_ARGS% -Dswing.plaf.metal.userFont=SansSerif-25</span></span><br><span class="line"><span class="attr">set</span> <span class="string">JVM_ARGS=%JVM_ARGS% -Dswing.plaf.metal.smallFont=SansSerif-25</span></span><br></pre></td></tr></table></figure>

<h4 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h4><p>根据下图将语言修改为中文简体即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220402055359121.png" alt="image-20220402055359121"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>直接进入官网下载的是最新版，历史版本的链接为：<a href="https://archive.apache.org/dist/jmeter/binaries/?C=M;O=A">Index of /dist/jmeter/binaries (apache.org)</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js获取对象的值</title>
    <url>/489.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Vue.js要获取对象的值，不能像普通值那样设置，对象的每个字段都需要在<code>data()&#123;return&#123;&#125;&#125;</code>中进行设置，然后我们才可以获取到对象的值，对象的对象的值也可以获取到</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><p>秒杀商品实体类内有一个组合：商品实体类，也就是说，查询秒杀商品时也同时查询到对应的商品</p>
<blockquote>
<p>商品实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-01 17:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 详情</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>秒杀商品实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-01 18:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_miaosha_goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiaoShaGoods</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真实商品id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;goodsId&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer goodsId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品实体,获取对应商品的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Goods goods;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀的价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;startTime&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date startTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;endTime&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Vue代码"><a href="#Vue代码" class="headerlink" title="Vue代码"></a>Vue代码</h4><blockquote>
<p>数据绑定模板如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">miaoShaGoods</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">goodsId</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">stock</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">startTime</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">endTime</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">goods</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">image</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">stock</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">detail</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面的代码请求了后端，并把请求到的数据绑定到Vue，然后可以通过<code>&#123;&#123;miaoShaGoods.goods.id&#125;&#125;</code>查到秒杀商品对应的商品id了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">openMiaoShaDialog: <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">let</span> url = getServerUrl(<span class="string">&quot;miaoShaGoods/findById?id=&quot;</span> + id);</span><br><span class="line">  axios</span><br><span class="line">    .get(url)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      _this.miaoShaGoods = response.data;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>ASCII码</title>
    <url>/49.html</url>
    <content><![CDATA[<h3 id="ASCII码的组成"><a href="#ASCII码的组成" class="headerlink" title="ASCII码的组成"></a>ASCII码的组成</h3><p>第一部分是：ASCII非打印控制字符</p>
<p>第二部分是：ASCII打印字符</p>
<p>第三部分是：扩展ASCII打印字符</p>
<h3 id="各组成部分"><a href="#各组成部分" class="headerlink" title="各组成部分"></a>各组成部分</h3><h4 id="ASCII非打印控制字符"><a href="#ASCII非打印控制字符" class="headerlink" title="ASCII非打印控制字符"></a>ASCII非打印控制字符</h4><p>ASCII表上的数字0–31分配给了控制字符，用于控制像打印机等一些外围设备。例如，12代表换页/新页功能。此命令指示打印机跳到下一页的开头。（参详ASCII码表中0-31）</p>
<h4 id="ASCII打印字符"><a href="#ASCII打印字符" class="headerlink" title="ASCII打印字符"></a>ASCII打印字符</h4><table>
<thead>
<tr>
<th align="center">Bin</th>
<th align="center">Dec</th>
<th align="center">缩写/字符</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">00000000</td>
<td align="center">0</td>
<td align="center">NUL(null)</td>
<td align="center">空字符</td>
</tr>
<tr>
<td align="center">00000001</td>
<td align="center">1</td>
<td align="center">SOH(start of headling)</td>
<td align="center">标题开始</td>
</tr>
<tr>
<td align="center">00000010</td>
<td align="center">2</td>
<td align="center">STX (start of text)</td>
<td align="center">正文开始</td>
</tr>
<tr>
<td align="center">00000011</td>
<td align="center">3</td>
<td align="center">ETX (end of text)</td>
<td align="center">正文结束</td>
</tr>
<tr>
<td align="center">00000100</td>
<td align="center">4</td>
<td align="center">EOT (end of transmission)</td>
<td align="center">传输结束</td>
</tr>
<tr>
<td align="center">00000101</td>
<td align="center">5</td>
<td align="center">ENQ (enquiry)</td>
<td align="center">请求</td>
</tr>
<tr>
<td align="center">00000110</td>
<td align="center">6</td>
<td align="center">ACK (acknowledge)</td>
<td align="center">收到通知</td>
</tr>
<tr>
<td align="center">00000111</td>
<td align="center">7</td>
<td align="center">BEL (bell)</td>
<td align="center">响铃</td>
</tr>
<tr>
<td align="center">00001000</td>
<td align="center">8</td>
<td align="center">BS (backspace)</td>
<td align="center">退格</td>
</tr>
<tr>
<td align="center">00001001</td>
<td align="center">9</td>
<td align="center">HT (horizontal tab)</td>
<td align="center">水平制表符</td>
</tr>
<tr>
<td align="center">00001010</td>
<td align="center">10</td>
<td align="center">LF (NL line feed, new line)</td>
<td align="center">换行键</td>
</tr>
<tr>
<td align="center">00001011</td>
<td align="center">11</td>
<td align="center">VT (vertical tab)</td>
<td align="center">垂直制表符</td>
</tr>
<tr>
<td align="center">00001100</td>
<td align="center">12</td>
<td align="center">FF (NP form feed, new page)</td>
<td align="center">换页键</td>
</tr>
<tr>
<td align="center">00001101</td>
<td align="center">13</td>
<td align="center">CR (carriage return)</td>
<td align="center">回车键</td>
</tr>
<tr>
<td align="center">00001110</td>
<td align="center">14</td>
<td align="center">SO (shift out)</td>
<td align="center">不用切换</td>
</tr>
<tr>
<td align="center">00001111</td>
<td align="center">15</td>
<td align="center">SI (shift in)</td>
<td align="center">启用切换</td>
</tr>
<tr>
<td align="center">00010000</td>
<td align="center">16</td>
<td align="center">DLE (data link escape)</td>
<td align="center">数据链路转义</td>
</tr>
<tr>
<td align="center">00010001</td>
<td align="center">17</td>
<td align="center">DC1 (device control 1)</td>
<td align="center">设备控制1</td>
</tr>
<tr>
<td align="center">00010010</td>
<td align="center">18</td>
<td align="center">DC2 (device control 2)</td>
<td align="center">设备控制2</td>
</tr>
<tr>
<td align="center">00010011</td>
<td align="center">19</td>
<td align="center">DC3 (device control 3)</td>
<td align="center">设备控制3</td>
</tr>
<tr>
<td align="center">00010100</td>
<td align="center">20</td>
<td align="center">DC4 (device control 4)</td>
<td align="center">设备控制4</td>
</tr>
<tr>
<td align="center">00010101</td>
<td align="center">21</td>
<td align="center">NAK (negative acknowledge)</td>
<td align="center">拒绝接收</td>
</tr>
<tr>
<td align="center">00010110</td>
<td align="center">22</td>
<td align="center">SYN (synchronous idle)</td>
<td align="center">同步空闲</td>
</tr>
<tr>
<td align="center">00010111</td>
<td align="center">23</td>
<td align="center">ETB (end of trans. block)</td>
<td align="center">传输块结束</td>
</tr>
<tr>
<td align="center">00011000</td>
<td align="center">24</td>
<td align="center">CAN (cancel)</td>
<td align="center">取消</td>
</tr>
<tr>
<td align="center">00011001</td>
<td align="center">25</td>
<td align="center">EM (end of medium)</td>
<td align="center">介质中断</td>
</tr>
<tr>
<td align="center">00011010</td>
<td align="center">26</td>
<td align="center">SUB (substitute)</td>
<td align="center">替补</td>
</tr>
<tr>
<td align="center">00011011</td>
<td align="center">27</td>
<td align="center">ESC (escape)</td>
<td align="center">溢出</td>
</tr>
<tr>
<td align="center">00011100</td>
<td align="center">28</td>
<td align="center">FS (file separator)</td>
<td align="center">文件分割符</td>
</tr>
<tr>
<td align="center">00011101</td>
<td align="center">29</td>
<td align="center">GS (group separator)</td>
<td align="center">分组符</td>
</tr>
<tr>
<td align="center">00011110</td>
<td align="center">30</td>
<td align="center">RS (record separator)</td>
<td align="center">记录分离符</td>
</tr>
<tr>
<td align="center">00011111</td>
<td align="center">31</td>
<td align="center">US (unit separator)</td>
<td align="center">单元分隔符</td>
</tr>
<tr>
<td align="center">00100000</td>
<td align="center">32</td>
<td align="center">(space)</td>
<td align="center">空格</td>
</tr>
<tr>
<td align="center">00100001</td>
<td align="center">33</td>
<td align="center">!</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00100010</td>
<td align="center">34</td>
<td align="center">“</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00100011</td>
<td align="center">35</td>
<td align="center">#</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00100100</td>
<td align="center">36</td>
<td align="center">$</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00100101</td>
<td align="center">37</td>
<td align="center">%</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00100110</td>
<td align="center">38</td>
<td align="center">&amp;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00100111</td>
<td align="center">39</td>
<td align="center">‘</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00101000</td>
<td align="center">40</td>
<td align="center">(</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00101001</td>
<td align="center">41</td>
<td align="center">)</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00101010</td>
<td align="center">42</td>
<td align="center">*</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00101011</td>
<td align="center">43</td>
<td align="center">+</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00101100</td>
<td align="center">44</td>
<td align="center">,</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00101101</td>
<td align="center">45</td>
<td align="center">-</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00101110</td>
<td align="center">46</td>
<td align="center">.</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00101111</td>
<td align="center">47</td>
<td align="center">/</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00110000</td>
<td align="center">48</td>
<td align="center">0</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00110001</td>
<td align="center">49</td>
<td align="center">1</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00110010</td>
<td align="center">50</td>
<td align="center">2</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00110011</td>
<td align="center">51</td>
<td align="center">3</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00110100</td>
<td align="center">52</td>
<td align="center">4</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00110101</td>
<td align="center">53</td>
<td align="center">5</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00110110</td>
<td align="center">54</td>
<td align="center">6</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00110111</td>
<td align="center">55</td>
<td align="center">7</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00111000</td>
<td align="center">56</td>
<td align="center">8</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00111001</td>
<td align="center">57</td>
<td align="center">9</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00111010</td>
<td align="center">58</td>
<td align="center">:</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00111011</td>
<td align="center">59</td>
<td align="center">;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00111100</td>
<td align="center">60</td>
<td align="center">&lt;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00111101</td>
<td align="center">61</td>
<td align="center">=</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00111110</td>
<td align="center">62</td>
<td align="center">&gt;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">00111111</td>
<td align="center">63</td>
<td align="center">?</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01000000</td>
<td align="center">64</td>
<td align="center">@</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01000001</td>
<td align="center">65</td>
<td align="center">A</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01000010</td>
<td align="center">66</td>
<td align="center">B</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01000011</td>
<td align="center">67</td>
<td align="center">C</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01000100</td>
<td align="center">68</td>
<td align="center">D</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01000101</td>
<td align="center">69</td>
<td align="center">E</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01000110</td>
<td align="center">70</td>
<td align="center">F</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01000111</td>
<td align="center">71</td>
<td align="center">G</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01001000</td>
<td align="center">72</td>
<td align="center">H</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01001001</td>
<td align="center">73</td>
<td align="center">I</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01001010</td>
<td align="center">74</td>
<td align="center">J</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01001011</td>
<td align="center">75</td>
<td align="center">K</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01001100</td>
<td align="center">76</td>
<td align="center">L</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01001101</td>
<td align="center">77</td>
<td align="center">M</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01001110</td>
<td align="center">78</td>
<td align="center">N</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01001111</td>
<td align="center">79</td>
<td align="center">O</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01010000</td>
<td align="center">80</td>
<td align="center">P</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01010001</td>
<td align="center">81</td>
<td align="center">Q</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01010010</td>
<td align="center">82</td>
<td align="center">R</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01010011</td>
<td align="center">83</td>
<td align="center">S</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01010100</td>
<td align="center">84</td>
<td align="center">T</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01010101</td>
<td align="center">85</td>
<td align="center">U</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01010110</td>
<td align="center">86</td>
<td align="center">V</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01010111</td>
<td align="center">87</td>
<td align="center">W</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01011000</td>
<td align="center">88</td>
<td align="center">X</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01011001</td>
<td align="center">89</td>
<td align="center">Y</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01011010</td>
<td align="center">90</td>
<td align="center">Z</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01011011</td>
<td align="center">91</td>
<td align="center">[</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01011100</td>
<td align="center">92</td>
<td align="center">\</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01011101</td>
<td align="center">93</td>
<td align="center">]</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01011110</td>
<td align="center">94</td>
<td align="center">^</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01011111</td>
<td align="center">95</td>
<td align="center">_</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01100000</td>
<td align="center">96</td>
<td align="center">`</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01100001</td>
<td align="center">97</td>
<td align="center">a</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01100010</td>
<td align="center">98</td>
<td align="center">b</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01100011</td>
<td align="center">99</td>
<td align="center">c</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01100100</td>
<td align="center">100</td>
<td align="center">d</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01100101</td>
<td align="center">101</td>
<td align="center">e</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01100110</td>
<td align="center">102</td>
<td align="center">f</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01100111</td>
<td align="center">103</td>
<td align="center">g</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01101000</td>
<td align="center">104</td>
<td align="center">h</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01101001</td>
<td align="center">105</td>
<td align="center">i</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01101010</td>
<td align="center">106</td>
<td align="center">j</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01101011</td>
<td align="center">107</td>
<td align="center">k</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01101100</td>
<td align="center">108</td>
<td align="center">l</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01101101</td>
<td align="center">109</td>
<td align="center">m</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01101110</td>
<td align="center">110</td>
<td align="center">n</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01101111</td>
<td align="center">111</td>
<td align="center">o</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01110000</td>
<td align="center">112</td>
<td align="center">p</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01110001</td>
<td align="center">113</td>
<td align="center">q</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01110010</td>
<td align="center">114</td>
<td align="center">r</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01110011</td>
<td align="center">115</td>
<td align="center">s</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01110100</td>
<td align="center">116</td>
<td align="center">t</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01110101</td>
<td align="center">117</td>
<td align="center">u</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01110110</td>
<td align="center">118</td>
<td align="center">v</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01110111</td>
<td align="center">119</td>
<td align="center">w</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01111000</td>
<td align="center">120</td>
<td align="center">x</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01111001</td>
<td align="center">121</td>
<td align="center">y</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01111010</td>
<td align="center">122</td>
<td align="center">z</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01111011</td>
<td align="center">123</td>
<td align="center">{</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01111100</td>
<td align="center">124</td>
<td align="center">|</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01111101</td>
<td align="center">125</td>
<td align="center">}</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01111110</td>
<td align="center">126</td>
<td align="center">~</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">01111111</td>
<td align="center">127</td>
<td align="center">DEL (delete)</td>
<td align="center">删除</td>
</tr>
</tbody></table>
<h4 id="扩展ASCII打印字符"><a href="#扩展ASCII打印字符" class="headerlink" title="扩展ASCII打印字符"></a>扩展ASCII打印字符</h4><p>扩展的ASCII字符满足了对更多字符的需求。扩展的ASCII包含ASCII中已有的128个字符（数字0–32显示在下图中），又增加了128个字符，总共是256个。即使有了这些更多的字符，许多语言还是包含无法压缩到256个字符中的符号。因此，出现了一些ASCII的变体来囊括地区性字符和符号。例如，许多软件程序把ASCII表（又称作ISO8859-1）用于北美、西欧、澳大利亚和非洲的语言。</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201112132431.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter的基本使用</title>
    <url>/490.html</url>
    <content><![CDATA[<h3 id="添加线程组"><a href="#添加线程组" class="headerlink" title="添加线程组"></a>添加线程组</h3><blockquote>
<p>右键点击Test Plan，新建一个线程组</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404214208686.png" alt="image-20220404214208686"></p>
<blockquote>
<p>填写线程数</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404221153946.png" alt="image-20220404221153946"></p>
<h3 id="添加HTTP请求默认值"><a href="#添加HTTP请求默认值" class="headerlink" title="添加HTTP请求默认值"></a>添加HTTP请求默认值</h3><blockquote>
<p>添加了HTTP请求默认值后，可以统一管理HTTP请求的IP地址和端口号</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404214548026.png" alt="image-20220404214548026"></p>
<h3 id="添加HTTP请求"><a href="#添加HTTP请求" class="headerlink" title="添加HTTP请求"></a>添加HTTP请求</h3><blockquote>
<p>添加HTTP请求用于测试接口</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404214341922.png" alt="image-20220404214341922"></p>
<blockquote>
<p>如果配置了HTTP请求默认值，那么就不需要配置HTTP请求的Web服务器了</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404214909724.png"></p>
<blockquote>
<p>给请求添加参数</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404223512490.png" alt="image-20220404223512490"></p>
<blockquote>
<p>如果有一些数据是通过信息头传递的，那么需要配置一下HTTP信息头管理器，然后添加参数即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404225121947.png" alt="image-20220404225121947"></p>
<h3 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h3><blockquote>
<p>添加一些监听器，用于查看测试的效果</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404220619286.png" alt="image-20220404220619286"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote>
<p>点击菜单栏的启动按钮</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404221258553.png" alt="image-20220404221258553"></p>
<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><h4 id="聚合报告"><a href="#聚合报告" class="headerlink" title="聚合报告"></a>聚合报告</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404221421441.png" alt="image-20220404221421441"></p>
<h4 id="汇总报告"><a href="#汇总报告" class="headerlink" title="汇总报告"></a>汇总报告</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404221436874.png" alt="image-20220404221436874"></p>
<h4 id="察看结果树"><a href="#察看结果树" class="headerlink" title="察看结果树"></a>察看结果树</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404221657901.png" alt="image-20220404221657901"></p>
<h4 id="用表格察看结果"><a href="#用表格察看结果" class="headerlink" title="用表格察看结果"></a>用表格察看结果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404221716998.png" alt="image-20220404221716998"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><h4 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h4><blockquote>
<p>添加一个BeanShell PostProcessor后置处理器</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404222925854.png" alt="image-20220404222925854"></p>
<blockquote>
<p>添加以下代码</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">prev.setDataEncoding(&quot;utf-8&quot;);</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404223117964.png" alt="image-20220404223117964"></p>
<h4 id="禁用HTTP请求"><a href="#禁用HTTP请求" class="headerlink" title="禁用HTTP请求"></a>禁用HTTP请求</h4><p>如果有多个HTTP请求，那么JMeter启动时，这些HTTP请求都会被执行，如果不需要执行某个HTTP请求，那么我们需要禁用掉不需要执行的HTTP请求</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220404224105191.png" alt="image-20220404224105191"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter使用CSV数据文件设置</title>
    <url>/491.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>使用CSV数据文件设置可以给HTTP请求设置多组参数</p>
<h3 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h3><h4 id="新建参数文件"><a href="#新建参数文件" class="headerlink" title="新建参数文件"></a>新建参数文件</h4><p>新建一个TXT文件，用于设置多组HTTP请求的参数，每一行为一组参数，多个参数之间用<code>英文逗号,</code>隔开</p>
<h4 id="新建CSV数据文件设置"><a href="#新建CSV数据文件设置" class="headerlink" title="新建CSV数据文件设置"></a>新建CSV数据文件设置</h4><blockquote>
<p>在对应线程下添加<code>CSV Data Set Config</code></p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220405140056182.png" alt="image-20220405140056182"></p>
<blockquote>
<p>一些设置</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220406013116079.png" alt="image-20220406013116079"></p>
<h4 id="配置参数的获取"><a href="#配置参数的获取" class="headerlink" title="配置参数的获取"></a>配置参数的获取</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220405141913021.png"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发商品秒杀系统</title>
    <url>/492.html</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本项目为前后端分离项目，后端代码有两个版本：一个是单体架构，另一个是微服务架构（对单体架构进行了微服务拆分）</p>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><div class="tabs" id="github地址"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#github地址-1">前端代码</button></li><li class="tab"><button type="button" data-href="#github地址-2">后端代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="github地址-1"><p><a href="https://github.com/a6678696/miaosha-web">a6678696/miaosha-web: 高并发商品秒杀系统前端代码（前后端分离项目） (github.com)</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github地址-2"><p><strong>单体架构版本</strong></p>
<p><a href="https://github.com/a6678696/MiaoSha">a6678696/MiaoSha: 高并发商品秒杀系统后端代码（前后端分离项目，单体架构版本） (github.com)</a></p>
<p><strong>微服务架构版本</strong></p>
<p><a href="https://github.com/a6678696/miaosha-admin">a6678696/miaosha-admin: 高并发商品秒杀系统后端代码（前后端分离项目，微服务架构版本） (github.com)</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><h4 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h4><table>
<thead>
<tr>
<th align="center">技术</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Spring Boot</td>
<td align="center">后端项目框架</td>
</tr>
<tr>
<td align="center">Mybatis-Plus</td>
<td align="center">持久层框架</td>
</tr>
<tr>
<td align="center">MySQL5.6</td>
<td align="center">数据库</td>
</tr>
<tr>
<td align="center">Redis</td>
<td align="center">缓存中间件</td>
</tr>
<tr>
<td align="center">RabbitMQ</td>
<td align="center">消息队列（需要安装延迟队列的插件：<a href="https://blog.zoutl.cn/356.html">RabbitMQ 实现延时队列</a> ）</td>
</tr>
<tr>
<td align="center">Vue.js</td>
<td align="center">前端JavaScript框架</td>
</tr>
<tr>
<td align="center">Element</td>
<td align="center">基于 Vue 2.0 的桌面端组件库</td>
</tr>
</tbody></table>
<h4 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h4><p>在单体架构的基础上，多使用了以下技术：</p>
<table>
<thead>
<tr>
<th align="center">技术</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Spring Cloud</td>
<td align="center">微服务框架</td>
</tr>
<tr>
<td align="center">Spring Cloud Alibaba</td>
<td align="center">阿里微服务框架</td>
</tr>
<tr>
<td align="center">Nacos</td>
<td align="center">微服务注册中心</td>
</tr>
<tr>
<td align="center">OpenFeign</td>
<td align="center">Web服务客户端</td>
</tr>
<tr>
<td align="center">Gateway</td>
<td align="center">微服务网关</td>
</tr>
</tbody></table>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><ol>
<li>用户注册与登录</li>
<li>查看正在秒杀的商品列表</li>
<li>查看正在秒杀的商品详情</li>
<li>秒杀商品，成功后下单</li>
<li>30分钟未支付自动取消订单并释放商品和秒杀商品的库存</li>
<li>模拟支付</li>
</ol>
<h3 id="秒杀流程图"><a href="#秒杀流程图" class="headerlink" title="秒杀流程图"></a>秒杀流程图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-04-21%20205535.png"></p>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="注册界面"><a href="#注册界面" class="headerlink" title="注册界面"></a>注册界面</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409230821932.png" alt="image-20220409230821932"></p>
<h4 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409230831836.png" alt="image-20220409230831836"></p>
<h4 id="查看正在秒杀的商品"><a href="#查看正在秒杀的商品" class="headerlink" title="查看正在秒杀的商品"></a>查看正在秒杀的商品</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409230857976.png" alt="image-20220409230857976"></p>
<h4 id="秒杀页面"><a href="#秒杀页面" class="headerlink" title="秒杀页面"></a>秒杀页面</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409230919527.png" alt="image-20220409230919527"></p>
<h4 id="我的订单"><a href="#我的订单" class="headerlink" title="我的订单"></a>我的订单</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409230953051.png" alt="image-20220409230953051"></p>
<h4 id="模拟支付"><a href="#模拟支付" class="headerlink" title="模拟支付"></a>模拟支付</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409231011260.png" alt="image-20220409231011260"></p>
<h4 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409231025055.png" alt="image-20220409231025055"></p>
<h3 id="模拟海量用户秒杀"><a href="#模拟海量用户秒杀" class="headerlink" title="模拟海量用户秒杀"></a>模拟海量用户秒杀</h3><h4 id="用户批量注册"><a href="#用户批量注册" class="headerlink" title="用户批量注册"></a>用户批量注册</h4><p>下面方法批量注册1000个用户到数据库中，<code>如果是导入我的数据库文件可忽略此步</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409231858593.png" alt="image-20220409231858593"></p>
<h4 id="用户批量登录"><a href="#用户批量登录" class="headerlink" title="用户批量登录"></a>用户批量登录</h4><p>执行这步前要先注册用户，如果是微服务架构就请求<code>http://localhost:8080/user/loginAuto</code> 这个接口即可实现批量登录，并把对应的userId和Token保存到TXT文件中</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409231653964.png" alt="image-20220409231653964"></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>并发测试使用JMeter这个软件，安装与使用教程查看这几篇博客：<a href="https://blog.zoutl.cn/tags/JMeter/">标签: JMeter | LeDao 的博客 (zoutl.cn)</a></p>
<p>测试前先删除Redis中对应的秒杀商品的key，确认可秒杀商品的数量不为0</p>
<p>测试的接口为：<code>http://localhost:8080/order/save</code>，参数如下图所示</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220409232540517.png" alt="image-20220409232540517"></p>
<h3 id="配置Gateway的IP限流"><a href="#配置Gateway的IP限流" class="headerlink" title="配置Gateway的IP限流"></a>配置Gateway的IP限流</h3><p>多种限流方式查看博客：<a href="https://blog.zoutl.cn/497.html#%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95">Gateway 的基本使用 | LeDao 的博客 (zoutl.cn)</a></p>
<p>IP限流只在微服务架构版本有用，配置类<code>ipKeyResolver</code>已经写好了，现在只需要配置<code>miaosha-gateway</code>微服务的<code>spring-cloud.yml</code>配置就行了，完整配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">miaosha-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">8b2d6583-c0a0-43bd-a2a8-b215eba8c70e</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">miaosha</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.141</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">              <span class="attr">allowCredentials:</span> <span class="literal">true</span></span><br><span class="line">              <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">              <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">              <span class="attr">allowedMethods:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user_router</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://miaosha-user</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">goods_router</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://miaosha-goods</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/miaoShaGoods/**</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order_router</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://miaosha-order</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span> <span class="comment">#令牌桶每秒填充速率</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span> <span class="comment">#令牌桶总容量</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.requestedTokens:</span> <span class="number">1</span> <span class="comment"># 每次请求消耗1个</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>数据库文件在单体架构版本的GitHub仓库中，链接为：<a href="https://github.com/a6678696/MiaoSha">https://github.com/a6678696/MiaoSha</a></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Java在文件内容后面追加内容</title>
    <url>/493.html</url>
    <content><![CDATA[<h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-02 7:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\LeDao\\Desktop\\1.txt&quot;</span>);</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//追加内容后换行</span></span><br><span class="line">            String content = <span class="string">&quot;内容&quot;</span> + i + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">            <span class="comment">//追加内容后不换行</span></span><br><span class="line">            <span class="comment">//String content = &quot;内容&quot; + i;</span></span><br><span class="line">            fileOutputStream.write(content.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-02 7:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\LeDao\\Desktop\\1.txt&quot;</span>);</span><br><span class="line">        FileWriter fileWriter = <span class="keyword">new</span> FileWriter(file, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//追加内容后换行</span></span><br><span class="line">            String content = <span class="string">&quot;内容&quot;</span> + i + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">            <span class="comment">//追加内容后不换行</span></span><br><span class="line">            <span class="comment">//String content = &quot;内容&quot; + i;</span></span><br><span class="line">            fileWriter.write(content);</span><br><span class="line">        &#125;</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-02 7:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\LeDao\\Desktop\\1.txt&quot;</span>);</span><br><span class="line">        RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> length = randomAccessFile.length();</span><br><span class="line">        randomAccessFile.seek(length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//追加内容后换行</span></span><br><span class="line">            <span class="comment">//String content = &quot;内容&quot; + i + &quot;\r\n&quot;;</span></span><br><span class="line">            <span class="comment">//追加内容后不换行</span></span><br><span class="line">            String content = <span class="string">&quot;内容&quot;</span> + i;</span><br><span class="line">            randomAccessFile.write(content.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        randomAccessFile.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用Hutool"><a href="#使用Hutool" class="headerlink" title="使用Hutool"></a>使用Hutool</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.0.M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><p>下面这段代码追加的内容是换行的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.file.FileAppender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-02 7:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\LeDao\\Desktop\\1.txt&quot;</span>);</span><br><span class="line">        FileAppender fileAppender = <span class="keyword">new</span> FileAppender(file, <span class="number">16</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String content = <span class="string">&quot;内容&quot;</span> + i;</span><br><span class="line">            fileAppender.append(content);</span><br><span class="line">        &#125;</span><br><span class="line">        fileAppender.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo安装和卸载插件命令</title>
    <url>/494.html</url>
    <content><![CDATA[<h3 id="查看已安装插件"><a href="#查看已安装插件" class="headerlink" title="查看已安装插件"></a>查看已安装插件</h3><p>hexo的插件配置在根目录的<code>package.json</code>中，在<code>dependencies</code>节点中</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;5.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-abbrlink&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-algoliasearch&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-blog-encrypt&quot;</span>: <span class="string">&quot;^3.1.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-browsersync&quot;</span>: <span class="string">&quot;^0.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install 插件名称 --save</span><br></pre></td></tr></table></figure>

<h3 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall 插件名称</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven多模块项目的依赖管理与引用</title>
    <url>/495.html</url>
    <content><![CDATA[<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220412085504882.png" alt="image-20220412085504882"></p>
<h3 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h3><p>创建一个父项目（Maven项目），只用来管理依赖的版本</p>
<p>首先将<code>packaging</code>节点的内容设置为pom，表明只是一个pom项目，只用来聚合工程或传递依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>properties</code>节点内管理依赖的版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springboot.version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">springboot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springcloudalibaba.version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">springcloudalibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>dependencyManagement</code>节点内定义依赖，然后这些依赖可以在子项目中引用了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springcloudalibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;gson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在子项目中引用的格式如下：（以上面定义的Gson依赖为例，在下面的代码中可以看到<code>省略了版本号</code>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="公共项目"><a href="#公共项目" class="headerlink" title="公共项目"></a>公共项目</h3><p>创建一个公共项目（Maven项目，是父项目的子项目），管理公共依赖、工具类以及实体类等</p>
<p>创建好这个公共项目后，idea在父项目的<code>pom.xml</code>文件的<code>modules</code>节点就引入了这个公共模块（每创建一个子项目就会自动在父项目中引入）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>dependencies</code>节点中引入公共依赖，就是大多数子项目（两个及以上）都可能会用到的依赖，如果只有某一个子项目单独使用的依赖，就直接在那个子项目<code>pom.xml</code>文件的<code>dependencies</code>节点引入（已经被父项目管理的依赖可以省略版本号，建议省略掉，直接用父项目管理版本号即可）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="子项目"><a href="#子项目" class="headerlink" title="子项目"></a>子项目</h3><p>创建子项目（Maven项目，真实的项目），引入公共项目的依赖，格式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一些属性来源如下图：（在公共项目的<code>pom.xml</code>中）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220412084328390.png" alt="image-20220412084328390"></p>
<p>不看公共项目的<code>pom.xml</code>快速引入看下面动图：（直接输入公共项目的名称就会出提示）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-04-12%20084623.gif"></p>
<p>如果是在公共项目中没有引入的依赖，直接在子项目中引入即可（像上面公共项目那样引入即可）</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>公共项目的版本号也可以丢给父项目管理，首先在父项目的<code>properties</code>节点定义版本号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">common.version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">common.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>dependencyManagement.dependencies</code>节点中引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;common.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在子项目中引入，和上面对比少了版本号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的Butterfly主题更换网站字体</title>
    <url>/496.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>hexo的Butterfly主题是可以更换字体的，更换字体的情况分为两种：</p>
<ol>
<li>使用系统自带的字体</li>
<li>使用从网上下载的字体</li>
</ol>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="使用系统自带的字体"><a href="#使用系统自带的字体" class="headerlink" title="使用系统自带的字体"></a>使用系统自带的字体</h3><h4 id="查看系统字体"><a href="#查看系统字体" class="headerlink" title="查看系统字体"></a>查看系统字体</h4><p>去查看系统有哪些字体，打开设置后根据下图查看（我的电脑系统是Windows11）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220412232308366.png" alt="image-20220412232308366"></p>
<h4 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h4><p>去修改主题文件夹下的<code>_config.yml</code>的配置文件，找到下面代码</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line"><span class="attr">font</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">global-font-size</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">code-font-size</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">font-family</span>: <span class="string"></span></span><br><span class="line">  <span class="meta">code-font-family</span>: <span class="string">consolas</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Font settings for the site title and site subtitle</span></span><br><span class="line"><span class="comment"># 左上角網站名字 主頁居中網站名字</span></span><br><span class="line"><span class="attr">blog_title_font</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">font_link</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">font-family</span>: <span class="string"></span></span><br></pre></td></tr></table></figure>

<p>一些配置说明如下：</p>
<table>
<thead>
<tr>
<th align="center">配置</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>font.font-family</code></td>
<td align="center">全局字体样式</td>
</tr>
<tr>
<td align="center"><code>font.code-font-family</code></td>
<td align="center">代码字体样式</td>
</tr>
<tr>
<td align="center"><code>blog_title_font.font-family</code></td>
<td align="center">主页的左上角名字以及居中网站名字的字体样式，<font color="#dd0000">如果不设置就以全局字体为准</font></td>
</tr>
</tbody></table>
<h3 id="使用从网上下载的字体"><a href="#使用从网上下载的字体" class="headerlink" title="使用从网上下载的字体"></a>使用从网上下载的字体</h3><h4 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h4><p>网址：<a href="https://www.ztxz.net.cn/">字体下载|字体下载大全免费 (ztxz.net.cn)</a></p>
<p>下载好的字体文件后缀名都是<code>.ttf</code></p>
<h4 id="使用字体"><a href="#使用字体" class="headerlink" title="使用字体"></a>使用字体</h4><blockquote>
<p>新建存放下载字体的文件夹</p>
</blockquote>
<p>在主题的<code>source</code>文件夹下新建一个<code>font</code>文件夹，用于存放下载的字体</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220412233228994.png" alt="image-20220412233228994"></p>
<blockquote>
<p>新建CSS文件用于定义和设置网站的字体（设置字体也可以到主题的配置中设置，看上面）</p>
</blockquote>
<p>在主题文件夹的<code>/source/css</code>文件夹下新建一个CSS文件，命名为<code>font.css</code>，内容如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;HarmonyOS_Sans&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-display</span>: swap;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../font/HarmonyOS_Sans.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;MiaoKenTang&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-display</span>: swap;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../font/MiaoKenTang.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;MiaoKenTang&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在主题配置中引入CSS</p>
</blockquote>
<p>去修改主题文件夹下的<code>_config.yml</code>的配置文件，找到下面代码，引入<code>font.css</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">head</span>:<span class="string"></span></span><br><span class="line">     <span class="meta">-</span> <span class="string">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/font.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220412234312611.png" alt="image-20220412234312611"></p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h2><p>如果使用了CDN加速网站的话，建议不要使用从网上下载的字体</p>
<p>从下图可以看出，4月21日当天加速字体快使用了2个G的流量，又拍云每日花费0.5元左右，每年60块钱的免费额度根本不够用</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220423153014766.png" alt="image-20220423153014766"></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman汉化教程</title>
    <url>/498.html</url>
    <content><![CDATA[<h3 id="查看Postman版本"><a href="#查看Postman版本" class="headerlink" title="查看Postman版本"></a>查看Postman版本</h3><p>查看当前的版本号是为了下载对应的中文包，我当前的版本为<code>9.12.2</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220414133932778.png" alt="image-20220414133932778"></p>
<h3 id="下载中文包"><a href="#下载中文包" class="headerlink" title="下载中文包"></a>下载中文包</h3><p>下载地址：<a href="https://github.com/hlmd/Postman-cn/releases">Releases · hlmd/Postman-cn (github.com)</a></p>
<p>我当前的版本为<code>9.12.2</code>，所以就要下载<code>9.12.2</code>版本的中文包</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220414134244746.png" alt="image-20220414134244746"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Postman的默认安装路径如下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220414134520192.png" alt="image-20220414134520192"></p>
<p>将下载好的中文包复制到<code>resources</code>文件夹中，解压该中文包，然后重启Postman即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220414134918891.png" alt="image-20220414134918891"></p>
<h3 id="禁止自动更新"><a href="#禁止自动更新" class="headerlink" title="禁止自动更新"></a>禁止自动更新</h3><p>由于中文包要和Postman的版本对应，所以我们可以禁止Postman的自动更新，主要是为了防止中文包由于版本不对应而失效。不然如果更新了Postman，就根据本教程重新安装最新的中文包</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220414135353350.png" alt="image-20220414135353350"></p>
<p>然后再进行下面的操作<br><img src="https://img-blog.csdnimg.cn/eea87c42ca2040de8ce1cd260e68de96.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LmQ6YGT5LmQ,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>汉化教程以及汉化包来源：<a href="https://github.com/hlmd/Postman-cn">https://github.com/hlmd/Postman-cn</a></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>屏蔽CSDN的会员资源</title>
    <url>/499.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在CSDN查资料总会出现一些会员下载页面，花钱下载是不可能的，况且不一定可以保证资源对我们有用，如果下载了这些没用的资源简直血亏，所以眼不见为净最好</p>
<p>我们可以通过油猴插件的<code>CSDN屏蔽会员资源</code>脚本屏蔽掉这些下载链接（不是破解）</p>
<h3 id="安装油猴插件"><a href="#安装油猴插件" class="headerlink" title="安装油猴插件"></a>安装油猴插件</h3><p>油猴插件安装地址：<a href="https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN">Tampermonkey - Microsoft Edge Addons</a></p>
<h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><p>脚本安装地址：<a href="https://greasyfork.org/zh-CN/scripts/432452-csdn%E5%B1%8F%E8%94%BD%E4%BC%9A%E5%91%98%E8%B5%84%E6%BA%90">CSDN屏蔽会员资源 (greasyfork.org)</a>，安装好后就可以进行屏蔽了</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA连接数据库报错及解决</title>
    <url>/5.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>使用JDBC连接MySQL时出现下面错误：</p>
<p><font color="#dd0000">The server time zone value ‘�й���׼ʱ��’ is unrecognizedor representsmore than one timezone. You must configure either the server or JDBC driver(via the serverTimezone configuration</font></p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>发现这是因为安装MySQL的时候时区设置地不正确，MySQL默认的是美国的时区，而我们中国大陆要比他们迟8小时，采用+8:00格式。在你没有指定MySQL驱动版本的情况下它自动依赖的驱动是8.0.12很高的版本，这是由于数据库和系统时区差异所造成的，在JDBC连接的url后面加上 serverTimezone=GMT 即可解决问题，如果需要使用 gmt+8 时区，需要写成 GMT%2B8 ，否则会被解析为空。再一个解决办法就是使用低版本的 MySQL JDBC 驱动，5.1.28 不会存在时区的问题。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在连接字符串后面加上 <code>serverTimezone=GMT%2B8</code> ，其中GMT是格林威治平时，也称格林威治时间（它规定太阳每天经过位于英国伦敦郊区的皇家格林威治天文台的时间为中午12点），完整的连接字符串示例如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc</span>:<span class="string">mysql://localhost:3306/db_secondhandtrade?serverTimezone=GMT%2B8</span></span><br></pre></td></tr></table></figure>

<p>如果要解决中文乱码输入问题，则加上<code>useUnicode=true&amp;characterEncoding=utf8</code>，完整字符串如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc</span>:<span class="string">mysql://localhost:3306/db_secondhandtrade?useUnicode=true&amp;characterEncoding=utf8</span></span><br></pre></td></tr></table></figure>

<p>一般都是两者一起使用，完整字符串如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc</span>:<span class="string">mysql://localhost:3306/db_secondhandtrade?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br></pre></td></tr></table></figure>

<p>idea连接MySQL界面如下：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-01-17%20231338.png"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java浮点数的加减乘除运算</title>
    <url>/500.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>如果直接进行浮点数之间的运算，有可能会得不到正确结果</p>
<p>Java浮点数优先使用double，先把double转化为String，然后通过BigDecimal的构造方法转化为BigDecimal</p>
<p>最后进行加减乘除的运算使用BigDecimal这个类的方法：</p>
<ol>
<li><p>加</p>
<p><code>public BigDecimal add(BigDecimal augend)</code></p>
<p>传入的参数为加数</p>
</li>
<li><p>减</p>
<p> <code>public BigDecimal subtract(BigDecimal subtrahend)</code></p>
<p>传入的参数为减数</p>
</li>
<li><p>乘</p>
<p><code>public BigDecimal multiply(BigDecimal multiplicand)</code></p>
<p>传入的参数为乘数</p>
</li>
<li><p>除</p>
<p> <code>public BigDecimal divide(BigDecimal divisor,int scale,int roundingMode)</code></p>
<p> 传入的参数一为除数，参数二为保留的小数位数，参数三为舍入的模式（各种模式看下图）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220417161001836.png" alt="image-20220417161001836"></p>
</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">2.2</span>;</span><br><span class="line">        <span class="keyword">double</span> d2 = <span class="number">1.81</span>;</span><br><span class="line">        <span class="comment">//转化为BigDecimal</span></span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(String.valueOf(d1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(String.valueOf(d2));</span><br><span class="line">        <span class="comment">//加</span></span><br><span class="line">        System.out.println(b1.add(b2));</span><br><span class="line">        <span class="comment">//减</span></span><br><span class="line">        System.out.println(b1.subtract(b2));</span><br><span class="line">        <span class="comment">//乘</span></span><br><span class="line">        System.out.println(b1.multiply(b2));</span><br><span class="line">        <span class="comment">//除</span></span><br><span class="line">        System.out.println(b1.divide(b2, <span class="number">2</span>, RoundingMode.HALF_UP));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>进行除法运算时，一定要指定保留的小数位数和舍入的模式</p>
<p>如果使用<code>public BigDecimal divide(BigDecimal divisor)</code>这个方法，当除不尽时（即结果的小数无限），会报错，报错信息如下图：</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220417162129750.png" alt="image-20220417162129750"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>大小写转换</title>
    <url>/50.html</url>
    <content><![CDATA[<h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><h4 id="小写转大写"><a href="#小写转大写" class="headerlink" title="小写转大写"></a>小写转大写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">c1=Character.toUpperCase(c1);</span><br></pre></td></tr></table></figure>

<h4 id="大写转小写"><a href="#大写转小写" class="headerlink" title="大写转小写"></a>大写转小写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c2 = <span class="string">&#x27;B&#x27;</span>; </span><br><span class="line">c2 = Character.toLowerCase(c2); </span><br></pre></td></tr></table></figure>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="全部转换成小写"><a href="#全部转换成小写" class="headerlink" title="全部转换成小写"></a>全部转换成小写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;aBcD&quot;</span>;</span><br><span class="line">str=str.toLowerCase();</span><br></pre></td></tr></table></figure>

<h4 id="全部转换成大写"><a href="#全部转换成大写" class="headerlink" title="全部转换成大写"></a>全部转换成大写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;aBcD&quot;</span>;</span><br><span class="line">str=str.toUpperCase();</span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="keyword">char</span> c2 = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;字符大小写转换:&quot;</span>);</span><br><span class="line">	System.out.println(<span class="string">&quot;转换前:c1=&quot;</span>+c1);</span><br><span class="line">	c1=Character.toUpperCase(c1);</span><br><span class="line">	System.out.println(<span class="string">&quot;转换后:c1=&quot;</span>+c1);</span><br><span class="line">	System.out.println(<span class="string">&quot;转换前:c2=&quot;</span>+c2);</span><br><span class="line">	c2 = Character.toLowerCase(c2);</span><br><span class="line">	System.out.println(<span class="string">&quot;转换后:c2=&quot;</span>+c2);</span><br><span class="line">	System.out.println(<span class="string">&quot;字符串全部转换成大写或小写&quot;</span>);</span><br><span class="line">	String str = <span class="string">&quot;aBcD&quot;</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;转换前:&quot;</span> + str);</span><br><span class="line">	System.out.println(<span class="string">&quot;转换后:&quot;</span>);</span><br><span class="line">	System.out.println(<span class="string">&quot;全部转换成小写:&quot;</span>+str.toLowerCase());</span><br><span class="line">	System.out.println(<span class="string">&quot;全部转换成大写:&quot;</span>+str.toUpperCase());</span><br><span class="line">	System.out.println(<span class="string">&quot;字符串大写变小写,小写变大写:&quot;</span>);</span><br><span class="line">	StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(str);</span><br><span class="line">	System.out.println(<span class="string">&quot;转换前:&quot;</span>+stringBuffer);</span><br><span class="line">	<span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[stringBuffer.length()];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">		arr[i] = stringBuffer.charAt(i);</span><br><span class="line">		<span class="keyword">if</span> (<span class="number">65</span>&lt;=arr[i]&amp;&amp;arr[i]&lt;=<span class="number">90</span>) &#123;</span><br><span class="line">			arr[i] = Character.toLowerCase(arr[i]);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">97</span>&lt;=arr[i]&amp;&amp;arr[i]&lt;=<span class="number">122</span>) &#123;</span><br><span class="line">			arr[i] = Character.toUpperCase(arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	stringBuffer.delete(<span class="number">0</span>, stringBuffer.length());</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">		stringBuffer.append(arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(<span class="string">&quot;转换后:&quot;</span>+stringBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201112140931.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Thymeleaf+jQuery+Ajax实现二级下拉框联动</title>
    <url>/501.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>下拉框联动就是，后一个下拉框的内容根据前一个下拉框的内容动态加载，例如：前一个下拉框是<code>省份</code>，后一个下拉框是<code>市</code>，它们之间存在关联</p>
<h3 id="实现办法"><a href="#实现办法" class="headerlink" title="实现办法"></a>实现办法</h3><p>第一个下拉框的内容在页面跳转的时候就直接从Java后端获取并加载</p>
<p>第二个下拉框的内容则监听第一个下拉框的内容是否改变了（通过onchange属性监听，属性值为内容改变请求的JavaScript方法），每改变一次就从Java后端获取一次数据，然后通过jQuery动态生成选项</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="下拉框描述"><a href="#下拉框描述" class="headerlink" title="下拉框描述"></a>下拉框描述</h4><p>第一个下拉框是商品类别，第二个是对应的商品名称</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220419122950912.png" alt="image-20220419122950912"></p>
<h4 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h4><p>商品类别使用Thymeleaf获取并加载，<code>onchange=&quot;getGoodsNameTestPage()&quot;</code>实现监听内容的改变并请求<code>getGoodsNameTestPage()</code>方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group form-inline&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;getGoodsNameTestPage()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>商品类别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;goodsTypeIdTestPage&quot;</span> <span class="attr">name</span>=<span class="string">&quot;goodsTypeId&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择商品类别...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;goodsType:$&#123;goodsTypeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;goodsType.name&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;goodsType.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group form-inline&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>商品名称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;goodsNameTestPage&quot;</span> <span class="attr">name</span>=<span class="string">&quot;goodsTypeId&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>先选择商品类别...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="跳转页面的控制层方法"><a href="#跳转页面的控制层方法" class="headerlink" title="跳转页面的控制层方法"></a>跳转页面的控制层方法</h4><p>主要是向页面传递<code>goodsTypeList</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转到测试界面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toTestPage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">toTestPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    List&lt;GoodsType&gt; goodsTypeList = goodsTypeService.list(<span class="keyword">null</span>);</span><br><span class="line">    mav.addObject(<span class="string">&quot;goodsTypeList&quot;</span>, goodsTypeList);</span><br><span class="line">    mav.addObject(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;测试界面--LeDao校园二手交易平台&quot;</span>);</span><br><span class="line">    mav.addObject(<span class="string">&quot;mainPage&quot;</span>, <span class="string">&quot;page/test&quot;</span>);</span><br><span class="line">    mav.addObject(<span class="string">&quot;mainPageKey&quot;</span>, <span class="string">&quot;#b&quot;</span>);</span><br><span class="line">    mav.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JavaScript请求的方法"><a href="#JavaScript请求的方法" class="headerlink" title="JavaScript请求的方法"></a>JavaScript请求的方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下拉框联动</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGoodsNameTestPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> goodsTypeId = $(<span class="string">&quot;#goodsTypeIdTestPage&quot;</span>).val();</span><br><span class="line">    <span class="comment">//当goodsTypeId为空,就结束方法并添加默认选项</span></span><br><span class="line">    <span class="keyword">if</span> (goodsTypeId === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;#goodsNameTestPage&quot;</span>).empty().append(<span class="string">&#x27;&lt;option&gt;选择商品名称...&lt;/option&gt;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/getGoodsListByGoodsTypeId?goodsTypeId=&quot;</span> + goodsTypeId,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> goods = $(<span class="string">&quot;#goodsNameTestPage&quot;</span>).empty();</span><br><span class="line">            <span class="comment">//添加默认选项</span></span><br><span class="line">            goods.append(<span class="string">&#x27;&lt;option&gt;选择商品名称...&lt;/option&gt;&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">                goods.append(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + result[i].id + <span class="string">&quot;&#x27;&gt;&quot;</span> + result[i].name + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Ajax请求的后端方法"><a href="#Ajax请求的后端方法" class="headerlink" title="Ajax请求的后端方法"></a>Ajax请求的后端方法</h4><p>主要是获取对应商品类别的商品集合并返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据商品类别id获取商品集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> goodsTypeId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getGoodsListByGoodsTypeId&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">getGoodsListByGoodsTypeId</span><span class="params">(Integer goodsTypeId)</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;Goods&gt; goodsQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    goodsQueryWrapper.eq(<span class="string">&quot;goodsTypeId&quot;</span>, goodsTypeId);</span><br><span class="line">    <span class="keyword">return</span> goodsService.list(goodsQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果动态图"><a href="#结果动态图" class="headerlink" title="结果动态图"></a>结果动态图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-04-19%20124604.gif"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果不使用Thymeleaf，那么第一个下拉框的内容在页面一加载时就通过Ajax请求Java后端来获取</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jQuery</tag>
        <tag>Ajax</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>解决: Git切换分支时把当前分支内容的更改带到切换后的分支</title>
    <url>/502.html</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>当前分支内容的更改还在工作区或者暂存区（工作区和暂存区的内容更改在所有分支可见），也就是说当前分支的内容更改没有commit（提交），分为两种情况：</p>
<ol>
<li>还在工作区，也就是说没有进行add操作</li>
<li>在暂存区，只进行了add操作而没有进行commit操作</li>
</ol>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-04-20_112748.png"></p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>我设定当前分支名称为<code>a</code>，要切换的分支名称为<code>b</code>，解决办法有以下三种：</p>
<h4 id="不操作"><a href="#不操作" class="headerlink" title="不操作"></a>不操作</h4><p>只切换分支，然后又切换回切换前的分支，也就是说只进行切换分支的操作，可以不用管a分支内容的更改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到b分支</span></span><br><span class="line">git branch b</span><br><span class="line"><span class="comment">#切换回a分支</span></span><br><span class="line">git branch a</span><br></pre></td></tr></table></figure>

<h4 id="切换前提交"><a href="#切换前提交" class="headerlink" title="切换前提交"></a>切换前提交</h4><p>切换分支前先把当前分支的内容提交上去，这样切换后的分支就看不到a分支内容的更改了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">#提交到本地仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span></span><br><span class="line"><span class="comment">#切换到b分支</span></span><br><span class="line">git branch b</span><br></pre></td></tr></table></figure>

<h4 id="储存内容的变更"><a href="#储存内容的变更" class="headerlink" title="储存内容的变更"></a>储存内容的变更</h4><p>储存当前分支内容的变更，也就是说把当前分支的内容更改储存起来，先使用add命令将内容的更改添加到暂存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>再使用stash命令储存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>

<p>然后切换到b分支，此时是看不到a分支内容的更改的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch b</span><br></pre></td></tr></table></figure>

<p>切换回a分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch a</span><br></pre></td></tr></table></figure>

<p>恢复储存的内容变更，<code>pop</code>表示恢复最近一次储存的内容变更并删除储存记录，如果是<code>apply</code>则只恢复不删除储存记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p><font color="#dd0000">到此已经完成了，下面的是储存记录的删除命令</font></p>
<p>删除储存记录使用<code>git stash drop</code>命令，直接执行则删除最近一条，加上记录的索引<code>stash@&#123;1&#125;</code>则删除指定的记录（第1条，从0开始计算，先使用<code>git stash list</code>查看所有储存记录）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220420123132474.png" alt="image-20220420123132474"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>实现合并GitHub远程分支</title>
    <url>/504.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>要合并的分支名称为a，主分支名称为master，实现合并GitHub远程分支的方法有两种：</p>
<ol>
<li>使用Git命令合并</li>
<li>直接在GitHub中合并</li>
</ol>
<h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>创建一个分支并把它提交到远程仓库中，为了有东西可测试</p>
<p>当前在master分支，新建一个a分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch a</span><br></pre></td></tr></table></figure>

<p>切换到a分支，也可以直接使用<code>git checkout -b a</code>命令创建并切换到a分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout a</span><br></pre></td></tr></table></figure>

<p>在分支a下新建一个名为aaa.txt的文件，并把a分支push到GitHub远程仓库，此时GitHub仓库就多了一个a分支</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220420143941714.png" alt="image-20220420143941714"></p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="使用Git命令合并"><a href="#使用Git命令合并" class="headerlink" title="使用Git命令合并"></a>使用Git命令合并</h3><p>切换到master分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<p>删除本地的a分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D a</span><br></pre></td></tr></table></figure>

<p>创建一个本地的a分支，并同步GitHub远程a分支的内容到本地的a分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch a origin/a</span><br></pre></td></tr></table></figure>

<p>合并a分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge a</span><br></pre></td></tr></table></figure>

<p>删除已经被合并的a分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d a</span><br></pre></td></tr></table></figure>

<p>push本地master分支到GitHub远程库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>删除GitHub远程a分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin a -d</span><br></pre></td></tr></table></figure>

<h3 id="直接在GitHub中合并"><a href="#直接在GitHub中合并" class="headerlink" title="直接在GitHub中合并"></a>直接在GitHub中合并</h3><blockquote>
<p>进入GitHub仓库页面，查看所有分支</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220420145816162.png" alt="image-20220420145816162"></p>
<blockquote>
<p>选择a分支</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220420145950959.png" alt="image-20220420145950959"></p>
<blockquote>
<p>创建合并请求</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220420150043000.png" alt="image-20220420150043000"></p>
<blockquote>
<p>合并请求</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220420150245456.png" alt="image-20220420150245456"></p>
<blockquote>
<p>确认合并</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220420150320968.png" alt="image-20220420150320968"></p>
<blockquote>
<p>删除已经合并的分支</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220420150426079.png" alt="image-20220420150426079"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>LocalDateTime的基本使用</title>
    <url>/505.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>java.util.Date以及它的格式化工具类SimpleDateFormat都是线程不安全的，不推荐使用</p>
<p>Java 8之后推荐使用<code>LocalDateTime</code>代替Date，<code>DateTimeFormatter</code>代替SimpleDateFormat</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">now()</td>
<td align="center">从默认时区的系统时钟获取当前的日期时间</td>
</tr>
<tr>
<td align="center">getYear()</td>
<td align="center">获取年份字段</td>
</tr>
<tr>
<td align="center">getMonthValue()</td>
<td align="center">获取月份字段，从1到12</td>
</tr>
<tr>
<td align="center">getDayOfMonth()</td>
<td align="center">获取当前月的第几天</td>
</tr>
<tr>
<td align="center">getHour()</td>
<td align="center">获取小时字段</td>
</tr>
<tr>
<td align="center">getMinute()</td>
<td align="center">获取分钟字段</td>
</tr>
<tr>
<td align="center">getSecond()</td>
<td align="center">获取秒钟字段</td>
</tr>
</tbody></table>
<h3 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ofPattern(String pattern)</td>
<td align="center">使用指定的模式创建格式化程序</td>
</tr>
<tr>
<td align="center">format(TemporalAccessor temporal)</td>
<td align="center">使用此格式化程序格式化日期时间对象</td>
</tr>
</tbody></table>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前时间</span></span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        <span class="comment">//年份</span></span><br><span class="line">        System.out.println(localDateTime.getYear());</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(dateTimeFormatter.format(localDateTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220423115516512.png" alt="image-20220423115516512"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Ngrok实现让别人访问自己本地运行的项目</title>
    <url>/506.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Ngrok是一个反向代理，通过在公共的端点和本地运行的Web服务器之间建立一个安全的通道，从而实现让别人访问自己本地运行的项目</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="注册并登录"><a href="#注册并登录" class="headerlink" title="注册并登录"></a>注册并登录</h4><p>网址为：<a href="https://ngrok.cc/login">会员登陆 (ngrok.cc)</a></p>
<h4 id="实名认证"><a href="#实名认证" class="headerlink" title="实名认证"></a>实名认证</h4><p>以前是不需要实名认证的，但是由于被人用来弄违法的网站，所以现在强制实名认证，实名认证需要收取两块钱的费用</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220425204751143.png" alt="image-20220425204751143"></p>
<h4 id="开通隧道"><a href="#开通隧道" class="headerlink" title="开通隧道"></a>开通隧道</h4><p>使用免费的就行，需要自定义域名以及不能忍受速度慢的可以花钱买</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220425205918019.png" alt="image-20220425205918019"></p>
<p>确定添加后，在点击确认即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220425210631124.png" alt="image-20220425210631124"></p>
<h4 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h4><p>在左侧菜单选择隧道管理，然后下载Ngrok客户端</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220425211730192.png" alt="image-20220425211730192"></p>
<p>选择适合自己的版本</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022425_211819_1650892699.png"></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>解压后打开启动工具</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220425212130856.png" alt="image-20220425212130856"></p>
<p>复制隧道id到刚刚打开的窗口内，并回车</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220425212422709.png" alt="image-20220425212422709"></p>
<p>最后输入上图的赠送域名即可访问</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>我试了一下，免费的会很卡，如果真的有需要，就花10块钱买一个月的服务器吧</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda表达式的基本使用</title>
    <url>/507.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Lambda表达式就是对某一个接口方法的实现，可以替代我们以前经常写的匿名内部类来实现接口方法，本质是一个匿名函数</p>
<h3 id="使用的要求"><a href="#使用的要求" class="headerlink" title="使用的要求"></a>使用的要求</h3><p>接口必须是函数式接口，也就是说这个接口有且仅有一个抽象方法，但是可以有多个非抽象方法</p>
<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>函数式接口示例代码如下：（add是抽象方法，add1和add2是非抽象方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface1</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>@FunctionalInterface</code>注解后，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。不使用这个注解也是可以的，这个注解只是用来检查是否是函数式接口，没有其它作用，只要接口只有一个抽象方法那它就是函数式接口，和注解没有任何关系</p>
<h3 id="Lambda表达式格式"><a href="#Lambda表达式格式" class="headerlink" title="Lambda表达式格式"></a>Lambda表达式格式</h3><p><code>(参数列表)-&gt;&#123;方法体&#125;</code></p>
<p>说明：</p>
<p><code>()</code> ：用来描述参数列表</p>
<p><code>&#123;&#125;</code> ：用来描述方法体</p>
<p><code>-&gt;</code> ：Lambda运算符，可以叫做箭头符号，或者goes to</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="定义函数式接口"><a href="#定义函数式接口" class="headerlink" title="定义函数式接口"></a>定义函数式接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用匿名内部类"><a href="#使用匿名内部类" class="headerlink" title="使用匿名内部类"></a>使用匿名内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-26 0:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyInterface m1 = <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(m1.add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用Lambda表达式"><a href="#使用Lambda表达式" class="headerlink" title="使用Lambda表达式"></a>使用Lambda表达式</h3><p>在上面的接口中，<code>int a, int b</code>是参数列表，方法体是接口的实现（根据接口名称应该知道方法体是<code>return a+b;</code>），所以Lambda表达式如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-26 0:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyInterface m2 = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(m2.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lambda表达式简写规则"><a href="#Lambda表达式简写规则" class="headerlink" title="Lambda表达式简写规则"></a>Lambda表达式简写规则</h3><blockquote>
<p>参数列表</p>
</blockquote>
<p>参数类型可以省略，因为可以根据接口方法知道参数的类型</p>
<p>当参数只有一个时，<code>括号()</code>可以省略，如果有两个及以上的参数括号不可以省略</p>
<blockquote>
<p>方法体</p>
</blockquote>
<p>当方法体的语句只有一条时，可以省略<code>大括号&#123;&#125;</code></p>
<h3 id="简写上面的Lambda表达式"><a href="#简写上面的Lambda表达式" class="headerlink" title="简写上面的Lambda表达式"></a>简写上面的Lambda表达式</h3><p>根据Lambda表达式简写规则可以将上面的代码简写，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-26 0:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyInterface m2 = (a, b) -&gt; a + b;</span><br><span class="line">        System.out.println(m2.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA将Spring Boot项目打包成jar包并在CentOS7运行</title>
    <url>/508.html</url>
    <content><![CDATA[<h3 id="修改打包方式"><a href="#修改打包方式" class="headerlink" title="修改打包方式"></a>修改打包方式</h3><p>首先在pom.xml文件中修改打包的方式为jar</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220427212818312.png" alt="image-20220427212818312"></p>
<h3 id="跳过测试项目"><a href="#跳过测试项目" class="headerlink" title="跳过测试项目"></a>跳过测试项目</h3><p>打包项目时，可以把<code>打包前测试</code>这一步跳过，可以减少打包时间</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220427213216736.png" alt="image-20220427213216736"></p>
<h3 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h3><p>打包前先清理一下，移除所有上一次构建生成的文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220427213430502.png" alt="image-20220427213430502"></p>
<p>打包的jar包在当前项目文件夹下的<code>target</code>文件夹下</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220427213829083.png" alt="image-20220427213829083"></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="前台运行"><a href="#前台运行" class="headerlink" title="前台运行"></a>前台运行</h4><p>输入下面命令即可运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar KangXin-0.0.1-SNAPSHOT.jar --server.port=8080</span><br></pre></td></tr></table></figure>

<h4 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h4><blockquote>
<p>上面的命令是前台运行的，按<code>CTRL+C</code>后就终止运行了，后台运行的命令如下</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup java -jar KangXin-0.0.1-SNAPSHOT.jar &gt; mylog.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>命令解释：</p>
<p>将以往控制台输出的内容写入当前目录下的<code>mylog.txt</code></p>
<p><code>2&gt;&amp;1</code>：2 就是标准错误，1 是标准输出，该命令相当于把标准错误重定向到标准输出。这里 &amp; 相当于标准错误等效于标准输出，即把标准错误和标准输出同时输出到指定的文件<code>mylog.txt</code>中</p>
<blockquote>
<p>然后通过下面命令可以查看正在后台运行的程序</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">jobs</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220427221426002.png" alt="image-20220427221426002"></p>
<blockquote>
<p>如果要终止这个程序就使用<code>fg 编号</code>命令调回前台控制，然后按<code>CTRL+C</code>终止运行，从上图可知编号为1</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fg</span> 1</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220427221613702.png" alt="image-20220427221613702"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架@Value注解的使用</title>
    <url>/509.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>@Value注解属于Spring框架，用来给变量注入值，使用方式如下：</p>
<ol>
<li>将常量注入</li>
<li>将配置文件的值注入</li>
<li>将其它Bean的值注入</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="将常量注入"><a href="#将常量注入" class="headerlink" title="将常量注入"></a>将常量注入</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>格式为：<code>@Value(&quot;ledao&quot;)</code>，<code>ledao</code>是注入的常量</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-05 18:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;ledao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将配置文件的值注入"><a href="#将配置文件的值注入" class="headerlink" title="将配置文件的值注入"></a>将配置文件的值注入</h3><h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><p>格式为：<code>@Value(&quot;$&#123;server.port&#125;&quot;)</code>，使用<code>$</code>符号，<code>server.port</code>是配置文件中定义的项目的访问端口号</p>
<p>如果格式为<code>@Value(&quot;$&#123;server.port1:8888&#125;&quot;)</code>，当配置文件中<code>server.port1</code>不存在时注入<code>8888</code>，存在就注入<code>server.port1</code>的值</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-05 18:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将其它Bean的值注入"><a href="#将其它Bean的值注入" class="headerlink" title="将其它Bean的值注入"></a>将其它Bean的值注入</h3><h4 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h4><p>格式为：<code>@Value(&quot;#&#123;tom&#125;&quot;)</code>，使用<code>#</code>符号，<code>tom</code>是Bean的名称</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><blockquote>
<p>实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-05 19:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建一个名为tom的Bean</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-05 19:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;tom&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">tom</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-05 18:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;tom&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>激活IntelliJ IDEA的热部署插件Jrebel</title>
    <url>/510.html</url>
    <content><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在IntelliJ IDEA的插件市场安装Jrebel插件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220507021231297.png" alt="image-20220507021231297"></p>
<h2 id="生成GUID"><a href="#生成GUID" class="headerlink" title="生成GUID"></a>生成GUID</h2><p>在线生成GUID的网站：<a href="https://www.guidgen.com/">Generate GUIDs online (guidgen.com)</a></p>
<p>根据获得的GUID拼接激活的链接，<code>https://jrebel.qekang.com/</code>后面接GUID，即：<code>https://jrebel.qekang.com/GUID</code></p>
<h2 id="激活插件"><a href="#激活插件" class="headerlink" title="激活插件"></a>激活插件</h2><p>用到上一步的激活链接</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220507021816684.png" alt="image-20220507021816684"></p>
<h2 id="设置成离线工作模式"><a href="#设置成离线工作模式" class="headerlink" title="设置成离线工作模式"></a>设置成离线工作模式</h2><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220507022604834.png" alt="image-20220507022604834"></p>
<h2 id="设置自动编译"><a href="#设置自动编译" class="headerlink" title="设置自动编译"></a>设置自动编译</h2><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220507023005627.png" alt="image-20220507023005627"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
        <tag>Jrebel</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10获取锁屏壁纸</title>
    <url>/51.html</url>
    <content><![CDATA[<h3 id="找到壁纸文件"><a href="#找到壁纸文件" class="headerlink" title="找到壁纸文件"></a>找到壁纸文件</h3><p>首先打开<code>文件资源管理器</code>，或者随便打开一个文件夹，在地址栏输入下面的路径后回车进入Assets文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\%username%\AppData\Local\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets </span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201113005633.jpg" alt="img"></p>
<h3 id="修改扩展名"><a href="#修改扩展名" class="headerlink" title="修改扩展名"></a>修改扩展名</h3><p>这个文件夹就是锁屏壁纸的存放文件夹了，不过系统去掉了这些文件的扩展名，所以看到的全都是不能打开的文件，也不能设置为桌面背景。我们要修改这些文件的扩展名为png或jpg，让它们变成图片文件，才能设为壁纸。我们首先将这个文件夹复制到桌面，然后点击开始菜单，输入CMD，打开<code>命令提示符</code>，输入下面的命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ren C:\Users\%username%\Desktop\Assets\*.* *.png</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201113013308.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201113013349.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目实现统一管理请求的后端IP地址和端口</title>
    <url>/511.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在前后端分离的项目中，每个请求后端的方法都要写一次IP地址以及端口，后面如果要修改IP地址或端口号的话就要改很多个地方了，这样会很麻烦，进行统一管理是很有必要的</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="新建JS文件"><a href="#新建JS文件" class="headerlink" title="新建JS文件"></a>新建JS文件</h3><p>新建一个JS文件，命名为<code>url.js</code>，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerUrl</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;http://localhost:8080/&quot;</span> + url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>首先在对应的页面引入上面的JavaScript文件，在<code>&lt;script&gt;&lt;/script&gt;</code>内使用以下代码引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getServerUrl&#125; <span class="keyword">from</span> <span class="string">&quot;@/config/url&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在最上面引入，如下图所示</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220517123847227.png" alt="image-20220517123847227"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>例如我们要请求的后端路径为<code>http://localhost:8080/user/login</code>，那么使用的格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = getServerUrl(<span class="string">&quot;user/login&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面的url就可以在axios请求中使用了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220517124258313.png" alt="image-20220517124258313"></p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h2><p>如果请求的后端IP地址和端口有多个，那么我们可以再传入一个参数，以这个参数为条件选择对应的IP地址和端口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerUrl</span>(<span class="params">url, moudle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (moudle === <span class="string">&quot;miaosha-user&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;http://localhost:8081/&quot;</span> + url;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (moudle === <span class="string">&quot;miaosha-goods&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;http://localhost:8082/&quot;</span> + url;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (moudle === <span class="string">&quot;miaosha-order1&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;http://localhost:8083/&quot;</span> + url;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则使用的格式如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = getServerUrl(<span class="string">&quot;user/login&quot;</span>,<span class="string">&quot;miaosha-user&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub给仓库添加开源许可证</title>
    <url>/512.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么时候"><a href="#什么时候" class="headerlink" title="什么时候"></a>什么时候</h3><p>GitHub创建开源许可证的情况有两种：</p>
<ol>
<li>创建仓库时，直接选择开源许可证</li>
<li>创建仓库后，需要新建一个LICENSE文件</li>
</ol>
<h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>世界上的开源许可证，大概有<a href="https://www.gnu.org/licenses/license-list.html">上百种</a>。很少有人搞得清楚它们的区别。即使在最流行的六种（<a href="https://www.gnu.org/licenses/gpl.html">GPL</a>、<a href="https://en.wikipedia.org/wiki/BSD_licenses">BSD</a>、<a href="https://en.wikipedia.org/wiki/MIT_License">MIT</a>、<a href="https://www.mozilla.org/MPL/">Mozilla</a>、<a href="https://www.apache.org/licenses/LICENSE-2.0">Apache</a>和<a href="https://www.gnu.org/copyleft/lesser.html">LGPL</a>）之中做选择，也很复杂，下面一图可以很简单地说明它们之间的区别</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/bg2011050101.png"></p>
<p>参考文章链接为：<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">如何选择开源许可证？ - 阮一峰的网络日志 (ruanyifeng.com)</a></p>
<h2 id="创建开源许可证"><a href="#创建开源许可证" class="headerlink" title="创建开源许可证"></a>创建开源许可证</h2><h3 id="创建仓库时"><a href="#创建仓库时" class="headerlink" title="创建仓库时"></a>创建仓库时</h3><p>在创建仓库时，可以直接选择开源许可证</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220525145426878.png" alt="image-20220525145426878"></p>
<h3 id="创建仓库后"><a href="#创建仓库后" class="headerlink" title="创建仓库后"></a>创建仓库后</h3><p>添加一个文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220525150359985.png" alt="image-20220525150359985"></p>
<p>命名为<code>LICENSE</code>，会出现选择开源许可证的按钮</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220525150709925.png" alt="image-20220525150709925"></p>
<p>选择自己需要的开源许可证，然后提交，会跳回上一页</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220525151208973.png" alt="image-20220525151208973"></p>
<p>最后提交新文件的更改即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220525152630593.png" alt="image-20220525152630593"></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220525152154265.png" alt="image-20220525152154265"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA使用插件实现对Stream流操作的调试</title>
    <url>/513.html</url>
    <content><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>插件名称为：<code>Java Stream Debugger</code>，好像在IntelliJ IDEA的插件市场没找到，但是在已安装插件列表中已经有这个插件了，应该是新版的IntelliJ IDEA已经内置了这个插件（所以要使用这个插件就将IntelliJ IDEA更新为最新的版本即可）</p>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><h3 id="要调试的代码"><a href="#要调试的代码" class="headerlink" title="要调试的代码"></a>要调试的代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-21 12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;blog.zoutl.cn&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;www.zoutl.cn&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;www.baidu.cn&quot;</span>);</span><br><span class="line">        List&lt;String&gt; resultList=list.stream()</span><br><span class="line">                .filter(e-&gt;e.contains(<span class="string">&quot;zoutl.cn&quot;</span>))</span><br><span class="line">                .filter(e-&gt;e.length()&gt;<span class="number">12</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(resultList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><p>首先打个断点，然后开始调试，当程序执行到流Stream操作时，插件的调试按钮就会被点亮</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220526112957403.png" alt="image-20220526112957403"></p>
<p>点击上面被点亮的按钮，会出现下面界面，可以很清楚地看出每一个操作后符合条件的数据</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220526113247661.png" alt="image-20220526113247661"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>jsdelivr被污染导致本站不翻墙无法正常访问</title>
    <url>/514.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本站使用的博客框架是<code>Hexo</code>，使用的主题是<code>Butterfly</code>，该主题使用的大多数都是<code>cdn.jsdelivr.net</code>上的静态资源，由于被污染后导致不翻墙无法访问，进而使本站无法正常访问</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="替换方案"><a href="#替换方案" class="headerlink" title="替换方案"></a>替换方案</h3><p>把<code>cdn.jsdelivr.net</code>替换成下面四个网址之一即可（不保证一定可用，可以先试试行不行，貌似第二个最稳），等到<code>cdn.jsdelivr.net</code>恢复后改回来即可</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">fastly.jsdelivr.net</span></span><br><span class="line"><span class="attr">gcore.jsdelivr.net</span></span><br><span class="line"><span class="attr">testingcf.jsdelivr.net</span></span><br><span class="line"><span class="attr">test1.jsdelivr.net</span></span><br></pre></td></tr></table></figure>

<h3 id="修改主题的配置"><a href="#修改主题的配置" class="headerlink" title="修改主题的配置"></a>修改主题的配置</h3><p><code>Butterfly</code>这个主题的静态资源引用定义在<code>/scripts/events</code>文件夹下的<code>config.js</code>中，打开它把<code>cdn.jsdelivr.net</code>替换成上面的四个网址之一</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220527135915798.png" alt="image-20220527135915798"></p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h2><p>还可以把这些静态资源下载下来，放在又拍云的云存储或直接放在主题文件夹中，只不过后期升级主题会很麻烦</p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>去除来必力评论框下面的广告</title>
    <url>/515.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>关掉了浏览器的屏蔽广告插件后，突然发现来必力的评论框下面居然有广告，这肯定不能忍，找到了下面两个方法（通过添加CSS或JavaScript代码去除），这两个方法单独使用或者一起使用都可以把来必力的评论框下面的广告给去除</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="添加CSS代码"><a href="#添加CSS代码" class="headerlink" title="添加CSS代码"></a>添加CSS代码</h3><p>在主题的文件夹中找到<code>normalize.min.css</code>，具体路径看下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220527170745531.png" alt="image-20220527170745531"></p>
<p>打开文件后直接在最下面加入下面代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.trc_rbox_container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加JavaScript代码"><a href="#添加JavaScript代码" class="headerlink" title="添加JavaScript代码"></a>添加JavaScript代码</h3><p>在主题的文件夹中找到<code>livere.pug</code>，具体路径看下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220527170846522.png" alt="image-20220527170846522"></p>
<p>打开文件后直接在最下面加入下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">script.</span><br><span class="line">  <span class="keyword">var</span> intervalFunctionID = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; myTimer() &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&quot;taboola-livere&quot;</span>) != <span class="literal">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&quot;taboola-livere&quot;</span>).style.display == <span class="string">&quot;none&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//alert(&quot;Interval function stopped&quot;);</span></span><br><span class="line">          <span class="built_in">clearInterval</span>(intervalFunctionID);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;taboola-livere&quot;</span>).style.display=<span class="string">&quot;none&quot;</span>;</span><br><span class="line">      <span class="comment">//alert(&quot;Interval function running&quot;);</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h2><p>来源：<a href="https://wzw21.cn/2022/02/06/rm-ad/">去除来必力（Livere）附带广告 | WiZardWen (wzw21.cn)</a></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Markdown语法写邮件</title>
    <url>/516.html</url>
    <content><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>插件名称为：<code>Markdown Here</code>，安装链接如下：（不会科学上网的使用第二个链接）</p>
<table>
<thead>
<tr>
<th align="center">出处</th>
<th align="center">链接</th>
</tr>
</thead>
<tbody><tr>
<td align="center">谷歌插件商店（可以科学上网的使用，最方便）</td>
<td align="center"><a href="https://chrome.google.com/webstore/detail/markdown-here/elifhakcjgalahccnjkneoccemfahfoa">查看</a></td>
</tr>
<tr>
<td align="center">扩展迷（国内使用）</td>
<td align="center"><a href="https://www.extfans.com/productivity/elifhakcjgalahccnjkneoccemfahfoa/">查看</a></td>
</tr>
</tbody></table>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>安装后要启用插件，只可以在正文部分使用，使用Markdown语法后写完邮件后，在正文区域右键点击，点击<code>Markdown转换</code>然后发送即可，如果要继续编辑再次点击<code>Markdown转换</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-06-25%20214713.gif"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>创建String字符串的两种方式</title>
    <url>/517.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java创建String字符串有两种方式：</p>
<ol>
<li>直接创建，存储在公共池，创建前会先检查公共池中是否已经存在相等的字符串，已存在就不会创建了直接引用已经存在的</li>
<li>通过new来创建，存储在堆上，无论是否已经存在相等的字符串，都会创建一个新的字符串</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="通过new来创建"><a href="#通过new来创建" class="headerlink" title="通过new来创建"></a>通过new来创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">String str5 = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-09 23:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        String str3 = str2;</span><br><span class="line">        String str4 = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        String str5 = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        String str6 = str5;</span><br><span class="line">        System.out.println(str1 == str2);</span><br><span class="line">        System.out.println(str2 == str3);</span><br><span class="line">        System.out.println(str3 == str4);</span><br><span class="line">        System.out.println(str4 == str5);</span><br><span class="line">        System.out.println(str5 == str6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220626112852513.png" alt="image-20220626112852513"></p>
<h4 id="分析图解"><a href="#分析图解" class="headerlink" title="分析图解"></a>分析图解</h4><p>指向同一个的比较结果是true，反之则为false</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220626190134077.png" alt="image-20220626190134077"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序引入Vant Weapp组件库</title>
    <url>/518.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>引入Vant Weapp组件库有两个方法：</p>
<ol>
<li>直接到GitHub下载源码，然后复制到项目中</li>
<li>通过npm安装，<font color="#dd0000">这种方法比较方便（建议使用，复制官方的引用代码不需要修改）</font></li>
</ol>
<h3 id="直接下载"><a href="#直接下载" class="headerlink" title="直接下载"></a>直接下载</h3><h4 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h4><p>GitHub地址：<a href="https://github.com/youzan/vant-weapp">youzan/vant-weapp: 轻量、可靠的小程序 UI 组件库 (github.com)</a></p>
<p>下载地址：<a href="https://github.com/youzan/vant-weapp/archive/refs/heads/dev.zip">https://github.com/youzan/vant-weapp/archive/refs/heads/dev.zip</a></p>
<p>解压后里面有一个名为<code>dist</code>的文件夹，这个文件夹包含了我们要使用的Vant Weapp组件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221124201239421.png" alt="image-20221124201239421"></p>
<h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><h5 id="复制dist文件夹"><a href="#复制dist文件夹" class="headerlink" title="复制dist文件夹"></a>复制dist文件夹</h5><p>将上面解压后得到的<code>dist</code>文件夹到项目文件夹中，和<code>pages</code>文件夹同级，如果不能直接在微信开发工具中粘贴就用电脑的资源管理器</p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221124202226224.png" alt="image-20221124202226224" style="zoom:80%;" />

<h5 id="修改app-json"><a href="#修改app-json" class="headerlink" title="修改app.json"></a>修改app.json</h5><p>将<code>app.json</code>中的 <code>&quot;style&quot;: &quot;v2&quot;</code> 删除，小程序的<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#style">新版基础组件</a>强行加上了许多样式，难以覆盖，不关闭将造成部分组件样式混乱</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221124203510350.png" alt="image-20221124203510350"></p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><blockquote>
<p>在json文件中配置，要在哪个页面使用组件，就在其对应的json文件中配置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;van-button&quot;</span>: <span class="string">&quot;/dist/button/index&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221124204847754.png" alt="image-20221124204847754"></p>
<blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果</p>
</blockquote>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221124205104037.png" alt="image-20221124205104037" style="zoom:67%;" />

<h3 id="通过npm安装"><a href="#通过npm安装" class="headerlink" title="通过npm安装"></a>通过npm安装</h3><h4 id="构建npm"><a href="#构建npm" class="headerlink" title="构建npm"></a>构建npm</h4><p>首先打开工具的选项，然后点击<code>构建npm</code></p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204141000818.png" alt="image-20221204141000818"  />

<p>可能会出现以下报错</p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204141146242.png" alt="image-20221204141146242"  />

<p>打开调试器的终端，新建一个终端</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204141816537.png" alt="image-20221204141816537"></p>
<p>依次输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载npm包</span></span><br><span class="line">npm install express</span><br><span class="line"><span class="meta">#</span><span class="bash">初始化</span></span><br><span class="line">npm init -y</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure>

<p>然后就可以构建npm了，虽然成功了但是会提示：<font color="#dd0000">不允许require变量</font>，我没有找到解决办法，但是npm可以正常使用的（在我的电脑上没有影响，如果有解决办法请到下面的评论区给我留言以下！！）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204145814341.png" alt="image-20221204145814341"></p>
<h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><p>安装命令如下：<font color="#dd0000"><strong>（每次执行命令后都要构建一下npm）</strong></font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装命令</span></span><br><span class="line">npm install @vant/weapp</span><br><span class="line"><span class="meta">#</span><span class="bash">卸载命令</span></span><br><span class="line">npm uninstall @vant/weapp</span><br></pre></td></tr></table></figure>

<p>然后刷新一下，在<code>node_modules</code>中看到<code>@vant</code>即可，<font color="#dd0000">再修改app.json，看上面</font></p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204150731153.png" alt="image-20221204150731153"  />

<p>再次构建npm，上图的<code>miniprogram_npm</code>文件夹中也会生成一个<code>@vant</code>文件夹，然后我们就可以使用Vant Weapp组件库了</p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>由于是使用npm安装的，直接复制官网的代码：<a href="https://vant-contrib.gitee.io/vant-weapp/#/button">Button 按钮 - Vant Weapp (gitee.io)</a></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><h4 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h4><p>上面是<code>局部引入</code>组件（一般建议使用这种方式），也就是说，组件只在指定页面生效（谁引入谁才可以用）</p>
<p>如果嫌麻烦可以使用<code>全局引入</code>，直接在<code>app.json</code>中添加以下代码来实现引入（和其它属性使用英文的<code>,</code>分隔），这样被引入的组件在所有页面都会生效</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">//引入按钮组件</span></span><br><span class="line">    <span class="attr">&quot;van-button&quot;</span>: <span class="string">&quot;/dist/button/index&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221124231959231.png" alt="image-20221124231959231" style="zoom:67%;" />

<h4 id="样式不生效"><a href="#样式不生效" class="headerlink" title="样式不生效"></a>样式不生效</h4><p>第一次引用某个组件时，<font color="#dd0000"><strong>需要先清除一下编译缓存，然后再编译一次</strong></font>，不然样式是不会生效的</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221206120651964.png" alt="image-20221206120651964"></p>
<h4 id="关闭热重载"><a href="#关闭热重载" class="headerlink" title="关闭热重载"></a>关闭热重载</h4><p>不关闭的话，可能会出现一些问题</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-04%20162602.gif"></p>
<h4 id="构建npm的作用"><a href="#构建npm的作用" class="headerlink" title="构建npm的作用"></a>构建npm的作用</h4><p>通过npm下载Vant Weapp组件库到项目中后，<code>node_modules</code>文件夹会生成一个<code>@vant</code>文件夹，然而这个<code>@vant</code>文件夹的内容是不能引用的</p>
<p>这时候我们需要构建一下npm，<code>miniprogram_npm</code>文件夹中也会生成一个<code>@vant</code>文件夹，这个<code>@vant</code>文件夹的内容才是可以引用的</p>
<p>也就是说，<code>miniprogram_npm</code>文件夹中有<code>@vant</code>文件夹，我们才可以正常使用Vant Weapp组件库</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>Vant Weapp</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序使用官方swiper组件实现轮播图</title>
    <url>/519.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>最近在使用Vant Weapp组件库，但是没有轮播图这个组件，经过一番对比发现：使用微信官方的swiper组件最方便，和Vant Weapp搭配看着也不错</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="wxml代码"><a href="#wxml代码" class="headerlink" title="wxml代码"></a>wxml代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span> <span class="attr">indicator-active-color</span>=<span class="string">&quot;#ef5243&quot;</span> <span class="attr">circular</span> <span class="attr">autoplay</span> <span class="attr">interval</span>=<span class="string">&quot;3000&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;carouselImageList&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="wxss代码"><a href="#wxss代码" class="headerlink" title="wxss代码"></a>wxss代码</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> swiper &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> image &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="js代码（初始数据）"><a href="#js代码（初始数据）" class="headerlink" title="js代码（初始数据）"></a>js代码（初始数据）</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    carouselImageList: [</span><br><span class="line">        <span class="string">&quot;https://image.zoutl.cn/hexo-blog/blogCoverImage/11.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://image.zoutl.cn/hexo-blog/blogCoverImage/12.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://image.zoutl.cn/hexo-blog/blogCoverImage/13.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://image.zoutl.cn/hexo-blog/blogCoverImage/14.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://image.zoutl.cn/hexo-blog/blogCoverImage/15.jpg&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-11-24%20225004.gif" alt="2022-11-24 225004"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>swiper属性查看：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html#%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E">swiper属性说明 | 微信开放文档 (qq.com)</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>自加（++）自减（--）运算</title>
    <url>/52.html</url>
    <content><![CDATA[<h3 id="单独使用时"><a href="#单独使用时" class="headerlink" title="单独使用时"></a>单独使用时</h3><p>放在操作数的前面和后面效果一样，这种用法是我们比较常见的</p>
<h3 id="参与运算使用时"><a href="#参与运算使用时" class="headerlink" title="参与运算使用时"></a>参与运算使用时</h3><h4 id="在操作数的前面"><a href="#在操作数的前面" class="headerlink" title="在操作数的前面"></a>在操作数的前面</h4><p>放在操作数的前面，先自增或者自减，然后再参与运算</p>
<h4 id="在操作数的后面"><a href="#在操作数的后面" class="headerlink" title="在操作数的后面"></a>在操作数的后面</h4><p>放在操作数的后面，先参与运算，再自增或者自减</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">10</span>;</span><br><span class="line">    a=b++;<span class="comment">//a=10,b=11</span></span><br><span class="line">    c=--a;<span class="comment">//c=9,a=9</span></span><br><span class="line">    b=++a;<span class="comment">//b=10,a=10</span></span><br><span class="line">    a=c--;<span class="comment">//a=9,c=8</span></span><br><span class="line">    System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">    System.out.println(<span class="string">&quot;c=&quot;</span>+c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201204103853.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序应用和页面的生命周期</title>
    <url>/520.html</url>
    <content><![CDATA[<h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>注册小程序，接受一个<code>Object</code>参数，其指定小程序的生命周期回调等</p>
<p>App()必须在 <code>app.js</code> 中调用，必须调用且只能调用一次，不然会出现无法预期的后果</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">说明</th>
<th align="center">最低版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object">onLaunch</a></td>
<td align="center">function</td>
<td align="center">生命周期回调——监听小程序初始化</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onShow-Object-object">onShow</a></td>
<td align="center">function</td>
<td align="center">生命周期回调——监听小程序启动或切前台</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onHide">onHide</a></td>
<td align="center">function</td>
<td align="center">生命周期回调——监听小程序切后台</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onError-String-error">onError</a></td>
<td align="center">function</td>
<td align="center">错误监听函数</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onPageNotFound-Object-object">onPageNotFound</a></td>
<td align="center">function</td>
<td align="center">页面不存在监听函数</td>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onUnhandledRejection-Object-object">onUnhandledRejection</a></td>
<td align="center">function</td>
<td align="center">未处理的 Promise 拒绝事件监听函数</td>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.0</a></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onThemeChange-Object-object">onThemeChange</a></td>
<td align="center">function</td>
<td align="center">监听系统主题变化</td>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td>
</tr>
<tr>
<td align="center">其他</td>
<td align="center">any</td>
<td align="center">开发者可以添加任意的函数或数据变量到 <code>Object</code> 参数中，用 <code>this</code> 可以访问</td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch (options) &#123;</span><br><span class="line">    <span class="comment">// Do something initial when launch.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow (options) &#123;</span><br><span class="line">    <span class="comment">// Do something when show.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide () &#123;</span><br><span class="line">    <span class="comment">// Do something when hide.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onError (msg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">globalData</span>: <span class="string">&#x27;I am global data&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="来源及详情"><a href="#来源及详情" class="headerlink" title="来源及详情"></a>来源及详情</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object">App(Object object) | 微信开放文档 (qq.com)</a></p>
<h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>注册小程序中的一个页面，接受一个 <code>Object</code> 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等</p>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#data">data</a></td>
<td align="center">Object</td>
<td align="center">页面的初始数据</td>
</tr>
<tr>
<td align="center">options</td>
<td align="center">Object</td>
<td align="center">页面的组件选项，同 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/xr-frame/classes/Component.html"><code>Component</code> 构造器</a> 中的 <code>options</code> ，需要基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.1</a></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html">behaviors</a></td>
<td align="center">String Array</td>
<td align="center">类似于 mixins 和traits的组件间代码复用机制，参见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html">behaviors</a>，需要基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.9.2</a></td>
</tr>
<tr>
<td align="center"><strong>生命周期回调函数</strong></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onLoad-Object-query">onLoad</a></td>
<td align="center">function</td>
<td align="center">生命周期回调—监听页面加载</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShow">onShow</a></td>
<td align="center">function</td>
<td align="center">生命周期回调—监听页面显示</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onReady">onReady</a></td>
<td align="center">function</td>
<td align="center">生命周期回调—监听页面初次渲染完成</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onHide">onHide</a></td>
<td align="center">function</td>
<td align="center">生命周期回调—监听页面隐藏</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onUnload">onUnload</a></td>
<td align="center">function</td>
<td align="center">生命周期回调—监听页面卸载</td>
</tr>
<tr>
<td align="center"><strong>页面事件处理函数</strong></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPullDownRefresh">onPullDownRefresh</a></td>
<td align="center">function</td>
<td align="center">监听用户下拉动作，需要配置一下不然无法下拉</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onReachBottom">onReachBottom</a></td>
<td align="center">function</td>
<td align="center">页面上拉触底事件的处理函数，内容少不需要上拉时就不触发</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareAppMessage-Object-object">onShareAppMessage</a></td>
<td align="center">function</td>
<td align="center">用户点击右上角转发</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareTimeline">onShareTimeline</a></td>
<td align="center">function</td>
<td align="center">用户点击右上角转发到朋友圈</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onAddToFavorites-Object-object">onAddToFavorites</a></td>
<td align="center">function</td>
<td align="center">用户点击右上角收藏</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPageScroll-Object-object">onPageScroll</a></td>
<td align="center">function</td>
<td align="center">页面滚动触发事件的处理函数</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onResize-Object-object">onResize</a></td>
<td align="center">function</td>
<td align="center">页面尺寸改变时触发，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html#%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E5%90%AF%E7%94%A8%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E6%94%AF%E6%8C%81">响应显示区域变化</a></td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onTabItemTap-Object-object">onTabItemTap</a></td>
<td align="center">function</td>
<td align="center">当前是 tab 页时，点击 tab 时触发</td>
</tr>
<tr>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onSaveExitState">onSaveExitState</a></td>
<td align="center">function</td>
<td align="center">页面销毁前保留状态回调</td>
</tr>
<tr>
<td align="center"><strong>其他</strong></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">其他</td>
<td align="center">any</td>
<td align="center">开发者可以添加任意的函数或数据到 <code>Object</code> 参数中，在页面的函数中用 <code>this</code> 可以访问。<strong>这部分属性会在页面实例创建时进行一次深拷贝</strong></td>
</tr>
</tbody></table>
<h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;This is page data.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do some initialize when page load.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page show.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onReady</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page ready.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page hide.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onUnload</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page close.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when pull down.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page reach bottom.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onShareAppMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return custom share data when user share.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onPageScroll</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page scroll</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onResize</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page resize</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">onTabItemTap</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item.index)</span><br><span class="line">    <span class="built_in">console</span>.log(item.pagePath)</span><br><span class="line">    <span class="built_in">console</span>.log(item.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Event handler.</span></span><br><span class="line">  <span class="attr">viewTap</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;Set some data for updating view.&#x27;</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this is setData callback</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">customData</span>: &#123;</span><br><span class="line">    <span class="attr">hi</span>: <span class="string">&#x27;MINA&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="来源及详情-1"><a href="#来源及详情-1" class="headerlink" title="来源及详情"></a>来源及详情</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onLoad-Object-query">Page(Object object) | 微信开放文档 (qq.com)</a></p>
<h4 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h4><p>使用<code>onPullDownRefresh</code>监听下拉事件之前需要去配置一下，分为全局配置和局部配置</p>
<ul>
<li><p>全局配置，小程序的全部页面都可以进行下拉操作</p>
<p>在<code>app.json</code>中的<code>window</code>属性中加入以下代码</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221126214433647.png" alt="image-20221126214433647"></p>
</li>
<li><p>局部配置，在哪个页面配置哪个页面才可以进行下拉操作</p>
<p>在页面配置文件中添加上面的代码</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221126214423332.png" alt="image-20221126214423332"></p>
</li>
</ul>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>顺序为<code>从上到下</code>，来源：<a href="https://developers.weixin.qq.com/community/develop/article/doc/000002e9b647c833cab9ef81f51c13">你不知道的小程序系列之生命周期执行顺序 | 微信开放社区 (qq.com)</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-11-26%20201022.png" alt="2022-11-26 201022"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>加快访问GitHub的速度</title>
    <url>/521.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>为了加快访问GitHub的速度，目前找到两个比较方便的方法：</p>
<ol>
<li>使用Edge插件<code>GitHub加速</code></li>
<li>使用软件<code>FastGithub</code>，<font color="#dd0000"><strong>这种方式比较稳定</strong></font></li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="使用Edge插件GitHub加速"><a href="#使用Edge插件GitHub加速" class="headerlink" title="使用Edge插件GitHub加速"></a>使用Edge插件GitHub加速</h4><p>插件地址：<a href="https://microsoftedge.microsoft.com/addons/detail/github%E5%8A%A0%E9%80%9F/alhnbdjjbokpmilgemopoomnldpejihb?hl=zh-CN">GitHub加速 - Microsoft Edge Addons</a>，安装后就可以访问GitHub了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221126134510390.png" alt="image-20221126134510390"></p>
<h4 id="使用软件FastGithub"><a href="#使用软件FastGithub" class="headerlink" title="使用软件FastGithub"></a>使用软件FastGithub</h4><p>GitHub地址：<a href="https://github.com/dotnetcore/FastGithub/releases">Releases · dotnetcore/FastGithub</a>，根据自己的电脑选择对应的版本</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221126134706416.png" alt="image-20221126134706416"></p>
<p>如果无法访问GitHub直接去百度搜索，我这里提供一下<code>Windows 64位</code>的版本</p>
<ul>
<li>百度网盘链接：<a href="https://pan.baidu.com/s/13MmCQgj1pDSEp9FsRUBv0g?pwd=rp1y">https://pan.baidu.com/s/13MmCQgj1pDSEp9FsRUBv0g?pwd=rp1y</a></li>
<li>提取码：<code>rp1y</code></li>
</ul>
<p>下载后解压，打开<code>fastgithub.exe</code>，<font color="#dd0000">不是FastGithub.UI.exe（这是监控流量的，可以不用打开）</font>，运行后是控制台窗口，只需保持运行即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221126135618956.png" alt="image-20221126135618956"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序实现tabBar标签栏</title>
    <url>/522.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>如果小程序是一个多tab应用（客户端窗口的底部或顶部有tab栏可以切换页面），可以通过tabBar配置项指定tab栏的表现，以及tab切换时显示的对应页面，<code>tab栏至少2个最多5个</code></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>本博客设计的标签栏有4个标签：首页、分类、购物车、我的，对应代码为：</p>
<table>
<thead>
<tr>
<th align="center">中文</th>
<th align="center">代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">首页</td>
<td align="center">shouye</td>
</tr>
<tr>
<td align="center">分类</td>
<td align="center">type</td>
</tr>
<tr>
<td align="center">购物车</td>
<td align="center">cart</td>
</tr>
<tr>
<td align="center">我的</td>
<td align="center">my</td>
</tr>
</tbody></table>
<h4 id="找图片"><a href="#找图片" class="headerlink" title="找图片"></a>找图片</h4><p>推荐网址：<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a></p>
<p>每个标签页都需要找两张图片，分别在<code>标签被选中时</code>和<code>标签没有被选中时</code>使用，图片示例如下图所示（图片名称带<code>_</code>符号的是未选中的，否则是选中的）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221127190337437.png" alt="image-20221127190337437"></p>
<p>复制图片到项目中，直接新建一个文件夹（我命名为<code>images</code>），然后将找好的图片粘贴进去</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221127191333180.png" alt="image-20221127191333180"></p>
<h4 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h4><p>新建4个页面，添加以下代码：（看后面4个，添加代码后保存会自动生成文件）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;entryPagePath&quot;</span>: <span class="string">&quot;pages/shouye/shouye&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/demo/demo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/demo01/demo01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/logs/logs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/shouye/shouye&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/type/type&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/cart/cart&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/my/my&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加tarBar配置"><a href="#添加tarBar配置" class="headerlink" title="添加tarBar配置"></a>添加tarBar配置</h4><p>和<code>pages</code>配置同级</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;selectedColor&quot;</span>: <span class="string">&quot;#e35d55&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">    	&#123;</span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/shouye/shouye&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;images/_shouye.png&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;images/shouye.png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/type/type&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;分类&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;images/_type.png&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;images/type.png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/cart/cart&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;购物车&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;images/_cart.png&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;images/cart.png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/my/my&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;我的&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;images/_my.png&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;images/my.png&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>首页的展示效果是写了其它代码的，不需要理会</p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-11-27%20192108.gif" style="zoom: 50%;" />

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>tarBar的一些配置如下：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必填</th>
<th align="center">默认值</th>
<th align="center">描述</th>
<th align="center">最低版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">color</td>
<td align="center">HexColor</td>
<td align="center">是</td>
<td align="center"></td>
<td align="center">tab 上的文字默认颜色，仅支持十六进制颜色</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">selectedColor</td>
<td align="center">HexColor</td>
<td align="center">是</td>
<td align="center"></td>
<td align="center">tab 上的文字选中时的颜色，仅支持十六进制颜色</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">backgroundColor</td>
<td align="center">HexColor</td>
<td align="center">是</td>
<td align="center"></td>
<td align="center">tab 的背景色，仅支持十六进制颜色</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">borderStyle</td>
<td align="center">string</td>
<td align="center">否</td>
<td align="center">black</td>
<td align="center">tabbar 上边框的颜色， 仅支持 <code>black</code> / <code>white</code></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">list</td>
<td align="center">Array</td>
<td align="center">是</td>
<td align="center"></td>
<td align="center">tab 的列表，详见 <code>list</code> 属性说明，最少 2 个、最多 5 个 tab</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">position</td>
<td align="center">string</td>
<td align="center">否</td>
<td align="center">bottom</td>
<td align="center">tabBar 的位置，仅支持 <code>bottom</code> / <code>top</code></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">custom</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">false</td>
<td align="center">自定义 tabBar，见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html">详情</a></td>
<td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.5.0</a></td>
</tr>
</tbody></table>
<p>其中 list 接受一个数组，<strong>只能配置最少 2 个、最多 5 个 tab</strong>。tab 按数组的顺序排序，每个项都是一个对象，其属性值如下：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必填</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pagePath</td>
<td align="center">string</td>
<td align="center">是</td>
<td align="center">页面路径，必须在 pages 中先定义</td>
</tr>
<tr>
<td align="center">text</td>
<td align="center">string</td>
<td align="center">是</td>
<td align="center">tab 上按钮文字</td>
</tr>
<tr>
<td align="center">iconPath</td>
<td align="center">string</td>
<td align="center">否</td>
<td align="center">图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，不支持网络图片。 <strong>当 <code>position</code> 为 <code>top</code> 时，不显示 icon。</strong></td>
</tr>
<tr>
<td align="center">selectedIconPath</td>
<td align="center">string</td>
<td align="center">否</td>
<td align="center">选中时的图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，不支持网络图片。 <strong>当 <code>position</code> 为 <code>top</code> 时，不显示 icon。</strong></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序模板的使用与引用</title>
    <url>/524.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对于一些重复使用的代码，我们可以将它封装成模板，以减少代码量</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义一个名为<code>template1</code>的模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;template1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;myName&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>初始数据，写在使用模板的页面js中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 页面的初始数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">templateData</span>:&#123;</span><br><span class="line">    	<span class="attr">myName</span>: <span class="string">&#x27;ledao&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>is属性</code>动态决定具体需要渲染哪个模板，<code>data属性</code>是要引用的数据，在定义模板的页面使用时不用import</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;template1&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;...templateData&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>在一个页面引用<code>定义在其它页面的模板</code>时，这个模板本来的js和css就不能用了，需要在引用模板的页面重新写js和css，示例代码如下（<code>.wxml后缀</code>加不加都行）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;/pages/templatetest/templatetest.wxml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;template1&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;...templateData&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p>include将目标文件<strong>除了</strong> <code>&lt;template/&gt;</code> <code>&lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 <code>include</code> 位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;/pages/templatetest/templatetest.wxml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>微信官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/template.html">模板 | 微信开放文档 (qq.com)</a>和<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/import.html">引用 | 微信开放文档 (qq.com)</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序使用Vant Weapp组件库实现tabBar标签栏</title>
    <url>/523.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>和微信官方的tabBar标签栏相比，Vant Weapp的tabBar标签栏更加美观，还有徽标提示</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="引入tarBar组件"><a href="#引入tarBar组件" class="headerlink" title="引入tarBar组件"></a>引入tarBar组件</h4><p>引入步骤查看：<a href="https://blog.zoutl.cn/518.html">微信小程序引入 Vant Weapp 组件库 | LeDao’s Blog (zoutl.cn)</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;van-tabbar&quot;</span>: <span class="string">&quot;/dist/tabbar/index&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;van-tabbar-item&quot;</span>: <span class="string">&quot;/dist/tabbar-item/index&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h4><p>要新建的页面和上一篇博客一样，博客链接为：<a href="https://blog.zoutl.cn/522.html">微信小程序实现 tabBar 标签栏 | LeDao’s Blog (zoutl.cn)</a></p>
<h4 id="添加tarBar配置"><a href="#添加tarBar配置" class="headerlink" title="添加tarBar配置"></a>添加tarBar配置</h4><p>在<code>app.json</code>中添加tarBar配置，<code>&quot;custom&quot;: true</code>用来声明这个tarBar是定制的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;custom&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/shouye/shouye&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/type/type&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;分类&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/cart/cart&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;购物车&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/my/my&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;我的&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="新建Component"><a href="#新建Component" class="headerlink" title="新建Component"></a>新建Component</h4><p>首先在根目录下添加一个文件夹，该文件夹要命名为<code>custom-tab-bar</code>，然后右键点击这个文件夹，选择<code>新建Component</code>并输入<code>index</code></p>
<p>在<code>custom-tab-bar/index.wxml</code>中编写Vant Weapp的tarBar代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-tabbar</span> <span class="attr">active</span>=<span class="string">&quot;&#123;&#123; active &#125;&#125;&quot;</span> <span class="attr">active-color</span>=<span class="string">&quot;#e35d55&quot;</span> <span class="attr">bind:change</span>=<span class="string">&quot;onChange&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">icon</span>=<span class="string">&quot;wap-home-o&quot;</span> <span class="attr">data-page</span>=<span class="string">&quot;shouye&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;/pages/shouye/shouye&quot;</span>&gt;</span></span><br><span class="line">      首页</span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">icon</span>=<span class="string">&quot;apps-o&quot;</span> <span class="attr">data-page</span>=<span class="string">&quot;type&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;/pages/type/type&quot;</span>&gt;</span></span><br><span class="line">      分类</span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">icon</span>=<span class="string">&quot;shopping-cart-o&quot;</span> <span class="attr">data-page</span>=<span class="string">&quot;cart&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;/pages/cart/cart&quot;</span> <span class="attr">dot</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      购物车</span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">icon</span>=<span class="string">&quot;manager-o&quot;</span> <span class="attr">data-page</span>=<span class="string">&quot;my&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;/pages/my/my&quot;</span>&gt;</span></span><br><span class="line">      我的</span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-tabbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>custom-tab-bar/index.js</code>的<code>methods</code>函数里面添加以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户点击Tabbar的时候调用微信内置函数wx.switchTab()进行Tab切换</span></span><br><span class="line"><span class="function"><span class="title">onChange</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">	<span class="comment">// event.detail 的值为当前选中项的索引</span></span><br><span class="line">	<span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">	<span class="keyword">switch</span> (event.detail) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			wx.switchTab(&#123;</span><br><span class="line">				<span class="attr">url</span>: <span class="string">&#x27;/pages/shouye/shouye&#x27;</span></span><br><span class="line">			&#125;)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			wx.switchTab(&#123;</span><br><span class="line">				<span class="attr">url</span>: <span class="string">&#x27;/pages/type/type&#x27;</span></span><br><span class="line">			&#125;)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			wx.switchTab(&#123;</span><br><span class="line">				<span class="attr">url</span>: <span class="string">&#x27;/pages/cart/cart&#x27;</span></span><br><span class="line">			&#125;)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			wx.switchTab(&#123;</span><br><span class="line">				<span class="attr">url</span>: <span class="string">&#x27;/pages/my/my&#x27;</span></span><br><span class="line">			&#125;)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//改变active属性，从而告诉Tabbar用户点击的是第几个Tab</span></span><br><span class="line"><span class="function"><span class="title">init</span>(<span class="params">active</span>)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.setData(&#123;</span><br><span class="line">		<span class="attr">active</span>: active</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改标签页的js文件"><a href="#修改标签页的js文件" class="headerlink" title="修改标签页的js文件"></a>修改标签页的js文件</h4><p>首先说明一下，标签页的索引从0开始</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221128002939747.png" alt="image-20221128002939747"></p>
<p>在首页的js文件的<code>onShow()</code>函数加入以下代码（<code>分类、购物车、我的</code>3个页面也要加），对应的索引看上图</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">onShow</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.getTabBar().init(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-11-28%20003754.gif" style="zoom: 50%;" />

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果页面的内容过多需要下拉时，会有部分内容被Vant Weapp的tabBar标签栏遮住，即使使用<code>placeholder</code>属性也没有用，我们可以在该页面的最后加入下面代码解决这个问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom: 20%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果要使用微信官方的tarBar标签栏查看博客：<a href="https://blog.zoutl.cn/522.html">微信小程序实现 tabBar 标签栏 | LeDao’s Blog (zoutl.cn)</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>Vant Weapp</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序删除项目</title>
    <url>/525.html</url>
    <content><![CDATA[<h3 id="查看所有项目"><a href="#查看所有项目" class="headerlink" title="查看所有项目"></a>查看所有项目</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204153807920.png" alt="image-20221204153807920"></p>
<h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-04%20154026.gif"></p>
<h3 id="删除本地文件"><a href="#删除本地文件" class="headerlink" title="删除本地文件"></a>删除本地文件</h3><p>上面只是删除了项目在微信开发者工具的记录而已，本地磁盘上的文件是没有删除的，我们需要找到项目的文件夹然后删除即可</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序上传项目</title>
    <url>/526.html</url>
    <content><![CDATA[<h3 id="修改AppId"><a href="#修改AppId" class="headerlink" title="修改AppId"></a>修改AppId</h3><p>如果新建项目时没有输入自己的AppId，而是使用测试号，那么就需要修改AppId了，否则跳过此步骤（上传按钮不可用就需要修改，和下图一样）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204164946475.png" alt="image-20221204164946475"></p>
<p>修改成自己的AppId，如何查看自己的AppId查看博客：<a href="https://blog.zoutl.cn/471.html">微信开发者工具创建小程序 | LeDao’s Blog (zoutl.cn)</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204165337322.png" alt="image-20221204165337322"></p>
<h3 id="开始上传"><a href="#开始上传" class="headerlink" title="开始上传"></a>开始上传</h3><p>如果多次上传，只会保留最后一次上传的版本</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204170341397.png" alt="image-20221204170341397"></p>
<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>到<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com</a>登录后，找到<code>版本管理</code>，到最下面的<code>开发版本</code>中查看</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204170641622.png" alt="image-20221204170641622"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序数据简单绑定和双向绑定</title>
    <url>/527.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序每个页面的数据都来自其对应的js文件的data</p>
<p>数据简单绑定就是，当data中的数据改变时，页面的数据也会实时改变（前者影响后者）</p>
<p>数据双向绑定就是，页面的数据和data中与之对应的数据只要有一个改变了，另一个就会改变（互相影响）</p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221204192711603.png" alt="image-20221204192711603" style="zoom: 50%;" />

<h3 id="简单绑定"><a href="#简单绑定" class="headerlink" title="简单绑定"></a>简单绑定</h3><p>数据绑定使用 Mustache 语法（双大括号）将变量包起来</p>
<h4 id="初始数据"><a href="#初始数据" class="headerlink" title="初始数据"></a>初始数据</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">data: &#123;</span><br><span class="line">	num: <span class="number">5</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="页面wxml代码"><a href="#页面wxml代码" class="headerlink" title="页面wxml代码"></a>页面wxml代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>初始数据的num是多少，页面的数据就是多少</p>
<h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><p>目前微信小程序的双向绑定只能是一个单一字段的绑定，下面以<code>input输入框</code>为例，和值双向绑定的格式为<code>model:value=&quot;&#123;&#123;num&#125;&#125;&quot;</code>（num为绑定的数据）</p>
<h4 id="初始数据-1"><a href="#初始数据-1" class="headerlink" title="初始数据"></a>初始数据</h4><p>和上面一样</p>
<h4 id="页面wxml代码-1"><a href="#页面wxml代码-1" class="headerlink" title="页面wxml代码"></a>页面wxml代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单向绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 18px;&quot;</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 双向绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid red;&quot;</span> <span class="attr">model:value</span>=<span class="string">&quot;&#123;&#123;num&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p>在输入框输入什么，文本就显示什么</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-04%20210021.gif"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/data.html">数据绑定 | 微信开放文档 (qq.com)</a>和<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/two-way-bindings.html">简易双向绑定 | 微信开放文档 (qq.com)</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序事件绑定</title>
    <url>/528.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>事件是视图层到逻辑层的通讯方式，可以将用户的行为反馈到逻辑层进行处理</p>
<p>事件分为冒泡事件和非冒泡事件：</p>
<ol>
<li>冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递（触发父节点的事件）</li>
<li>非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="简单事件绑定"><a href="#简单事件绑定" class="headerlink" title="简单事件绑定"></a>简单事件绑定</h4><blockquote>
<p>页面wxml代码，text标签实时显示num的值，两个按钮分别绑定<code>num加1</code>和<code>num减1</code>事件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 18px;&quot;</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;add&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;reduce&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20px;&quot;</span>&gt;</span>减1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>js代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/demo/demo.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="comment">// 加1</span></span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">num</span>: <span class="built_in">this</span>.data.num + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="comment">// 减1</span></span><br><span class="line">    <span class="function"><span class="title">reduce</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">num</span>: <span class="built_in">this</span>.data.num - <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-04%20235906%20.gif"></p>
<h4 id="冒泡事件"><a href="#冒泡事件" class="headerlink" title="冒泡事件"></a>冒泡事件</h4><p>bindtap会让事件向父节点冒泡</p>
<blockquote>
<p>页面wxml代码，outer是middle的父节点，middle是inner的父节点</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>bindtap冒泡<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&#x27;handout&#x27;</span>&gt;</span></span><br><span class="line">   outer</span><br><span class="line">   <span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&#x27;handmiddle&#x27;</span>&gt;</span></span><br><span class="line">     middle</span><br><span class="line">     <span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&#x27;handinner&#x27;</span>&gt;</span>inner<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>js代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;out&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">handmiddle</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;middle&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">handinner</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;inner&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-05%20000719.gif"></p>
<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li>点击outer时，只会触发它本身的事件handout事件，即：<font color="#dd0000">只触发了handout事件</font></li>
<li>点击middle时，触发它本身的事件handmiddle事件后，向其父节点outer冒泡触发handout事件，即：<font color="#dd0000">依次触发了handmiddle、handout事件</font></li>
<li>点击inner时，触发它本身的事件handinner事件后，向其父节点middle冒泡触发handmiddle事件（相当于点击了middle），最后触发了handout事件，即：<font color="#dd0000">依次触发了handinner、handmiddle、handout事件</font></li>
</ol>
<h4 id="非冒泡事件"><a href="#非冒泡事件" class="headerlink" title="非冒泡事件"></a>非冒泡事件</h4><p>catchtap会阻止事件向父节点冒泡</p>
<blockquote>
<p>页面wxml代码</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>catchtap非冒泡<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">catchtap</span>=<span class="string">&#x27;handout&#x27;</span>&gt;</span></span><br><span class="line">   outer</span><br><span class="line">   <span class="tag">&lt;<span class="name">view</span> <span class="attr">catchtap</span>=<span class="string">&#x27;handmiddle&#x27;</span>&gt;</span></span><br><span class="line">     middle</span><br><span class="line">     <span class="tag">&lt;<span class="name">view</span> <span class="attr">catchtap</span>=<span class="string">&#x27;handinner&#x27;</span>&gt;</span>inner<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>js代码</p>
</blockquote>
<p>和上面一样</p>
<blockquote>
<p>效果</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-05%20001655.gif"></p>
<blockquote>
<p>分析</p>
</blockquote>
<p>因为catchtap是阻止向父节点冒泡的，所以点击outer、middle、inner都只会触发自身的事件，catchtap的事件可以被子节点触发</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>微信开发文档地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#%E6%99%AE%E9%80%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">事件 | 微信开放文档 (qq.com)</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序自定义组件</title>
    <url>/529.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>开发者可以将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用；也可以将复杂的页面拆分成多个低耦合的模块，有助于代码维护，自定义组件在使用时与基础组件非常相似</p>
<p>类似于页面，一个自定义组件由 <code>json</code>、<code>wxml</code>、<code>wxss</code>、<code>js</code> 4个文件组成</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="新建Component"><a href="#新建Component" class="headerlink" title="新建Component"></a>新建Component</h4><p>首先新建一个文件夹，命名为<code>components</code>，和<code>pages</code>文件夹的位置同级，用于管理所有组件</p>
<p>在<code>components</code>文件夹内新建一个文件夹，命名为<code>input</code>，右键点击这个文件夹并选择新建Component，也命名为<code>input</code>，项目结构如下图所示</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221205140702088.png" alt="image-20221205140702088"></p>
<h4 id="组件wxml代码"><a href="#组件wxml代码" class="headerlink" title="组件wxml代码"></a>组件wxml代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--components/input/input.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 18px;&quot;</span>&gt;</span>自定义组件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid red;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;inputValue&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="组件js文件"><a href="#组件js文件" class="headerlink" title="组件js文件"></a>组件js文件</h4><p>只改了属性列表，定义了一个属性<code>inputValue</code>，数据类型为<code>Number</code>，默认值为<code>666</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/input/input.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的属性列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">properties</span>: &#123;</span><br><span class="line">        <span class="attr">inputValue</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="number">666</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的方法列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>页面使用组件之前，首先在该页面的<code>json文件</code>中进行引用声明，需要提供每个自定义组件的<code>标签名</code>和对应的自定义组件<code>文件路径</code>，标签名怎么写都行</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;my-input&quot;</span>:<span class="string">&quot;/components/input/input&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面wxml代码如下，<code>my-input</code>和上面的要一样，<code>input-value</code>是上面定义的属性<code>inputValue</code>（改成inputValue也可以），如果不写<code>input-value</code>会显示其默认值666</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/demo/demo.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-input</span> <span class="attr">input-value</span>=<span class="string">&quot;777&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-05%20143716.gif"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制位运算---左移(&lt;&lt;)右移(&gt;&gt;)</title>
    <url>/53.html</url>
    <content><![CDATA[<h3 id="左移（-lt-lt-）"><a href="#左移（-lt-lt-）" class="headerlink" title="左移（&lt;&lt;）"></a>左移（&lt;&lt;）</h3><p>一般来说，向左移动几位就乘以2的几次幂；但是，如果要左移的数化成二进制后的最高位不是0而是1时，前面的结论就不成立了，就要化成二进制后再运算了（去掉最高位的1，最低位补0）</p>
<h3 id="右移（-gt-gt-）"><a href="#右移（-gt-gt-）" class="headerlink" title="右移（&gt;&gt;）"></a>右移（&gt;&gt;）</h3><p>一般来说，向右移动几位就除以2的几次幂；但是，如果要右移的数化成二进制后的最低位不是0而是1时，前面的结论就不成立了，就要化成二进制后再运算了（去掉最低位的1，最高位补0）</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//向左移动几位就乘以2的几次幂</span></span><br><span class="line">    <span class="comment">/*去掉最高位,最低位补零,左边为二进制，右边为十进制</span></span><br><span class="line"><span class="comment">    1100=12</span></span><br><span class="line"><span class="comment">    12&lt;&lt;1的结果:11000=24</span></span><br><span class="line"><span class="comment">    12&lt;&lt;2的结果:110000=48</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="number">12</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="number">12</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//向右移动几位就除以2的几次幂</span></span><br><span class="line">    <span class="comment">/*去掉最低位,最高位补零,左边为二进制，右边为十进制</span></span><br><span class="line"><span class="comment">    1100=12</span></span><br><span class="line"><span class="comment">    12&gt;&gt;1的结果:110=6</span></span><br><span class="line"><span class="comment">    12&gt;&gt;2的结果:11=3</span></span><br><span class="line"><span class="comment">    12&gt;&gt;3的结果:1=1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="number">12</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="number">12</span> &gt;&gt; <span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="number">12</span> &gt;&gt; <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201204110226.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序组件使用slot标签</title>
    <url>/530.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序组件通过使用slot标签，可以让使用这个组件的页面向slot标签按需插入一些内容，情况可分为使用<code>单个slot</code>和<code>多个slot</code>，本博客的代码是在<a href="https://blog.zoutl.cn/529.html">微信小程序自定义组件 | LeDao’s Blog (zoutl.cn)</a>的基础上进行修改</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h4><p>直接在组件的<code>wxml</code>文件里加上一个slot标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--components/input/input.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 18px;&quot;</span>&gt;</span>自定义组件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid red;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;inputValue&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用组件时，只需要在组件标签内加上要插入的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/demo/demo.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-input</span> <span class="attr">input-value</span>=<span class="string">&quot;777&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: green;font-weight: bold;&quot;</span>&gt;</span>我是通过slot标签插入组件的内容<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下图所示，绿色文本是插入的</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221205150649283.png" alt="image-20221205150649283"></p>
<h4 id="多个slot"><a href="#多个slot" class="headerlink" title="多个slot"></a>多个slot</h4><p>需要使用多slot时，可以在组件js中声明启用，在组件定义时的选项中<code>启用多slot支持</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/input/input.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">multipleSlots</span>: <span class="literal">true</span> <span class="comment">//开启多slot支持</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的属性列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">properties</span>: &#123;</span><br><span class="line">        <span class="attr">inputValue</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="number">666</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的方法列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">methods</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件的slot标签需要加上一个<code>name</code>属性，这样在使用组件时就可以根据name的值准确插入内容了，组件页面代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--components/input/input.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;before&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 18px;&quot;</span>&gt;</span>自定义组件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid red;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;inputValue&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;after&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用组件时，通过slot属性将内容插入组件额不同slot标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/demo/demo.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-input</span> <span class="attr">input-value</span>=<span class="string">&quot;777&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">slot</span>=<span class="string">&quot;before&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: green;font-weight: bold;&quot;</span>&gt;</span>前面<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">slot</span>=<span class="string">&quot;after&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: green;font-weight: bold;&quot;</span>&gt;</span>后面<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下图所示，绿色文本是插入的</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221205152023368.png" alt="image-20221205152023368"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序与Java后端接口交互</title>
    <url>/531.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序可以通过<code>wx.request</code>函数发起HTTPS网络请求，从Java后端接口动态获取数据，官方文档链接为：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html#%E5%8A%9F%E8%83%BD%E6%8F%8F%E8%BF%B0">RequestTask | 微信开放文档 (qq.com)</a></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="跳过域名检测"><a href="#跳过域名检测" class="headerlink" title="跳过域名检测"></a>跳过域名检测</h4><p>使用<code>localhost</code>或其他开发环境接口时，控制台报错，我们需要跳过服务器域名的校验</p>
<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221205162652069.png" alt="image-20221205162652069" style="zoom: 50%;" />

<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><h5 id="新建Spring-Boot项目"><a href="#新建Spring-Boot项目" class="headerlink" title="新建Spring Boot项目"></a>新建Spring Boot项目</h5><p>新建项目时，最少要添加一个<code>Spring Web</code>依赖</p>
<h5 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br></pre></td></tr></table></figure>

<h5 id="HelloWorldController-java"><a href="#HelloWorldController-java" class="headerlink" title="HelloWorldController.java"></a>HelloWorldController.java</h5><p>下面接口可以通过<a href="http://localhost/helloWorld">localhost/helloWorld</a>进行访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-05 15:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/helloWorld&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWord</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HelloWorld &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="小程序代码"><a href="#小程序代码" class="headerlink" title="小程序代码"></a>小程序代码</h4><h5 id="页面wxml代码"><a href="#页面wxml代码" class="headerlink" title="页面wxml代码"></a>页面wxml代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/demo/demo.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>结果: <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid red;&quot;</span> <span class="attr">model:value</span>=<span class="string">&quot;&#123;&#123;id&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;margin-top: 14rpx;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">catchtap</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="页面js代码"><a href="#页面js代码" class="headerlink" title="页面js代码"></a>页面js代码</h5><p>只展示了关键代码，默认是GET请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/demo/demo.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">result</span>: <span class="string">&#x27;我是默认值&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost/helloWorld&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="built_in">this</span>.data.id</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                    <span class="attr">result</span>: res.data</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-05%20165038.gif"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>如果是POST请求需要加上请求头<code>&#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39;</code>，不然无法传递参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">header: &#123; <span class="comment">//POST请求一定要加上这个content-type,不然无法传递参数</span></span><br><span class="line">	<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统升级Node.js和Vue CLI</title>
    <url>/532.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>最近想升级一下电脑上的Node.js和Vue CLI，看了许多技术博客，基本上都是使用命令行安装，我试了一下老是出问题，最后还是卸载重装更加简单暴力。卸载Node.js后，Vue CLI也会被卸载</p>
<p>不过以前使用npm命令安装过的一些东西都要重新安装，卸载前先去看看安装过什么，以方便安装回来，安装路径看下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207164058394.png" alt="image-20221207164058394"></p>
<h3 id="升级过程"><a href="#升级过程" class="headerlink" title="升级过程"></a>升级过程</h3><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>建议使用<code>Geek Uninstaller</code>来卸载Node.js，和使用控制面板卸载相比，<code>Geek Uninstaller</code>卸载得更干净，官网下载地址为：<a href="https://geekuninstaller.com/download">Geek Uninstaller - Download</a></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207164556852.png" alt="image-20221207164556852"></p>
<h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>安装Node.js步骤查看博客：<a href="https://blog.zoutl.cn/200.html">安装 vue-cli 脚手架 | LeDao’s Blog (zoutl.cn)</a>，安装好Node.js就行，先不安装Vue CLI（这是因为安装命令不一样）</p>
<h4 id="安装Vue-CLI"><a href="#安装Vue-CLI" class="headerlink" title="安装Vue CLI"></a>安装Vue CLI</h4><p>首先以管理员身份打开CMD，然后执行下面命令安装Vue CLI</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>使用<code>vue -V</code>或<code>vue --version</code>查看Vue CLI的版本号，出现版本号说明安装成功了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207165745889.png" alt="image-20221207165745889"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue CLI3.x及以上版本创建Vue项目</title>
    <url>/533.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>3.x及以上版本的Vue CLI创建Vue项目有两种方法：</p>
<ol>
<li>使用命令创建，更方便</li>
<li>使用图形化界面，更人性化</li>
</ol>
<h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p>主要看vue-cli的版本，如果版本是2.x，那么创建项目的命令为<code>vue init webpack 项目名称</code>；如果版本是3.x及以上，那么创建项目的命令为<code>vue create 项目名称</code></p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Node.js</td>
<td align="center">14.17.1</td>
</tr>
<tr>
<td align="center">npm</td>
<td align="center">6.14.13</td>
</tr>
<tr>
<td align="center">vue-cli</td>
<td align="center">5.0.8</td>
</tr>
</tbody></table>
<h3 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h3><h4 id="使用命令创建"><a href="#使用命令创建" class="headerlink" title="使用命令创建"></a>使用命令创建</h4><ol>
<li><p>打开CMD，进入存放项目的文件夹</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207173805890.png" alt="image-20221207173805890"></p>
</li>
<li><p>使用vue create命令创建项目，下面命令是创建一个名为<code>hello-world</code>的项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure></li>
<li><p>然后选第三个，手动搭建环境</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207171705084.png" alt="image-20221207171705084"></p>
</li>
<li><p>接下来安装一些插件，按<code>空格键</code>选择或取消选择，选好后按<code>回车键</code>进行下一步</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207172050407.png" alt="image-20221207172050407"></p>
</li>
<li><p>选择Vue.js的版本，可以选择<code>3.x</code>或<code>2.x</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207172434463.png" alt="image-20221207172434463"></p>
</li>
<li><p>选择router的模式，后期可以更改，这里填<code>y</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207172632880.png" alt="image-20221207172632880"></p>
</li>
<li><p>然后把一些配置放在<code>package.json</code>（个人习惯，选哪个都没问题）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207173041954.png" alt="image-20221207173041954"></p>
</li>
<li><p>是否将当前选择的配置作为预设，下次新建项目时可以直接自动选择这些配置，我填<code>n</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207173333038.png" alt="image-20221207173333038"></p>
</li>
<li><p>项目创建好后，依次输入<code>cd hello-world</code>和<code>npm run serve</code>命令来启动项目，启动好后在浏览器地址栏输入<code>http://localhost:8080</code>即可访问，页面截图如下</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207174346837.png" alt="image-20221207174346837"></p>
</li>
<li><p>如果要停止项目的运行，在CMD窗口按下复制的快捷键（<code>CTRL+C</code>），然后确认即可</p>
</li>
</ol>
<h4 id="使用图形化界面"><a href="#使用图形化界面" class="headerlink" title="使用图形化界面"></a>使用图形化界面</h4><ol>
<li><p>打开CMD，进入存放项目的文件夹，然后执行<code>vue ui</code>命令</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207204642886.png" alt="image-20221207204642886"></p>
</li>
<li><p>在自动打开的页面开始新建项目</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207175845800.png" alt="image-20221207175845800"></p>
</li>
<li><p>项目详情如下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207180050304.png" alt="image-20221207180050304"></p>
</li>
<li><p>选择一套预设，也就是项目的模板，我们选手动自己配置</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207180254563.png" alt="image-20221207180254563"></p>
</li>
<li><p>安装插件，一般安装下图3个即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207180416711.png" alt="image-20221207180416711"></p>
</li>
<li><p>选择Vue.js的版本和router的模式，然后点击下面的创建按钮</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207180553946.png" alt="image-20221207180553946"></p>
</li>
<li><p>是否保存为预设，一般不保存，创建一个项目很方便的，然后等着创建成功就行了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207180752175.png" alt="image-20221207180752175"></p>
</li>
<li><p>安装<code>axios</code>和<code>element-plus</code>依赖</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207181042374.png" alt="image-20221207181042374"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Vite创建Vue3项目</title>
    <url>/534.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>和Vue CLI相比，Vite创建和启动项目都非常快，Vue.js的官方也推荐使用Vite</p>
<h3 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h3><ol>
<li><p>打开CMD，进入存放项目的文件夹</p>
</li>
<li><p>输入下面命令，然后填项目名称、选择Vue、选择JavaScript，项目几乎瞬间创建好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207185134249.png" alt="image-20221207185134249"></p>
</li>
<li><p>执行一下提示的3条命令以安装依赖和启动项目，启动后通过<code>http://localhost:5173</code>访问</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207185537687.png" alt="image-20221207185537687"></p>
</li>
<li><p>成功运行的界面如下图，如果要停止项目的运行，在CMD窗口按下复制的快捷键（<code>CTRL+C</code>），然后确认即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207185836447.png" alt="image-20221207185836447"></p>
</li>
</ol>
<h3 id="修改项目启动配置"><a href="#修改项目启动配置" class="headerlink" title="修改项目启动配置"></a>修改项目启动配置</h3><p>接下来修改一下项目的默认端口以及项目启动后自动打开浏览器，在<code>vite.config.js</code>中修改，<code>server.port</code>是端口号，<code>server.open</code>的值为true时启动项目会自动打开浏览器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [vue()],</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8888</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="安装和配置Vue-Router"><a href="#安装和配置Vue-Router" class="headerlink" title="安装和配置Vue Router"></a>安装和配置Vue Router</h3><p>安装命令为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure>

<p>在src文件夹下创建一个名为<code>router</code>的文件夹，在里面新建一个名为<code>index.js</code>的文件，内容示例如下所示，<code>routes</code>的内容根据自己的情况写，其它不用变</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> history = createWebHistory()</span><br><span class="line"><span class="keyword">let</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;/src/view/login/index.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createRouter(&#123;history, routes&#125;)</span><br></pre></td></tr></table></figure>

<p>在<code>main.js</code>文件中引入并使用，<code>import router from &#39;./router&#39;</code>和<code>.use(router)</code>是关键代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//引入router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="配置路径别名"><a href="#配置路径别名" class="headerlink" title="配置路径别名"></a>配置路径别名</h3><p>首先安装<code>path</code>模块，安装命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @types/node</span><br></pre></td></tr></table></figure>

<p>修改<code>vite.config.js</code>，引入path模块并设置路径别名，<code>resolve.alias</code>用来配置路径别名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="comment">//引入path模块,用来设置路径别名</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [vue()],</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8888</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="comment">//配置路径别名</span></span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>配置了路径别名后，上面router配置的component的路径可以修改为<code>@/view/login/index.vue</code>，<code>@</code>代替了<code>/src</code></p>
<h3 id="安装Element-Plus"><a href="#安装Element-Plus" class="headerlink" title="安装Element Plus"></a>安装Element Plus</h3><h4 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure>

<h4 id="配置自动导入组件"><a href="#配置自动导入组件" class="headerlink" title="配置自动导入组件"></a>配置自动导入组件</h4><p>安装<code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code>这两款插件，命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure>

<p>去<code>vite.config.js</code>文件配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="comment">//引入path模块,用来设置路径别名</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span></span><br><span class="line"><span class="comment">//用于自动导入Element Plus组件</span></span><br><span class="line"><span class="keyword">import</span> AutoImport <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Components <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;ElementPlusResolver&#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        vue(),</span><br><span class="line">        <span class="comment">//用于自动导入Element Plus组件</span></span><br><span class="line">        AutoImport(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [ElementPlusResolver()],</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">//用于自动导入Element Plus组件</span></span><br><span class="line">        Components(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [ElementPlusResolver()],</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8888</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="使用图标"><a href="#使用图标" class="headerlink" title="使用图标"></a>使用图标</h4><p>使用前需要安装一下，命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @element-plus/icons-vue</span><br></pre></td></tr></table></figure>

<p>图标我们直接按需引入即可，引入语句如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Lock, User &#125; <span class="keyword">from</span> <span class="string">&quot;@element-plus/icons-vue&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>使用的代码为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;33&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Lock</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">User</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客报错: &quot;ENOENT: no such file or directory, open E:\hexo-blog\db.json&quot;</title>
    <url>/535.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>我把<code>14.17.1稳定版本</code>的Node.js卸载并安装最新版的Node.js后，使用<code>hexo algolia</code>命令上传Algolia索引时就报这个错误，报错原因是：<code>E:\hexo-blog\db.json</code>这个文件不存在</p>
<h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>执行<code>hexo g</code>命令后会自动生成一个<code>db.json</code>文件，但是执行完<code>hexo algolia</code>命令后，这个文件就被删除了，从而导致文件不存在而报错</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>把Node.js卸载重新安装回原来的<code>14.17.1稳定版本</code>，如果有其它办法欢迎到最下面的评论区给我留言！！</p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>重写与重载的区别</title>
    <url>/54.html</url>
    <content><![CDATA[<h3 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h3><p>从字面上看，重写就是重新写一遍的意思。其实就是在子类中把父类本身有的方法重新写一遍。子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型(除过子类中方法的返回值是父类中方法返回值的子类时)都相同的情况下， 对方法体进行修改或重写，这就是重写。但要注意子类函数的访问修饰权限不能少于父类的</p>
<blockquote>
<p>Java代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Son s = <span class="keyword">new</span> Son();</span><br><span class="line">        s.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello by &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<ol>
<li><p>发生在父类与子类之间</p>
</li>
<li><p>方法名，参数列表，返回类型（除过子类中方法的返回类型是父类中返回类型的子类）必须相同</p>
</li>
<li><p>访问修饰符的限制一定要大于被重写方法的访问修饰符（public&gt;protected&gt;default&gt;private)</p>
</li>
<li><p>重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常</p>
</li>
</ol>
<h3 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h3><p>在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同甚至是参数顺序不同）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，所以不能通过返回类型是否相同来判断重载</p>
<blockquote>
<p>Java代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Father s = <span class="keyword">new</span> Father();</span><br><span class="line">        s.sayHello();</span><br><span class="line">        s.sayHello(<span class="string">&quot;wintershii&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span> + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<ol>
<li><p>重载Overload是一个类中多态性的一种表现</p>
</li>
<li><p>重载要求同名方法的参数列表不同(参数类型，参数个数甚至是参数顺序)</p>
</li>
<li><p>重载的时候，返回值类型可以相同也可以不相同。无法以返回型别作为重载函数的区分标准</p>
</li>
</ol>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>搬运地址：<a href="https://blog.csdn.net/wintershii/article/details/80558739">Java—重写与重载的区别_wintershii的博客-CSDN博客_重载和重写的区别</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>QuickLook不能预览office的解决方法</title>
    <url>/55.html</url>
    <content><![CDATA[<h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h3><p>下载地址：<a href="https://github.com/QL-Win/QuickLook.Plugin.OfficeViewer/releases">https://github.com/QL-Win/QuickLook.Plugin.OfficeViewer/releases</a> ，点击划红线的链接即可下载</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201205150903.jpg" alt="img"></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>找到下载好的插件，鼠标左键单击选中该插件文件，再按下空格键，点击安装，重启QuickLook即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201205151557.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>QuickLook</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML去掉a标签的下划线</title>
    <url>/56.html</url>
    <content><![CDATA[<p>给该标签添加行内样式<code>text-decoration: none</code>（使用属性style进行定义），示例代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">&quot;http://www.zoutl.cn&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: none&quot;</span>&gt;</span>LeDao的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA创建自己的xml模板</title>
    <url>/58.html</url>
    <content><![CDATA[<h3 id="打开对应设置"><a href="#打开对应设置" class="headerlink" title="打开对应设置"></a>打开对应设置</h3><p>打开设置，并找到Live Templates（File-&gt;Settings或者快捷键Ctrl+Alt+S）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102004549.jpg" alt="img"></p>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>找到文件和代码模板设置，并点击+号添加，如下图</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102005350.jpg" alt="img"></p>
<p>Name处填模板的名称，Extension处填类型，被圈住的地方填内容，最后点击下方的OK键即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102010244.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Scanner的hasNext()方法</title>
    <url>/57.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这个方法用来检查用户是否键入内容</p>
<h3 id="连续输入"><a href="#连续输入" class="headerlink" title="连续输入"></a>连续输入</h3><p>当我们想键入多个内容时，就可以使用这个方法和while循环（连续输入，不会终止）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line">        <span class="keyword">int</span> mouth=sc.nextInt();</span><br><span class="line">        System.out.println(mouth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="停止输入"><a href="#停止输入" class="headerlink" title="停止输入"></a>停止输入</h3><p>当我们想停止输入时，可在该方法的括号内加入用来终止的字符（键入这个字符，按下回车就会终止）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="comment">//当用户没有输入#号时，可以连续输入</span></span><br><span class="line">    <span class="keyword">while</span>(!sc.hasNext(<span class="string">&quot;#&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">int</span> mouth=sc.nextInt();</span><br><span class="line">        System.out.println(mouth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>CKEditor上传图片</title>
    <url>/6.html</url>
    <content><![CDATA[<h3 id="引入commons-io依赖"><a href="#引入commons-io依赖" class="headerlink" title="引入commons-io依赖"></a>引入commons-io依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="修改config-js文件"><a href="#修改config-js文件" class="headerlink" title="修改config.js文件"></a>修改config.js文件</h3><p>在 ckeditor 文件夹中找到 config.js 文件，设置上传图片的请求地址，参考代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">CKEDITOR.editorConfig = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Define changes to default configuration here. For example:</span></span><br><span class="line">    <span class="comment">// config.language = &#x27;fr&#x27;;</span></span><br><span class="line">    <span class="comment">//编辑器颜色</span></span><br><span class="line">    config.uiColor = <span class="string">&#x27;#daeef5&#x27;</span>;</span><br><span class="line">    <span class="comment">//上传图片路径</span></span><br><span class="line">    config.filebrowserUploadUrl = <span class="string">&quot;/ckeditorUpload&quot;</span>;</span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ckeditor上传图片</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> CKEditorFuncNum</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ckeditorUpload&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ckeditorUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;upload&quot;)</span> MultipartFile file, String CKEditorFuncNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件名</span></span><br><span class="line">    String fileName = file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 获取文件的后缀</span></span><br><span class="line">    String suffixName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//拼接新的文件名</span></span><br><span class="line">    String newFileName = DateUtil.getCurrentDateStr2() + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    FileUtils.copyInputStreamToFile(file.getInputStream(), <span class="keyword">new</span> File(articleImageFilePath + <span class="string">&quot;/&quot;</span> + newFileName1));</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(<span class="string">&quot;&lt;script type=\&quot;text/javascript\&quot;&gt;&quot;</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;window.parent.CKEDITOR.tools.callFunction(&quot;</span> + CKEditorFuncNum + <span class="string">&quot;,&#x27;&quot;</span> + <span class="string">&quot;/static/images/articleImage/&quot;</span> + newFileName + <span class="string">&quot;&#x27;,&#x27;&#x27;)&quot;</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;&lt;/script&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="上传步骤"><a href="#上传步骤" class="headerlink" title="上传步骤"></a>上传步骤</h3><ol>
<li><p>在 CKEditor 编辑器工具栏找到图像按钮并点击</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210227090339.jpg"></p>
</li>
<li><p>选择上传标签页，选择文件并上传到服务器</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210227090442.jpg"></p>
</li>
<li><p>选择图片要显示的尺寸，并点击确定即可完成图片上传</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210227090625.jpg" alt="20210227090442.jpg"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>CKEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA创建自己的Live Templates</title>
    <url>/59.html</url>
    <content><![CDATA[<h3 id="打开对应设置"><a href="#打开对应设置" class="headerlink" title="打开对应设置"></a>打开对应设置</h3><p>打开设置，并找到Live Templates（File-&gt;Settings或者快捷键Ctrl+Alt+S）</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102010846.jpg" alt="img"></p>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>点击右侧的+号并选择第二个选项</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102011001.jpg" alt="img"></p>
<p>选择刚刚创建的组，再次点击右侧的+号，选择第一项开始添加</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102011230.jpg" alt="img"></p>
<p>Abbreviation处填关键字（比如我填pi，那么我在敲代码时键入pi时就会出现提示），Description处填提示描述，Template text填自动补全的代码内容</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102011938.jpg" alt="img"></p>
<p>选中Java，然后点击OK键即可</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102011607.jpg" alt="img"></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102012642.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub新建仓库</title>
    <url>/60.html</url>
    <content><![CDATA[<h3 id="点击新建按钮"><a href="#点击新建按钮" class="headerlink" title="点击新建按钮"></a>点击新建按钮</h3><blockquote>
<p>来到GitHub首页,点击左侧的NEW按钮</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102023342.jpg" alt="img"></p>
<h3 id="填写仓库信息"><a href="#填写仓库信息" class="headerlink" title="填写仓库信息"></a>填写仓库信息</h3><blockquote>
<p>输入名称、描述、选择仓库类型（公开或私有）</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102023800.jpg" alt="img"></p>
<blockquote>
<p>点击最下方的创建按钮即可创建成功</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102024029.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub生成token</title>
    <url>/61.html</url>
    <content><![CDATA[<h3 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h3><blockquote>
<p>进入GitHub首页，点击右上角的个人头像，然后再点击Settings</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102033533.jpg" alt="img"></p>
<blockquote>
<p>点击左侧菜单的Developer settings</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102032614.jpg" alt="img"></p>
<blockquote>
<p>点击左侧菜单的Personal access tokens</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102032734.jpg" alt="img"></p>
<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><blockquote>
<p>点击Generate new token</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102032837.jpg" alt="img"></p>
<blockquote>
<p>Note随便填入描述，下面的选项全部打勾（token的用途），再点击最下面的绿色按钮（Generate token）即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102033001.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA上传项目到GitHub</title>
    <url>/62.html</url>
    <content><![CDATA[<h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><blockquote>
<p>创建本地仓库，如果找不到则按两下shift键搜索create git repository</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102033830.jpg" alt="img"></p>
<h3 id="选择对应项目文件夹"><a href="#选择对应项目文件夹" class="headerlink" title="选择对应项目文件夹"></a>选择对应项目文件夹</h3><blockquote>
<p>选择要上传的项目，点击OK后项目文件会变红</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102034008.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102034503.jpg" alt="img"></p>
<h3 id="添加项目链接"><a href="#添加项目链接" class="headerlink" title="添加项目链接"></a>添加项目链接</h3><blockquote>
<p>添加GitHub项目链接</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615034549.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615034655.jpg" alt="img"></p>
<h3 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h3><blockquote>
<p>提交到本地仓库，右击项目工程文件-&gt;git-&gt;commit（或者快捷键Ctrl+K），提交到本地git，项目文件从暂存区进入版本库，文件颜色变白，在红圈区域输入文件内容描述，点击Commit，在之后的弹出框再次点击Commit即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102035209.jpg" alt="img"></p>
<h3 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h3><blockquote>
<p>开始上传到GitHub（或者快捷键Ctrl+Shift+K）</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210615034804.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA导出配置和导入配置</title>
    <url>/63.html</url>
    <content><![CDATA[<h3 id="导出配置"><a href="#导出配置" class="headerlink" title="导出配置"></a>导出配置</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102150606.jpg" alt="img"></p>
<p><strong><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102150642.jpg" alt="img"></strong></p>
<h3 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102150831.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210102153214.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基于JavaMail实现用QQ邮箱发送邮件</title>
    <url>/64.html</url>
    <content><![CDATA[<h3 id="引入Maven依赖"><a href="#引入Maven依赖" class="headerlink" title="引入Maven依赖"></a>引入Maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- email邮件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="开启POP3-SMTP服务"><a href="#开启POP3-SMTP服务" class="headerlink" title="开启POP3/SMTP服务"></a>开启POP3/SMTP服务</h3><p>位置：QQ邮箱首页-&gt;设置-&gt;账户，然后会得到一个授权码</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210104175451.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210104175645.jpg" alt="img"></p>
<h3 id="application-yml文件配置"><a href="#application-yml文件配置" class="headerlink" title="application.yml文件配置"></a>application.yml文件配置</h3><p>*****处根据自己的实际情况填写</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># QQ邮箱发送配置</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="comment"># host不配置会注入失败</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="comment">#自己的邮箱</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">****@qq.com</span></span><br><span class="line">    <span class="comment">#授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">****</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">smtp</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">connectiontimeout:</span> <span class="number">5000</span></span><br><span class="line">          <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">          <span class="attr">writetimeout:</span> <span class="number">5000</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#一定要开启ssl,不然会503 验证失败的（开启加密验证）</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-07-16 9:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;h1 style=&#x27;text-align: center&#x27;&gt;&lt;a href=&#x27;/sendMail&#x27;&gt;点我发送邮件&lt;/a&gt;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮件测试</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/sendMail&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">//发件人QQ邮箱</span></span><br><span class="line">        message.setFrom(<span class="string">&quot;******@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//收件人QQ邮箱</span></span><br><span class="line">        message.setTo(<span class="string">&quot;******@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//主题</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;发送邮件测试&quot;</span>);</span><br><span class="line">        <span class="comment">//内容</span></span><br><span class="line">        message.setText(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        <span class="comment">//发送邮件</span></span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;h2 style=&#x27;color:red;text-align: center&#x27;&gt;发送成功,请到收件人邮箱查收!!&lt;/h2&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试与结果"><a href="#测试与结果" class="headerlink" title="测试与结果"></a>测试与结果</h3><p>运行项目后，点击发送邮件链接，之后目标邮箱就可以收到邮件了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210716093146.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript获取验证码倒计时</title>
    <url>/65.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-warm&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 12px&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取验证码&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;setTime(this);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><p>点击获取验证码按钮后，将按钮设置为不可用，60秒时间到了之后将按钮设置为可用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//倒计时</span></span><br><span class="line">    <span class="keyword">var</span> countdown = <span class="number">60</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (countdown == <span class="number">0</span>) &#123;</span><br><span class="line">            val.removeAttribute(<span class="string">&quot;disabled&quot;</span>);</span><br><span class="line">            val.className = <span class="string">&#x27;obtain generate_code layui-btn layui-btn-warm&#x27;</span>;</span><br><span class="line">            val.value = <span class="string">&quot;获取验证码&quot;</span>;</span><br><span class="line">            countdown = <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            val.setAttribute(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            val.className = <span class="string">&#x27;obtain generate_code layui-btn layui-btn-warm layui-btn-disabled&#x27;</span>;</span><br><span class="line">            val.value = <span class="string">&quot;重新发送(&quot;</span> + countdown + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            countdown--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            setTime(val);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a><strong>结果</strong></h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210104213057.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub搜索技巧</title>
    <url>/66.html</url>
    <content><![CDATA[<h3 id="根据star和fork数筛选"><a href="#根据star和fork数筛选" class="headerlink" title="根据star和fork数筛选"></a>根据star和fork数筛选</h3><p>语法： 关键字 stars:&gt;= 数量 forks:&gt;=数量</p>
<p>例子： springboot stars:&gt;=5000 //搜索springboot有关star数&gt;=5000的内容</p>
<p>springboot stars:&gt;=5000 forks:&gt;=5000//搜索springboot 的star&gt;=5000，且fork数&gt;=5000的内容</p>
<p>可单独搜索，也可组合搜索，中间用空格隔开，是&amp;（且）的关系</p>
<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>搜索关键字在GitHub上发布的位置</p>
<p>name （发布的仓库名称）</p>
<p>description（指的是文章的摘要部分）</p>
<p>Readme (说明文档)</p>
<p>语法 ：关键字 in:</p>
<p>例子 ：netty in:name //查找名称中包含netty的内容</p>
<p>netty in:name,description //逗号分隔，是 || (或)的关系，指的是查询名称，或者描述中包含netty的内容</p>
<h3 id="awesome-关键字"><a href="#awesome-关键字" class="headerlink" title="awesome+关键字"></a>awesome+关键字</h3><p>一般是指的学习，书籍，工具类，插件类相关的系列的集合。可以有效节约时间，找到别人收集好的内容</p>
<p>例如： awesome springboot</p>
<h3 id="关键词-location-地区-language-语言"><a href="#关键词-location-地区-language-语言" class="headerlink" title="关键词 location:地区 language:语言"></a>关键词 location:地区 language:语言</h3><p>搜索某个语言，某个地区的大佬</p>
<p>例如：springboot location:Beijing language:java</p>
<h3 id="user-某位用户"><a href="#user-某位用户" class="headerlink" title="user:某位用户"></a>user:某位用户</h3><p>查询某位用户的相关内容</p>
<p>例如：user:a6678696</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.cnblogs.com/flydashpig/p/11795238.html">github实用的搜索小技巧 - 夕阳下飞奔的猪 - 博客园</a></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>form标签onsubmit事件</title>
    <url>/67.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>onsubmit 事件会在表单中的确认按钮被点击时发生，如果结果返回false就不提交</p>
<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/save&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkUpdateMessageValue()&quot;</span>&gt;</span></span><br><span class="line"> ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUpdateMessageValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> password = $(<span class="string">&quot;#passwordUpdateMessage&quot;</span>).val();</span><br><span class="line">    <span class="keyword">var</span> password2 = $(<span class="string">&quot;#password2UpdateMessage&quot;</span>).val();</span><br><span class="line">    <span class="keyword">if</span> (password.length &lt; <span class="number">6</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;密码长度要大于5!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (password != password2) &#123;</span><br><span class="line">        alert(<span class="string">&quot;密码和确认密码不相同,请重新输入!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>点击超链接时确认后再跳转</title>
    <url>/68.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>用户要删除某条数据时，先询问用户是否真的删除，用户确认后就马上删除</p>
<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:deleteArticle(id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteArticle</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (confirm(<span class="string">&quot;您确定要删除这个资源吗?&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">&quot;/article/delete?id=&quot;</span> + id;</span><br><span class="line">        alert(<span class="string">&quot;删除成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210109010043.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL里面的排序语句DESC和ASC</title>
    <url>/69.html</url>
    <content><![CDATA[<h3 id="DESC"><a href="#DESC" class="headerlink" title="DESC"></a>DESC</h3><p>用 DESC表示按倒序排序（即：从大到小排序）—降序排列</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">DATE</span> <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210113040231.jpg" alt="img"></p>
<h3 id="ACS"><a href="#ACS" class="headerlink" title="ACS"></a>ACS</h3><p>用 ASC表示按正序排序（即：从小到大排序）—升序排列，由于ASC是默认的，所以可以省略</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">DATE</span> <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210113035957.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的关键字</title>
    <url>/7.html</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>被 Java 语言赋予了特殊含义的单词</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>关键字中所有字母都为小写</p>
<h3 id="列举"><a href="#列举" class="headerlink" title="列举"></a>列举</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010141136.jpg"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010141148.jpg" alt="20210227090442.jpg"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>jackson的配置属性</title>
    <url>/70.html</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="date-format"><a href="#date-format" class="headerlink" title="date-format"></a>date-format</h4><p>指定日期格式，比如yyyy-MM-dd HH:mm:ss，或者具体的格式化类的全限定名</p>
<h4 id="deserialization"><a href="#deserialization" class="headerlink" title="deserialization"></a>deserialization</h4><p>是否开启Jackson的反序列化</p>
<h4 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h4><p>是否开启json的generators</p>
<h4 id="joda-date-time-format"><a href="#joda-date-time-format" class="headerlink" title="joda-date-time-format"></a>joda-date-time-format</h4><p>指定Joda date/time的格式，比如yyyy-MM-ddHH:mm:ss). 如果没有配置的话，dateformat会作为backup</p>
<h4 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h4><p>指定json使用的Locale</p>
<h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><p>是否开启Jackson通用的特性</p>
<h4 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h4><p>是否开启jackson的parser特性</p>
<h4 id="property-naming-strategy"><a href="#property-naming-strategy" class="headerlink" title="property-naming-strategy"></a>property-naming-strategy</h4><p>指定PropertyNamingStrategy(CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES)或者指定PropertyNamingStrategy子类的全限定类名</p>
<h4 id="serialization"><a href="#serialization" class="headerlink" title="serialization"></a>serialization</h4><p>是否开启jackson的序列化</p>
<h4 id="serialization-inclusion"><a href="#serialization-inclusion" class="headerlink" title="serialization-inclusion"></a>serialization-inclusion</h4><p>指定序列化时属性的inclusion方式，具体查看JsonInclude.Include枚举</p>
<h4 id="time-zone"><a href="#time-zone" class="headerlink" title="time-zone"></a>time-zone</h4><p>指定日期格式化时区，比如America/Los_Angeles或者GMT+10</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.cnblogs.com/liaojie970/p/9396334.html">springboot之jackson的两种配置方式</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5加密</title>
    <url>/71.html</url>
    <content><![CDATA[<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-13 5:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MD5 = <span class="string">&quot;MD5&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  String  <span class="title">getResult</span><span class="params">(String inputStr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======加密前的数据:&quot;</span>+inputStr);</span><br><span class="line">        BigInteger bigInteger=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(KEY_MD5);</span><br><span class="line">            <span class="keyword">byte</span>[] inputData = inputStr.getBytes();</span><br><span class="line">            md.update(inputData);</span><br><span class="line">            bigInteger = <span class="keyword">new</span> BigInteger(md.digest());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;MD5加密后:&quot;</span> + bigInteger.toString(<span class="number">16</span>));</span><br><span class="line">        <span class="keyword">return</span> bigInteger.toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String inputStr = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            getResult(inputStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210113052240.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Iterator的使用</title>
    <url>/72.html</url>
    <content><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="hasNext"><a href="#hasNext" class="headerlink" title="hasNext()"></a>hasNext()</h4><p>如果迭代具有更多的元素，则返回true </p>
<h4 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h4><p>返回迭代中的下一个元素</p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>从底层集合中删除此迭代器返回的最后一个元素</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    stringList.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    stringList.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    stringList.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    stringList.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    Iterator iterator = stringList.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="comment">//获取下一个元素</span></span><br><span class="line">        String s = (String) iterator.next();</span><br><span class="line">        <span class="comment">//如果下一个元素的值是2</span></span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">&quot;2&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//删除下一个元素</span></span><br><span class="line">            iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果:&quot;</span>);</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span> (String s : stringList) &#123;</span><br><span class="line">        System.out.print(s+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210114163324.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>遍历List集合的三种方法</title>
    <url>/73.html</url>
    <content><![CDATA[<h3 id="创建List集合"><a href="#创建List集合" class="headerlink" title="创建List集合"></a>创建List集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">stringList.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">stringList.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">stringList.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">stringList.add(<span class="string">&quot;4&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringList.size(); i++) &#123;</span><br><span class="line">    System.out.print(stringList.get(i)+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : stringList) &#123;</span><br><span class="line">    System.out.print(s+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator iterator = stringList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">	System.out.print(iterator.next() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>List集合删除某个元素</title>
    <url>/74.html</url>
    <content><![CDATA[<h3 id="创建List集合"><a href="#创建List集合" class="headerlink" title="创建List集合"></a>创建List集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">stringList.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">stringList.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">stringList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">stringList.add(<span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><blockquote>
<p>正向删除</p>
</blockquote>
<p>每删除一次必须进行一次<code>i--</code>，因为stringList.size()在减少，否则List集合中连着的两个元素都相同的话，删除这个相同的元素时就只能删除一个。因为删除第一个元素时下一个以及之后的元素的索引会在原来的基础上-1，而i的值经过一次循环后就+1了，由于下一个元素的索引变成了被删除元素的索引，所以循环会跳过要删除的第二个元素，那么会出现等于要删除的值的元素删不完的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringList.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stringList.get(i).equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">        stringList.remove(i);</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>反向删除</p>
</blockquote>
<p>可以直接删除，不需要进行其他的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = stringList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stringList.get(i).equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">        stringList.remove(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator iterator=stringList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (iterator.next().equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><p>得到新的List集合就是去掉目标元素的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; stringList1=stringList.stream().filter(s -&gt; !s.equals(<span class="string">&quot;a&quot;</span>)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>不能使用foreach循环，用foreach删除list元素的时候只有删除倒数第二个元素时不会报错</p>
<p>详细原因查看：<a href="https://blog.csdn.net/bimuyulaila/article/details/52088124">foreach遍历list删除元素一定会报错？</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL删除主表时删除从表的数据</title>
    <url>/75.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>有外键关联的两个表，要想实现删除主表的数据，然后删除从表中与之关联的数据，我们可以将两表的外键删除关系设置为CASCADE</p>
<p>设置CASCADE删除时：删除主表数据时自动删除从表数据；删除从表，主表不变</p>
<h3 id="表结果及关系"><a href="#表结果及关系" class="headerlink" title="表结果及关系"></a>表结果及关系</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210115053856.jpg" alt="img"></p>
<h3 id="设置删除关系"><a href="#设置删除关系" class="headerlink" title="设置删除关系"></a>设置删除关系</h3><p>双击上图中的线，然后设置删除时的关系为CASCADE</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210115054053.jpg" alt="img"></p>
<p>然后我们的需求就可以实现了！！</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>我用的是SQLyog</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java进制转换</title>
    <url>/77.html</url>
    <content><![CDATA[<h3 id="十进制转换成其它进制"><a href="#十进制转换成其它进制" class="headerlink" title="十进制转换成其它进制"></a>十进制转换成其它进制</h3><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.toBinaryString(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h4 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.toOctalString(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.toHexString(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//十进制转换成二进制 1100100</span></span><br><span class="line">    System.out.println(Integer.toBinaryString(<span class="number">100</span>));</span><br><span class="line">    <span class="comment">//十进制转换成八进制 144</span></span><br><span class="line">    System.out.println(Integer.toOctalString(<span class="number">100</span>));</span><br><span class="line">    <span class="comment">//十进制转换成十六进制 64</span></span><br><span class="line">    System.out.println(Integer.toHexString(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><font color="#dd0000">1100100</font><br><font color="#dd0000">144</font><br><font color="#dd0000">64</font></p>
<h3 id="各种进制转换成十进制"><a href="#各种进制转换成十进制" class="headerlink" title="各种进制转换成十进制"></a>各种进制转换成十进制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;1100100&quot;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>第一个参数为要转换成十进制的数（它是几进制数由第二个参数决定），第二个参数是说明第一个参数是几进制数</p>
<h4 id="Java代码-1"><a href="#Java代码-1" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//二进制转换成十进制</span></span><br><span class="line">    System.out.println(Integer.parseInt(<span class="string">&quot;1100100&quot;</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="comment">//八进制转换成十进制</span></span><br><span class="line">    System.out.println(Integer.parseInt(<span class="string">&quot;144&quot;</span>, <span class="number">8</span>));</span><br><span class="line">    <span class="comment">//十六进制转换成十进制</span></span><br><span class="line">    System.out.println(Integer.parseInt(<span class="string">&quot;4096&quot;</span>, <span class="number">16</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><p><font color="#dd0000">100</font><br><font color="#dd0000">100</font><br><font color="#dd0000">16534</font></p>
<h3 id="十进制转换成任意进制"><a href="#十进制转换成任意进制" class="headerlink" title="十进制转换成任意进制"></a>十进制转换成任意进制</h3><h4 id="Java代码-2"><a href="#Java代码-2" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//10进制数转换成15进制数</span></span><br><span class="line">        System.out.println(getResult(getSting(<span class="number">26</span>,<span class="number">15</span>)));</span><br><span class="line">        <span class="comment">//10进制数转换成7进制数</span></span><br><span class="line">        System.out.println(getResult(getSting(<span class="number">26</span>,<span class="number">7</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据除n取余法获得基本的进制数(余数10没有用A表示,11没有用B表示,以此类推...)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num   要转换的十进制数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> radix 要转换成多少进制数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSting</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> radix)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(num % radix).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            num = num / radix;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**获得最终结果(余数10用A表示,11用B表示,以此类推...)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getResult</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String[] arr = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        String[] arr2 = <span class="keyword">new</span> String[arr.length];</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            arr2[j] = arr[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String s : arr2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Integer.parseInt(s) &gt; <span class="number">9</span>) &#123;</span><br><span class="line">                sb.append((<span class="keyword">char</span>)(Integer.parseInt(s) + <span class="number">55</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h4><p><font color="#dd0000">1B</font><br><font color="#dd0000">35</font></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>除X取余法查看博客：<a href="https://blog.zoutl.cn/20.html">进制</a>（第一张图片便是除2取余法）</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>资源分享平台</title>
    <url>/76.html</url>
    <content><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>GitHub地址：<a href="https://github.com/a6678696/InformationSharing">https://github.com/a6678696/InformationSharing</a></p>
<h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><p>本项目核心技术采用Spring Boot+Mybatis；开发工具idea；数据库MySQL5.6；模版引擎采用的是Thymeleaf；安全框架采用SpringSecurity；在线编辑器CKEditor；Lucene全文检索；Quartz定时任务；<a href="https://blog.zoutl.cn/64.html">基于JavaMail实现用QQ邮箱发送邮件 </a></p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="用户功能"><a href="#用户功能" class="headerlink" title="用户功能"></a>用户功能</h4><p>注册、登录、找回密码（通过邮箱获取验证码）、查看发布的资源、下载资源、Lucene全文搜索资源、发表评论、修改个人信息、管理个人资源、查看自己的资源下的评论、查看自己的下载信息、查看属于自己的消息</p>
<h4 id="管理员功能"><a href="#管理员功能" class="headerlink" title="管理员功能"></a>管理员功能</h4><p>用户管理（添加，修改，删除，查询，封禁或解禁用户，切换用户身份，给用户加积分和减积分）、资源类别管理（添加，修改，删除，查询）、资源管理（查看，删除，审核通过和不通过，设置热门与否，设置有效与否）、友情链接管理（添加，修改，删除，查询）、评论管理（删除，查询，审核通过和不通过）、下载信息管理（删除，查询）、消息管理（删除，查询，给用户发消息）、安全退出</p>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><h5 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214057.jpg" alt="img"></p>
<h5 id="Lucene全文搜索资源"><a href="#Lucene全文搜索资源" class="headerlink" title="Lucene全文搜索资源"></a>Lucene全文搜索资源</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214225.jpg" alt="img"></p>
<h5 id="查看资源详情"><a href="#查看资源详情" class="headerlink" title="查看资源详情"></a>查看资源详情</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214317.jpg" alt="img"></p>
<h5 id="下载资源"><a href="#下载资源" class="headerlink" title="下载资源"></a>下载资源</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214501.jpg" alt="img"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214539.jpg" alt="img"></p>
<h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117220623.jpg" alt="img"></p>
<h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117220717.jpg" alt="img"></p>
<h5 id="找回密码"><a href="#找回密码" class="headerlink" title="找回密码"></a>找回密码</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117220756.jpg" alt="img"></p>
<h5 id="用户中心页面"><a href="#用户中心页面" class="headerlink" title="用户中心页面"></a>用户中心页面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214651.jpg" alt="img"></p>
<h5 id="查看个人信息"><a href="#查看个人信息" class="headerlink" title="查看个人信息"></a>查看个人信息</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214812.jpg" alt="img"></p>
<h5 id="修改个人信息"><a href="#修改个人信息" class="headerlink" title="修改个人信息"></a>修改个人信息</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214732.jpg" alt="img"></p>
<h5 id="发布资源"><a href="#发布资源" class="headerlink" title="发布资源"></a>发布资源</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214858.jpg" alt="img"></p>
<h5 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117214946.jpg" alt="img"></p>
<h5 id="失效资源管理"><a href="#失效资源管理" class="headerlink" title="失效资源管理"></a>失效资源管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215028.jpg" alt="img"></p>
<h5 id="查看下载信息"><a href="#查看下载信息" class="headerlink" title="查看下载信息"></a>查看下载信息</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210119223132.jpg" alt="img"></p>
<h5 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215112.jpg" alt="img"></p>
<h5 id="查看系统消息"><a href="#查看系统消息" class="headerlink" title="查看系统消息"></a>查看系统消息</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215155.jpg" alt="img"></p>
<h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><h5 id="登录-1"><a href="#登录-1" class="headerlink" title="登录"></a>登录</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215341.jpg" alt="img"></p>
<h5 id="首页-1"><a href="#首页-1" class="headerlink" title="首页"></a>首页</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215248.jpg" alt="img"></p>
<h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215431.jpg" alt="img"></p>
<h5 id="资源类别管理"><a href="#资源类别管理" class="headerlink" title="资源类别管理"></a>资源类别管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215522.jpg" alt="img"></p>
<h5 id="资源管理-1"><a href="#资源管理-1" class="headerlink" title="资源管理"></a>资源管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215627.jpg" alt="img"></p>
<h5 id="友情链接管理"><a href="#友情链接管理" class="headerlink" title="友情链接管理"></a>友情链接管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215710.jpg" alt="img"></p>
<h5 id="评论管理-1"><a href="#评论管理-1" class="headerlink" title="评论管理"></a>评论管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215756.jpg" alt="img"></p>
<h5 id="下载信息管理"><a href="#下载信息管理" class="headerlink" title="下载信息管理"></a>下载信息管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215843.jpg" alt="img"></p>
<h5 id="消息管理"><a href="#消息管理" class="headerlink" title="消息管理"></a>消息管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117215925.jpg" alt="img"></p>
<h5 id="安全退出"><a href="#安全退出" class="headerlink" title="安全退出"></a>安全退出</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210117220004.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Java域宽</title>
    <url>/78.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>用于存放输出数据的宽度称为“域宽”</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数字4代表域宽为4</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;%4d&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.printf(<span class="string">&quot;%4d&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.printf(<span class="string">&quot;%4d&quot;</span>,<span class="number">123</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.printf(<span class="string">&quot;%4d&quot;</span>,<span class="number">1234</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.printf(<span class="string">&quot;%4d&quot;</span>,<span class="number">12345</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210120104008.jpg" alt="img"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>确定域宽为4</p>
<p>输出1时，前面有3个空格；</p>
<p>输出12时，前面有2个空格；</p>
<p>输出123时，前面有1个空格；</p>
<p>输出1234时，前面有0个空格；</p>
<p>输出12345时，此时长度超过域宽则直接输出；</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>最终结果不用科学计数</title>
    <url>/79.html</url>
    <content><![CDATA[<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;科学计数:&quot;</span>);</span><br><span class="line">    System.out.println(<span class="number">20</span>*<span class="number">3.156</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;不是科学计数:&quot;</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> BigDecimal(<span class="number">20</span>*<span class="number">3.156</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>*<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210121202425.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>标识符</title>
    <url>/8.html</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在程序中自定义的一些名称，例如：类名</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>由 26 个英文字母大小写，数字：0-9，符号：_、$组成</p>
<h3 id="定义合法标识符规则"><a href="#定义合法标识符规则" class="headerlink" title="定义合法标识符规则"></a>定义合法标识符规则</h3><ol>
<li><p>数字不可以开头，例如：2Demo 就不可以。</p>
</li>
<li><p>不可以使用关键字，例如：public 就不可以，因为 public 是关键字</p>
</li>
<li><p>不可以包含“_、$”以外的特殊符号，例如：“Demo Test”就不可以，其中的空格就是特殊符号</p>
</li>
</ol>
<h3 id="Java中的名称规范"><a href="#Java中的名称规范" class="headerlink" title="Java中的名称规范"></a><strong>Java中的名称规范</strong></h3><h4 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h4><p>多单词组成时所有字母都小写</p>
<p>例如：xxxyyyzzz</p>
<h4 id="类名接口名"><a href="#类名接口名" class="headerlink" title="类名接口名"></a>类名接口名</h4><p>多单词组成时，所有单词的首字母大写</p>
<p>例如：XxxYyyZzz</p>
<h4 id="变量名和函数名"><a href="#变量名和函数名" class="headerlink" title="变量名和函数名"></a>变量名和函数名</h4><p>多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写</p>
<p>例如：xxxYyyZzz</p>
<h4 id="常量名"><a href="#常量名" class="headerlink" title="常量名"></a>常量名</h4><p>所有字母都大写，多单词时每个单词用下划线连接</p>
<p>例如：XXX_YYY_ZZZ</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><ol>
<li><p>Java中严格区分大小写</p>
</li>
<li><p>在起名字时，为了提高阅读性，要尽量有意义</p>
</li>
<li><p>公司中经常会通过“_”代表某一类名称，例如：_temp</p>
</li>
<li><p>通过“$”分隔主名称与子名称，例如：TrafficLamp$Red</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java保留两位小数</title>
    <url>/80.html</url>
    <content><![CDATA[<h3 id="String的format方法"><a href="#String的format方法" class="headerlink" title="String的format方法"></a>String的format方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> a=<span class="number">12.3333f</span>;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%.2f&quot;</span>,a));</span><br></pre></td></tr></table></figure>

<h3 id="DecimalFormat的format方法"><a href="#DecimalFormat的format方法" class="headerlink" title="DecimalFormat的format方法"></a>DecimalFormat的format方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> a=<span class="number">12.3333f</span>;</span><br><span class="line">DecimalFormat decimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;#.00&quot;</span>);</span><br><span class="line">System.out.println(decimalFormat.format(a));</span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a=<span class="number">12.3333f</span>;</span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%.2f&quot;</span>,a));</span><br><span class="line">    DecimalFormat decimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;#.00&quot;</span>);</span><br><span class="line">    System.out.println(decimalFormat.format(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><font color="#dd0000">12.33</font><br><font color="#dd0000">12.33</font></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>计算某年某月有多少天</title>
    <url>/81.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>可快速计算某年是否是闰年，因为可以知道了二月有多少天</p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">        String str = sc.nextLine();</span><br><span class="line">        <span class="keyword">int</span> year = Integer.parseInt(str.split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> mouth = Integer.parseInt(str.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">        Calendar calendar=Calendar.getInstance();</span><br><span class="line">        <span class="comment">//设置年份</span></span><br><span class="line">        calendar.set(Calendar.YEAR, year);</span><br><span class="line">        <span class="comment">//设置月份</span></span><br><span class="line">        calendar.set(Calendar.MONTH, mouth-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获得该年该月份的最大天数</span></span><br><span class="line">        <span class="keyword">int</span> lastDay=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(lastDay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><font color="#dd0000">2008 2</font><br><font color="#dd0000">29</font></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决：Windows10左下角电池图标不见了</title>
    <url>/82.html</url>
    <content><![CDATA[<h3 id="打开计算机管理"><a href="#打开计算机管理" class="headerlink" title="打开计算机管理"></a>打开计算机管理</h3><blockquote>
<p>打开此电脑，选择管理</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210122131456.jpg" alt="img"></p>
<h3 id="找到电池选项"><a href="#找到电池选项" class="headerlink" title="找到电池选项"></a>找到电池选项</h3><blockquote>
<p>点击左边菜单的设备管理器，然后找到电池</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210122131653.jpg" alt="img"></p>
<h3 id="禁用再启用"><a href="#禁用再启用" class="headerlink" title="禁用再启用"></a>禁用再启用</h3><blockquote>
<p>分别对电池下的两个选项右键点击，然后禁用设备，再启用设备即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210122131845.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA Debug循环跳到指定次数</title>
    <url>/83.html</url>
    <content><![CDATA[<h3 id="打开循环设置"><a href="#打开循环设置" class="headerlink" title="打开循环设置"></a>打开循环设置</h3><blockquote>
<p>开始前先关闭程序(或终止循环)，右键点击红色圆圈●，然后点击蓝色字体链接More或者按下图中指定快捷键</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210124150736.jpg" alt="img"></p>
<h3 id="设置循环次数"><a href="#设置循环次数" class="headerlink" title="设置循环次数"></a>设置循环次数</h3><blockquote>
<p>勾选Pass count，输入目标循环次数，点击右下角的Done按钮，然后开始该循环即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210124151053.jpg" alt="img"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote>
<p>如图，循环一开始就到了第15次，即i=14</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210124151444.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>二元运算符连接两个值</title>
    <url>/84.html</url>
    <content><![CDATA[<p>当用一个二元运算符连接两个值时（例如a+b，a是整数，b是浮点数），先要将两个操作数转换成同一种类型，然后再进行计算</p>
<p>如果两个数中有一个是double类型，则另一个会转换成double类型（不满足当前条件则向下判断）</p>
<p>否则，如果两个数中有一个是float类型，则另一个会转换成float类型</p>
<p>否则，如果两个数中有一个是long类型，则另一个会转换成long类型</p>
<p>否则，两个数都被转换成int类型</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用天气插件</title>
    <url>/85.html</url>
    <content><![CDATA[<h3 id="进入网址"><a href="#进入网址" class="headerlink" title="进入网址"></a>进入网址</h3><p><a href="https://www.tianqi.com/plugin/">天气预报代码_天气预报插件_免费天气预报代码(插件)调用——天气网</a></p>
<h3 id="选择天气样式代码"><a href="#选择天气样式代码" class="headerlink" title="选择天气样式代码"></a>选择天气样式代码</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210131013530.jpg" alt="img"></p>
<span id="more"></span>

<h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">hspace</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://i.tianqi.com/?c=code&amp;a=getcode&amp;id=35&amp;py=chongqing&amp;site=34&amp;icon=1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果要获取某一城市的天气，修改py的值即可（py的值为该城市的拼音且全部是小写），如果根据用户地址获取天气则将&amp;py=chongqing删除</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>:hover实现鼠标悬停效果</title>
    <url>/86.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>:hover</code>选择器用于选择鼠标指针浮动在上面的元素</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.test</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>鼠标悬停在a标签上时会将字体大小设置为15px</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现点击图片查看原图</title>
    <url>/87.html</url>
    <content><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码:"></a>html代码:</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outerdiv&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">style</span>=<span class="string">&quot;position:fixed;top:0;left:0;background:rgba(0,0,0,0.7);z-index:2;width:100%;height:100%;display:none;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;innerdiv&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;bigimg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:5px solid #fff;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: yellow;text-align: center&quot;</span>&gt;</span>************************点击图片外任何区域即可关闭图片************************<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使所有图片都生效 </span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;img&quot;</span>).addClass(<span class="string">&quot;pimg&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//图片放大</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    $(<span class="string">&quot;.pimg&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = $(<span class="built_in">this</span>);<span class="comment">//将当前的pimg元素作为_this传入函数</span></span><br><span class="line">        imgShow(<span class="string">&quot;#outerdiv&quot;</span>, <span class="string">&quot;#innerdiv&quot;</span>, <span class="string">&quot;#bigimg&quot;</span>, _this);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgShow</span>(<span class="params">outerdiv, innerdiv, bigimg, _this</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> src = _this.attr(<span class="string">&quot;src&quot;</span>);<span class="comment">//获取当前点击的pimg元素中的src属性</span></span><br><span class="line">    $(bigimg).attr(<span class="string">&quot;src&quot;</span>, src);<span class="comment">//设置#bigimg元素的src属性</span></span><br><span class="line">    <span class="comment">/*获取当前点击图片的真实大小，并显示弹出层及大图*/</span></span><br><span class="line">    $(<span class="string">&quot;&lt;img/&gt;&quot;</span>).attr(<span class="string">&quot;src&quot;</span>, src).load(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> windowW = $(<span class="built_in">window</span>).width(); <span class="comment">//获取当前窗口宽度</span></span><br><span class="line">        <span class="keyword">var</span> windowH = $(<span class="built_in">window</span>).height(); <span class="comment">//获取当前窗口高度</span></span><br><span class="line">        <span class="keyword">var</span> realWidth = <span class="built_in">this</span>.width; <span class="comment">//获取图片真实宽度</span></span><br><span class="line">        <span class="keyword">var</span> realHeight = <span class="built_in">this</span>.height; <span class="comment">//获取图片真实高度</span></span><br><span class="line">        <span class="keyword">var</span> imgWidth, imgHeight;</span><br><span class="line">        <span class="keyword">var</span> scale = <span class="number">0.8</span>; <span class="comment">//缩放尺寸，当图片真实宽度和高度大于窗口宽度和高度时进行缩放</span></span><br><span class="line">        <span class="keyword">if</span> (realHeight &gt; windowH * scale) &#123; <span class="comment">//判断图片高度</span></span><br><span class="line">            imgHeight = windowH * scale; <span class="comment">//如大于窗口高度，图片高度进行缩放</span></span><br><span class="line">            imgWidth = imgHeight / realHeight * realWidth; <span class="comment">//等比例缩放宽度</span></span><br><span class="line">            <span class="keyword">if</span> (imgWidth &gt; windowW * scale) &#123; <span class="comment">//如宽度扔大于窗口宽度</span></span><br><span class="line">                imgWidth = windowW * scale; <span class="comment">//再对宽度进行缩放</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (realWidth &gt; windowW * scale) &#123; <span class="comment">//如图片高度合适，判断图片宽度</span></span><br><span class="line">            imgWidth = windowW * scale; <span class="comment">//如大于窗口宽度，图片宽度进行缩放</span></span><br><span class="line">            imgHeight = imgWidth / realWidth * realHeight; <span class="comment">//等比例缩放高度</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果图片真实高度和宽度都符合要求，高宽不变</span></span><br><span class="line">            imgWidth = realWidth;</span><br><span class="line">            imgHeight = realHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        $(bigimg).css(<span class="string">&quot;width&quot;</span>, imgWidth); <span class="comment">//以最终的宽度对图片缩放</span></span><br><span class="line">        <span class="keyword">var</span> w = (windowW - imgWidth) / <span class="number">2</span>; <span class="comment">//计算图片与窗口左边距</span></span><br><span class="line">        <span class="keyword">var</span> h = (windowH - imgHeight) / <span class="number">2</span>; <span class="comment">//计算图片与窗口上边距</span></span><br><span class="line">        $(innerdiv).css(&#123;<span class="string">&quot;top&quot;</span>: h, <span class="string">&quot;left&quot;</span>: w&#125;); <span class="comment">//设置#innerdiv的top和left属性</span></span><br><span class="line">        $(outerdiv).fadeIn(<span class="string">&quot;fast&quot;</span>); <span class="comment">//淡入显示#outerdiv及.pimg</span></span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    $(outerdiv).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//再次点击淡出消失弹出层</span></span><br><span class="line">        $(<span class="built_in">this</span>).fadeOut(<span class="string">&quot;fast&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210203134727.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://www.cnblogs.com/wentutu/p/11271732.html#autoid-0-0-0">点击小图查看原图 - 素衣居士 - 博客园</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java从键盘输入的三种方法</title>
    <url>/89.html</url>
    <content><![CDATA[<h3 id="System-in的read方法"><a href="#System-in的read方法" class="headerlink" title="System.in的read方法"></a>System.in的read方法</h3><p>这种方式极其简单，但是只能读入一个字符，且必须是字符类型，输出该字符的ASCII码。（如果输入字符串，则指能读入第一个字符，在下面的截图中可以看到：输入ab时输出了97，那么我们可以判断出只能读入第一个字符，因为a的ASCII码是97）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = System.in.read();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210207102420.jpg" alt="img"></p>
<h3 id="InputStreamReader和BufferedReader方法"><a href="#InputStreamReader和BufferedReader方法" class="headerlink" title="InputStreamReader和BufferedReader方法"></a>InputStreamReader和BufferedReader方法</h3><p>这种方式可以读取一个字符串，但是如果需要读取int，float等类型仍需要自己转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStreamReader is = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(is);</span><br><span class="line">    String name = br.readLine();</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h3><p>这种方式使用java5之后添加的Scanner类，Scanner类提供了读取int，float及字符串的方法，使用十分方便。同时，Scanner不仅可以读取键盘输入值，也可以读取文件内容，只需要将构造方法中的数据来源切换成该文件即可</p>
<p>如果先读取int，float，再读取字符串，要让指针移到下一行开头，不然读取不了字符串，<code>反过来读取就没问题</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line">    <span class="keyword">float</span> f = sc.nextFloat();</span><br><span class="line">    String s = sc.nextLine();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    System.out.println(f);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220317122927580.png" alt="image-20220317122927580"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/qq_24629159/article/details/83960174">java 读取键盘输入_呼延十-CSDN博客_java读取键盘输入</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot引入Thymeleaf</title>
    <url>/88.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="HMTL页面修改"><a href="#HMTL页面修改" class="headerlink" title="HMTL页面修改"></a>HMTL页面修改</h3><p>找到html标签头部&lt;html&gt;，一般在.html文件第二行</p>
<h4 id="修改前"><a href="#修改前" class="headerlink" title="修改前"></a>修改前</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了让HTML代码页面变得美观，可加入<code>&lt;!--suppress ALL--&gt;</code>抑制所有警告（html标签头部<code>&lt;html&gt;</code>前加入即可）</p>
<p>至此，Spring Boot引入Thymeleaf的操作已完成</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat运行web项目不带项目名字</title>
    <url>/9.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>默认情况下，项目发布到 Tomcat ，要运行项目，浏览器访问路径是这样的： <code>http://localhost:8080/MyBlog</code> </p>
<h3 id="改端口"><a href="#改端口" class="headerlink" title="改端口"></a>改端口</h3><p>首先在 Tomcat 安装目录的 config 文件夹中找到 server.xml ，然后找到如下代码并将端口 8080 改为 80 ，这样我们访问项目时就不需要加端口号了，访问路径为：<code>http://localhost/MyBlog</code> ，也可以加上端口号80，不过一般都是省略掉的</p>
<p>修改前：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;80&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改访问路径"><a href="#修改访问路径" class="headerlink" title="修改访问路径"></a>修改访问路径</h3><p>然后在最下面继续找到 Host 节点，在里面添加如下代码（路径为 webapps 中项目的路径）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;F:\java\apache-tomcat-9.0.22-windows-x64\apache-tomcat-9.0.22\webapps\MyBlog&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20201010181120.jpg" alt="20210227090442.jpg"></p>
<p>最后的访问路径为：<code>http://localhost</code> </p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>前端实现返回顶部</title>
    <url>/91.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#gotop&quot;</span> <span class="attr">title</span>=<span class="string">&quot;返回顶部&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/images/top2.png&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gotop&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;bottom: 10%;display: none;height: 40px;margin-left: 96%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回顶部图标出现或者消失</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="built_in">window</span>).scrollTop() &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;#gotop&quot;</span>).fadeIn(<span class="number">1000</span>);<span class="comment">//一秒渐入动画</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;#gotop&quot;</span>).fadeOut(<span class="number">1000</span>);<span class="comment">//一秒渐隐动画</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        $(<span class="string">&quot;#gotop&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;body,html&#x27;</span>).animate(&#123;<span class="attr">scrollTop</span>: <span class="number">0</span>&#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Thymeleaf常用属性总结</title>
    <url>/90.html</url>
    <content><![CDATA[<h3 id="th-text"><a href="#th-text" class="headerlink" title="th:text"></a>th:text</h3><p>用于显示转义后的文本（不尊重我们的HTML标记而对其进行转义）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:text=&quot;$&#123;blog.title&#125;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:text=&quot;$&#123;#strings.abbreviate(blog.title,18)&#125;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:text=&quot;$&#123;#dates.format(blog.releaseDate,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="th-utext"><a href="#th-utext" class="headerlink" title="th:utext"></a>th:utext</h3><p>用于显示未转义的文本（尊重我们的HTML标记而不对其进行转义）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:utext=&quot;$&#123;blog.content&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="th-if"><a href="#th-if" class="headerlink" title="th:if"></a>th:if</h3><p>条件判断，条件成立则在页面中显示，不成立则不显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:if=&quot;$&#123;blog!=null&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="th-each"><a href="#th-each" class="headerlink" title="th:each"></a>th:each</h3><p>循环语句，如果要显示一个List集合的所有内容则使用循环遍历，下面代码中blogList代表要循环遍历的集合，blog则代表集合中的每个元素（或实体）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;blog:$&#123;blogList&#125;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="th-href"><a href="#th-href" class="headerlink" title="th:href"></a>th:href</h3><p>a标签的href链接、或者是HTML头文件的link引入地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:href=&quot;@&#123;&#x27;/?page=1&amp;articleTypeId=&#x27;+$&#123;articleType.id&#125;&#125;&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/vendor/bootstrap/css/bootstrap.min.css&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="th-src"><a href="#th-src" class="headerlink" title="th:src"></a>th:src</h3><p>img标签的图片链接、或者是HTML头文件的script引入地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:src=&quot;@&#123;&#x27;/static/images/userImage/&#x27;+$&#123;comment.user.imageName&#125;&#125;&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="th-title"><a href="#th-title" class="headerlink" title="th:title"></a>th:title</h3><p>描述了元素的额外信息 (作为工具条使用)，当页面上无法显示全部文本时，可通过title实现鼠标悬停实现查看全部文本信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:title=&quot;$&#123;blog.title&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="th-style"><a href="#th-style" class="headerlink" title="th:style"></a>th:style</h3><p>行内样式，可以结合条件表达式实现动态选择（满足条件表达式则选择第一个结果，不满足则选择第二种结果）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:style=&quot;$&#123;articleTypeId == &#x27;&#x27;+articleType.id+&#x27;&#x27;?&#x27;margin-left: 6px;color:red;float: left&#x27;:&#x27;margin-left: 6px;float: left;color:#1e9fff&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="th-value"><a href="#th-value" class="headerlink" title="th:value"></a>th:value</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:value=&quot;$&#123;goodsTypeId&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="只需要List的部分元素"><a href="#只需要List的部分元素" class="headerlink" title="只需要List的部分元素"></a>只需要List的部分元素</h3><p>当一个集合中的元素数量超过我们需要显示的元素数量时，可使用……Stat.count和th:if（省略号处根据具体情况填写）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;recommendBlog:$&#123;recommendBlogList&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;recommendBlogStat.count&lt;=10&#125;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取随机数"><a href="#获取随机数" class="headerlink" title="获取随机数"></a>获取随机数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;#numbers.formatDecimal(T(java.lang.Math).floor(T(java.lang.Math).random()*3)+1,1,0)&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA版本更新</title>
    <url>/92.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.jetbrains.com/zh-cn/">JetBrains: 软件开发人员和团队的必备工具</a></p>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>可以先保存当前idea配置（查看链接：<a href="/63.html">idea导出配置和导入配置的方法</a>）</p>
<blockquote>
<p>找到idea安装目录下的bin文件夹的Uninstall.exe并点击开始卸载</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210213083349.jpg" alt="img"></p>
<blockquote>
<p>勾选下图中的选项，只勾选划红线的第一个选项，不要勾选第二个（不然新版本安装后无法读取原来配置和插件），然后开始卸载等待完成即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210213084401.jpg" alt="img"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>选择安装路径</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210213111642.jpg" alt="img"></p>
<blockquote>
<p>配置，然后点击下一步安装即可</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210213111832.jpg" alt="img"></p>
<h3 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210213114552.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>实现鼠标移到图片改变，移出图片恢复原来图片</title>
    <url>/93.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;imgdiv&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#gotop&quot;</span> <span class="attr">title</span>=<span class="string">&quot;返回顶部&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/images/top2.png&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gotop&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;imgsrc&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">style</span>=<span class="string">&quot;position: fixed;bottom: 10%;display: none;height: 40px;margin-left: 96%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.imgdiv&quot;</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.imgsrc&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;/static/images/top4.png&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;.imgdiv&quot;</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.imgsrc&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;/static/images/top2.png&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/u014599700/article/details/69382414?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">JQuery鼠标移到图片改变，移出图片恢复原来图片_u014599700的专栏-CSDN博客</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>遍历HashMap的四种方法</title>
    <url>/94.html</url>
    <content><![CDATA[<h3 id="创建HashMap集合"><a href="#创建HashMap集合" class="headerlink" title="创建HashMap集合"></a>创建HashMap集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">hashMap.put(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">hashMap.put(<span class="number">2</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">hashMap.put(<span class="number">3</span>, <span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="keySet"><a href="#keySet" class="headerlink" title="keySet()"></a>keySet()</h4><p>使用keySet()方法，先遍历键，再取出值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Integer key : hashMap.keySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;key=&quot;</span> + key + <span class="string">&quot;,value=&quot;</span> + hashMap.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h4><p>使用values()方法，直接遍历值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String value : hashMap.values()) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="entrySet"><a href="#entrySet" class="headerlink" title="entrySet()"></a>entrySet()</h4><p>使用entrySet()方法，然后通过getKey()和getValue()分别取键和值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry entry : hashMap.entrySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;key=&quot;</span> + entry.getKey() + <span class="string">&quot;,value=&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ForEach"><a href="#ForEach" class="headerlink" title="ForEach()"></a>ForEach()</h4><p>通过ForEach()方法直接遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashMap.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot;,&quot;</span> + value));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>实现鼠标移动到div块时自动加阴影效果</title>
    <url>/95.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shadow&quot;</span>&gt;</span></span><br><span class="line">    //已省略无关代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shadow</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">transition-duration</span>: <span class="number">0.5s</span>; <span class="comment">/*停留时间显示*/</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.shadow</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="number">#337ab7</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">box-shadow</span>: <span class="number">#337ab7</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">#337ab7</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210311223347.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/tenggeer0789/article/details/89478859">css怎么实现鼠标移动到div块时自动加阴影效果？_tenggeer0789的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>给网站添加鼠标点击弹出指定汉字特效</title>
    <url>/96.html</url>
    <content><![CDATA[<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 鼠标特效 */</span></span><br><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;富强&quot;</span>, <span class="string">&quot;民主&quot;</span>, <span class="string">&quot;文明&quot;</span>, <span class="string">&quot;和谐&quot;</span>, <span class="string">&quot;自由&quot;</span>, <span class="string">&quot;平等&quot;</span>, <span class="string">&quot;公正&quot;</span>, <span class="string">&quot;法治&quot;</span>, <span class="string">&quot;爱国&quot;</span>, <span class="string">&quot;敬业&quot;</span>, <span class="string">&quot;诚信&quot;</span>, <span class="string">&quot;友善&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> $i = $(<span class="string">&quot;&quot;</span>).text(a[a_idx]);</span><br><span class="line">        a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">            y = e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            <span class="string">&quot;z-index&quot;</span>: <span class="number">999999999999999999999999999999999999999999999999999999999999999999999</span>,</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: y - <span class="number">20</span>,</span><br><span class="line">            <span class="string">&quot;left&quot;</span>: x,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">            <span class="string">&quot;font-weight&quot;</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">            <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ff6651&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&quot;body&quot;</span>).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">                <span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>,</span><br><span class="line">                <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="number">1500</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $i.remove();</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210312043951.jpg" alt="img"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://blog.csdn.net/qq_42853046/article/details/81330578">给网站添加鼠标点击弹出指定汉字特效_无耳貂的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>给网站添加雪花特效</title>
    <url>/97.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><p>放在&lt;body&gt;标签前</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;snowMask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*网站雪花特效*/</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> snow &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="number">0</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">500px</span> <span class="number">500px</span>, <span class="number">1000px</span> <span class="number">500px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@keyframes</span> snow &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="number">0</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">500px</span> <span class="number">500px</span>, <span class="number">1000px</span> <span class="number">500px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">05</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-id">#snowMask</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/static/images/snow1.png</span>), <span class="built_in">url</span>(<span class="string">/static/images/snow2.png</span>);</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: <span class="number">10s</span> snow linear infinite;</span><br><span class="line">    <span class="attribute">animation</span>: <span class="number">10s</span> snow linear infinite;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="雪花图片网盘链接"><a href="#雪花图片网盘链接" class="headerlink" title="雪花图片网盘链接"></a>雪花图片网盘链接</h3><p>百度网盘链接：<a href="https://pan.baidu.com/s/1A3LP21J-Xf-D_Ol2DQrhbw">https://pan.baidu.com/s/1A3LP21J-Xf-D_Ol2DQrhbw</a></p>
<p>提取码：<code>9e1g</code></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="http://www.seocid.com/561.html">纯CSS添加雪花网站动态背景特效兼容性好！-西德SEO</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>实现文字闪烁效果</title>
    <url>/98.html</url>
    <content><![CDATA[<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>闪烁效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*文字闪烁*/</span></span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">animation</span>: changeshadow <span class="number">6s</span>  ease-in  infinite ;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: changeshadow <span class="number">6s</span> linear infinite;</span><br><span class="line">    -moz-<span class="attribute">animation</span>: changeshadow <span class="number">6s</span> linear infinite;</span><br><span class="line">    -ms-<span class="attribute">animation</span>: changeshadow <span class="number">6s</span> linear infinite;</span><br><span class="line">    -o-<span class="attribute">animation</span>: changeshadow <span class="number">6s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> changeshadow &#123;</span><br><span class="line">    <span class="number">0%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">    <span class="number">50%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> red&#125;</span><br><span class="line">    <span class="number">100%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> changeshadow &#123;</span><br><span class="line">    <span class="number">0%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">    <span class="number">50%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> red&#125;</span><br><span class="line">    <span class="number">100%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> changeshadow &#123;</span><br><span class="line">    <span class="number">0%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">    <span class="number">50%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> red&#125;</span><br><span class="line">    <span class="number">100%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-ms-keyframes</span> changeshadow &#123;</span><br><span class="line">    <span class="number">0%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">    <span class="number">50%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> red&#125;</span><br><span class="line">    <span class="number">100%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-o-keyframes</span> changeshadow &#123;</span><br><span class="line">    <span class="number">0%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">    <span class="number">50%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> red&#125;</span><br><span class="line">    <span class="number">100%</span>&#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> red&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>来源：<a href="https://vircloud.net/operations/html5-effct.html">一些有趣的 html/css 特效</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>解决：关于百度文库等网站无法复制</title>
    <url>/99.html</url>
    <content><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>以最新版Edge浏览器浏览器为例，安装SuperCopy扩展，微软中国官方扩展商店地址如下：</p>
<p><a href="https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home">https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home</a></p>
<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>搜索并安装该扩展，安装完成后打开百度文库的文档，然后点击浏览器菜单栏的该扩展图标，在出现的框框中点击中间的图片使之编成蓝色，再刷新该网站即可复制文档的内容</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/20210312040314.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA快捷键大全</title>
    <url>/1.html</url>
    <content><![CDATA[<h3 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h3><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Alt + `</td>
<td align="center">显示版本控制常用操作菜单弹出层</td>
</tr>
<tr>
<td align="center">Alt + Q</td>
<td align="center">弹出一个提示，显示当前类的声明 / 上下文信息</td>
</tr>
<tr>
<td align="center">Alt + F1</td>
<td align="center">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td>
</tr>
<tr>
<td align="center">Alt + F2</td>
<td align="center">对于前面页面，显示各类浏览器打开目标选择弹出层</td>
</tr>
<tr>
<td align="center">Alt + F3</td>
<td align="center">选中文本，逐个往下查找相同文本，并高亮显示</td>
</tr>
<tr>
<td align="center">Alt + F7</td>
<td align="center">查找光标所在的方法 / 变量 / 类被调用的地方</td>
</tr>
<tr>
<td align="center">Alt + F8</td>
<td align="center">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td>
</tr>
<tr>
<td align="center">Alt + Home</td>
<td align="center">定位 / 显示到当前文件的 <code>Navigation Bar</code></td>
</tr>
<tr>
<td align="center">Alt + Enter</td>
<td align="center">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Alt + Insert</td>
<td align="center">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td>
</tr>
<tr>
<td align="center">Alt + 左方向键</td>
<td align="center">按左方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td align="center">Alt + 右方向键</td>
<td align="center">按右方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td align="center">Alt + 前方向键</td>
<td align="center">当前光标跳转到当前文件的前一个方法名位置</td>
</tr>
<tr>
<td align="center">Alt + 后方向键</td>
<td align="center">当前光标跳转到当前文件的后一个方法名位置</td>
</tr>
<tr>
<td align="center">Alt + 1,2,3…9</td>
<td align="center">显示对应数值的选项卡，其中 1 是 Project 用得最多</td>
</tr>
</tbody></table>
<h3 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h3><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl + F</td>
<td align="center">在当前文件进行文本查找 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + R</td>
<td align="center">在当前文件进行文本替换 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Z</td>
<td align="center">撤销 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Y</td>
<td align="center">删除光标所在行 或 删除选中的行 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + X</td>
<td align="center">剪切光标所在行 或 剪切选择内容</td>
</tr>
<tr>
<td align="center">Ctrl + C</td>
<td align="center">复制光标所在行 或 复制选择内容</td>
</tr>
<tr>
<td align="center">Ctrl + D</td>
<td align="center">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + W</td>
<td align="center">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + E</td>
<td align="center">显示最近打开的文件记录列表</td>
</tr>
<tr>
<td align="center">Ctrl + N</td>
<td align="center">根据输入的 <strong>类名</strong> 查找类文件</td>
</tr>
<tr>
<td align="center">Ctrl + G</td>
<td align="center">在当前文件跳转到指定行处</td>
</tr>
<tr>
<td align="center">Ctrl + J</td>
<td align="center">插入自定义动态代码模板</td>
</tr>
<tr>
<td align="center">Ctrl + P</td>
<td align="center">方法参数提示显示</td>
</tr>
<tr>
<td align="center">Ctrl + Q</td>
<td align="center">光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td>
</tr>
<tr>
<td align="center">Ctrl + U</td>
<td align="center">前往当前光标所在的方法的父类的方法 / 接口定义</td>
</tr>
<tr>
<td align="center">Ctrl + B</td>
<td align="center">进入光标所在的方法/变量的接口或是定义出，等效于 <code>Ctrl + 左键单击</code></td>
</tr>
<tr>
<td align="center">Ctrl + K</td>
<td align="center">版本控制提交项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td align="center">Ctrl + T</td>
<td align="center">版本控制更新项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td align="center">Ctrl + H</td>
<td align="center">显示当前类的层次结构</td>
</tr>
<tr>
<td align="center">Ctrl + O</td>
<td align="center">选择可重写的方法</td>
</tr>
<tr>
<td align="center">Ctrl + I</td>
<td align="center">选择可继承的方法</td>
</tr>
<tr>
<td align="center">Ctrl + +</td>
<td align="center">展开代码</td>
</tr>
<tr>
<td align="center">Ctrl + -</td>
<td align="center">折叠代码</td>
</tr>
<tr>
<td align="center">Ctrl + /</td>
<td align="center">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + [</td>
<td align="center">移动光标到当前所在代码的花括号开始位置</td>
</tr>
<tr>
<td align="center">Ctrl + ]</td>
<td align="center">移动光标到当前所在代码的花括号结束位置</td>
</tr>
<tr>
<td align="center">Ctrl + F1</td>
<td align="center">在光标所在的错误代码出显示错误信息</td>
</tr>
<tr>
<td align="center">Ctrl + F3</td>
<td align="center">调转到所选中的词的下一个引用位置</td>
</tr>
<tr>
<td align="center">Ctrl + F4</td>
<td align="center">关闭当前编辑文件</td>
</tr>
<tr>
<td align="center">Ctrl + F8</td>
<td align="center">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>
</tr>
<tr>
<td align="center">Ctrl + F9</td>
<td align="center">执行 Make Project 操作</td>
</tr>
<tr>
<td align="center">Ctrl + F11</td>
<td align="center">选中文件 / 文件夹，使用助记符设定 / 取消书签</td>
</tr>
<tr>
<td align="center">Ctrl + F12</td>
<td align="center">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td>
</tr>
<tr>
<td align="center">Ctrl + Tab</td>
<td align="center">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td>
</tr>
<tr>
<td align="center">Ctrl + Enter</td>
<td align="center">智能分隔行</td>
</tr>
<tr>
<td align="center">Ctrl + End</td>
<td align="center">跳到文件尾</td>
</tr>
<tr>
<td align="center">Ctrl + Home</td>
<td align="center">跳到文件头</td>
</tr>
<tr>
<td align="center">Ctrl + Space</td>
<td align="center">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code> <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Delete</td>
<td align="center">删除光标后面的单词或是中文句</td>
</tr>
<tr>
<td align="center">Ctrl + BackSpace</td>
<td align="center">删除光标前面的单词或是中文句</td>
</tr>
<tr>
<td align="center">Ctrl + 1,2,3…9</td>
<td align="center">定位到对应数值的书签位置</td>
</tr>
<tr>
<td align="center">Ctrl + 左键单击</td>
<td align="center">在打开的文件标题上，弹出该文件路径</td>
</tr>
<tr>
<td align="center">Ctrl + 光标定位</td>
<td align="center">按 Ctrl 不要松开，会显示光标所在的类信息摘要</td>
</tr>
<tr>
<td align="center">Ctrl + 左方向键</td>
<td align="center">光标跳转到当前单词 / 中文句的左侧开头位置</td>
</tr>
<tr>
<td align="center">Ctrl + 右方向键</td>
<td align="center">光标跳转到当前单词 / 中文句的右侧开头位置</td>
</tr>
<tr>
<td align="center">Ctrl + 前方向键</td>
<td align="center">等效于鼠标滚轮向前效果</td>
</tr>
<tr>
<td align="center">Ctrl + 后方向键</td>
<td align="center">等效于鼠标滚轮向后效果</td>
</tr>
</tbody></table>
<h3 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h3><table>
<thead>
<tr>
<th align="center"><strong>快捷键</strong></th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Shift + F1</td>
<td align="center">如果有外部文档可以连接外部文档</td>
</tr>
<tr>
<td align="center">Shift + F2</td>
<td align="center">跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td align="center">Shift + F3</td>
<td align="center">在查找模式下，查找匹配上一个</td>
</tr>
<tr>
<td align="center">Shift + F4</td>
<td align="center">对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td>
</tr>
<tr>
<td align="center">Shift + F6</td>
<td align="center">对文件 / 文件夹 重命名</td>
</tr>
<tr>
<td align="center">Shift + F7</td>
<td align="center">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td align="center">Shift + F8</td>
<td align="center">在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td>
</tr>
<tr>
<td align="center">Shift + F9</td>
<td align="center">等效于点击工具栏的 <code>Debug</code> 按钮</td>
</tr>
<tr>
<td align="center">Shift + F10</td>
<td align="center">等效于点击工具栏的 <code>Run</code> 按钮</td>
</tr>
<tr>
<td align="center">Shift + F11</td>
<td align="center">弹出书签显示层</td>
</tr>
<tr>
<td align="center">Shift + Tab</td>
<td align="center">取消缩进</td>
</tr>
<tr>
<td align="center">Shift + ESC</td>
<td align="center">隐藏当前 或 最后一个激活的工具窗口</td>
</tr>
<tr>
<td align="center">Shift + End</td>
<td align="center">选中光标到当前行尾位置</td>
</tr>
<tr>
<td align="center">Shift + Home</td>
<td align="center">选中光标到当前行头位置</td>
</tr>
<tr>
<td align="center">Shift + Enter</td>
<td align="center">开始新一行。光标所在行下空出一行，光标定位到新行位置</td>
</tr>
<tr>
<td align="center">Shift + 左键单击</td>
<td align="center">在打开的文件名上按此快捷键，可以关闭当前打开文件</td>
</tr>
<tr>
<td align="center">Shift + 滚轮前后滚动</td>
<td align="center">当前文件的横向滚动轴滚动</td>
</tr>
</tbody></table>
<h3 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h3><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl + Alt + L</td>
<td align="center">格式化代码，可以对当前文件和整个包目录使用 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Alt + O</td>
<td align="center">优化导入的类，可以对当前文件和整个包目录使用 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Alt + I</td>
<td align="center">光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + T</td>
<td align="center">对选中的代码弹出环绕选项弹出层</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + J</td>
<td align="center">弹出模板选择窗口，讲选定的代码加入动态模板中</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + H</td>
<td align="center">调用层次</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + B</td>
<td align="center">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + V</td>
<td align="center">快速引进变量</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + Y</td>
<td align="center">同步、刷新</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + S</td>
<td align="center">打开 IntelliJ IDEA 系统设置</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + F7</td>
<td align="center">显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + F11</td>
<td align="center">切换全屏模式</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + Enter</td>
<td align="center">光标所在行上空出一行，光标定位到新行</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + Home</td>
<td align="center">弹出跟当前文件有关联的文件弹出层</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + Space</td>
<td align="center">类名自动完成</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + 左方向键</td>
<td align="center">退回到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td>
</tr>
<tr>
<td align="center">Ctrl + Alt + 右方向键</td>
<td align="center">前进到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td>
</tr>
<tr>
<td align="center">Ctrl + Alt + 前方向键</td>
<td align="center">在查找模式下，跳到上个查找的文件</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + 后方向键</td>
<td align="center">在查找模式下，跳到下个查找的文件</td>
</tr>
</tbody></table>
<h3 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h3><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl + Shift + F</td>
<td align="center">根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Shift + R</td>
<td align="center">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Shift + J</td>
<td align="center">自动将下一行合并到当前行末尾 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Shift + Z</td>
<td align="center">取消撤销 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Shift + W</td>
<td align="center">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Shift + N</td>
<td align="center">通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Shift + U</td>
<td align="center">对选中的代码进行大 / 小写轮流转换 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Shift + T</td>
<td align="center">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + C</td>
<td align="center">复制当前文件磁盘路径到剪贴板</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + V</td>
<td align="center">弹出缓存的最近拷贝的内容管理器弹出层</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + E</td>
<td align="center">显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + H</td>
<td align="center">显示方法层次结构</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + B</td>
<td align="center">跳转到类型声明处</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + I</td>
<td align="center">快速查看光标所在的方法 或 类的定义</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + A</td>
<td align="center">查找动作 / 设置</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + /</td>
<td align="center">代码块注释 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Shift + [</td>
<td align="center">选中从光标所在位置到它的顶部中括号位置</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + ]</td>
<td align="center">选中从光标所在位置到它的底部中括号位置</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + +</td>
<td align="center">展开所有代码</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + -</td>
<td align="center">折叠所有代码</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + F7</td>
<td align="center">高亮显示所有该选中文本，按Esc高亮消失</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + F8</td>
<td align="center">在 Debug 模式下，指定断点进入条件</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + F9</td>
<td align="center">编译选中的文件 / 包 / Module</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + F12</td>
<td align="center">编辑器最大化</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + Space</td>
<td align="center">智能代码提示</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + Enter</td>
<td align="center">自动结束代码，行末自动添加分号 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">Ctrl + Shift + Backspace</td>
<td align="center">退回到上次修改的地方</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + 1,2,3…9</td>
<td align="center">快速添加指定数值的书签</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + 左方向键</td>
<td align="center">在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + 右方向键</td>
<td align="center">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + 左方向键</td>
<td align="center">在光标焦点是在工具选项卡上，缩小选项卡区域</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + 右方向键</td>
<td align="center">在光标焦点是在工具选项卡上，扩大选项卡区域</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + 前方向键</td>
<td align="center">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + 后方向键</td>
<td align="center">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td>
</tr>
</tbody></table>
<h3 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h3><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Alt + Shift + N</td>
<td align="center">选择 / 添加 task</td>
</tr>
<tr>
<td align="center">Alt + Shift + F</td>
<td align="center">显示添加到收藏夹弹出层</td>
</tr>
<tr>
<td align="center">Alt + Shift + C</td>
<td align="center">查看最近操作项目的变化情况列表</td>
</tr>
<tr>
<td align="center">Alt + Shift + F</td>
<td align="center">添加到收藏夹</td>
</tr>
<tr>
<td align="center">Alt + Shift + I</td>
<td align="center">查看项目当前文件</td>
</tr>
<tr>
<td align="center">Alt + Shift + F7</td>
<td align="center">在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>
</tr>
<tr>
<td align="center">Alt + Shift + F9</td>
<td align="center">弹出 <code>Debug</code> 的可选择菜单</td>
</tr>
<tr>
<td align="center">Alt + Shift + F10</td>
<td align="center">弹出 <code>Run</code> 的可选择菜单</td>
</tr>
<tr>
<td align="center">Alt + Shift + 左键双击</td>
<td align="center">选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td>
</tr>
<tr>
<td align="center">Alt + Shift + 前方向键</td>
<td align="center">移动光标所在行向上移动</td>
</tr>
<tr>
<td align="center">Alt + Shift + 后方向键</td>
<td align="center">移动光标所在行向下移动</td>
</tr>
</tbody></table>
<h3 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h3><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl + Shift + Alt + V</td>
<td align="center">无格式黏贴</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + Alt + N</td>
<td align="center">前往指定的变量 / 方法</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + Alt + S</td>
<td align="center">打开当前项目设置</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + Alt + C</td>
<td align="center">复制参考信息</td>
</tr>
</tbody></table>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">F2</td>
<td align="center">跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="center">F3</td>
<td align="center">在查找模式下，定位到下一个匹配处</td>
</tr>
<tr>
<td align="center">F4</td>
<td align="center">编辑源</td>
</tr>
<tr>
<td align="center">F7</td>
<td align="center">在 <code>Debug</code> 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td align="center">F8</td>
<td align="center">在 <code>Debug</code> 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td align="center">F9</td>
<td align="center">在 <code>Debug</code> 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td align="center">F11</td>
<td align="center">添加书签</td>
</tr>
<tr>
<td align="center">F12</td>
<td align="center">回到前一个工具窗口</td>
</tr>
<tr>
<td align="center">Tab</td>
<td align="center">缩进</td>
</tr>
<tr>
<td align="center">ESC</td>
<td align="center">从工具窗口进入代码文件窗口</td>
</tr>
<tr>
<td align="center">连按两次Shift</td>
<td align="center">弹出 <code>Search Everywhere</code> 弹出层</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Shiro实现认证和授权</title>
    <url>/363.html</url>
    <content><![CDATA[<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h4><p>数据库命名为 db_shiro，可以直接导入我的数据库文件，那么就不需要查看下面的数据库操作了，sql文件地址为：<a href="https://github.com/a6678696/ShiroDemo">a6678696/ShiroDemo: Spring Boot整合Shiro实现认证和授权 (github.com)</a></p>
<h4 id="新建五张表"><a href="#新建五张表" class="headerlink" title="新建五张表"></a>新建五张表</h4><blockquote>
<p>t_user用户表</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20011743.png"></p>
<blockquote>
<p>t_user_role用户角色表</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20011820.png"></p>
<blockquote>
<p>t_role为角色表</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20011838.png"></p>
<blockquote>
<p>t_role_permission用户权限表</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20011853.png"></p>
<blockquote>
<p>t_permission权限表</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20011909.png"></p>
<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><blockquote>
<p>t_user用户表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_user`(`id`,`userName`,`password`,`nickName`,`salt`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;ledao&#x27;</span>,<span class="string">&#x27;8b8d72a8743e5102087b7d3e0423a729&#x27;</span>,<span class="string">&#x27;乐道&#x27;</span>,<span class="string">&#x27;gQKQEpNUeNhRDiGsd3RYqA==&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;838f8ca3ba499ede3585cddcb4d72f05&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;uDCwdPYvZmym7WBNvsgh4Q==&#x27;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>t_user_role用户角色表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_user_role`(`id`,`roleId`,`userId`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>t_role角色表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_role`(`id`,`role`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;管理员&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;教师&#x27;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>t_role_permission用户权限表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_role_permission`(`id`,`roleId`,`permissionId`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>t_permission权限表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_permission`(`id`,`permission`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;添加学生&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;添加教师&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="表之间的关联"><a href="#表之间的关联" class="headerlink" title="表之间的关联"></a>表之间的关联</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20002951.jpg"></p>
<p>如果要查询某个用户拥有的所有权限，可以先根据用户的id获取该用户的所有角色（用户和角色是一对多的关系，即：一个用户可以拥有0个或多个角色），然后再根据角色的id获取该角色的权限（角色和权限是一对多的关系，即：一个角色可以拥有0个或多个权限），最后该用户的全部权限为：该用户的所有角色对应权限的集合</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20013243.jpg"></p>
<h4 id="启动类添加注解"><a href="#启动类添加注解" class="headerlink" title="启动类添加注解"></a>启动类添加注解</h4><p>添加注解 @MapperScan(“com.ledao.mapper”) ，路径为存放Mapper接口的包</p>
<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_shiro?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="pom-xml依赖配置"><a href="#pom-xml依赖配置" class="headerlink" title="pom.xml依赖配置"></a>pom.xml依赖配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><blockquote>
<p>User.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;userName&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 盐值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;nickName&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UserRole.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户角色实体</span></span><br><span class="line"><span class="comment"> * 用于绑定用户和角色,即:某个用户有什么角色</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_user_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRole</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;userId&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 角色id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;roleId&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Role.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 角色名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>RolePermission.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色权限实体类</span></span><br><span class="line"><span class="comment"> * 用于绑定角色和权限,即:某个角色有什么权限</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_role_permission&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RolePermission</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 角色id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;roleId&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;permissionId&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer permissionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Permission.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_permission&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permission</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String permission;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h4><blockquote>
<p>UserMapper.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UserRoleMapper.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.UserRole;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRoleMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">UserRole</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>RoleMapper.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Role;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Role</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>RolePermissionMapper.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.RolePermission;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RolePermissionMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">RolePermission</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PermissionMapper.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Permission;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PermissionMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Permission</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h4><blockquote>
<p>UserService.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名获取用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UserRoleService.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.UserRole;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 12:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRoleService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">UserRole</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id获取用户的角色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;UserRole&gt; <span class="title">findByUserId</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>RoleService.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Role;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 12:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Role</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id获取角色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Role <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>RolePermissionService.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.RolePermission;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 13:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RolePermissionService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">RolePermission</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据角色id获取该角色的所有权限</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;RolePermission&gt; <span class="title">findByRoleId</span><span class="params">(Integer roleId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PermissionService.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Permission;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 13:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PermissionService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Permission</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id获取权限</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Permission <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service接口实现类"><a href="#Service接口实现类" class="headerlink" title="Service接口实现类"></a>Service接口实现类</h4><blockquote>
<p>UserServiceImpl.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.ledao.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>,<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        userQueryWrapper.eq(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectOne(userQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UserRoleServiceImpl.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.UserRole;</span><br><span class="line"><span class="keyword">import</span> com.ledao.mapper.UserRoleMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.UserRoleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 12:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;userRoleService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRoleServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserRoleMapper</span>,<span class="title">UserRole</span>&gt; <span class="keyword">implements</span> <span class="title">UserRoleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleMapper userRoleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserRole&gt; <span class="title">findByUserId</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;UserRole&gt; userRoleQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        userRoleQueryWrapper.eq(<span class="string">&quot;userId&quot;</span>, userId);</span><br><span class="line">        <span class="keyword">return</span> userRoleMapper.selectList(userRoleQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>RoleServiceImpl.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Role;</span><br><span class="line"><span class="keyword">import</span> com.ledao.mapper.RoleMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.RoleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 13:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;roleService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">RoleMapper</span>,<span class="title">Role</span>&gt; <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RoleMapper roleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>RolePermissionServiceImpl.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.RolePermission;</span><br><span class="line"><span class="keyword">import</span> com.ledao.mapper.RolePermissionMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.RolePermissionService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 13:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;rolePermissionService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RolePermissionServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">RolePermissionMapper</span>,<span class="title">RolePermission</span>&gt; <span class="keyword">implements</span> <span class="title">RolePermissionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RolePermissionMapper rolePermissionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;RolePermission&gt; <span class="title">findByRoleId</span><span class="params">(Integer roleId)</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;RolePermission&gt; rolePermissionQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        rolePermissionQueryWrapper.eq(<span class="string">&quot;roleId&quot;</span>, roleId);</span><br><span class="line">        <span class="keyword">return</span> rolePermissionMapper.selectList(rolePermissionQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PermissionServiceImpl.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.Permission;</span><br><span class="line"><span class="keyword">import</span> com.ledao.mapper.PermissionMapper;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.PermissionService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 13:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;permissionService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">PermissionMapper</span>,<span class="title">Permission</span>&gt; <span class="keyword">implements</span> <span class="title">PermissionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PermissionMapper permissionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Permission <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> permissionMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.*;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Realm</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 11:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleService userRoleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RolePermissionService rolePermissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//获取已登录用户的用户名</span></span><br><span class="line">        String userName = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//控制台打印用户名</span></span><br><span class="line">        System.out.println(userName);</span><br><span class="line">        <span class="comment">//获取用户的id</span></span><br><span class="line">        Integer userId = userService.findByUserName(userName).getId();</span><br><span class="line">        <span class="comment">//查询该用户的所有角色</span></span><br><span class="line">        List&lt;UserRole&gt; userRoleList = userRoleService.findByUserId(userId);</span><br><span class="line">        <span class="comment">//如果该用户拥有角色</span></span><br><span class="line">        <span class="keyword">if</span> (userRoleList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (UserRole userRole : userRoleList) &#123;</span><br><span class="line">                <span class="comment">//获取当前角色实体</span></span><br><span class="line">                Role role = roleService.findById(userRole.getRoleId());</span><br><span class="line">                <span class="comment">//向Shiro添加角色的名称</span></span><br><span class="line">                simpleAuthorizationInfo.addRole(role.getRole());</span><br><span class="line">                <span class="comment">//控制台打印角色的名称</span></span><br><span class="line">                System.out.println(role.getRole());</span><br><span class="line">                <span class="comment">//获取该角色的全部权限</span></span><br><span class="line">                List&lt;RolePermission&gt; rolePermissionList = rolePermissionService.findByRoleId(role.getId());</span><br><span class="line">                <span class="keyword">if</span> (rolePermissionList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (RolePermission rolePermission : rolePermissionList) &#123;</span><br><span class="line">                        <span class="comment">//获取当前权限实体</span></span><br><span class="line">                        Permission permission = permissionService.findById(rolePermission.getPermissionId());</span><br><span class="line">                        <span class="comment">//向Shiro添加权限的名称</span></span><br><span class="line">                        simpleAuthorizationInfo.addStringPermission(permission.getPermission());</span><br><span class="line">                        <span class="comment">//控制台打印权限的名称</span></span><br><span class="line">                        System.out.println(permission.getPermission());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String userName = (String) authenticationToken.getPrincipal();</span><br><span class="line">        User user = userService.findByUserName(userName);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUserName(), user.getPassword(), getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Shiro配置"><a href="#Shiro配置" class="headerlink" title="Shiro配置"></a>Shiro配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.realm.MyShiroRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 14:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义拦截器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//拦截器</span></span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">// 配置不会被拦截的链接 顺序判断</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/static/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/toLoginPage&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;logout&quot;</span>);</span><br><span class="line">        <span class="comment">// &lt;!-- 过滤链定义，从上向下顺序执行，一般将/**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span></span><br><span class="line">        <span class="comment">// &lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果不设置默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLoginPage&quot;</span>);</span><br><span class="line">        <span class="comment">// 登录成功后要跳转的链接</span></span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义自己的Realm</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyShiroRealm <span class="title">myShiroRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyShiroRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(myShiroRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shiro生命周期处理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启Shiro的注解(如<span class="doctag">@RequiresRoles</span>,<span class="doctag">@RequiresPermissions</span>),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证</span></span><br><span class="line"><span class="comment">     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@DependsOn(&#123;&quot;lifecycleBeanPostProcessor&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">advisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        advisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> advisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h4><blockquote>
<p>IndexController.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 14:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;, &quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到登录页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLoginPage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">toLoginPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UserController.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.ledao.service.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresPermissions;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-16 19:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">login</span><span class="params">(User user, HttpSession session)</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        User currentUser = userService.findByUserName(user.getUserName());</span><br><span class="line">        <span class="keyword">if</span> (currentUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Subject subject = SecurityUtils.getSubject();</span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(user.getUserName(), getEncodePassword(<span class="string">&quot;md5&quot;</span>, user.getPassword(), currentUser.getSalt(), <span class="number">2</span>));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                subject.login(token);</span><br><span class="line">                session.setAttribute(<span class="string">&quot;currentUser&quot;</span>, currentUser);</span><br><span class="line">                mav.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;<span class="comment">//登录失败</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                mav.addObject(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;用户名或密码错误!!&quot;</span>);</span><br><span class="line">                mav.addObject(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">                mav.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//用户不存在</span></span><br><span class="line">            mav.addObject(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;用户名或密码错误!!&quot;</span>);</span><br><span class="line">            mav.addObject(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">            mav.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addStudent&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(value = &quot;添加学生&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;添加学生成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加教师</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addTeacher&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(value = &quot;添加教师&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;添加教师成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取md5加密后的密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptName 加密算法名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password    加密前的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt        盐值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> times       加密次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getEncodePassword</span><span class="params">(String encryptName, String password, String salt, Integer times)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleHash(encryptName, password, salt, times).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h4><blockquote>
<p>login.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 40%;margin-left: 27%;margin-top: 8%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user==null?&#x27;&#x27;:user.userName&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user==null?&#x27;&#x27;:user.password&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>index.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    当前用户:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.currentUser.nickName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>注销登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/user/addTeacher&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加教师<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/user/addStudent&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>添加学生<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运行项目后，在浏览器地址栏输入：localhost/index ，无法访问首页会直接重定向到 localhost/toLoginPage ，这是因为此时没有登录所以不能访问首页</p>
<p>登录成功后，即可进入首页</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2021-09-17%20014653.png"></p>
<p>数据库中有两个用户，用户一：用户名leadao密码123456，用户二：用户名admin密码admin</p>
<p>用户一只有添加学生的权限，所以可以添加学生，但是添加教师时会报错</p>
<p>用户二有添加学生和添加教师的权限，所以可以添加学生和教师</p>
<p>用户一和用户二都可以注销登录</p>
<h3 id="GitHub地址"><a href="#GitHub地址" class="headerlink" title="GitHub地址"></a>GitHub地址</h3><p>本例子的GitHub地址为：<a href="https://github.com/a6678696/ShiroDemo">a6678696/ShiroDemo: Spring Boot整合Shiro实现认证和授权 (github.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Gateway的基本使用</title>
    <url>/497.html</url>
    <content><![CDATA[<h2 id="搭建基本框架"><a href="#搭建基本框架" class="headerlink" title="搭建基本框架"></a>搭建基本框架</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220412085504882.png" alt="image-20220412085504882"></p>
<h3 id="创建父项目"><a href="#创建父项目" class="headerlink" title="创建父项目"></a>创建父项目</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>创建一个父项目（Maven项目，可以把<code>src</code>文件夹删除掉），其作用是用于管理依赖的版本号以及子项目模块</p>
<h4 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h4><blockquote>
<p><code>pom.xml</code>的内容如下：（<code>modules</code>节点的内容不用管，这是由IntelliJ IDEA自动生成用于管理子项目模块的）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>GatewayDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>stock<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springboot.version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">springboot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springcloudalibaba.version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">springcloudalibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">common.version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">common.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springcloudalibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;common.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建公共项目"><a href="#创建公共项目" class="headerlink" title="创建公共项目"></a>创建公共项目</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>创建一个公共项目（Maven项目），用于管理公共依赖、工具类以及实体类等</p>
<h4 id="创建过程-1"><a href="#创建过程-1" class="headerlink" title="创建过程"></a>创建过程</h4><blockquote>
<p><code>pom.xml</code>的内容如下：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>GatewayDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建订单项目"><a href="#创建订单项目" class="headerlink" title="创建订单项目"></a>创建订单项目</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>创建一个订单项目模块，模拟真实业务，用于测试</p>
<h4 id="创建过程-2"><a href="#创建过程-2" class="headerlink" title="创建过程"></a>创建过程</h4><blockquote>
<p><code>pom.xml</code>的内容如下：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>GatewayDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>application.yml</code>配置</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建启动类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-11 23:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>控制层，通过<code>http://localhost:8081/order/test</code>访问</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-11 23:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        resultMap.put(<span class="string">&quot;模块名称&quot;</span>, <span class="string">&quot;订单模块&quot;</span>);</span><br><span class="line">        resultMap.put(<span class="string">&quot;请求时间&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建库存项目"><a href="#创建库存项目" class="headerlink" title="创建库存项目"></a>创建库存项目</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>创建一个库存项目模块，模拟真实业务，用于测试</p>
<h4 id="创建过程-3"><a href="#创建过程-3" class="headerlink" title="创建过程"></a>创建过程</h4><blockquote>
<p><code>pom.xml</code>的内容如下：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>GatewayDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>application.yml</code>配置</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stock</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建启动类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-11 23:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StockApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>控制层，通过<code>http://localhost:8082/stock/test</code>访问</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-11 23:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        resultMap.put(<span class="string">&quot;模块名称&quot;</span>, <span class="string">&quot;库存模块&quot;</span>);</span><br><span class="line">        resultMap.put(<span class="string">&quot;请求时间&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动订单项目和库存项目</p>
<p>通过<code>http://localhost:8081/order/test</code>访问，返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;模块名称&quot;</span>:<span class="string">&quot;订单模块&quot;</span>,<span class="attr">&quot;请求时间&quot;</span>:<span class="string">&quot;2022-04-14 11:25:51&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>http://localhost:8082/stock/test</code>访问，返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;模块名称&quot;</span>:<span class="string">&quot;库存模块&quot;</span>,<span class="attr">&quot;请求时间&quot;</span>:<span class="string">&quot;2022-04-14 11:25:49&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>出现上面结果说明搭建成功</p>
<h2 id="开始使用Gateway"><a href="#开始使用Gateway" class="headerlink" title="开始使用Gateway"></a>开始使用Gateway</h2><h3 id="实现访问其它项目接口"><a href="#实现访问其它项目接口" class="headerlink" title="实现访问其它项目接口"></a>实现访问其它项目接口</h3><blockquote>
<p>首先创建Gateway项目模块，<code>pom.xml</code>内容如下：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>GatewayDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ledao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>application.yml</code>配置文件如下，使用<code>spring.cloud.gateway.routes</code>配置</p>
</blockquote>
<p><code>id</code>：路由id，设置为被访问项目的名称</p>
<p><code>uri</code>：路由地址，设置为被访问项目的端口</p>
<p><code>predicates</code>：断言规则，设置为被访问项目的请求路径</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">stock</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8082/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/stock/**</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-11 23:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<p>启动Gateway网关项目</p>
<p>通过<code>http://localhost:8080/order/test</code>访问，返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;模块名称&quot;</span>:<span class="string">&quot;订单模块&quot;</span>,<span class="attr">&quot;请求时间&quot;</span>:<span class="string">&quot;2022-04-14 11:25:51&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>http://localhost:8080/stock/test</code>访问，返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;模块名称&quot;</span>:<span class="string">&quot;库存模块&quot;</span>,<span class="attr">&quot;请求时间&quot;</span>:<span class="string">&quot;2022-04-14 11:25:49&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>出现上面结果说明已经成功，其中<code>8080</code>为Gateway网关项目的端口</p>
<h3 id="路由匹配规则"><a href="#路由匹配规则" class="headerlink" title="路由匹配规则"></a>路由匹配规则</h3><blockquote>
<p>匹配指定日期之后的请求<code>After</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">After=2022-04-14T13:12:12+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>匹配指定日期之前的请求<code>Before</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Before=2022-04-14T11:12:00+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>匹配两个指定日期之间的请求<code>Between</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Between=2022-04-14T13:12:00+08:00[Asia/Shanghai],2022-04-14T14:12:00+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Cookie路由匹配规则<code>Cookie</code>，下面配置中token是名称，<code>\d+</code>为值的匹配规则（只包含数字，1个或多个）</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Cookie=token,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Header路由匹配规则<code>Header</code>，下面配置中X-Request-Id是名称，<code>\d+</code>的说明看上面</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Host路由匹配规则，规定只有指定域名才能访问接口，下面配置了<code>mytest.com</code>和<code>mytest2.com</code>两个域名</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Host=**.mytest.com,**.mytest2.com</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Method路由匹配规则，下面只匹配GET请求，如果是POST请求就不能访问</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>path路由匹配规则，根据请求路径匹配</p>
</blockquote>
<p>一些匹配示例说明如下：</p>
<ol>
<li><code>/order/**</code>：以<code>/order/</code>开头的请求路径</li>
<li><code>/order/my/&#123;aa&#125;</code>：<code>/order/my/test</code>可以通过，<code>/order/test</code>和<code>/order/my/ss/test</code>不可以通过</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Query路由匹配规则，请求时需要带指定参数（值可为空），下面配置中需要带name参数</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=name</span></span><br></pre></td></tr></table></figure>

<h3 id="内置过滤器"><a href="#内置过滤器" class="headerlink" title="内置过滤器"></a>内置过滤器</h3><h4 id="AddRequestParameter"><a href="#AddRequestParameter" class="headerlink" title="AddRequestParameter"></a>AddRequestParameter</h4><blockquote>
<p>向请求接口传递参数，格式为<code>AddRequestParameter=name,ledao</code>，name为参数名，ledao为值</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=name,ledao</span></span><br></pre></td></tr></table></figure>

<h4 id="RewritePath"><a href="#RewritePath" class="headerlink" title="RewritePath"></a>RewritePath</h4><blockquote>
<p>用于实现URL重写，下面的配置会把<code>/gateway/order/test</code>重写成<code>/order/test</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/gateway/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/gateway(?&lt;segment&gt;/?.*),</span> <span class="string">$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="SetStatus"><a href="#SetStatus" class="headerlink" title="SetStatus"></a>SetStatus</h4><blockquote>
<p>设置返回的结果状态码，下面的配置返回404，HTTP常见状态码查看：<a href="https://www.ltonus.com/Fenxiang/http-status.html">http常见状态码有哪些</a></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetStatus=404</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果截图</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220417122637663.png" alt="image-20220417122637663"></p>
<h4 id="AddResponseHeader"><a href="#AddResponseHeader" class="headerlink" title="AddResponseHeader"></a>AddResponseHeader</h4><blockquote>
<p>返回信息添加Header头信息</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Response-Author,LeDao</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果截图</p>
</blockquote>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220417124138292.png" alt="image-20220417124138292"></p>
<h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>查看：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories">Spring Cloud Gateway</a></p>
<h3 id="自定义GatewayFilter"><a href="#自定义GatewayFilter" class="headerlink" title="自定义GatewayFilter"></a>自定义GatewayFilter</h3><blockquote>
<p>要先把application.yml的Gateway配置删除，然后新建MyGatewayFilter类实现GatewayFilter、Ordered接口重写filter和getOrder方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-17 13:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGatewayFilter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的自定义网关过滤器&quot;</span>);</span><br><span class="line">        <span class="comment">//获取请求的参数name的值</span></span><br><span class="line">        System.out.println(exchange.getRequest().getQueryParams().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//越小优先级越高</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建MyGatewayFilterConfig配置类注册Bean</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ledao.filter.MyGatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-17 13:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGatewayFilterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">routeLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes().route(r -&gt; r</span><br><span class="line">                .path(<span class="string">&quot;/order/**&quot;</span>)</span><br><span class="line">                .uri(<span class="string">&quot;http://localhost:8081/&quot;</span>)</span><br><span class="line">                .filter(<span class="keyword">new</span> MyGatewayFilter())</span><br><span class="line">                .id(<span class="string">&quot;myGatewayFilter&quot;</span>)</span><br><span class="line">        ).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义GlobalFilter"><a href="#自定义GlobalFilter" class="headerlink" title="自定义GlobalFilter"></a>自定义GlobalFilter</h3><blockquote>
<p>新建MyGlobalFilter类实现GlobalFilter、Ordered接口重写filter和getOrder方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-17 13:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的自定义全局过滤器&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><h4 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h4><p>Gateway默认给我们实现了限流实现，也就是网关拦截器RequestRateLimiter，RequestRateLimiter的底层实现是令牌桶限流算法，需要引入Redis</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20220417145409837.png" alt="image-20220417145409837"></p>
<h4 id="URL限流"><a href="#URL限流" class="headerlink" title="URL限流"></a>URL限流</h4><blockquote>
<p>引入Redis依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring boot redis 缓存引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lettuce pool 缓存连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>限流配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-17 14:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyResolverConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">pathKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*return new KeyResolver() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Mono&lt;String&gt; resolve(ServerWebExchange exchange) &#123;</span></span><br><span class="line"><span class="comment">                return Mono.just(exchange.getRequest().getURI().getPath());</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;*/</span></span><br><span class="line">        <span class="comment">//URL限流,上面注释代码的lambda写法</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getURI().getPath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>application.yml</code>配置，把之前的<code>MyGatewayFilterConfig</code>这个类的<code>@Configuration</code>注解删除</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span> <span class="comment">#令牌桶每秒填充速率</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span> <span class="comment">#令牌桶总容量</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.requestedTokens:</span> <span class="number">1</span> <span class="comment"># 每次请求消耗1个</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@pathKeyResolver&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="参数限流"><a href="#参数限流" class="headerlink" title="参数限流"></a>参数限流</h4><blockquote>
<p>限流配置类，只能存在一个限流Bean，多个会报错，请求时要带token参数（没有就无法请求）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-17 14:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyResolverConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数限流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">parameterKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(Objects.requireNonNull(exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;token&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>application.yml配置，在之前的基础上直接修改key-resolver</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span> <span class="comment">#令牌桶每秒填充速率</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span> <span class="comment">#令牌桶总容量</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.requestedTokens:</span> <span class="number">1</span> <span class="comment"># 每次请求消耗1个</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@parameterKeyResolver&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="IP限流"><a href="#IP限流" class="headerlink" title="IP限流"></a>IP限流</h4><blockquote>
<p>限流配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-17 14:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyResolverConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IP限流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getHostName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>application.yml配置</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span> <span class="comment">#令牌桶每秒填充速率</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span> <span class="comment">#令牌桶总容量</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.requestedTokens:</span> <span class="number">1</span> <span class="comment"># 每次请求消耗1个</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h2><p>官方文档地址：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">Spring Cloud Gateway</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown代码块编程语言清单</title>
    <url>/273.html</url>
    <content><![CDATA[<h3 id="我的常用"><a href="#我的常用" class="headerlink" title="我的常用"></a>我的常用</h3><table>
<thead>
<tr>
<th align="center">语言名称</th>
<th align="center">Markdown 语言声明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">HTML</td>
<td align="center">html</td>
</tr>
<tr>
<td align="center">CSS</td>
<td align="center">css</td>
</tr>
<tr>
<td align="center">JavaScript</td>
<td align="center">javascript</td>
</tr>
<tr>
<td align="center">Java</td>
<td align="center">java</td>
</tr>
<tr>
<td align="center">Linux和Windows命令、Bash、文件路径</td>
<td align="center">bash</td>
</tr>
<tr>
<td align="center">XML</td>
<td align="center">xml</td>
</tr>
<tr>
<td align="center">.yml</td>
<td align="center">yaml</td>
</tr>
<tr>
<td align="center">SQL</td>
<td align="center">sql</td>
</tr>
</tbody></table>
<h3 id="所有"><a href="#所有" class="headerlink" title="所有"></a>所有</h3><table>
<thead>
<tr>
<th align="center">语言名称</th>
<th align="center">Markdown 语言声明</th>
<th align="center">常见文件名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1C Enterprise</td>
<td align="center">1c-enterprise</td>
<td align="center">*.bsl</td>
</tr>
<tr>
<td align="center">4D</td>
<td align="center">4d</td>
<td align="center">*.4dm</td>
</tr>
<tr>
<td align="center">ABAP</td>
<td align="center">abap</td>
<td align="center">*.abap</td>
</tr>
<tr>
<td align="center">ABNF</td>
<td align="center">abnf</td>
<td align="center">*.abnf</td>
</tr>
<tr>
<td align="center">AGS Script</td>
<td align="center">ags-script, ags</td>
<td align="center">*.asc</td>
</tr>
<tr>
<td align="center">AMPL</td>
<td align="center">ampl</td>
<td align="center">*.ampl</td>
</tr>
<tr>
<td align="center">ANTLR</td>
<td align="center">antlr</td>
<td align="center">*.g4</td>
</tr>
<tr>
<td align="center">API Blueprint</td>
<td align="center">api-blueprint</td>
<td align="center">*.apib</td>
</tr>
<tr>
<td align="center">APL</td>
<td align="center">apl</td>
<td align="center">*.apl</td>
</tr>
<tr>
<td align="center">ASN.1</td>
<td align="center">asn.1</td>
<td align="center">*.asn</td>
</tr>
<tr>
<td align="center">ASP</td>
<td align="center">asp, aspx, aspx-vb</td>
<td align="center">*.asp</td>
</tr>
<tr>
<td align="center">ATS</td>
<td align="center">ats, ats2</td>
<td align="center">*.dats</td>
</tr>
<tr>
<td align="center">ActionScript</td>
<td align="center">actionscript, actionscript3, as3</td>
<td align="center">*.as</td>
</tr>
<tr>
<td align="center">Ada</td>
<td align="center">ada, ada95, ada2005</td>
<td align="center">*.adb</td>
</tr>
<tr>
<td align="center">Adobe Font Metrics</td>
<td align="center">adobe-font-metrics, acfm, amfm</td>
<td align="center">*.afm</td>
</tr>
<tr>
<td align="center">Agda</td>
<td align="center">agda</td>
<td align="center">*.agda</td>
</tr>
<tr>
<td align="center">Alloy</td>
<td align="center">alloy</td>
<td align="center">*.als</td>
</tr>
<tr>
<td align="center">Alpine Abuild</td>
<td align="center">alpine-abuild, abuild, apkbuild</td>
<td align="center">APKBUILD</td>
</tr>
<tr>
<td align="center">Altium Designer</td>
<td align="center">altium-designer, altium</td>
<td align="center">*.OutJob</td>
</tr>
<tr>
<td align="center">AngelScript</td>
<td align="center">angelscript</td>
<td align="center">*.as</td>
</tr>
<tr>
<td align="center">Ant Build System</td>
<td align="center">ant-build-system</td>
<td align="center">ant.xml</td>
</tr>
<tr>
<td align="center">ApacheConf</td>
<td align="center">apacheconf, aconf, apache</td>
<td align="center">*.apacheconf, .htaccess</td>
</tr>
<tr>
<td align="center">Apex</td>
<td align="center">apex</td>
<td align="center">*.cls</td>
</tr>
<tr>
<td align="center">Apollo Guidance Computer</td>
<td align="center">apollo-guidance-computer</td>
<td align="center">*.agc</td>
</tr>
<tr>
<td align="center">AppleScript</td>
<td align="center">applescript, osascript</td>
<td align="center">*.applescript</td>
</tr>
<tr>
<td align="center">Arc</td>
<td align="center">arc</td>
<td align="center">*.arc</td>
</tr>
<tr>
<td align="center">AsciiDoc</td>
<td align="center">asciidoc</td>
<td align="center">*.asciidoc</td>
</tr>
<tr>
<td align="center">AspectJ</td>
<td align="center">aspectj</td>
<td align="center">*.aj</td>
</tr>
<tr>
<td align="center">Assembly</td>
<td align="center">assembly, asm, nasm</td>
<td align="center">*.asm</td>
</tr>
<tr>
<td align="center">Asymptote</td>
<td align="center">asymptote</td>
<td align="center">*.asy</td>
</tr>
<tr>
<td align="center">Augeas</td>
<td align="center">augeas</td>
<td align="center">*.aug</td>
</tr>
<tr>
<td align="center">AutoHotkey</td>
<td align="center">autohotkey, ahk</td>
<td align="center">*.ahk</td>
</tr>
<tr>
<td align="center">AutoIt</td>
<td align="center">autoit, au3, AutoIt3, AutoItScript</td>
<td align="center">*.au3</td>
</tr>
<tr>
<td align="center">Awk</td>
<td align="center">awk</td>
<td align="center">*.awk</td>
</tr>
<tr>
<td align="center">Ballerina</td>
<td align="center">ballerina</td>
<td align="center">*.bal</td>
</tr>
<tr>
<td align="center">Batchfile</td>
<td align="center">batchfile, bat, batch, dosbatch, winbatch</td>
<td align="center">*.bat</td>
</tr>
<tr>
<td align="center">Befunge</td>
<td align="center">befunge</td>
<td align="center">*.befunge</td>
</tr>
<tr>
<td align="center">BibTeX</td>
<td align="center">bibtex</td>
<td align="center">*.bib</td>
</tr>
<tr>
<td align="center">Bison</td>
<td align="center">bison</td>
<td align="center">*.bison</td>
</tr>
<tr>
<td align="center">BitBake</td>
<td align="center">bitbake</td>
<td align="center">*.bb</td>
</tr>
<tr>
<td align="center">Blade</td>
<td align="center">blade</td>
<td align="center">*.blade</td>
</tr>
<tr>
<td align="center">BlitzBasic</td>
<td align="center">blitzbasic, b3d, blitz3d, blitzplus, bplus</td>
<td align="center">*.bb</td>
</tr>
<tr>
<td align="center">BlitzMax</td>
<td align="center">blitzmax, bmax</td>
<td align="center">*.bmx</td>
</tr>
<tr>
<td align="center">Bluespec</td>
<td align="center">bluespec</td>
<td align="center">*.bsv</td>
</tr>
<tr>
<td align="center">Boo</td>
<td align="center">boo</td>
<td align="center">*.boo</td>
</tr>
<tr>
<td align="center">Brainfuck</td>
<td align="center">brainfuck</td>
<td align="center">*.b</td>
</tr>
<tr>
<td align="center">Brightscript</td>
<td align="center">brightscript</td>
<td align="center">*.brs</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">c</td>
<td align="center">*.c</td>
</tr>
<tr>
<td align="center">C#</td>
<td align="center">c#, csharp</td>
<td align="center">*.cs</td>
</tr>
<tr>
<td align="center">C++</td>
<td align="center">c++, cpp</td>
<td align="center">*.cpp</td>
</tr>
<tr>
<td align="center">C-ObjDump</td>
<td align="center">c-objdump</td>
<td align="center">*.c-objdump</td>
</tr>
<tr>
<td align="center">C2hs Haskell</td>
<td align="center">c2hs-haskell, c2hs</td>
<td align="center">*.chs</td>
</tr>
<tr>
<td align="center">CLIPS</td>
<td align="center">clips</td>
<td align="center">*.clp</td>
</tr>
<tr>
<td align="center">CMake</td>
<td align="center">cmake</td>
<td align="center">*.cmake, CMakeLists.txt</td>
</tr>
<tr>
<td align="center">COBOL</td>
<td align="center">cobol</td>
<td align="center">*.cob</td>
</tr>
<tr>
<td align="center">COLLADA</td>
<td align="center">collada</td>
<td align="center">*.dae</td>
</tr>
<tr>
<td align="center">CSON</td>
<td align="center">cson</td>
<td align="center">*.cson</td>
</tr>
<tr>
<td align="center">CSS</td>
<td align="center">css</td>
<td align="center">*.css</td>
</tr>
<tr>
<td align="center">CSV</td>
<td align="center">csv</td>
<td align="center">*.csv</td>
</tr>
<tr>
<td align="center">CWeb</td>
<td align="center">cweb</td>
<td align="center">*.w</td>
</tr>
<tr>
<td align="center">Cabal Config</td>
<td align="center">cabal-config, Cabal</td>
<td align="center">*.cabal, cabal.config</td>
</tr>
<tr>
<td align="center">Cap’n Proto</td>
<td align="center">cap’n-proto</td>
<td align="center">*.capnp</td>
</tr>
<tr>
<td align="center">CartoCSS</td>
<td align="center">cartocss, Carto</td>
<td align="center">*.mss</td>
</tr>
<tr>
<td align="center">Ceylon</td>
<td align="center">ceylon</td>
<td align="center">*.ceylon</td>
</tr>
<tr>
<td align="center">Chapel</td>
<td align="center">chapel, chpl</td>
<td align="center">*.chpl</td>
</tr>
<tr>
<td align="center">Charity</td>
<td align="center">charity</td>
<td align="center">*.ch</td>
</tr>
<tr>
<td align="center">ChucK</td>
<td align="center">chuck</td>
<td align="center">*.ck</td>
</tr>
<tr>
<td align="center">Cirru</td>
<td align="center">cirru</td>
<td align="center">*.cirru</td>
</tr>
<tr>
<td align="center">Clarion</td>
<td align="center">clarion</td>
<td align="center">*.clw</td>
</tr>
<tr>
<td align="center">Clean</td>
<td align="center">clean</td>
<td align="center">*.icl</td>
</tr>
<tr>
<td align="center">Click</td>
<td align="center">click</td>
<td align="center">*.click</td>
</tr>
<tr>
<td align="center">Clojure</td>
<td align="center">clojure</td>
<td align="center">*.clj, riemann.config</td>
</tr>
<tr>
<td align="center">Closure Templates</td>
<td align="center">closure-templates, soy</td>
<td align="center">*.soy</td>
</tr>
<tr>
<td align="center">Cloud Firestore Security Rules</td>
<td align="center">cloud-firestore-security-rules</td>
<td align="center">firestore.rules</td>
</tr>
<tr>
<td align="center">CoNLL-U</td>
<td align="center">conll-u, CoNLL, CoNLL-X</td>
<td align="center">*.conllu</td>
</tr>
<tr>
<td align="center">CodeQL</td>
<td align="center">codeql, ql</td>
<td align="center">*.ql</td>
</tr>
<tr>
<td align="center">CoffeeScript</td>
<td align="center">coffeescript, coffee, coffee-script</td>
<td align="center">*.coffee, Cakefile</td>
</tr>
<tr>
<td align="center">ColdFusion</td>
<td align="center">coldfusion, cfm, cfml</td>
<td align="center">*.cfm</td>
</tr>
<tr>
<td align="center">ColdFusion CFC</td>
<td align="center">coldfusion-cfc, cfc</td>
<td align="center">*.cfc</td>
</tr>
<tr>
<td align="center">Common Lisp</td>
<td align="center">common-lisp, lisp</td>
<td align="center">*.lisp</td>
</tr>
<tr>
<td align="center">Common Workflow Language</td>
<td align="center">common-workflow-language, cwl</td>
<td align="center">*.cwl</td>
</tr>
<tr>
<td align="center">Component Pascal</td>
<td align="center">component-pascal, delphi, objectpascal</td>
<td align="center">*.cp</td>
</tr>
<tr>
<td align="center">Cool</td>
<td align="center">cool</td>
<td align="center">*.cl</td>
</tr>
<tr>
<td align="center">Coq</td>
<td align="center">coq</td>
<td align="center">*.coq</td>
</tr>
<tr>
<td align="center">Cpp-ObjDump</td>
<td align="center">cpp-objdump, c++-objdump</td>
<td align="center">*.cppobjdump</td>
</tr>
<tr>
<td align="center">Creole</td>
<td align="center">creole</td>
<td align="center">*.creole</td>
</tr>
<tr>
<td align="center">Crystal</td>
<td align="center">crystal</td>
<td align="center">*.cr</td>
</tr>
<tr>
<td align="center">Csound</td>
<td align="center">csound, csound-orc</td>
<td align="center">*.orc</td>
</tr>
<tr>
<td align="center">Csound Document</td>
<td align="center">csound-document, csound-csd</td>
<td align="center">*.csd</td>
</tr>
<tr>
<td align="center">Csound Score</td>
<td align="center">csound-score, csound-sco</td>
<td align="center">*.sco</td>
</tr>
<tr>
<td align="center">Cuda</td>
<td align="center">cuda</td>
<td align="center">*.cu</td>
</tr>
<tr>
<td align="center">Cycript</td>
<td align="center">cycript</td>
<td align="center">*.cy</td>
</tr>
<tr>
<td align="center">Cython</td>
<td align="center">cython, pyrex</td>
<td align="center">*.pyx</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">d</td>
<td align="center">*.d</td>
</tr>
<tr>
<td align="center">D-ObjDump</td>
<td align="center">d-objdump</td>
<td align="center">*.d-objdump</td>
</tr>
<tr>
<td align="center">DIGITAL Command Language</td>
<td align="center">digital-command-language, dcl</td>
<td align="center">*.com</td>
</tr>
<tr>
<td align="center">DM</td>
<td align="center">dm, byond</td>
<td align="center">*.dm</td>
</tr>
<tr>
<td align="center">DNS Zone</td>
<td align="center">dns-zone</td>
<td align="center">*.zone</td>
</tr>
<tr>
<td align="center">DTrace</td>
<td align="center">dtrace, dtrace-script</td>
<td align="center">*.d</td>
</tr>
<tr>
<td align="center">Dafny</td>
<td align="center">dafny</td>
<td align="center">*.dfy</td>
</tr>
<tr>
<td align="center">Darcs Patch</td>
<td align="center">darcs-patch, dpatch</td>
<td align="center">*.darcspatch</td>
</tr>
<tr>
<td align="center">Dart</td>
<td align="center">dart</td>
<td align="center">*.dart</td>
</tr>
<tr>
<td align="center">DataWeave</td>
<td align="center">dataweave</td>
<td align="center">*.dwl</td>
</tr>
<tr>
<td align="center">Dhall</td>
<td align="center">dhall</td>
<td align="center">*.dhall</td>
</tr>
<tr>
<td align="center">Diff</td>
<td align="center">diff, udiff</td>
<td align="center">*.diff</td>
</tr>
<tr>
<td align="center">DirectX 3D File</td>
<td align="center">directx-3d-file</td>
<td align="center">*.x</td>
</tr>
<tr>
<td align="center">Dockerfile</td>
<td align="center">dockerfile</td>
<td align="center">*.dockerfile, Dockerfile</td>
</tr>
<tr>
<td align="center">Dogescript</td>
<td align="center">dogescript</td>
<td align="center">*.djs</td>
</tr>
<tr>
<td align="center">Dylan</td>
<td align="center">dylan</td>
<td align="center">*.dylan</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">e</td>
<td align="center">*.E</td>
</tr>
<tr>
<td align="center">EBNF</td>
<td align="center">ebnf</td>
<td align="center">*.ebnf</td>
</tr>
<tr>
<td align="center">ECL</td>
<td align="center">ecl</td>
<td align="center">*.ecl</td>
</tr>
<tr>
<td align="center">ECLiPSe</td>
<td align="center">eclipse</td>
<td align="center">*.ecl</td>
</tr>
<tr>
<td align="center">EJS</td>
<td align="center">ejs</td>
<td align="center">*.ejs</td>
</tr>
<tr>
<td align="center">EML</td>
<td align="center">eml</td>
<td align="center">*.eml</td>
</tr>
<tr>
<td align="center">EQ</td>
<td align="center">eq</td>
<td align="center">*.eq</td>
</tr>
<tr>
<td align="center">Eagle</td>
<td align="center">eagle</td>
<td align="center">*.sch</td>
</tr>
<tr>
<td align="center">Easybuild</td>
<td align="center">easybuild</td>
<td align="center">*.eb</td>
</tr>
<tr>
<td align="center">Ecere Projects</td>
<td align="center">ecere-projects</td>
<td align="center">*.epj</td>
</tr>
<tr>
<td align="center">EditorConfig</td>
<td align="center">editorconfig, editor-config</td>
<td align="center">.editorconfig</td>
</tr>
<tr>
<td align="center">Edje Data Collection</td>
<td align="center">edje-data-collection</td>
<td align="center">*.edc</td>
</tr>
<tr>
<td align="center">Eiffel</td>
<td align="center">eiffel</td>
<td align="center">*.e</td>
</tr>
<tr>
<td align="center">Elixir</td>
<td align="center">elixir</td>
<td align="center">*.ex, mix.lock</td>
</tr>
<tr>
<td align="center">Elm</td>
<td align="center">elm</td>
<td align="center">*.elm</td>
</tr>
<tr>
<td align="center">Emacs Lisp</td>
<td align="center">emacs-lisp, elisp, emacs</td>
<td align="center">*.el, .abbrev_defs</td>
</tr>
<tr>
<td align="center">EmberScript</td>
<td align="center">emberscript</td>
<td align="center">*.em</td>
</tr>
<tr>
<td align="center">Erlang</td>
<td align="center">erlang</td>
<td align="center">*.erl, Emakefile</td>
</tr>
<tr>
<td align="center">F#</td>
<td align="center">f#, fsharp</td>
<td align="center">*.fs</td>
</tr>
<tr>
<td align="center">F*</td>
<td align="center">f*, fstar</td>
<td align="center">*.fst</td>
</tr>
<tr>
<td align="center">FIGlet Font</td>
<td align="center">figlet-font, FIGfont</td>
<td align="center">*.flf</td>
</tr>
<tr>
<td align="center">FLUX</td>
<td align="center">flux</td>
<td align="center">*.fx</td>
</tr>
<tr>
<td align="center">Factor</td>
<td align="center">factor</td>
<td align="center">*.factor, .factor-boot-rc</td>
</tr>
<tr>
<td align="center">Fancy</td>
<td align="center">fancy</td>
<td align="center">*.fy, Fakefile</td>
</tr>
<tr>
<td align="center">Fantom</td>
<td align="center">fantom</td>
<td align="center">*.fan</td>
</tr>
<tr>
<td align="center">Faust</td>
<td align="center">faust</td>
<td align="center">*.dsp</td>
</tr>
<tr>
<td align="center">Filebench WML</td>
<td align="center">filebench-wml</td>
<td align="center">*.f</td>
</tr>
<tr>
<td align="center">Filterscript</td>
<td align="center">filterscript</td>
<td align="center">*.fs</td>
</tr>
<tr>
<td align="center">Formatted</td>
<td align="center">formatted</td>
<td align="center">*.for</td>
</tr>
<tr>
<td align="center">Forth</td>
<td align="center">forth</td>
<td align="center">*.fth</td>
</tr>
<tr>
<td align="center">Fortran</td>
<td align="center">fortran</td>
<td align="center">*.f</td>
</tr>
<tr>
<td align="center">Fortran Free Form</td>
<td align="center">fortran-free-form</td>
<td align="center">*.f90</td>
</tr>
<tr>
<td align="center">FreeMarker</td>
<td align="center">freemarker, ftl</td>
<td align="center">*.ftl</td>
</tr>
<tr>
<td align="center">Frege</td>
<td align="center">frege</td>
<td align="center">*.fr</td>
</tr>
<tr>
<td align="center">Futhark</td>
<td align="center">futhark</td>
<td align="center">*.fut</td>
</tr>
<tr>
<td align="center">G-code</td>
<td align="center">g-code</td>
<td align="center">*.g</td>
</tr>
<tr>
<td align="center">GAML</td>
<td align="center">gaml</td>
<td align="center">*.gaml</td>
</tr>
<tr>
<td align="center">GAMS</td>
<td align="center">gams</td>
<td align="center">*.gms</td>
</tr>
<tr>
<td align="center">GAP</td>
<td align="center">gap</td>
<td align="center">*.g</td>
</tr>
<tr>
<td align="center">GCC Machine Description</td>
<td align="center">gcc-machine-description</td>
<td align="center">*.md</td>
</tr>
<tr>
<td align="center">GDB</td>
<td align="center">gdb</td>
<td align="center">*.gdb</td>
</tr>
<tr>
<td align="center">GDScript</td>
<td align="center">gdscript</td>
<td align="center">*.gd</td>
</tr>
<tr>
<td align="center">GEDCOM</td>
<td align="center">gedcom</td>
<td align="center">*.ged</td>
</tr>
<tr>
<td align="center">GLSL</td>
<td align="center">glsl</td>
<td align="center">*.glsl</td>
</tr>
<tr>
<td align="center">GN</td>
<td align="center">gn</td>
<td align="center">*.gn, .gn</td>
</tr>
<tr>
<td align="center">Game Maker Language</td>
<td align="center">game-maker-language</td>
<td align="center">*.gml</td>
</tr>
<tr>
<td align="center">Genie</td>
<td align="center">genie</td>
<td align="center">*.gs</td>
</tr>
<tr>
<td align="center">Genshi</td>
<td align="center">genshi, xml+genshi, xml+kid</td>
<td align="center">*.kid</td>
</tr>
<tr>
<td align="center">Gentoo Ebuild</td>
<td align="center">gentoo-ebuild</td>
<td align="center">*.ebuild</td>
</tr>
<tr>
<td align="center">Gentoo Eclass</td>
<td align="center">gentoo-eclass</td>
<td align="center">*.eclass</td>
</tr>
<tr>
<td align="center">Gerber Image</td>
<td align="center">gerber-image, rs-274x</td>
<td align="center">*.gbr</td>
</tr>
<tr>
<td align="center">Gettext Catalog</td>
<td align="center">gettext-catalog, pot</td>
<td align="center">*.po</td>
</tr>
<tr>
<td align="center">Gherkin</td>
<td align="center">gherkin, cucumber</td>
<td align="center">*.feature</td>
</tr>
<tr>
<td align="center">Git Attributes</td>
<td align="center">git-attributes, gitattributes</td>
<td align="center">.gitattributes</td>
</tr>
<tr>
<td align="center">Git Config</td>
<td align="center">git-config, gitconfig, gitmodules</td>
<td align="center">*.gitconfig, .gitconfig</td>
</tr>
<tr>
<td align="center">Glyph</td>
<td align="center">glyph</td>
<td align="center">*.glf</td>
</tr>
<tr>
<td align="center">Glyph Bitmap Distribution Format</td>
<td align="center">glyph-bitmap-distribution-format</td>
<td align="center">*.bdf</td>
</tr>
<tr>
<td align="center">Gnuplot</td>
<td align="center">gnuplot</td>
<td align="center">*.gp</td>
</tr>
<tr>
<td align="center">Go</td>
<td align="center">go, golang</td>
<td align="center">*.go</td>
</tr>
<tr>
<td align="center">Golo</td>
<td align="center">golo</td>
<td align="center">*.golo</td>
</tr>
<tr>
<td align="center">Gosu</td>
<td align="center">gosu</td>
<td align="center">*.gs</td>
</tr>
<tr>
<td align="center">Grace</td>
<td align="center">grace</td>
<td align="center">*.grace</td>
</tr>
<tr>
<td align="center">Gradle</td>
<td align="center">gradle</td>
<td align="center">*.gradle</td>
</tr>
<tr>
<td align="center">Grammatical Framework</td>
<td align="center">grammatical-framework, gf</td>
<td align="center">*.gf</td>
</tr>
<tr>
<td align="center">Graph Modeling Language</td>
<td align="center">graph-modeling-language</td>
<td align="center">*.gml</td>
</tr>
<tr>
<td align="center">GraphQL</td>
<td align="center">graphql</td>
<td align="center">*.graphql</td>
</tr>
<tr>
<td align="center">Graphviz (DOT)</td>
<td align="center">dot</td>
<td align="center">*.dot</td>
</tr>
<tr>
<td align="center">Groovy</td>
<td align="center">groovy</td>
<td align="center">*.groovy, Jenkinsfile</td>
</tr>
<tr>
<td align="center">Groovy Server Pages</td>
<td align="center">groovy-server-pages, gsp</td>
<td align="center">*.gsp</td>
</tr>
<tr>
<td align="center">HAProxy</td>
<td align="center">haproxy</td>
<td align="center">*.cfg, haproxy.cfg</td>
</tr>
<tr>
<td align="center">HCL</td>
<td align="center">hcl, terraform</td>
<td align="center">*.hcl</td>
</tr>
<tr>
<td align="center">HLSL</td>
<td align="center">hlsl</td>
<td align="center">*.hlsl</td>
</tr>
<tr>
<td align="center">HTML</td>
<td align="center">html, xhtml</td>
<td align="center">*.html</td>
</tr>
<tr>
<td align="center">HTML+Django</td>
<td align="center">html+django, django, html+jinja, htmldjango</td>
<td align="center">*.jinja</td>
</tr>
<tr>
<td align="center">HTML+ECR</td>
<td align="center">html+ecr, ecr</td>
<td align="center">*.ecr</td>
</tr>
<tr>
<td align="center">HTML+EEX</td>
<td align="center">html+eex, eex</td>
<td align="center">*.eex</td>
</tr>
<tr>
<td align="center">HTML+ERB</td>
<td align="center">html+erb, erb</td>
<td align="center">*.erb</td>
</tr>
<tr>
<td align="center">HTML+PHP</td>
<td align="center">html+php</td>
<td align="center">*.phtml</td>
</tr>
<tr>
<td align="center">HTML+Razor</td>
<td align="center">html+razor, razor</td>
<td align="center">*.cshtml</td>
</tr>
<tr>
<td align="center">HTTP</td>
<td align="center">http</td>
<td align="center">*.http</td>
</tr>
<tr>
<td align="center">HXML</td>
<td align="center">hxml</td>
<td align="center">*.hxml</td>
</tr>
<tr>
<td align="center">Hack</td>
<td align="center">hack</td>
<td align="center">*.hack</td>
</tr>
<tr>
<td align="center">Haml</td>
<td align="center">haml</td>
<td align="center">*.haml</td>
</tr>
<tr>
<td align="center">Handlebars</td>
<td align="center">handlebars, hbs, htmlbars</td>
<td align="center">*.handlebars</td>
</tr>
<tr>
<td align="center">Harbour</td>
<td align="center">harbour</td>
<td align="center">*.hb</td>
</tr>
<tr>
<td align="center">Haskell</td>
<td align="center">haskell</td>
<td align="center">*.hs</td>
</tr>
<tr>
<td align="center">Haxe</td>
<td align="center">haxe</td>
<td align="center">*.hx</td>
</tr>
<tr>
<td align="center">HiveQL</td>
<td align="center">hiveql</td>
<td align="center">*.q</td>
</tr>
<tr>
<td align="center">HolyC</td>
<td align="center">holyc</td>
<td align="center">*.hc</td>
</tr>
<tr>
<td align="center">Hy</td>
<td align="center">hy, hylang</td>
<td align="center">*.hy</td>
</tr>
<tr>
<td align="center">HyPhy</td>
<td align="center">hyphy</td>
<td align="center">*.bf</td>
</tr>
<tr>
<td align="center">IDL</td>
<td align="center">idl</td>
<td align="center">*.pro</td>
</tr>
<tr>
<td align="center">IGOR Pro</td>
<td align="center">igor-pro, igor, igorpro</td>
<td align="center">*.ipf</td>
</tr>
<tr>
<td align="center">INI</td>
<td align="center">ini, dosini</td>
<td align="center">*.ini, buildozer.spec</td>
</tr>
<tr>
<td align="center">IRC log</td>
<td align="center">irc-log, irc</td>
<td align="center">*.irclog</td>
</tr>
<tr>
<td align="center">Idris</td>
<td align="center">idris</td>
<td align="center">*.idr</td>
</tr>
<tr>
<td align="center">Ignore List</td>
<td align="center">ignore-list, ignore, gitignore, git-ignore</td>
<td align="center">*.gitignore, .atomignore</td>
</tr>
<tr>
<td align="center">Inform 7</td>
<td align="center">inform-7, i7, inform7</td>
<td align="center">*.ni</td>
</tr>
<tr>
<td align="center">Inno Setup</td>
<td align="center">inno-setup</td>
<td align="center">*.iss</td>
</tr>
<tr>
<td align="center">Io</td>
<td align="center">io</td>
<td align="center">*.io</td>
</tr>
<tr>
<td align="center">Ioke</td>
<td align="center">ioke</td>
<td align="center">*.ik</td>
</tr>
<tr>
<td align="center">Isabelle</td>
<td align="center">isabelle</td>
<td align="center">*.thy</td>
</tr>
<tr>
<td align="center">Isabelle ROOT</td>
<td align="center">isabelle-root</td>
<td align="center">ROOT</td>
</tr>
<tr>
<td align="center">J</td>
<td align="center">j</td>
<td align="center">*.ijs</td>
</tr>
<tr>
<td align="center">JFlex</td>
<td align="center">jflex</td>
<td align="center">*.flex</td>
</tr>
<tr>
<td align="center">JSON</td>
<td align="center">json</td>
<td align="center">*.json, .arcconfig</td>
</tr>
<tr>
<td align="center">JSON with Comments</td>
<td align="center">json-with-comments, jsonc</td>
<td align="center">*.jsonc, .babelrc</td>
</tr>
<tr>
<td align="center">JSON5</td>
<td align="center">json5</td>
<td align="center">*.json5</td>
</tr>
<tr>
<td align="center">JSONLD</td>
<td align="center">jsonld</td>
<td align="center">*.jsonld</td>
</tr>
<tr>
<td align="center">JSONiq</td>
<td align="center">jsoniq</td>
<td align="center">*.jq</td>
</tr>
<tr>
<td align="center">JSX</td>
<td align="center">jsx</td>
<td align="center">*.jsx</td>
</tr>
<tr>
<td align="center">Jasmin</td>
<td align="center">jasmin</td>
<td align="center">*.j</td>
</tr>
<tr>
<td align="center">Java</td>
<td align="center">java</td>
<td align="center">*.java</td>
</tr>
<tr>
<td align="center">Java Properties</td>
<td align="center">java-properties</td>
<td align="center">*.properties</td>
</tr>
<tr>
<td align="center">Java Server Pages</td>
<td align="center">java-server-pages, jsp</td>
<td align="center">*.jsp</td>
</tr>
<tr>
<td align="center">JavaScript</td>
<td align="center">javascript, js, node</td>
<td align="center">*.js, Jakefile</td>
</tr>
<tr>
<td align="center">JavaScript+ERB</td>
<td align="center">javascript+erb</td>
<td align="center">*.js.erb</td>
</tr>
<tr>
<td align="center">Jison</td>
<td align="center">jison</td>
<td align="center">*.jison</td>
</tr>
<tr>
<td align="center">Jison Lex</td>
<td align="center">jison-lex</td>
<td align="center">*.jisonlex</td>
</tr>
<tr>
<td align="center">Jolie</td>
<td align="center">jolie</td>
<td align="center">*.ol</td>
</tr>
<tr>
<td align="center">Jsonnet</td>
<td align="center">jsonnet</td>
<td align="center">*.jsonnet</td>
</tr>
<tr>
<td align="center">Julia</td>
<td align="center">julia</td>
<td align="center">*.jl</td>
</tr>
<tr>
<td align="center">Jupyter Notebook</td>
<td align="center">jupyter-notebook</td>
<td align="center">*.ipynb, Notebook</td>
</tr>
<tr>
<td align="center">KRL</td>
<td align="center">krl</td>
<td align="center">*.krl</td>
</tr>
<tr>
<td align="center">KiCad Layout</td>
<td align="center">kicad-layout, pcbnew</td>
<td align="center">*.kicad_pcb, fp-lib-table</td>
</tr>
<tr>
<td align="center">KiCad Legacy Layout</td>
<td align="center">kicad-legacy-layout</td>
<td align="center">*.brd</td>
</tr>
<tr>
<td align="center">KiCad Schematic</td>
<td align="center">kicad-schematic</td>
<td align="center">*.sch</td>
</tr>
<tr>
<td align="center">Kit</td>
<td align="center">kit</td>
<td align="center">*.kit</td>
</tr>
<tr>
<td align="center">Kotlin</td>
<td align="center">kotlin</td>
<td align="center">*.kt</td>
</tr>
<tr>
<td align="center">LFE</td>
<td align="center">lfe</td>
<td align="center">*.lfe</td>
</tr>
<tr>
<td align="center">LLVM</td>
<td align="center">llvm</td>
<td align="center">*.ll</td>
</tr>
<tr>
<td align="center">LOLCODE</td>
<td align="center">lolcode</td>
<td align="center">*.lol</td>
</tr>
<tr>
<td align="center">LSL</td>
<td align="center">lsl</td>
<td align="center">*.lsl</td>
</tr>
<tr>
<td align="center">LTspice Symbol</td>
<td align="center">ltspice-symbol</td>
<td align="center">*.asy</td>
</tr>
<tr>
<td align="center">LabVIEW</td>
<td align="center">labview</td>
<td align="center">*.lvproj</td>
</tr>
<tr>
<td align="center">Lasso</td>
<td align="center">lasso, lassoscript</td>
<td align="center">*.lasso</td>
</tr>
<tr>
<td align="center">Latte</td>
<td align="center">latte</td>
<td align="center">*.latte</td>
</tr>
<tr>
<td align="center">Lean</td>
<td align="center">lean</td>
<td align="center">*.lean</td>
</tr>
<tr>
<td align="center">Less</td>
<td align="center">less</td>
<td align="center">*.less</td>
</tr>
<tr>
<td align="center">Lex</td>
<td align="center">lex, flex</td>
<td align="center">*.l</td>
</tr>
<tr>
<td align="center">LilyPond</td>
<td align="center">lilypond</td>
<td align="center">*.ly</td>
</tr>
<tr>
<td align="center">Limbo</td>
<td align="center">limbo</td>
<td align="center">*.b</td>
</tr>
<tr>
<td align="center">Linker Script</td>
<td align="center">linker-script</td>
<td align="center">*.ld, ld.script</td>
</tr>
<tr>
<td align="center">Linux Kernel Module</td>
<td align="center">linux-kernel-module</td>
<td align="center">*.mod</td>
</tr>
<tr>
<td align="center">Liquid</td>
<td align="center">liquid</td>
<td align="center">*.liquid</td>
</tr>
<tr>
<td align="center">Literate Agda</td>
<td align="center">literate-agda</td>
<td align="center">*.lagda</td>
</tr>
<tr>
<td align="center">Literate CoffeeScript</td>
<td align="center">literate-coffeescript, litcoffee</td>
<td align="center">*.litcoffee</td>
</tr>
<tr>
<td align="center">Literate Haskell</td>
<td align="center">literate-haskell, lhaskell, lhs</td>
<td align="center">*.lhs</td>
</tr>
<tr>
<td align="center">LiveScript</td>
<td align="center">livescript, live-script, ls</td>
<td align="center">*.ls, Slakefile</td>
</tr>
<tr>
<td align="center">Logos</td>
<td align="center">logos</td>
<td align="center">*.xm</td>
</tr>
<tr>
<td align="center">Logtalk</td>
<td align="center">logtalk</td>
<td align="center">*.lgt</td>
</tr>
<tr>
<td align="center">LookML</td>
<td align="center">lookml</td>
<td align="center">*.lookml</td>
</tr>
<tr>
<td align="center">LoomScript</td>
<td align="center">loomscript</td>
<td align="center">*.ls</td>
</tr>
<tr>
<td align="center">Lua</td>
<td align="center">lua</td>
<td align="center">*.lua, .luacheckrc</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">m, mumps</td>
<td align="center">*.mumps</td>
</tr>
<tr>
<td align="center">M4</td>
<td align="center">m4</td>
<td align="center">*.m4</td>
</tr>
<tr>
<td align="center">M4Sugar</td>
<td align="center">m4sugar, autoconf</td>
<td align="center">*.m4, configure.ac</td>
</tr>
<tr>
<td align="center">MATLAB</td>
<td align="center">matlab, octave</td>
<td align="center">*.matlab</td>
</tr>
<tr>
<td align="center">MAXScript</td>
<td align="center">maxscript</td>
<td align="center">*.ms</td>
</tr>
<tr>
<td align="center">MLIR</td>
<td align="center">mlir</td>
<td align="center">*.mlir</td>
</tr>
<tr>
<td align="center">MQL4</td>
<td align="center">mql4</td>
<td align="center">*.mq4</td>
</tr>
<tr>
<td align="center">MQL5</td>
<td align="center">mql5</td>
<td align="center">*.mq5</td>
</tr>
<tr>
<td align="center">MTML</td>
<td align="center">mtml</td>
<td align="center">*.mtml</td>
</tr>
<tr>
<td align="center">MUF</td>
<td align="center">muf</td>
<td align="center">*.muf</td>
</tr>
<tr>
<td align="center">Macaulay2</td>
<td align="center">macaulay2, m2</td>
<td align="center">*.m2</td>
</tr>
<tr>
<td align="center">Makefile</td>
<td align="center">makefile, bsdmake, make, mf</td>
<td align="center">*.mak, BSDmakefile</td>
</tr>
<tr>
<td align="center">Mako</td>
<td align="center">mako</td>
<td align="center">*.mako</td>
</tr>
<tr>
<td align="center">Markdown</td>
<td align="center">markdown, pandoc</td>
<td align="center">*.md, contents.lr</td>
</tr>
<tr>
<td align="center">Marko</td>
<td align="center">marko, markojs</td>
<td align="center">*.marko</td>
</tr>
<tr>
<td align="center">Mask</td>
<td align="center">mask</td>
<td align="center">*.mask</td>
</tr>
<tr>
<td align="center">Mathematica</td>
<td align="center">mathematica, mma</td>
<td align="center">*.mathematica</td>
</tr>
<tr>
<td align="center">Maven POM</td>
<td align="center">maven-pom</td>
<td align="center">pom.xml</td>
</tr>
<tr>
<td align="center">Max</td>
<td align="center">max, max/msp, maxmsp</td>
<td align="center">*.maxpat</td>
</tr>
<tr>
<td align="center">MediaWiki</td>
<td align="center">mediawiki</td>
<td align="center">*.mediawiki</td>
</tr>
<tr>
<td align="center">Mercury</td>
<td align="center">mercury</td>
<td align="center">*.m</td>
</tr>
<tr>
<td align="center">Meson</td>
<td align="center">meson</td>
<td align="center">meson.build</td>
</tr>
<tr>
<td align="center">Metal</td>
<td align="center">metal</td>
<td align="center">*.metal</td>
</tr>
<tr>
<td align="center">Microsoft Developer Studio Project</td>
<td align="center">microsoft-developer-studio-project</td>
<td align="center">*.dsp</td>
</tr>
<tr>
<td align="center">MiniD</td>
<td align="center">minid</td>
<td align="center">*.minid</td>
</tr>
<tr>
<td align="center">Mirah</td>
<td align="center">mirah</td>
<td align="center">*.druby</td>
</tr>
<tr>
<td align="center">Modelica</td>
<td align="center">modelica</td>
<td align="center">*.mo</td>
</tr>
<tr>
<td align="center">Modula-2</td>
<td align="center">modula-2</td>
<td align="center">*.mod</td>
</tr>
<tr>
<td align="center">Modula-3</td>
<td align="center">modula-3</td>
<td align="center">*.i3</td>
</tr>
<tr>
<td align="center">Module Management System</td>
<td align="center">module-management-system</td>
<td align="center">*.mms, descrip.mmk</td>
</tr>
<tr>
<td align="center">Monkey</td>
<td align="center">monkey</td>
<td align="center">*.monkey</td>
</tr>
<tr>
<td align="center">Moocode</td>
<td align="center">moocode</td>
<td align="center">*.moo</td>
</tr>
<tr>
<td align="center">MoonScript</td>
<td align="center">moonscript</td>
<td align="center">*.moon</td>
</tr>
<tr>
<td align="center">Motorola 68K Assembly</td>
<td align="center">motorola-68k-assembly, m68k</td>
<td align="center">*.asm</td>
</tr>
<tr>
<td align="center">Muse</td>
<td align="center">muse, amusewiki</td>
<td align="center">*.muse</td>
</tr>
<tr>
<td align="center">Myghty</td>
<td align="center">myghty</td>
<td align="center">*.myt</td>
</tr>
<tr>
<td align="center">NASL</td>
<td align="center">nasl</td>
<td align="center">*.nasl</td>
</tr>
<tr>
<td align="center">NCL</td>
<td align="center">ncl</td>
<td align="center">*.ncl</td>
</tr>
<tr>
<td align="center">NEON</td>
<td align="center">neon, ne-on</td>
<td align="center">*.neon</td>
</tr>
<tr>
<td align="center">NL</td>
<td align="center">nl</td>
<td align="center">*.nl</td>
</tr>
<tr>
<td align="center">NPM Config</td>
<td align="center">npm-config, npmrc</td>
<td align="center">.npmrc</td>
</tr>
<tr>
<td align="center">NSIS</td>
<td align="center">nsis</td>
<td align="center">*.nsi</td>
</tr>
<tr>
<td align="center">Nearley</td>
<td align="center">nearley</td>
<td align="center">*.ne</td>
</tr>
<tr>
<td align="center">Nemerle</td>
<td align="center">nemerle</td>
<td align="center">*.n</td>
</tr>
<tr>
<td align="center">NetLinx</td>
<td align="center">netlinx</td>
<td align="center">*.axs</td>
</tr>
<tr>
<td align="center">NetLinx+ERB</td>
<td align="center">netlinx+erb</td>
<td align="center">*.axs.erb</td>
</tr>
<tr>
<td align="center">NetLogo</td>
<td align="center">netlogo</td>
<td align="center">*.nlogo</td>
</tr>
<tr>
<td align="center">NewLisp</td>
<td align="center">newlisp</td>
<td align="center">*.nl</td>
</tr>
<tr>
<td align="center">Nextflow</td>
<td align="center">nextflow</td>
<td align="center">*.nf, nextflow.config</td>
</tr>
<tr>
<td align="center">Nginx</td>
<td align="center">nginx</td>
<td align="center">*.nginxconf, nginx.conf</td>
</tr>
<tr>
<td align="center">Nim</td>
<td align="center">nim</td>
<td align="center">*.nim, nim.cfg</td>
</tr>
<tr>
<td align="center">Ninja</td>
<td align="center">ninja</td>
<td align="center">*.ninja</td>
</tr>
<tr>
<td align="center">Nit</td>
<td align="center">nit</td>
<td align="center">*.nit</td>
</tr>
<tr>
<td align="center">Nix</td>
<td align="center">nix, nixos</td>
<td align="center">*.nix</td>
</tr>
<tr>
<td align="center">Nu</td>
<td align="center">nu, nush</td>
<td align="center">*.nu, Nukefile</td>
</tr>
<tr>
<td align="center">NumPy</td>
<td align="center">numpy</td>
<td align="center">*.numpy</td>
</tr>
<tr>
<td align="center">OCaml</td>
<td align="center">ocaml</td>
<td align="center">*.ml</td>
</tr>
<tr>
<td align="center">ObjDump</td>
<td align="center">objdump</td>
<td align="center">*.objdump</td>
</tr>
<tr>
<td align="center">Object Data Instance Notation</td>
<td align="center">object-data-instance-notation</td>
<td align="center">*.odin</td>
</tr>
<tr>
<td align="center">ObjectScript</td>
<td align="center">objectscript</td>
<td align="center">*.cls</td>
</tr>
<tr>
<td align="center">Objective-C</td>
<td align="center">objective-c, obj-c, objc, objectivec</td>
<td align="center">*.m</td>
</tr>
<tr>
<td align="center">Objective-C++</td>
<td align="center">objective-c++, obj-c++, objc++, objectivec++</td>
<td align="center">*.mm</td>
</tr>
<tr>
<td align="center">Objective-J</td>
<td align="center">objective-j, obj-j, objectivej, objj</td>
<td align="center">*.j</td>
</tr>
<tr>
<td align="center">Odin</td>
<td align="center">odin, odinlang, odin-lang</td>
<td align="center">*.odin</td>
</tr>
<tr>
<td align="center">Omgrofl</td>
<td align="center">omgrofl</td>
<td align="center">*.omgrofl</td>
</tr>
<tr>
<td align="center">Opa</td>
<td align="center">opa</td>
<td align="center">*.opa</td>
</tr>
<tr>
<td align="center">Opal</td>
<td align="center">opal</td>
<td align="center">*.opal</td>
</tr>
<tr>
<td align="center">Open Policy Agent</td>
<td align="center">open-policy-agent</td>
<td align="center">*.rego</td>
</tr>
<tr>
<td align="center">OpenCL</td>
<td align="center">opencl</td>
<td align="center">*.cl</td>
</tr>
<tr>
<td align="center">OpenEdge ABL</td>
<td align="center">openedge-abl, progress, openedge, abl</td>
<td align="center">*.p</td>
</tr>
<tr>
<td align="center">OpenQASM</td>
<td align="center">openqasm</td>
<td align="center">*.qasm</td>
</tr>
<tr>
<td align="center">OpenRC runscript</td>
<td align="center">openrc-runscript, openrc</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">OpenSCAD</td>
<td align="center">openscad</td>
<td align="center">*.scad</td>
</tr>
<tr>
<td align="center">OpenStep Property List</td>
<td align="center">openstep-property-list</td>
<td align="center">*.plist</td>
</tr>
<tr>
<td align="center">OpenType Feature File</td>
<td align="center">opentype-feature-file, AFDKO</td>
<td align="center">*.fea</td>
</tr>
<tr>
<td align="center">Org</td>
<td align="center">org</td>
<td align="center">*.org</td>
</tr>
<tr>
<td align="center">Ox</td>
<td align="center">ox</td>
<td align="center">*.ox</td>
</tr>
<tr>
<td align="center">Oxygene</td>
<td align="center">oxygene</td>
<td align="center">*.oxygene</td>
</tr>
<tr>
<td align="center">Oz</td>
<td align="center">oz</td>
<td align="center">*.oz</td>
</tr>
<tr>
<td align="center">P4</td>
<td align="center">p4</td>
<td align="center">*.p4</td>
</tr>
<tr>
<td align="center">PHP</td>
<td align="center">php, inc</td>
<td align="center">*.php, .php</td>
</tr>
<tr>
<td align="center">PLSQL</td>
<td align="center">plsql</td>
<td align="center">*.pls</td>
</tr>
<tr>
<td align="center">PLpgSQL</td>
<td align="center">plpgsql</td>
<td align="center">*.pgsql</td>
</tr>
<tr>
<td align="center">POV-Ray SDL</td>
<td align="center">pov-ray-sdl, pov-ray, povray</td>
<td align="center">*.pov</td>
</tr>
<tr>
<td align="center">Pan</td>
<td align="center">pan</td>
<td align="center">*.pan</td>
</tr>
<tr>
<td align="center">Papyrus</td>
<td align="center">papyrus</td>
<td align="center">*.psc</td>
</tr>
<tr>
<td align="center">Parrot</td>
<td align="center">parrot</td>
<td align="center">*.parrot</td>
</tr>
<tr>
<td align="center">Parrot Assembly</td>
<td align="center">parrot-assembly, pasm</td>
<td align="center">*.pasm</td>
</tr>
<tr>
<td align="center">Parrot Internal Representation</td>
<td align="center">parrot-internal-representation, pir</td>
<td align="center">*.pir</td>
</tr>
<tr>
<td align="center">Pascal</td>
<td align="center">pascal</td>
<td align="center">*.pas</td>
</tr>
<tr>
<td align="center">Pawn</td>
<td align="center">pawn</td>
<td align="center">*.pwn</td>
</tr>
<tr>
<td align="center">Pep8</td>
<td align="center">pep8</td>
<td align="center">*.pep</td>
</tr>
<tr>
<td align="center">Perl</td>
<td align="center">perl, cperl</td>
<td align="center">*.pl, Makefile.PL</td>
</tr>
<tr>
<td align="center">Pic</td>
<td align="center">pic</td>
<td align="center">*.pic</td>
</tr>
<tr>
<td align="center">Pickle</td>
<td align="center">pickle</td>
<td align="center">*.pkl</td>
</tr>
<tr>
<td align="center">PicoLisp</td>
<td align="center">picolisp</td>
<td align="center">*.l</td>
</tr>
<tr>
<td align="center">PigLatin</td>
<td align="center">piglatin</td>
<td align="center">*.pig</td>
</tr>
<tr>
<td align="center">Pike</td>
<td align="center">pike</td>
<td align="center">*.pike</td>
</tr>
<tr>
<td align="center">PlantUML</td>
<td align="center">plantuml</td>
<td align="center">*.puml</td>
</tr>
<tr>
<td align="center">Pod</td>
<td align="center">pod</td>
<td align="center">*.pod</td>
</tr>
<tr>
<td align="center">Pod 6</td>
<td align="center">pod-6</td>
<td align="center">*.pod</td>
</tr>
<tr>
<td align="center">PogoScript</td>
<td align="center">pogoscript</td>
<td align="center">*.pogo</td>
</tr>
<tr>
<td align="center">Pony</td>
<td align="center">pony</td>
<td align="center">*.pony</td>
</tr>
<tr>
<td align="center">PostCSS</td>
<td align="center">postcss</td>
<td align="center">*.pcss</td>
</tr>
<tr>
<td align="center">PostScript</td>
<td align="center">postscript, postscr</td>
<td align="center">*.ps</td>
</tr>
<tr>
<td align="center">PowerBuilder</td>
<td align="center">powerbuilder</td>
<td align="center">*.pbt</td>
</tr>
<tr>
<td align="center">PowerShell</td>
<td align="center">powershell, posh, pwsh</td>
<td align="center">*.ps1</td>
</tr>
<tr>
<td align="center">Prisma</td>
<td align="center">prisma</td>
<td align="center">*.prisma</td>
</tr>
<tr>
<td align="center">Processing</td>
<td align="center">processing</td>
<td align="center">*.pde</td>
</tr>
<tr>
<td align="center">Proguard</td>
<td align="center">proguard</td>
<td align="center">*.pro</td>
</tr>
<tr>
<td align="center">Prolog</td>
<td align="center">prolog</td>
<td align="center">*.pl</td>
</tr>
<tr>
<td align="center">Propeller Spin</td>
<td align="center">propeller-spin</td>
<td align="center">*.spin</td>
</tr>
<tr>
<td align="center">Protocol Buffer</td>
<td align="center">protocol-buffer, protobuf</td>
<td align="center">*.proto</td>
</tr>
<tr>
<td align="center">Public Key</td>
<td align="center">public-key</td>
<td align="center">*.asc</td>
</tr>
<tr>
<td align="center">Pug</td>
<td align="center">pug</td>
<td align="center">*.jade</td>
</tr>
<tr>
<td align="center">Puppet</td>
<td align="center">puppet</td>
<td align="center">*.pp, Modulefile</td>
</tr>
<tr>
<td align="center">Pure Data</td>
<td align="center">pure-data</td>
<td align="center">*.pd</td>
</tr>
<tr>
<td align="center">PureBasic</td>
<td align="center">purebasic</td>
<td align="center">*.pb</td>
</tr>
<tr>
<td align="center">PureScript</td>
<td align="center">purescript</td>
<td align="center">*.purs</td>
</tr>
<tr>
<td align="center">Python</td>
<td align="center">python, python3, rusthon</td>
<td align="center">*.py, .gclient</td>
</tr>
<tr>
<td align="center">Python console</td>
<td align="center">python-console, pycon</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Python traceback</td>
<td align="center">python-traceback</td>
<td align="center">*.pytb</td>
</tr>
<tr>
<td align="center">QML</td>
<td align="center">qml</td>
<td align="center">*.qml</td>
</tr>
<tr>
<td align="center">QMake</td>
<td align="center">qmake</td>
<td align="center">*.pro</td>
</tr>
<tr>
<td align="center">Quake</td>
<td align="center">quake</td>
<td align="center">m3makefile</td>
</tr>
<tr>
<td align="center">R</td>
<td align="center">r, R, Rscript, splus</td>
<td align="center">*.r, .Rprofile</td>
</tr>
<tr>
<td align="center">RAML</td>
<td align="center">raml</td>
<td align="center">*.raml</td>
</tr>
<tr>
<td align="center">RDoc</td>
<td align="center">rdoc</td>
<td align="center">*.rdoc</td>
</tr>
<tr>
<td align="center">REALbasic</td>
<td align="center">realbasic</td>
<td align="center">*.rbbas</td>
</tr>
<tr>
<td align="center">REXX</td>
<td align="center">rexx, arexx</td>
<td align="center">*.rexx</td>
</tr>
<tr>
<td align="center">RHTML</td>
<td align="center">rhtml, html+ruby</td>
<td align="center">*.rhtml</td>
</tr>
<tr>
<td align="center">RMarkdown</td>
<td align="center">rmarkdown</td>
<td align="center">*.rmd</td>
</tr>
<tr>
<td align="center">RPC</td>
<td align="center">rpc, rpcgen, oncrpc, xdr</td>
<td align="center">*.x</td>
</tr>
<tr>
<td align="center">RPM Spec</td>
<td align="center">rpm-spec, specfile</td>
<td align="center">*.spec</td>
</tr>
<tr>
<td align="center">RUNOFF</td>
<td align="center">runoff</td>
<td align="center">*.rnh</td>
</tr>
<tr>
<td align="center">Racket</td>
<td align="center">racket</td>
<td align="center">*.rkt</td>
</tr>
<tr>
<td align="center">Ragel</td>
<td align="center">ragel, ragel-rb, ragel-ruby</td>
<td align="center">*.rl</td>
</tr>
<tr>
<td align="center">Raku</td>
<td align="center">raku, perl6, perl-6</td>
<td align="center">*.6pl</td>
</tr>
<tr>
<td align="center">Rascal</td>
<td align="center">rascal</td>
<td align="center">*.rsc</td>
</tr>
<tr>
<td align="center">Raw token data</td>
<td align="center">raw-token-data, raw</td>
<td align="center">*.raw</td>
</tr>
<tr>
<td align="center">Readline Config</td>
<td align="center">readline-config, inputrc, readline</td>
<td align="center">.inputrc</td>
</tr>
<tr>
<td align="center">Reason</td>
<td align="center">reason</td>
<td align="center">*.re</td>
</tr>
<tr>
<td align="center">Rebol</td>
<td align="center">rebol</td>
<td align="center">*.reb</td>
</tr>
<tr>
<td align="center">Red</td>
<td align="center">red, red/system</td>
<td align="center">*.red</td>
</tr>
<tr>
<td align="center">Redcode</td>
<td align="center">redcode</td>
<td align="center">*.cw</td>
</tr>
<tr>
<td align="center">Regular Expression</td>
<td align="center">regular-expression, regexp, regex</td>
<td align="center">*.regexp</td>
</tr>
<tr>
<td align="center">Ren’Py</td>
<td align="center">ren’py, renpy</td>
<td align="center">*.rpy</td>
</tr>
<tr>
<td align="center">RenderScript</td>
<td align="center">renderscript</td>
<td align="center">*.rs</td>
</tr>
<tr>
<td align="center">Rich Text Format</td>
<td align="center">rich-text-format</td>
<td align="center">*.rtf</td>
</tr>
<tr>
<td align="center">Ring</td>
<td align="center">ring</td>
<td align="center">*.ring</td>
</tr>
<tr>
<td align="center">Riot</td>
<td align="center">riot</td>
<td align="center">*.riot</td>
</tr>
<tr>
<td align="center">RobotFramework</td>
<td align="center">robotframework</td>
<td align="center">*.robot</td>
</tr>
<tr>
<td align="center">Roff</td>
<td align="center">roff, groff, mdoc, nroff, troff</td>
<td align="center">*.roff, eqnrc</td>
</tr>
<tr>
<td align="center">Roff Manpage</td>
<td align="center">roff-manpage</td>
<td align="center">*.1</td>
</tr>
<tr>
<td align="center">Rouge</td>
<td align="center">rouge</td>
<td align="center">*.rg</td>
</tr>
<tr>
<td align="center">Ruby</td>
<td align="center">ruby, jruby, macruby, rake, rb, rbx</td>
<td align="center">*.rb, .irbrc</td>
</tr>
<tr>
<td align="center">Rust</td>
<td align="center">rust</td>
<td align="center">*.rs</td>
</tr>
<tr>
<td align="center">SAS</td>
<td align="center">sas</td>
<td align="center">*.sas</td>
</tr>
<tr>
<td align="center">SCSS</td>
<td align="center">scss</td>
<td align="center">*.scss</td>
</tr>
<tr>
<td align="center">SMT</td>
<td align="center">smt</td>
<td align="center">*.smt2</td>
</tr>
<tr>
<td align="center">SPARQL</td>
<td align="center">sparql</td>
<td align="center">*.sparql</td>
</tr>
<tr>
<td align="center">SQF</td>
<td align="center">sqf</td>
<td align="center">*.sqf</td>
</tr>
<tr>
<td align="center">SQL</td>
<td align="center">sql</td>
<td align="center">*.sql</td>
</tr>
<tr>
<td align="center">SQLPL</td>
<td align="center">sqlpl</td>
<td align="center">*.sql</td>
</tr>
<tr>
<td align="center">SRecode Template</td>
<td align="center">srecode-template</td>
<td align="center">*.srt</td>
</tr>
<tr>
<td align="center">SSH Config</td>
<td align="center">ssh-config</td>
<td align="center">ssh-config</td>
</tr>
<tr>
<td align="center">STON</td>
<td align="center">ston</td>
<td align="center">*.ston</td>
</tr>
<tr>
<td align="center">SVG</td>
<td align="center">svg</td>
<td align="center">*.svg</td>
</tr>
<tr>
<td align="center">SWIG</td>
<td align="center">swig</td>
<td align="center">*.i</td>
</tr>
<tr>
<td align="center">Sage</td>
<td align="center">sage</td>
<td align="center">*.sage</td>
</tr>
<tr>
<td align="center">SaltStack</td>
<td align="center">saltstack, saltstate, salt</td>
<td align="center">*.sls</td>
</tr>
<tr>
<td align="center">Sass</td>
<td align="center">sass</td>
<td align="center">*.sass</td>
</tr>
<tr>
<td align="center">Scala</td>
<td align="center">scala</td>
<td align="center">*.scala</td>
</tr>
<tr>
<td align="center">Scaml</td>
<td align="center">scaml</td>
<td align="center">*.scaml</td>
</tr>
<tr>
<td align="center">Scheme</td>
<td align="center">scheme</td>
<td align="center">*.scm</td>
</tr>
<tr>
<td align="center">Scilab</td>
<td align="center">scilab</td>
<td align="center">*.sci</td>
</tr>
<tr>
<td align="center">Self</td>
<td align="center">self</td>
<td align="center">*.self</td>
</tr>
<tr>
<td align="center">ShaderLab</td>
<td align="center">shaderlab</td>
<td align="center">*.shader</td>
</tr>
<tr>
<td align="center">Shell</td>
<td align="center">shell, sh, shell-script, bash, zsh</td>
<td align="center">*.sh, .bash_aliases</td>
</tr>
<tr>
<td align="center">ShellSession</td>
<td align="center">shellsession, console</td>
<td align="center">*.sh-session</td>
</tr>
<tr>
<td align="center">Shen</td>
<td align="center">shen</td>
<td align="center">*.shen</td>
</tr>
<tr>
<td align="center">Sieve</td>
<td align="center">sieve</td>
<td align="center">*.sieve</td>
</tr>
<tr>
<td align="center">Slash</td>
<td align="center">slash</td>
<td align="center">*.sl</td>
</tr>
<tr>
<td align="center">Slice</td>
<td align="center">slice</td>
<td align="center">*.ice</td>
</tr>
<tr>
<td align="center">Slim</td>
<td align="center">slim</td>
<td align="center">*.slim</td>
</tr>
<tr>
<td align="center">SmPL</td>
<td align="center">smpl, coccinelle</td>
<td align="center">*.cocci</td>
</tr>
<tr>
<td align="center">Smali</td>
<td align="center">smali</td>
<td align="center">*.smali</td>
</tr>
<tr>
<td align="center">Smalltalk</td>
<td align="center">smalltalk, squeak</td>
<td align="center">*.st</td>
</tr>
<tr>
<td align="center">Smarty</td>
<td align="center">smarty</td>
<td align="center">*.tpl</td>
</tr>
<tr>
<td align="center">Solidity</td>
<td align="center">solidity</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">SourcePawn</td>
<td align="center">sourcepawn, sourcemod</td>
<td align="center">*.sp</td>
</tr>
<tr>
<td align="center">Spline Font Database</td>
<td align="center">spline-font-database</td>
<td align="center">*.sfd</td>
</tr>
<tr>
<td align="center">Squirrel</td>
<td align="center">squirrel</td>
<td align="center">*.nut</td>
</tr>
<tr>
<td align="center">Stan</td>
<td align="center">stan</td>
<td align="center">*.stan</td>
</tr>
<tr>
<td align="center">Standard ML</td>
<td align="center">standard-ml, sml</td>
<td align="center">*.ML</td>
</tr>
<tr>
<td align="center">Starlark</td>
<td align="center">starlark, bazel, bzl</td>
<td align="center">*.bzl, BUCK</td>
</tr>
<tr>
<td align="center">Stata</td>
<td align="center">stata</td>
<td align="center">*.do</td>
</tr>
<tr>
<td align="center">Stylus</td>
<td align="center">stylus</td>
<td align="center">*.styl</td>
</tr>
<tr>
<td align="center">SubRip Text</td>
<td align="center">subrip-text</td>
<td align="center">*.srt</td>
</tr>
<tr>
<td align="center">SugarSS</td>
<td align="center">sugarss</td>
<td align="center">*.sss</td>
</tr>
<tr>
<td align="center">SuperCollider</td>
<td align="center">supercollider</td>
<td align="center">*.sc</td>
</tr>
<tr>
<td align="center">Svelte</td>
<td align="center">svelte</td>
<td align="center">*.svelte</td>
</tr>
<tr>
<td align="center">Swift</td>
<td align="center">swift</td>
<td align="center">*.swift</td>
</tr>
<tr>
<td align="center">SystemVerilog</td>
<td align="center">systemverilog</td>
<td align="center">*.sv</td>
</tr>
<tr>
<td align="center">TI Program</td>
<td align="center">ti-program</td>
<td align="center">*.8xp</td>
</tr>
<tr>
<td align="center">TLA</td>
<td align="center">tla</td>
<td align="center">*.tla</td>
</tr>
<tr>
<td align="center">TOML</td>
<td align="center">toml</td>
<td align="center">*.toml, Cargo.lock</td>
</tr>
<tr>
<td align="center">TSQL</td>
<td align="center">tsql</td>
<td align="center">*.sql</td>
</tr>
<tr>
<td align="center">TSX</td>
<td align="center">tsx</td>
<td align="center">*.tsx</td>
</tr>
<tr>
<td align="center">TXL</td>
<td align="center">txl</td>
<td align="center">*.txl</td>
</tr>
<tr>
<td align="center">Tcl</td>
<td align="center">tcl</td>
<td align="center">*.tcl, owh</td>
</tr>
<tr>
<td align="center">Tcsh</td>
<td align="center">tcsh</td>
<td align="center">*.tcsh</td>
</tr>
<tr>
<td align="center">TeX</td>
<td align="center">tex, latex</td>
<td align="center">*.tex</td>
</tr>
<tr>
<td align="center">Tea</td>
<td align="center">tea</td>
<td align="center">*.tea</td>
</tr>
<tr>
<td align="center">Terra</td>
<td align="center">terra</td>
<td align="center">*.t</td>
</tr>
<tr>
<td align="center">Texinfo</td>
<td align="center">texinfo</td>
<td align="center">*.texinfo</td>
</tr>
<tr>
<td align="center">Text</td>
<td align="center">text, fundamental</td>
<td align="center">*.txt, COPYING</td>
</tr>
<tr>
<td align="center">Textile</td>
<td align="center">textile</td>
<td align="center">*.textile</td>
</tr>
<tr>
<td align="center">Thrift</td>
<td align="center">thrift</td>
<td align="center">*.thrift</td>
</tr>
<tr>
<td align="center">Turing</td>
<td align="center">turing</td>
<td align="center">*.t</td>
</tr>
<tr>
<td align="center">Turtle</td>
<td align="center">turtle</td>
<td align="center">*.ttl</td>
</tr>
<tr>
<td align="center">Twig</td>
<td align="center">twig</td>
<td align="center">*.twig</td>
</tr>
<tr>
<td align="center">Type Language</td>
<td align="center">type-language, tl</td>
<td align="center">*.tl</td>
</tr>
<tr>
<td align="center">TypeScript</td>
<td align="center">typescript, ts</td>
<td align="center">*.ts</td>
</tr>
<tr>
<td align="center">Unified Parallel C</td>
<td align="center">unified-parallel-c</td>
<td align="center">*.upc</td>
</tr>
<tr>
<td align="center">Unity3D Asset</td>
<td align="center">unity3d-asset</td>
<td align="center">*.anim</td>
</tr>
<tr>
<td align="center">Unix Assembly</td>
<td align="center">unix-assembly</td>
<td align="center">*.s</td>
</tr>
<tr>
<td align="center">Uno</td>
<td align="center">uno</td>
<td align="center">*.uno</td>
</tr>
<tr>
<td align="center">UnrealScript</td>
<td align="center">unrealscript</td>
<td align="center">*.uc</td>
</tr>
<tr>
<td align="center">UrWeb</td>
<td align="center">urweb, Ur/Web, Ur</td>
<td align="center">*.ur</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">v, vlang</td>
<td align="center">*.v</td>
</tr>
<tr>
<td align="center">VBA</td>
<td align="center">vba, vb6</td>
<td align="center">*.bas</td>
</tr>
<tr>
<td align="center">VBScript</td>
<td align="center">vbscript</td>
<td align="center">*.vbs</td>
</tr>
<tr>
<td align="center">VCL</td>
<td align="center">vcl</td>
<td align="center">*.vcl</td>
</tr>
<tr>
<td align="center">VHDL</td>
<td align="center">vhdl</td>
<td align="center">*.vhdl</td>
</tr>
<tr>
<td align="center">Vala</td>
<td align="center">vala</td>
<td align="center">*.vala</td>
</tr>
<tr>
<td align="center">Verilog</td>
<td align="center">verilog</td>
<td align="center">*.v</td>
</tr>
<tr>
<td align="center">Vim Snippet</td>
<td align="center">vim-snippet, SnipMate, UltiSnip, NeoSnippet</td>
<td align="center">*.snip</td>
</tr>
<tr>
<td align="center">Vim script</td>
<td align="center">vim-script, vim, viml, nvim</td>
<td align="center">*.vim, .gvimrc</td>
</tr>
<tr>
<td align="center">Visual Basic .NET</td>
<td align="center">vbnet, vb.net</td>
<td align="center">*.vb</td>
</tr>
<tr>
<td align="center">Volt</td>
<td align="center">volt</td>
<td align="center">*.volt</td>
</tr>
<tr>
<td align="center">Vue</td>
<td align="center">vue</td>
<td align="center">*.vue</td>
</tr>
<tr>
<td align="center">Wavefront Material</td>
<td align="center">wavefront-material</td>
<td align="center">*.mtl</td>
</tr>
<tr>
<td align="center">Wavefront Object</td>
<td align="center">wavefront-object</td>
<td align="center">*.obj</td>
</tr>
<tr>
<td align="center">Web Ontology Language</td>
<td align="center">web-ontology-language</td>
<td align="center">*.owl</td>
</tr>
<tr>
<td align="center">WebAssembly</td>
<td align="center">webassembly, wast, wasm</td>
<td align="center">*.wast</td>
</tr>
<tr>
<td align="center">WebIDL</td>
<td align="center">webidl</td>
<td align="center">*.webidl</td>
</tr>
<tr>
<td align="center">WebVTT</td>
<td align="center">webvtt</td>
<td align="center">*.vtt</td>
</tr>
<tr>
<td align="center">Wget Config</td>
<td align="center">wget-config, wgetrc</td>
<td align="center">.wgetrc</td>
</tr>
<tr>
<td align="center">Windows Registry Entries</td>
<td align="center">windows-registry-entries</td>
<td align="center">*.reg</td>
</tr>
<tr>
<td align="center">Wollok</td>
<td align="center">wollok</td>
<td align="center">*.wlk</td>
</tr>
<tr>
<td align="center">World of Warcraft Addon Data</td>
<td align="center">world-of-warcraft-addon-data</td>
<td align="center">*.toc</td>
</tr>
<tr>
<td align="center">X BitMap</td>
<td align="center">x-bitmap, xbm</td>
<td align="center">*.xbm</td>
</tr>
<tr>
<td align="center">X Font Directory Index</td>
<td align="center">x-font-directory-index</td>
<td align="center">encodings.dir</td>
</tr>
<tr>
<td align="center">X PixMap</td>
<td align="center">x-pixmap, xpm</td>
<td align="center">*.xpm</td>
</tr>
<tr>
<td align="center">X10</td>
<td align="center">x10, xten</td>
<td align="center">*.x10</td>
</tr>
<tr>
<td align="center">XC</td>
<td align="center">xc</td>
<td align="center">*.xc</td>
</tr>
<tr>
<td align="center">XCompose</td>
<td align="center">xcompose</td>
<td align="center">.XCompose</td>
</tr>
<tr>
<td align="center">XML</td>
<td align="center">xml, rss, xsd, wsdl</td>
<td align="center">*.xml, .classpath</td>
</tr>
<tr>
<td align="center">XML Property List</td>
<td align="center">xml-property-list</td>
<td align="center">*.plist</td>
</tr>
<tr>
<td align="center">XPages</td>
<td align="center">xpages</td>
<td align="center">*.xsp-config</td>
</tr>
<tr>
<td align="center">XProc</td>
<td align="center">xproc</td>
<td align="center">*.xpl</td>
</tr>
<tr>
<td align="center">XQuery</td>
<td align="center">xquery</td>
<td align="center">*.xquery</td>
</tr>
<tr>
<td align="center">XS</td>
<td align="center">xs</td>
<td align="center">*.xs</td>
</tr>
<tr>
<td align="center">XSLT</td>
<td align="center">xslt, xsl</td>
<td align="center">*.xslt</td>
</tr>
<tr>
<td align="center">Xojo</td>
<td align="center">xojo</td>
<td align="center">*.xojo_code</td>
</tr>
<tr>
<td align="center">Xtend</td>
<td align="center">xtend</td>
<td align="center">*.xtend</td>
</tr>
<tr>
<td align="center">YAML</td>
<td align="center">yaml, yml</td>
<td align="center">*.yml, .clang-format</td>
</tr>
<tr>
<td align="center">YANG</td>
<td align="center">yang</td>
<td align="center">*.yang</td>
</tr>
<tr>
<td align="center">YARA</td>
<td align="center">yara</td>
<td align="center">*.yar</td>
</tr>
<tr>
<td align="center">YASnippet</td>
<td align="center">yasnippet, snippet, yas</td>
<td align="center">*.yasnippet</td>
</tr>
<tr>
<td align="center">Yacc</td>
<td align="center">yacc</td>
<td align="center">*.y</td>
</tr>
<tr>
<td align="center">ZAP</td>
<td align="center">zap</td>
<td align="center">*.zap</td>
</tr>
<tr>
<td align="center">ZIL</td>
<td align="center">zil</td>
<td align="center">*.zil</td>
</tr>
<tr>
<td align="center">Zeek</td>
<td align="center">zeek, bro</td>
<td align="center">*.zeek</td>
</tr>
<tr>
<td align="center">ZenScript</td>
<td align="center">zenscript</td>
<td align="center">*.zs</td>
</tr>
<tr>
<td align="center">Zephir</td>
<td align="center">zephir</td>
<td align="center">*.zep</td>
</tr>
<tr>
<td align="center">Zig</td>
<td align="center">zig</td>
<td align="center">*.zig</td>
</tr>
<tr>
<td align="center">Zimpl</td>
<td align="center">zimpl</td>
<td align="center">*.zimpl</td>
</tr>
<tr>
<td align="center">cURL Config</td>
<td align="center">curl-config, curlrc</td>
<td align="center">.curlrc</td>
</tr>
<tr>
<td align="center">desktop</td>
<td align="center">desktop</td>
<td align="center">*.desktop</td>
</tr>
<tr>
<td align="center">dircolors</td>
<td align="center">dircolors</td>
<td align="center">*.dircolors, .dir_colors</td>
</tr>
<tr>
<td align="center">eC</td>
<td align="center">ec</td>
<td align="center">*.ec</td>
</tr>
<tr>
<td align="center">edn</td>
<td align="center">edn</td>
<td align="center">*.edn</td>
</tr>
<tr>
<td align="center">fish</td>
<td align="center">fish</td>
<td align="center">*.fish</td>
</tr>
<tr>
<td align="center">mIRC Script</td>
<td align="center">mirc-script</td>
<td align="center">*.mrc</td>
</tr>
<tr>
<td align="center">mcfunction</td>
<td align="center">mcfunction</td>
<td align="center">*.mcfunction</td>
</tr>
<tr>
<td align="center">mupad</td>
<td align="center">mupad</td>
<td align="center">*.mu</td>
</tr>
<tr>
<td align="center">nanorc</td>
<td align="center">nanorc</td>
<td align="center">*.nanorc, .nanorc</td>
</tr>
<tr>
<td align="center">nesC</td>
<td align="center">nesc</td>
<td align="center">*.nc</td>
</tr>
<tr>
<td align="center">ooc</td>
<td align="center">ooc</td>
<td align="center">*.ooc</td>
</tr>
<tr>
<td align="center">q</td>
<td align="center">q</td>
<td align="center">*.q</td>
</tr>
<tr>
<td align="center">reStructuredText</td>
<td align="center">restructuredtext, rst</td>
<td align="center">*.rst</td>
</tr>
<tr>
<td align="center">sed</td>
<td align="center">sed</td>
<td align="center">*.sed</td>
</tr>
<tr>
<td align="center">wdl</td>
<td align="center">wdl</td>
<td align="center">*.wdl</td>
</tr>
<tr>
<td align="center">wisp</td>
<td align="center">wisp</td>
<td align="center">*.wisp</td>
</tr>
<tr>
<td align="center">xBase</td>
<td align="center">xbase, advpl, clipper, foxpro</td>
<td align="center">*.prg</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序引入iconfont矢量图标样式</title>
    <url>/536.html</url>
    <content><![CDATA[<h3 id="生成Font-class"><a href="#生成Font-class" class="headerlink" title="生成Font class"></a>生成Font class</h3><p>具体步骤查看博客：<a href="https://blog.zoutl.cn/477.html">Hexo 的 Butterfly 主题使用 iconfont 图标 | LeDao’s Blog (zoutl.cn)</a>，<font color="#dd0000">看到生成 Font class就行，然后接着看本博客</font></p>
<h3 id="在小程序中使用"><a href="#在小程序中使用" class="headerlink" title="在小程序中使用"></a>在小程序中使用</h3><h4 id="复制样式代码"><a href="#复制样式代码" class="headerlink" title="复制样式代码"></a>复制样式代码</h4><p>点击链接，会打开一个页面，页面内容就是我们需要的样式代码，然后把它复制下来</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207225241081.png" alt="image-20221207225241081"></p>
<h4 id="复制到小程序"><a href="#复制到小程序" class="headerlink" title="复制到小程序"></a>复制到小程序</h4><p>首先新建一个名为<code>styles</code>的文件夹（和<code>pages</code>的位置是同一级），在这个文件夹里面新建一个名为<code>iconfont.wxss</code>的文件，把上一步复制到的样式代码复制进去</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221207225510817.png" alt="image-20221207225510817"></p>
<h4 id="全局使用样式"><a href="#全局使用样式" class="headerlink" title="全局使用样式"></a>全局使用样式</h4><p>在<code>app.wxss</code>里面加入以下代码，然后就可以全局使用引入的iconfont图标了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 全局引入iconfont样式 */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./styles/iconfont.wxss&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="使用图标"><a href="#使用图标" class="headerlink" title="使用图标"></a>使用图标</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-cart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>每次加入一个新图标或修改后，都需要重新获取样式代码</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>让微信开发者工具支持Less</title>
    <url>/537.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Less可以让我们的代码更加简洁，尤其是可以使用嵌套代替层叠或与层叠结合使用</p>
<p>微信开发者工具要支持Less，需要安装一个名为<code>Easy LESS</code>的扩展</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="VS-Code安装扩展"><a href="#VS-Code安装扩展" class="headerlink" title="VS Code安装扩展"></a>VS Code安装扩展</h4><p>虽然微信开发者工具没有<code>Easy LESS</code>这个扩展，但是它支持我们从VS Code的已安装扩展中导入扩展，所以我们需要先在VS Code中安装这个扩展</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208003553940.png" alt="image-20221208003553940"></p>
<h4 id="导入扩展"><a href="#导入扩展" class="headerlink" title="导入扩展"></a>导入扩展</h4><p>打开微信开发者工具，去扩展页操作，如下图所示</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208004140355.png" alt="image-20221208004140355"></p>
<p>选择<code>mrcrowl.easy-less-1.7.4</code>这个文件夹，然后就开始安装了</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208004244518.png" alt="image-20221208004244518"></p>
<h4 id="修改扩展配置"><a href="#修改扩展配置" class="headerlink" title="修改扩展配置"></a>修改扩展配置</h4><p>首先打开<code>更多编辑器设置</code></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208004737180.png" alt="image-20221208004737180"></p>
<p>搜索<code>Easy LESS</code>，打开该扩展的配置文件</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208004923478.png" alt="image-20221208004923478"></p>
<p>在下图的位置加上代码<code>&quot;outExt&quot;: &quot;.wxss&quot;</code>，然后保存，这段代码是为了告诉微信开发者工具：目标文件的后缀名是wxss，默认是css</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221208005053798.png" alt="image-20221208005053798"></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我创建了一个名为<code>search-bar.less</code>的文件，那么它的目标文件就是<code>search-bar.wxss</code>，在<code>search-bar.less</code>中输入代码并保存后<code>search-bar.wxss</code>会自动生成代码</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-08%20005823.gif"></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>Less的中文文档地址为：<a href="https://less.bootcss.com/">Less 快速入门 | Less.js 中文文档 - Less 中文网 (bootcss.com)</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot配置本地文件映射路径</title>
    <url>/538.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Spring Boot项目只能访问项目static文件夹内的文件，如果想访问磁盘上的其它文件，就需要配置一下本地文件映射路径了</p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>新建一个配置类，实现WebMvcConfigurerAdapter接口，然后在重写的方法中添加映射的路径和真实的文件路径，本地路径的格式有两种：（即下面代码的第二个字符串的内容）</p>
<ol>
<li>格式一：<code>file:E:\\data\\mall\\images\\swiper\\</code></li>
<li>格式二：<code>file:E:/data/mall/images/swiper/</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本地文件映射路径配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-08 3:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilePathConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/swiper/image/**&quot;</span>).addResourceLocations(<span class="string">&quot;file:E:\\data\\mall\\images\\swiper\\&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我的项目端口为<code>8080</code>，在本地路径<code>E:\data\mall\images\swiper</code>中有一张图片<code>1.jpeg</code>，所以我可以通过<code>http://localhost:8080/swiper/image/1.jpeg</code>访问这张图片，如果可以看到图片则说明配置成功了</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Vant Weapp实现Area省市区选择组件的使用</title>
    <url>/539.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>官网建议省市区选择组件和弹出层组件配合使用，但是官网没有详细的例子，对于新手不是很友好，网上的博客也没有详细的教程，所以我把实现过程记录下来，方便以后使用</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><p>点击输入框会打开弹出层，在弹出层选择省市区并确认后，会把地址显示到输入框中</p>
<h4 id="引入省市区数据"><a href="#引入省市区数据" class="headerlink" title="引入省市区数据"></a>引入省市区数据</h4><p>通过npm命令安装官方默认的省市区数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i @vant/area-data</span><br></pre></td></tr></table></figure>

<p>在页面js文件中引用，在代码的最上面加入下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;areaList&#125; <span class="keyword">from</span> <span class="string">&#x27;@vant/area-data&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h4><p>需要引入的三个组件分别是：<code>输入框</code>、<code>弹出层</code>、<code>省市区选择</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;van-field&quot;</span>: <span class="string">&quot;@vant/weapp/field/index&quot;</span>,</span><br><span class="line"><span class="string">&quot;van-popup&quot;</span>: <span class="string">&quot;@vant/weapp/popup/index&quot;</span>,</span><br><span class="line"><span class="string">&quot;van-area&quot;</span>: <span class="string">&quot;@vant/weapp/area/index&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="页面wxml代码"><a href="#页面wxml代码" class="headerlink" title="页面wxml代码"></a>页面wxml代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">bindtap</span>=<span class="string">&quot;showPopup&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-field</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; area &#125;&#125;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择省市区&quot;</span> <span class="attr">label</span>=<span class="string">&quot;省市区&quot;</span> <span class="attr">title-width</span>=<span class="string">&quot;4em&quot;</span> <span class="attr">is-link</span>=<span class="string">&quot;true&quot;</span> <span class="attr">readonly</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span>江西省景德镇市珠山区新村街道</span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span> <span class="attr">show</span>=<span class="string">&quot;&#123;&#123; show &#125;&#125;&quot;</span> <span class="attr">bind:close</span>=<span class="string">&quot;onClose&quot;</span> <span class="attr">position</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-area</span> <span class="attr">area-list</span>=<span class="string">&quot;&#123;&#123; areaList &#125;&#125;&quot;</span> <span class="attr">columns-num</span>=<span class="string">&quot;&#123;&#123; 3 &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;选择省市区&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;value&#125;&#125;&quot;</span> <span class="attr">bind:cancel</span>=<span class="string">&quot;onCancel&quot;</span> <span class="attr">bind:confirm</span>=<span class="string">&quot;onConfirm&quot;</span> <span class="attr">bind:change</span>=<span class="string">&quot;onChange&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="页面js代码"><a href="#页面js代码" class="headerlink" title="页面js代码"></a>页面js代码</h4><p>页面初始数据如下，value的默认值是为了让省市区选择组件一开始就选择一个地址，<code>110101</code>是官方默认的省市区数据中北京市东城区的代码（省市区选择组件可以通过区地址确定省和市）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">data: &#123;</span><br><span class="line">	address: &#x27;&#x27;,</span><br><span class="line">	areaList,</span><br><span class="line">	value: <span class="number">110101</span>,</span><br><span class="line">	show: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面的一些事件如下，每个事件的作用看注释</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开弹出层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">showPopup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.setData(&#123;</span><br><span class="line">		<span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭弹出层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onClose</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.setData(&#123;</span><br><span class="line">		<span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确认选择省市区触发的事件: 关闭弹出层后设置value和address的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>e </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onConfirm</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.onClose();</span><br><span class="line">	<span class="keyword">let</span> address = e.detail.values[<span class="number">0</span>].name + e.detail.values[<span class="number">1</span>].name + e.detail.values[<span class="number">2</span>].name;</span><br><span class="line">	<span class="keyword">let</span> code = e.detail.values[<span class="number">2</span>].code;</span><br><span class="line">	<span class="built_in">this</span>.setData(&#123;</span><br><span class="line">		<span class="attr">value</span>: code,</span><br><span class="line">		<span class="attr">address</span>: address</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击取消后触发的事件: 关闭弹出层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onCancel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.onClose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果动图"><a href="#效果动图" class="headerlink" title="效果动图"></a>效果动图</h4><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-09015808.gif" style="zoom: 50%;" />
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>Vant Weapp</tag>
      </tags>
  </entry>
  <entry>
    <title>Git将代码添加到暂存区时忽略一些文件</title>
    <url>/540.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对于一些文件，如果我们不希望它们被Git提交的话，可以通过<code>.gitignore</code>文件配置规则，让这些文件不能添加到暂存区进而不能被提交到本地仓库</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-04-20_112748.png"></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h4><p>首先在仓库的根目录新建一个名为<code>.gitignore</code>的文件，我们可以在里面配置一些规则，让某些文件不能被提交</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221210123518045.png" alt="image-20221210123518045"></p>
<h4 id="规则说明"><a href="#规则说明" class="headerlink" title="规则说明"></a>规则说明</h4><h5 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h5><p>看规则有没有效果，可以通过<code>git status</code>命令来查看</p>
<h5 id="单个文件"><a href="#单个文件" class="headerlink" title="单个文件"></a>单个文件</h5><p>直接在<code>.gitignore</code>内加上这个文件的名称，例如我们要忽略根目录的<code>test.txt</code>文件，规则如下：（一行写一个规则，注释用<code>#</code>号）</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span> 忽略根目录下的test.txt</span><br><span class="line">test.txt</span><br><span class="line"></span><br><span class="line"><span class="params">#</span> 忽略根目录下的test文件夹内的1.txt</span><br><span class="line">test/1.txt</span><br></pre></td></tr></table></figure>

<h5 id="整个文件夹"><a href="#整个文件夹" class="headerlink" title="整个文件夹"></a>整个文件夹</h5><p>忽略根目录下的test文件夹</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">test/</span><br></pre></td></tr></table></figure>

<h5 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h5><p>对于一些文件或文件夹，Git默认是不添加的，我们在忽略规则前面加上<code>!</code>即可</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span> 我们假定test文件夹是默认不添加的，但是我们需要添加test文件夹的test.txt</span><br><span class="line">!test/test.txt</span><br></pre></td></tr></table></figure>

<p>另外，如果规则配置了<code>忽略test文件夹</code>，那么上面的规则是不会生效的，文件夹的优先级比较大</p>
<h5 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h5><p>过滤某种类型文件，例如过滤掉所有的txt格式的文件</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">*.txt</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Git的代码合并冲突</title>
    <url>/541.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>两个人都修改了同一个文件，第一个人进行push操作后，如果第二个人也进行push操作，那么第二个人就会出现代码合并冲突同时push失败</p>
<h3 id="情景复现"><a href="#情景复现" class="headerlink" title="情景复现"></a>情景复现</h3><p>本地仓库和远程GitHub仓库都有一个名为<code>bbb.txt</code>的文件，先在GitHub仓库中修改这个文件，然后在本地修改这个文件</p>
<p>本地的bbb.txt文件内容如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb本地库修改</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure>

<p>GitHub仓库的bbb.txt文件内容如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb</span><br><span class="line">bbb远程库修改</span><br></pre></td></tr></table></figure>

<p>进行add操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>进行commit操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;修改bbb.txt&quot;</span></span><br></pre></td></tr></table></figure>

<p>进行push操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>会出现下图的错误，提示我们在再次push前先进行pull操作</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221211230156646.png" alt="image-20221211230156646"></p>
<h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><p>根据上面的提示进行pull操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<p>然后查看本地的bbb.txt文件的内容，多了一些东西，<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>和<code>=======</code>之间的内容是本地仓库和远程GitHub仓库冲突的内容（属于本地仓库），<code>=======</code>和<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>之间的内容是远程GitHub仓库和本地仓库冲突的内容（属于远程GitHub仓库）</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">bbb</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">bbb本地库修改</span><br><span class="line">bbb</span><br><span class="line">=======</span><br><span class="line">bbb</span><br><span class="line">bbb远程库修改</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4e4fb01336355e4e36f217905c8f2d0a883fcdc6</span><br></pre></td></tr></table></figure>

<p>解决冲突的方案有三个：（是修改本地仓库的bbb.txt文件）</p>
<ol>
<li><p>以本地仓库的代码为准，修改后的bbb.txt内容如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb本地库修改</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure></li>
<li><p>以远程GitHub仓库的代码为准，修改后的bbb.txt内容如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb</span><br><span class="line">bbb远程库修改</span><br></pre></td></tr></table></figure></li>
<li><p>都保留，修改后的bbb.txt内容如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">bbb</span><br><span class="line">bbb本地库修改</span><br><span class="line">bbb远程库修改</span><br></pre></td></tr></table></figure></li>
</ol>
<p>修改了本地仓库的bbb.txt文件后再次进行add操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add bbb.txt</span><br></pre></td></tr></table></figure>

<p>进行commit操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;以本地仓库的代码为准&quot;</span></span><br></pre></td></tr></table></figure>

<p>进行push操作，这次可以push成功了，去GitHub查看结果，bbb.txt的内容已经变成本地仓库的了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>微信开发者工具修改编译后的启动页面</title>
    <url>/542.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序开发一个新页面时，我们需要把它设置为编译后的启动页面，设置方法有两个：</p>
<ol>
<li>到<code>app.json</code>中设置</li>
<li>修改微信开发者工具的编译设置，<font color="#dd0000">推荐使用这种方式</font></li>
</ol>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="到app-json中修改"><a href="#到app-json中修改" class="headerlink" title="到app.json中修改"></a>到app.json中修改</h4><p>添加一个<code>entryPagePath</code>属性（优先级比较高），其值为页面的路径，或者把页面的定义放在<code>pages</code>数组的第一个，下面代码的启动页面是index</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;entryPagePath&quot;</span>: <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/category/category&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/cart/cart&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改编译设置"><a href="#修改编译设置" class="headerlink" title="修改编译设置"></a>修改编译设置</h4><p>首先添加一个编译模式</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221212175835414.png" alt="image-20221212175835414"></p>
<p>编译模式的设置</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221212180045483.png" alt="image-20221212180045483"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>将Element Plus的默认文字设置为中文</title>
    <url>/543.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当前Element Plus组件的默认文字是英文，为了方便，我们直接设置全局的默认文字让每个页面都生效</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221215162838853.png" alt="image-20221215162838853"></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>直接在App.vue中设置，首先引入简体中文的js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&quot;element-plus/lib/locale/lang/zh-cn&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>​    使用<code>&lt;el-config-provider :locale=&quot;zhCn&quot;&gt;&lt;/el-config-provider&gt;</code>将<code>&lt;router-view/&gt;</code>包住即可生效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整App.vue代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&quot;element-plus/lib/locale/lang/zh-cn&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如图所示</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221215162920988.png" alt="image-20221215162920988"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Element Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实体类中使用布尔类型的注意事项</title>
    <url>/544.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在Java实体类中使用布尔类型的话，有一些细节要特别注意，不然这些布尔类型的字段用起来会很麻烦</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="不要以is开头"><a href="#不要以is开头" class="headerlink" title="不要以is开头"></a>不要以is开头</h4><p>属性名不要以<code>is</code>开头，如果以<code>is</code>开头的话，自动生成的Setter和Getter的方法名会自动省略掉<code>is</code>，例如以下代码中Setter和Getter的方法名原本应该是<code>getIsHotGoods</code>和<code>setIsHotGoods</code>，但是实际上是<code>getHotGoods</code>和<code>setHotGoods</code>，会给我们带来一些困扰</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221216230829121.png" alt="image-20221216230829121"></p>
<h4 id="使用包装类"><a href="#使用包装类" class="headerlink" title="使用包装类"></a>使用包装类</h4><p>在实体类中，不要使用基本数据类型，而是使用它们的包装类，例如布尔基本类型boolean就要使用Boolean</p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221216225306794.png" alt="image-20221216225306794"></p>
<p>如果使用了布尔基本类型boolean，那么我们自动生成Setter和Getter时不会有Getter方法，<font color="#dd0000">为了开发时减少麻烦，不要使用基本类型，无论如何都只使用包装类</font></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221216230712892.png" alt="image-20221216230712892"></p>
<h4 id="MySQL字段类型"><a href="#MySQL字段类型" class="headerlink" title="MySQL字段类型"></a>MySQL字段类型</h4><p>当实体类的属性类型是Boolean时，MySQL表的字段类型可以使用<code>tinyint</code>，长度设为<code>1</code></p>
<p>实体类的值为<code>true</code>时MySQL的值是<code>1</code>，值为<code>false</code>时MySQL的值是<code>0</code>，从MySQL查到的值会被转换成true或false，而不是1或0</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js3.2引入VueQuill富文本编辑器</title>
    <url>/545.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>官方文档：<a href="https://vueup.github.io/vue-quill/guide/">Introduction | VueQuill (vueup.github.io)</a></p>
<p>中文文档：<a href="https://www.kancloud.cn/liuwave/quill/1434140">vue-quill-editor · Quill官方中文文档 · 看云 (kancloud.cn)</a></p>
<p>编辑器的插件列举查看官网：<a href="https://vueup.github.io/vue-quill/guide/modules.html#quill-modules">Modules | VueQuill (vueup.github.io)</a>，我实现了图片上传到服务器和图片缩放插件的使用，博客链接为：<a href="https://blog.zoutl.cn/546.html">上传图片到服务器 </a>和<a href="https://blog.zoutl.cn/547.html">实现图片的缩放 </a></p>
<p>在几款适合Vue3的富文本编辑器中，我发现VueQuill最简单易用，不过也有一个BUG：数据无法双向绑定，页面的数据不会显示到富文本编辑器中，实现数据双向绑定的办法看下面</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @vueup/vue-quill@latest --save</span><br></pre></td></tr></table></figure>

<h4 id="局部引入"><a href="#局部引入" class="headerlink" title="局部引入"></a>局部引入</h4><p>虽然可以全局引入，但是还是建议局部引入，首先引入组件和样式（在<code>&lt;script&gt;</code>标签中加入下面代码）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;QuillEditor&#125; <span class="keyword">from</span> <span class="string">&#x27;@vueup/vue-quill&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@vueup/vue-quill/dist/vue-quill.snow.css&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用组件的代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性说明</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>v-model:content=&quot;content&quot;</code></td>
<td align="center">绑定的数据是content</td>
</tr>
<tr>
<td align="center"><code>placeholder=&quot;这里输入商品详情...&quot;</code></td>
<td align="center">内容为空时的提示</td>
</tr>
<tr>
<td align="center"><code>theme=&quot;snow&quot;</code></td>
<td align="center"><a href="https://vueup.github.io/vue-quill/guide/themes.html">主题</a></td>
</tr>
<tr>
<td align="center"><code>ref=&quot;editor&quot;</code></td>
<td align="center">这个是重点，定义editor使用<a href="https://vueup.github.io/vue-quill/api/methods.html">官方的方法</a></td>
</tr>
<tr>
<td align="center"><code>toolbar=&quot;full&quot;</code></td>
<td align="center">工具栏的功能全部可以使用</td>
</tr>
<tr>
<td align="center"><code>contentType=&quot;html&quot;</code></td>
<td align="center">内容的格式是html</td>
</tr>
</tbody></table>
<p>由于双向绑定没有用，所以需要使用官方的方法<code>setHTML()</code>设置值，首先上面使用编辑器的代码中要有<code>ref=&quot;editor&quot;</code>，然后在<code>&lt;script&gt;</code>标签中定义一个空editor和上面对应，然后就可以使用编辑器的方法了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个空editor</span></span><br><span class="line"><span class="keyword">const</span> editor = ref(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">editor.value.setHTML(<span class="string">&quot;内容&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>只保留了和VueQuill富文本编辑器有关的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref, onMounted&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;QuillEditor&#125; <span class="keyword">from</span> <span class="string">&#x27;@vueup/vue-quill&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">&#x27;@vueup/vue-quill/dist/vue-quill.snow.css&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> content = ref(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> editor = ref(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//根据id获取商品</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getGoodsDetails = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//设置值</span></span></span><br><span class="line"><span class="javascript">    editor.value.setHTML(response.data.goods.details);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/vue-quill-demo">a6678696/vue-quill-demo</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>VueQuill</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot实现VueQuill富文本编辑器上传图片到服务器</title>
    <url>/546.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>VueQuill富文本编辑器添加图片时，会将图片转换为base64格式</p>
<p>如果直接将编辑器的内容传到后端并保存到MySQL数据库时（我习惯使用<code>text</code>类型），很容易就超出<code>text</code>类型的长度，即使还有比text类型长度更长的类型，但是还是不推荐直接将base64格式的图片保存到MySQL中</p>
<p>所以有必要实现VueQuill富文本编辑器添加图片时，先将图片上传到服务器中，然后后端返回图片的链接给编辑器引用，编辑器要上传到图片到后端需要安装插件<code>quill-image-uploader</code></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install quill-image-uploader --save</span><br></pre></td></tr></table></figure>

<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ImageUploader <span class="keyword">from</span> <span class="string">&#x27;quill-image-uploader&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="安装插件到编辑器"><a href="#安装插件到编辑器" class="headerlink" title="安装插件到编辑器"></a>安装插件到编辑器</h4><p>首先定义模块，只需要修改请求后端的url，下面代码的url经过getServerUrl的封装最终是<code>localhost:8080/goods/vueQuillUploadImage</code>，getServerUrl的代码查看博客：<a href="https://blog.zoutl.cn/511.html">Vue 项目实现统一管理请求的后端 IP 地址和端口 | LeDao’s Blog (zoutl.cn)</a>，也可以直接写出url不用封装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> modules = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;imageUploader&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: ImageUploader,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">upload</span>: <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">        formData.append(<span class="string">&quot;image&quot;</span>, file);</span><br><span class="line">        <span class="keyword">let</span> url = getServerUrl(<span class="string">&#x27;/goods/vueQuillUploadImage&#x27;</span>);</span><br><span class="line">        axios.post(url, formData)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(res)</span><br><span class="line">              resolve(res.data.url);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              reject(<span class="string">&quot;Upload failed&quot;</span>);</span><br><span class="line">              <span class="built_in">console</span>.error(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">            &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用编辑器的代码如下，关键代码是<code>:modules=&quot;modules&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:modules</span>=<span class="string">&quot;modules&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java后端代码"><a href="#Java后端代码" class="headerlink" title="Java后端代码"></a>Java后端代码</h4><p>首先引入依赖，用于文件的操作</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>业务代码如下，当前Controller的名称上面的注解是<code>@RestController</code>和<code>@RequestMapping(&quot;/goods&quot;)</code>，所以前端请求的路径是<code>/goods/vueQuillUploadImage</code>，和上面的url对应</p>
<p><code>DateUtil.getCurrentDateStr2()</code>和<code>System.currentTimeMillis()</code>是根据时间生成字符串，生成的图片名称示例为<code>202212172148271671284907136.jpg</code>，只是用来命名而已，代码不贴了，自己去改掉</p>
<p><code>goodsDetailsImageFilePath</code>是定义在<code>application.yml</code>配置文件的路径，配置为<code>goodsDetailsImageFilePath: E://data/mall/images/goods/details/</code></p>
<p>关于返回的url，要加上<code>http://</code>，不然VueQuill富文本编辑器会出错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VueQuill富文本编辑器上传图片</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/vueQuillUploadImage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">vueQuillUploadImage</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//获取到文件</span></span><br><span class="line">    MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;</span><br><span class="line">    MultipartFile multipartFile = multipartRequest.getFile(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">    <span class="comment">//给图片定义一个名称</span></span><br><span class="line">    String newFileName = DateUtil.getCurrentDateStr2() + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    <span class="keyword">assert</span> multipartFile != <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//实现将图片保存到指定位置</span></span><br><span class="line">    FileUtils.copyInputStreamToFile(multipartFile.getInputStream(), <span class="keyword">new</span> File(goodsDetailsImageFilePath + <span class="string">&quot;/&quot;</span> + newFileName));</span><br><span class="line">    <span class="comment">//返回指定的格式给前端使用</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;http://localhost:8080/image/goods/details/&quot;</span> + newFileName);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改可上传文件的大小"><a href="#修改可上传文件的大小" class="headerlink" title="修改可上传文件的大小"></a>修改可上传文件的大小</h4><p>Spring Boot默认可上传的最大文件大小是1MB，可以去<code>application.yml</code>配置文件修改，配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>官网地址为：<a href="https://vueup.github.io/vue-quill/guide/modules.html#example-using-quill-image-uploader">Modules | VueQuill (vueup.github.io)</a>，只有前端代码，后端代码需要自己实现，前端根据后端返回的数据拿到url就行了，不规定格式</p>
<p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/vue-quill-demo">a6678696/vue-quill-demo</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Vue.js</tag>
        <tag>VueQuill</tag>
      </tags>
  </entry>
  <entry>
    <title>VueQuill富文本编辑器实现图片的缩放</title>
    <url>/547.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>VueQuill富文本编辑器添加的图片默认是不可以缩放的，如果图片尺寸过大的话，会非常影响用户的体验。虽然不支持缩放图片，但是可以通过安装<code>quill-blot-formatter</code>这个插件来实现</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save quill-blot-formatter</span><br></pre></td></tr></table></figure>

<h4 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> BlotFormatter <span class="keyword">from</span> <span class="string">&#x27;quill-blot-formatter&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>下面是配置两个及以上插件的格式，如果只配置一个插件，其格式查看博客：<a href="https://blog.zoutl.cn/546.html">Spring Boot 实现 VueQuill 富文本编辑器上传图片到服务器 | LeDao’s Blog (zoutl.cn)</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> modules = [&#123;</span><br><span class="line">  <span class="comment">//这里是另一个插件的配置</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;BlotFormatter&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: BlotFormatter,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">overlay</span>: &#123;</span><br><span class="line">      <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">border</span>: <span class="string">&#x27;2px solid red&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>使用编辑器的代码如下，关键代码是<code>:modules=&quot;modules&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QuillEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:content</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;这里输入商品详情...&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">theme</span>=<span class="string">&quot;snow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">toolbar</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contentType</span>=<span class="string">&quot;html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:modules</span>=<span class="string">&quot;modules&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/vue-quill-demo">a6678696/vue-quill-demo</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>VueQuill</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js3.2实现父组件调用子组件的方法和属性</title>
    <url>/548.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>父组件（使用子组件的页面称为父组件）使用子组件时，如果想使用子组件的属性和方法，可以在父组件使用子组件时加上ref属性来实现，但是子组件需要提前暴露这些属性和方法</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>我把父组件放在<code>views</code>文件夹中，子组件放在<code>components</code>文件夹中</p>
<h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><p>首先在<code>components</code>文件夹中新建一个名为<code>child.vue</code>的子组件，<code>defineExpose</code>暴露的属性和方法才可以被父组件使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件的内容: <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref, defineExpose&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> content = ref(<span class="string">&#x27;我是子组件原来的内容&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  alert(content.value);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//暴露属性和方法给父组件</span></span></span><br><span class="line"><span class="javascript">defineExpose(&#123;</span></span><br><span class="line"><span class="javascript">  content,</span></span><br><span class="line"><span class="javascript">  getContent</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><p>在<code>views</code>文件夹中新建一个名为<code>father.vue</code>的父组件，使用子组件时加上一个ref属性<code>ref=&quot;myChild&quot;</code>，然后定义一下myChild</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--加上一个ref属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;myChild&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setChildContent&quot;</span>&gt;</span>我是父组件的按钮,设置子组件的content<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getChildContent&quot;</span>&gt;</span>我是父组件的按钮,调用子组件的方法getContent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;../components/child.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//定义一下myChild</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> myChild = ref();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> setChildContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//使用子组件属性的值</span></span></span><br><span class="line"><span class="javascript">  alert(myChild.value.content);</span></span><br><span class="line"><span class="javascript">  <span class="comment">//设置子组件属性的值</span></span></span><br><span class="line"><span class="javascript">  myChild.value.content = <span class="string">&#x27;我是子组件修改后的内容&#x27;</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getChildContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//调用子组件的方法</span></span></span><br><span class="line"><span class="javascript">  myChild.value.getContent();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果GIF图"><a href="#效果GIF图" class="headerlink" title="效果GIF图"></a>效果GIF图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/2022-12-18%20_164031.gif"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js3.2引入wangEditor 5富文本编辑器</title>
    <url>/549.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>wangEditor 5是一款开源Web富文本编辑器，开箱即用，配置简单</p>
<p>虽然官方有文档，但是不够简明，所以我写本博客方便以后快速引入wangEditor 5富文本编辑器</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @wangeditor/editor @wangeditor/editor-for-vue@next --save</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20221218171607241.png" alt="image-20221218171607241"></p>
<h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><p>在<code>components</code>文件夹新建一个名为<code>myEditor.vue</code>的文件，内容如下，直接复制下面的代码即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #ccc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;border-bottom: 1px solid #ccc&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:editor</span>=<span class="string">&quot;editorRef&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:defaultConfig</span>=<span class="string">&quot;toolbarConfig&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:mode</span>=<span class="string">&quot;mode&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Editor</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;height: 500px; overflow-y: hidden;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;valueHtml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:defaultConfig</span>=<span class="string">&quot;editorConfig&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:mode</span>=<span class="string">&quot;mode&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">onCreated</span>=<span class="string">&quot;handleCreated&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">&#x27;@wangeditor/editor/dist/css/style.css&#x27;</span> <span class="comment">// 引入 css</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; onBeforeUnmount, ref, shallowRef, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Editor, Toolbar &#125; <span class="keyword">from</span> <span class="string">&#x27;@wangeditor/editor-for-vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123; Editor, Toolbar &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 编辑器实例，必须用 shallowRef</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> editorRef = shallowRef()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 内容 HTML</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> valueHtml = ref(<span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模拟 ajax 异步获取内容</span></span></span><br><span class="line"><span class="javascript">    onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        valueHtml.value = <span class="string">&#x27;&lt;p&gt;模拟 Ajax 异步设置内容&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">1500</span>)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> toolbarConfig = &#123;&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> editorConfig = &#123; <span class="attr">placeholder</span>: <span class="string">&#x27;请输入内容...&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件销毁时，也及时销毁编辑器</span></span></span><br><span class="line"><span class="javascript">    onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> editor = editorRef.value</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (editor == <span class="literal">null</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      editor.destroy()</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> handleCreated = <span class="function">(<span class="params">editor</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      editorRef.value = editor <span class="comment">// 记录 editor 实例，重要！</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      editorRef,</span></span><br><span class="line"><span class="javascript">      valueHtml,</span></span><br><span class="line"><span class="javascript">      <span class="attr">mode</span>: <span class="string">&#x27;default&#x27;</span>, <span class="comment">// 或 &#x27;simple&#x27;</span></span></span><br><span class="line"><span class="javascript">      toolbarConfig,</span></span><br><span class="line"><span class="javascript">      editorConfig,</span></span><br><span class="line"><span class="javascript">      handleCreated</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>首先在使用组件的页面引入上面的组件，然后即可使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">myEditor</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> myEditor <span class="keyword">from</span> <span class="string">&quot;../components/myEditor.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>关于父组件给富文本编辑器设置内容以及获取内容的实现（通过改变编辑器组件的<code>valueHtml</code>属性来实现）可以参考博客：<a href="https://blog.zoutl.cn/548.html">Vue.js3.2实现父组件调用子组件的方法和属性 | LeDao’s Blog (zoutl.cn)</a>，参考博客时不需要暴露属性了，因为在上面的代码中<code>valueHtml</code>已经通过<code>return</code>暴露过了</p>
<p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/wang-editor-demo">a6678696/wang-editor-demo</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>wangEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot实现wangEditor 5富文本编辑器上传图片到服务器</title>
    <url>/550.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>wangEditor 5富文本编辑器只支持添加网络图片，如果要上传本地图片的话，需要自己写后端代码来实现</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="添加上传图片配置"><a href="#添加上传图片配置" class="headerlink" title="添加上传图片配置"></a>添加上传图片配置</h4><p>在编辑器组件代码中找到<code>editorConfig</code>后修改以及添加成下面代码就可以了，编辑器组件的代码查看博客：<a href="https://blog.zoutl.cn/549.html">Vue.js3.2引入wangEditor 5富文本编辑器 | LeDao’s Blog (zoutl.cn)</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改过</span></span><br><span class="line"><span class="keyword">const</span> editorConfig = &#123;<span class="attr">placeholder</span>: <span class="string">&#x27;请输入内容...&#x27;</span>, <span class="attr">MENU_CONF</span>: &#123;&#125;&#125;</span><br><span class="line"><span class="comment">//新添加</span></span><br><span class="line">editorConfig.MENU_CONF[<span class="string">&#x27;uploadImage&#x27;</span>] = &#123;</span><br><span class="line">  <span class="attr">fieldName</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">  <span class="attr">server</span>: <span class="string">&#x27;http://localhost:8080/goods/wangEditorUploadImage&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Java后端上传图片代码"><a href="#Java后端上传图片代码" class="headerlink" title="Java后端上传图片代码"></a>Java后端上传图片代码</h4><p>代码的一些说明以及前置条件（依赖和图片路径）可以参考博客：<a href="https://blog.zoutl.cn/546.html">Spring Boot 实现 VueQuill 富文本编辑器上传图片到服务器 | LeDao’s Blog (zoutl.cn)</a>，其实后端代码都差不多，只是从前端获取数据的方式各有不同·</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * wangEditor富文本编辑器上传图片</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/wangEditorUploadImage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">wangEditorUploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;image&quot;)</span> MultipartFile multipartFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//给图片定义一个名称</span></span><br><span class="line">    String newFileName = DateUtil.getCurrentDateStr2() + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    <span class="keyword">assert</span> multipartFile != <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//实现将图片保存到指定位置</span></span><br><span class="line">    FileUtils.copyInputStreamToFile(multipartFile.getInputStream(), <span class="keyword">new</span> File(goodsDetailsImageFilePath + <span class="string">&quot;/&quot;</span> + newFileName));</span><br><span class="line">    <span class="comment">//返回指定的格式给前端使用</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;errno&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//返回的数据,wangEditor接收</span></span><br><span class="line">    Map&lt;String, String&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    data.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;http://localhost:8080/image/goods/details/&quot;</span> + newFileName);</span><br><span class="line">    data.put(<span class="string">&quot;alt&quot;</span>, newFileName);</span><br><span class="line">    data.put(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;http://localhost:8080/image/goods/details/&quot;</span> + newFileName);</span><br><span class="line">    map.put(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>更多配置以及可以接收的数据格式查看官网：<a href="https://www.wangeditor.com/v5/menu-config.html#%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87">菜单配置 | wangEditor</a></p>
<p>参考代码GitHub仓库链接：<a href="https://github.com/a6678696/wang-editor-demo">a6678696/wang-editor-demo</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Vue.js</tag>
        <tag>wangEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序封装请求的地址（IP地址以及端口）和方法</title>
    <url>/551.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>项目开发时和上线时请求的IP地址和端口是不一样的，为了避免后期修改请求的IP地址和端口带来的麻烦，非常有必要把请求的IP地址和端口封装起来，另外，还可以使用Promise封装一下请求的方法以避免<a href="https://blog.csdn.net/qq_42698326/article/details/111075519?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-111075519-blog-124483644.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-111075519-blog-124483644.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=3">回调地狱</a></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>在根目录下新建一个名为<code>utils</code>的文件夹（和pages同级），在一个名为<code>requestUtil.js</code>的文件，请求的<code>IP地址和端口</code>和<code>方法</code>都封装在里面</p>
<h4 id="封装请求的IP地址和端口"><a href="#封装请求的IP地址和端口" class="headerlink" title="封装请求的IP地址和端口"></a>封装请求的IP地址和端口</h4><p>代码如下，在这里可以统一管理项目请求的IP地址和端口，后期要修改的话只需要改这个地方即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义请求的IP地址和端口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回baseUrl</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getBaseUrl = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> baseUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用前，要先在页面的js文件中引入，然后在原始数据中定义（空值），最后在onLoad()函数中设置就可以使用了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入请求后端工具类</span></span><br><span class="line"><span class="keyword">import</span> &#123;getBaseUrl&#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/requestUtil.js&#x27;</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">baseUrl</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> baseUrl = getBaseUrl();</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            baseUrl</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="封装请求的方法"><a href="#封装请求的方法" class="headerlink" title="封装请求的方法"></a>封装请求的方法</h4><p>代码如下（加上IP地址和端口的封装），params接收传过来的url和method等参数，baseUrl是请求的IP地址和端口（传过来的url就不需要写IP地址和端口了）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义请求的IP地址和端口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回baseUrl</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getBaseUrl = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> baseUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后端请求工具</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>params </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestUtil = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            ...params,</span><br><span class="line">            <span class="attr">url</span>: baseUrl + params.url,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用前先在页面的js文件引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getBaseUrl,requestUtil&#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/requestUtil.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用的格式如下，和axios有点相似，注释掉的是微信小程序原来的请求方法（没封装前）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getRecommendGoodsList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="comment">// wx.request(&#123;</span></span><br><span class="line">	<span class="comment">//     url: &#x27;http://localhost:8080/goods/getRecommendGoodsList&#x27;,</span></span><br><span class="line">	<span class="comment">//     method: &#x27;GET&#x27;,</span></span><br><span class="line">	<span class="comment">//     success(res) &#123;</span></span><br><span class="line">	<span class="comment">//         this.setData(&#123;</span></span><br><span class="line">	<span class="comment">//             recommendGoodsList: res.data.goodsList</span></span><br><span class="line">	<span class="comment">//         &#125;)</span></span><br><span class="line">	<span class="comment">//     &#125;</span></span><br><span class="line">	<span class="comment">// &#125;)</span></span><br><span class="line">	requestUtil(&#123;</span><br><span class="line">		<span class="attr">url</span>: <span class="string">&#x27;/goods/getRecommendGoodsList&#x27;</span>,</span><br><span class="line">		<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">	&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.setData(&#123;</span><br><span class="line">			<span class="attr">recommendGoodsList</span>: res.data.goodsList</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>让微信小程序的富文本图片宽度实现自适应</title>
    <url>/552.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序使用富文本时，如果图片宽度超出微信小程序屏幕的默认最大宽度750rpx（rpx是动态像素，一个rpx宽度并不是固定的，可以根据屏幕宽度进行自适应），会导致图片显示不全</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>直接在使用了富文本的页面的样式中加入以下代码即可，值得注意的是图片一定要有<code>alt</code>这个属性，不然没有用，alt改成src也是可以的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[alt]</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;//图片宽度过大,但是我只希望它把屏幕的宽度撑满就行</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">100%</span>;//图片宽度过小,但是我希望它把屏幕的宽度撑满</span><br><span class="line">    <span class="attribute">height</span>: auto;//高度自动,防止图片的长宽比改变</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序商城</title>
    <url>/553.html</url>
    <content><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>前台小程序代码：<a href="https://github.com/a6678696/mall-wx">a6678696/mall-wx: 微信小程序商城前台 (github.com)</a></p>
<p>后台管理系统代码：<a href="https://github.com/a6678696/mall-web">a6678696/mall-web: 微信小程序商城后台 (github.com)</a></p>
<p>服务端代码：<a href="https://github.com/a6678696/mall-admin">a6678696/mall-admin: 微信小程序商城服务端 (github.com)</a></p>
<h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><table>
<thead>
<tr>
<th align="center">技术</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Spring Boot</td>
<td align="center">后端项目框架</td>
</tr>
<tr>
<td align="center">Mybatis-Plus</td>
<td align="center">持久层框架</td>
</tr>
<tr>
<td align="center">MySQL5.6</td>
<td align="center">数据库</td>
</tr>
<tr>
<td align="center">Vite</td>
<td align="center">前端构建工具</td>
</tr>
<tr>
<td align="center">Vue3.js</td>
<td align="center">前端JavaScript框架</td>
</tr>
<tr>
<td align="center">Element Plus</td>
<td align="center">基于 Vue 3.0 的桌面端组件库</td>
</tr>
<tr>
<td align="center">VueQuill</td>
<td align="center">富文本编辑器</td>
</tr>
<tr>
<td align="center">Vant Weapp</td>
<td align="center">小程序 UI 组件库</td>
</tr>
</tbody></table>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="前台小程序"><a href="#前台小程序" class="headerlink" title="前台小程序"></a>前台小程序</h4><ol>
<li>查看推荐、新品、热卖、降价和分类商品</li>
<li>查看公告</li>
<li>查看商品详情、搜索商品</li>
<li>管理购物车的商品</li>
<li>提交、模拟支付、取消和查看订单，给订单确认收货</li>
<li>新增、修改和删除收货地址，设置默认收货地址</li>
<li>修改个人昵称和头像</li>
<li>评价已完成的订单商品，查看所有评价</li>
</ol>
<h4 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h4><ol>
<li>公告管理（添加、查看、修改、删除、查询）</li>
<li>用户管理（查询）</li>
<li>商品大类管理（添加、查看、修改、删除、查询）</li>
<li>商品小类管理（添加、查看、修改、删除、查询）</li>
<li>商品管理（添加、查看、修改、删除、查询、设置商品卡片图片、设置详情页轮播图图片、设置是否热卖、设置是否推荐、设置是否首页轮播）</li>
<li>订单管理（删除、查询）</li>
<li>评价管理（删除、查询）</li>
</ol>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><h4 id="前台小程序-1"><a href="#前台小程序-1" class="headerlink" title="前台小程序"></a>前台小程序</h4><h5 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101032747118.png" alt="image-20230101032747118" style="zoom:50%;" />

<h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101032850317.png" alt="image-20230101032850317" style="zoom: 50%;" />

<h5 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101032955540.png" alt="image-20230101032955540" style="zoom:50%;" />

<h5 id="我的"><a href="#我的" class="headerlink" title="我的"></a>我的</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033045354.png" alt="image-20230101033045354" style="zoom:50%;" />

<h5 id="搜索商品"><a href="#搜索商品" class="headerlink" title="搜索商品"></a>搜索商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033128270.png" alt="image-20230101033128270" style="zoom:50%;" />

<h5 id="搜索结果"><a href="#搜索结果" class="headerlink" title="搜索结果"></a>搜索结果</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033226839.png" alt="image-20230101033226839" style="zoom:50%;" />

<h5 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033336406.png" alt="image-20230101033336406" style="zoom:50%;" />

<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033411202.png" alt="image-20230101033411202" style="zoom:50%;" />

<h5 id="公告"><a href="#公告" class="headerlink" title="公告"></a>公告</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033502114.png" alt="image-20230101033502114" style="zoom:50%;" />

<h5 id="新品商品"><a href="#新品商品" class="headerlink" title="新品商品"></a>新品商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033640778.png" alt="image-20230101033640778" style="zoom:50%;" />

<h5 id="热卖商品"><a href="#热卖商品" class="headerlink" title="热卖商品"></a>热卖商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033619008.png" alt="image-20230101033619008" style="zoom:50%;" />

<h5 id="降价商品"><a href="#降价商品" class="headerlink" title="降价商品"></a>降价商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033707668.png" alt="image-20230101033707668" style="zoom:50%;" />

<h5 id="分类商品"><a href="#分类商品" class="headerlink" title="分类商品"></a>分类商品</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033803290.png" alt="image-20230101033803290" style="zoom:50%;" />

<h5 id="确认订单"><a href="#确认订单" class="headerlink" title="确认订单"></a>确认订单</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101033936306.png" alt="image-20230101033936306" style="zoom:50%;" />

<h5 id="全部订单"><a href="#全部订单" class="headerlink" title="全部订单"></a>全部订单</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034021486.png" alt="image-20230101034021486" style="zoom:50%;" />

<h5 id="订单详情"><a href="#订单详情" class="headerlink" title="订单详情"></a>订单详情</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034054736.png" alt="image-20230101034054736" style="zoom:50%;" />

<h5 id="收货地址管理"><a href="#收货地址管理" class="headerlink" title="收货地址管理"></a>收货地址管理</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034145024.png" alt="image-20230101034145024" style="zoom:50%;" />

<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034218456.png" alt="image-20230101034218456" style="zoom:50%;" />

<img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034249935.png" alt="image-20230101034249935" style="zoom:50%;" />

<h5 id="修改昵称和头像"><a href="#修改昵称和头像" class="headerlink" title="修改昵称和头像"></a>修改昵称和头像</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034334329.png" alt="image-20230101034334329" style="zoom:50%;" />

<h5 id="查看我的评价"><a href="#查看我的评价" class="headerlink" title="查看我的评价"></a>查看我的评价</h5><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034421714.png" alt="image-20230101034421714" style="zoom:50%;" />

<h4 id="后台管理系统-1"><a href="#后台管理系统-1" class="headerlink" title="后台管理系统"></a>后台管理系统</h4><h5 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034545179.png" alt="image-20230101034545179"></p>
<h5 id="公告管理"><a href="#公告管理" class="headerlink" title="公告管理"></a>公告管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034623993.png" alt="image-20230101034623993"></p>
<h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034647185.png" alt="image-20230101034647185"></p>
<h5 id="商品大类管理"><a href="#商品大类管理" class="headerlink" title="商品大类管理"></a>商品大类管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034747100.png" alt="image-20230101034747100"></p>
<h5 id="商品小类管理"><a href="#商品小类管理" class="headerlink" title="商品小类管理"></a>商品小类管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034838616.png" alt="image-20230101034838616"></p>
<h5 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101034908593.png" alt="image-20230101034908593"></p>
<p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101035412594.png" alt="image-20230101035412594"></p>
<h5 id="订单管理"><a href="#订单管理" class="headerlink" title="订单管理"></a>订单管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101035228530.png" alt="image-20230101035228530"></p>
<h5 id="评价管理"><a href="#评价管理" class="headerlink" title="评价管理"></a>评价管理</h5><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101035327193.png" alt="image-20230101035327193"></p>
<h3 id="部署时要修改的环境"><a href="#部署时要修改的环境" class="headerlink" title="部署时要修改的环境"></a>部署时要修改的环境</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>数据库文件和图片等资源都在服务端代码的<code>myResources</code>文件夹中</p>
<p>主要是修改服务端的的代码，服务端的端口默认是8080，不要修改，不然要去修改前台小程序端和后台管理系统请求的服务端端口（小程序代码修改名为 <code>requestUtil.js</code> 的文件，后台管理系统则修改<code>url.js</code>这个文件）</p>
<h4 id="要修改的地方"><a href="#要修改的地方" class="headerlink" title="要修改的地方"></a>要修改的地方</h4><h5 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h5><p>最下面的图片存储地址都改成自己电脑上的，数据库的名称最好和我的命名一样（可以直接导入数据库文件）</p>
<h5 id="FilePathConfig-java映射配置"><a href="#FilePathConfig-java映射配置" class="headerlink" title="FilePathConfig.java映射配置"></a>FilePathConfig.java映射配置</h5><p>将本地路径的映射改成自己电脑上的</p>
<h5 id="CustomerController-java"><a href="#CustomerController-java" class="headerlink" title="CustomerController.java"></a>CustomerController.java</h5><p><code>/customer/login</code>方法的settingFileLocation属性改为自己电脑上myConfig.setting这个文件的路径</p>
<h5 id="myConfig-setting"><a href="#myConfig-setting" class="headerlink" title="myConfig.setting"></a>myConfig.setting</h5><p>在服务端代码的<code>myResources</code>文件夹中，appid和secret需要自己去小程序的开发管理后台中获取</p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序结合Java实现登录</title>
    <url>/554.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序通过<code>wx.login</code>函数登录时，会返回一个code，后端拿到这个code向微信接口服务请求可以拿到openid，后端根据openid在数据库中查询这个登录的用户是否存在，不存在则向数据库新增这个用户的信息然后返回给微信小程序，微信小程序使用<code>wx.setStorageSync</code>函数保存用户的信息以保持登录状态</p>
<h3 id="实现流程图"><a href="#实现流程图" class="headerlink" title="实现流程图"></a>实现流程图</h3><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230101220640309.png" alt="image-20230101220640309"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="获取code并传给后端"><a href="#获取code并传给后端" class="headerlink" title="获取code并传给后端"></a>获取code并传给后端</h4><p>requestUtil是封装的wx.request方法，详情查看博客：<a href="https://blog.zoutl.cn/551.html">微信小程序封装请求的地址（IP地址以及端口）和方法 | LeDao’s Blog (zoutl.cn)</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当顾客未登录时</span></span><br><span class="line"><span class="keyword">if</span> (!wx.getStorageSync(<span class="string">&#x27;currentCustomer&#x27;</span>)) &#123;</span><br><span class="line">	<span class="comment">//登录</span></span><br><span class="line">	wx.login(&#123;</span><br><span class="line">		<span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="comment">//登录成功</span></span><br><span class="line">			<span class="comment">//请求后端,给后端发送code以获取openid</span></span><br><span class="line">			requestUtil(&#123;</span><br><span class="line">				<span class="attr">url</span>: <span class="string">&#x27;/customer/login&#x27;</span>,</span><br><span class="line">				<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">				<span class="attr">data</span>: &#123;</span><br><span class="line">					<span class="attr">loginCode</span>: res.code</span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">header</span>: &#123;<span class="comment">//POST请求一定要加上这个content-type,不然无法传递参数</span></span><br><span class="line">					<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">				<span class="comment">//后端返回一个customer对象</span></span><br><span class="line">				wx.setStorageSync(<span class="string">&#x27;currentCustomer&#x27;</span>, result.data.customer);</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="请求的后端方法"><a href="#请求的后端方法" class="headerlink" title="请求的后端方法"></a>请求的后端方法</h4><p>下面方法主要是请求了微信接口服务返回openid，仅供参考，如要运行和查看完整代码去查看GitHub仓库：<a href="https://github.com/a6678696/mall-admin">a6678696/mall-admin: 微信小程序商城服务端 (github.com)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顾客登录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginCode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">login</span><span class="params">(String loginCode)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">//根据顾客登录获得的code获得openid</span></span><br><span class="line">    HashMap&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    String settingFileLocation = <span class="string">&quot;E://data/mall/myConfig.setting&quot;</span>;</span><br><span class="line">    Setting setting = <span class="keyword">new</span> Setting(settingFileLocation);</span><br><span class="line">    paramMap.put(<span class="string">&quot;appid&quot;</span>, setting.getStr(<span class="string">&quot;appid&quot;</span>));</span><br><span class="line">    paramMap.put(<span class="string">&quot;secret&quot;</span>, setting.getStr(<span class="string">&quot;secret&quot;</span>));</span><br><span class="line">    paramMap.put(<span class="string">&quot;js_code&quot;</span>, loginCode);</span><br><span class="line">    paramMap.put(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">    String result = HttpUtil.post(<span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>, paramMap);</span><br><span class="line">    <span class="comment">//使用Gson解析并获取openid</span></span><br><span class="line">    String openid = <span class="keyword">new</span> JsonParser().parse(result).getAsJsonObject().get(<span class="string">&quot;openid&quot;</span>).getAsString();</span><br><span class="line">    Customer customer = customerService.findByLoginCode(openid);</span><br><span class="line">    <span class="comment">//顾客第一次使用小程序,把openid保存到数据库</span></span><br><span class="line">    <span class="keyword">if</span> (ObjectUtil.isNull(customer)) &#123;</span><br><span class="line">        Customer customer2 = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer2.setNickName(<span class="string">&quot;默认昵称&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        customer2.setOpenid(openid);</span><br><span class="line">        customer2.setAvatarImageName(<span class="string">&quot;default.jpg&quot;</span>);</span><br><span class="line">        customerService.add(customer2);</span><br><span class="line">        customer2.setOpenid(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;customer&quot;</span>, customer2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        customer.setOpenid(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;customer&quot;</span>, customer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.ok(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>myConfig.setting的内容如下：（appid和secret填自己的，获取流程查看博客：<a href="https://blog.zoutl.cn/471.html">微信开发者工具创建小程序 | LeDao’s Blog (zoutl.cn)</a>）</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[]</span><br><span class="line">appid = 12131</span><br><span class="line">secret = 2323</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Java生成和验证JWT</title>
    <url>/555.html</url>
    <content><![CDATA[<h3 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h3><p>关于JWT的详细介绍可以查看博客：<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>
<p>或者直接去官网了解（官网可直接解码JWT）：<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>该依赖的接口文档网址为：<a href="https://javadoc.io/doc/com.auth0/java-jwt/latest/index.html">JWT - java-jwt 4.2.1 javadoc</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="生成和验证"><a href="#生成和验证" class="headerlink" title="生成和验证"></a>生成和验证</h4><p>我把JWT的生成和验证封装成了一个工具类，以方便调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ledao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@company</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-01-03 23:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT Token有效时间，1小时 (单位是毫秒,1000毫秒=1秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIME = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密使用到的KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_SECRET = <span class="string">&quot;ledao&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                <span class="comment">//编号</span></span><br><span class="line">                .withJWTId(UUID.randomUUID().toString())</span><br><span class="line">                <span class="comment">//签发人</span></span><br><span class="line">                .withIssuer(<span class="string">&quot;乐道&quot;</span>)</span><br><span class="line">                <span class="comment">//签发时间</span></span><br><span class="line">                .withIssuedAt(<span class="keyword">new</span> Date(System.currentTimeMillis()))</span><br><span class="line">                <span class="comment">//过期时间</span></span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> Date(System.currentTimeMillis() + TIME))</span><br><span class="line">                <span class="comment">//受众</span></span><br><span class="line">                .withAudience(userName)</span><br><span class="line">                <span class="comment">//主题</span></span><br><span class="line">                .withSubject(<span class="string">&quot;mall-admin&quot;</span>)</span><br><span class="line">                <span class="comment">//创建一个新的JWT并使用给定的算法进行签名</span></span><br><span class="line">                .sign(Algorithm.HMAC512(TOKEN_SECRET));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//验证</span></span><br><span class="line">            JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC512(TOKEN_SECRET)).build();</span><br><span class="line">            jwtVerifier.verify(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;token验证失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;token已过期&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//生成token</span></span><br><span class="line">        String token = createToken(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">//打印token</span></span><br><span class="line">        System.out.println(token);</span><br><span class="line">        <span class="comment">//验证token并返回结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;验证结果: &quot;</span> + checkToken(token));</span><br><span class="line">        <span class="comment">//打印编号</span></span><br><span class="line">        System.out.println(<span class="string">&quot;编号: &quot;</span> + JWT.decode(token).getId());</span><br><span class="line">        <span class="comment">//打印签发时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;签发时间: &quot;</span> + JWT.decode(token).getIssuedAt());</span><br><span class="line">        <span class="comment">//打印过期时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;过期时间: &quot;</span> + JWT.decode(token).getExpiresAt());</span><br><span class="line">        <span class="comment">//打印签发人</span></span><br><span class="line">        System.out.println(<span class="string">&quot;签发人: &quot;</span> + JWT.decode(token).getIssuer());</span><br><span class="line">        <span class="comment">//打印所有受众,返回一个List&lt;String&gt;,受众的顺序和创建JWT时的顺序有关</span></span><br><span class="line">        System.out.println(<span class="string">&quot;所有受众: &quot;</span> + JWT.decode(token).getAudience());</span><br><span class="line">        <span class="comment">//打印受众1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;受众1: &quot;</span> + JWT.decode(token).getAudience().get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h4><p><img src="https://image.zoutl.cn/hexo-blog/blogImage/image-20230104221041869.png" alt="image-20230104221041869"></p>
<h3 id="关于续约"><a href="#关于续约" class="headerlink" title="关于续约"></a>关于续约</h3><p>可以观看视频：<a href="https://www.bilibili.com/video/BV17D4y1Y76o/?spm_id_from=333.999.0.0&vd_source=93c0a1c8bc2b254e2458dcf78f0d067a">【IT老齐251】无状态的JWT令牌如何实现自动续约_哔哩哔哩_bilibili</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
</search>
